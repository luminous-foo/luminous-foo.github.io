{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"themes/yilia/source/main.0cf68a.css","path":"main.0cf68a.css","modified":1,"renderable":1},{"_id":"themes/yilia/source/main.0cf68a.js","path":"main.0cf68a.js","modified":1,"renderable":1},{"_id":"themes/yilia/source/mobile.992cbe.js","path":"mobile.992cbe.js","modified":1,"renderable":1},{"_id":"themes/yilia/source/slider.e37972.js","path":"slider.e37972.js","modified":1,"renderable":1},{"_id":"themes/yilia/source/fonts/default-skin.b257fa.svg","path":"fonts/default-skin.b257fa.svg","modified":1,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.16acc2.ttf","path":"fonts/iconfont.16acc2.ttf","modified":1,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.45d7ee.svg","path":"fonts/iconfont.45d7ee.svg","modified":1,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.8c627f.woff","path":"fonts/iconfont.8c627f.woff","modified":1,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.b322fa.eot","path":"fonts/iconfont.b322fa.eot","modified":1,"renderable":1},{"_id":"themes/yilia/source/fonts/tooltip.4004ff.svg","path":"fonts/tooltip.4004ff.svg","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/default-skin.png","path":"img/default-skin.png","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/preloader.gif","path":"img/preloader.gif","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/quan.png","path":"img/quan.png","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/scrollbar_arrow.png","path":"img/scrollbar_arrow.png","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/toux2.jpg","path":"img/toux2.jpg","modified":1,"renderable":1}],"Cache":[{"_id":"source/_posts/dataworks命令.md","hash":"d3e9686906408ff788c257d9ec7a2939005ccb02","modified":1609337408561},{"_id":"source/_posts/hive知识整理.md","hash":"e477647fab1adb0fbd882a6d4e6f39876ca5ed90","modified":1609335432691},{"_id":"source/_posts/java基础知识整理.md","hash":"77d3a183720d0f1f7d26fbcd5dd6502946eb393b","modified":1609337850947},{"_id":"source/_posts/java多线程.md","hash":"2cda15d0835cfef067b3a23d1b0765c5f4bf71f0","modified":1609337604081},{"_id":"source/_posts/使用hexo+github搭建博客.md","hash":"9c9da523f292e16c3c308bc3794956d98a655a23","modified":1609336826942},{"_id":"source/tags/index.md","hash":"9da2a666439023630bc07ecc85d4d62c96960a66","modified":1608642687043},{"_id":"source/categories/index.md","hash":"be63b6b409caf7b22a7becdae02feb21944ba5f1","modified":1608642539243},{"_id":"source/_posts/java基础知识整理/20160624152602394","hash":"508dfa4bce04d181c495af4ce551de5c5fe107e7","modified":1609332675359},{"_id":"source/_posts/java基础知识整理/3775272-55dfd603d6e9b95c.jpg","hash":"d2a4af8e3ed2f1660e4aaf624b13c6796cef39fb","modified":1609332675387},{"_id":"source/_posts/java基础知识整理/20160624152704286","hash":"927686932ca6f863d3d7c56d97edb26a5f9d35b9","modified":1609332675366},{"_id":"source/_posts/java基础知识整理/20180803193134355","hash":"3fd5c6cdb93d1d43cd39c1afc469a27bc117ec27","modified":1609332675374},{"_id":"source/_posts/java基础知识整理/20180803193423722","hash":"c5f15f12cae94ccf3e18aaa423f1855ad1df4114","modified":1609332675381},{"_id":"source/_posts/java基础知识整理/772134-20160720003120122-551868817.png","hash":"3490c9b6e59121083efdc8154c8982aa6892fcf5","modified":1609332675392},{"_id":"source/_posts/java基础知识整理/copycode.gif","hash":"7e9c17336e21497cc5b8871097e3e5c0332aa47d","modified":1609332675397},{"_id":"source/_posts/hive知识整理/timg-1568381886490.jpg","hash":"ae3326aaaaef3325c43cd835e1c3c4b197a58e47","modified":1609332675351},{"_id":"source/_posts/使用hexo+github搭建博客/v2-01e7fc8bb9280437deb437bf73a190a1_720w.jpg","hash":"8b90fb208f1daed26029c2341c04ba6c99a4c136","modified":1608641627519},{"_id":"source/_posts/java多线程/20160713174739239","hash":"71d059ea97fa3a8aea9618bee7e818da763f2e14","modified":1609332675399},{"_id":"source/_posts/使用hexo+github搭建博客/v2-1c3baeecf1ef3bec5c8ef3f14639f68b_720w.jpg","hash":"aefb6480e2f06bc5c6e4cfd00da9e364176a6720","modified":1608641626836},{"_id":"source/_posts/使用hexo+github搭建博客/v2-264c75c0e493ae8cc5f283567c64ff2c_720w.jpg","hash":"9ddcb0e5a0209611d2eff4c6153bd44fe67825ef","modified":1608641626829},{"_id":"source/_posts/使用hexo+github搭建博客/v2-27b47b5ae479ce7987851292a67774b0_720w.jpg","hash":"0128b814f34574a6309a34228462efcde90a38af","modified":1608641626812},{"_id":"source/_posts/使用hexo+github搭建博客/v2-45701cf120ca77e6733ad30b40666f33_720w.jpg","hash":"8d5ee71d15aa6517b7d4b75043047b6804bfdc94","modified":1608641626839},{"_id":"source/_posts/使用hexo+github搭建博客/v2-67a8165154f4c5f4a6333e76e78ed815_720w.jpg","hash":"6409ba4d0b090fcdc40b6c48d3deeb0f1d10c89c","modified":1608641627468},{"_id":"source/_posts/使用hexo+github搭建博客/v2-a193a47cf70fe6ecf156e5f3d34920ea_720w.jpg","hash":"9f743a487023cf2e99ca96e9af6af49f8f3135bc","modified":1608641626819},{"_id":"source/_posts/使用hexo+github搭建博客/v2-9125065afd24332d7cd84feb6a350730_720w.jpg","hash":"7a260501704c3884d1adfe98c8e3b933a7603783","modified":1608641626809},{"_id":"source/_posts/使用hexo+github搭建博客/v2-d5d37c8ad523d8ab5c7c200fabc9585e_720w.jpg","hash":"ee49f3e983e6c3c8218b9cff1bc999a56ea39e58","modified":1608641626564},{"_id":"source/_posts/使用hexo+github搭建博客/v2-b4c7524a2451f4ab42f9c22ea3c7b6be_720w.jpg","hash":"38cf318fb23e71a1b1f1d411964e0704f50e7be6","modified":1608641626822},{"_id":"themes/yilia/layout/_partial/toc.ejs","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1608589568398},{"_id":"source/_posts/使用hexo+github搭建博客/v2-54f8744afc9746884e6b3acecfc5f8cf_720w.jpg","hash":"a2543f2c675046be72ff89eeb93b0d3a46b93690","modified":1608641626842},{"_id":"themes/yilia/.babelrc","hash":"db600d40e93e6d8023737a65d58d3be7370e5e30","modified":1608589568374},{"_id":"themes/yilia/.eslintignore","hash":"ed9d8911ca08c3dd5072c48dd0be4d06f8897730","modified":1608589568376},{"_id":"themes/yilia/.editorconfig","hash":"daaa8757fac18f8735fadd0a37a42c06f421ca14","modified":1608589568375},{"_id":"themes/yilia/.eslintrc.js","hash":"303d25adf02ad65720e537a16a4a137d14bb755f","modified":1608589568376},{"_id":"themes/yilia/.gitattributes","hash":"758cfbecfa7919e99abddf3297f37cde7e3d8d4e","modified":1608589568377},{"_id":"themes/yilia/.gitignore","hash":"d5fc575329853ff620b50fc62ad4b18fa09a308a","modified":1608589568377},{"_id":"themes/yilia/README.md","hash":"1bf755806af9d8874bd22e1abbdaaa24328ef4dc","modified":1608589568378},{"_id":"themes/yilia/_config.yml","hash":"a4be63b04e6742edbf078da4b46b575e46688a22","modified":1609332675406},{"_id":"themes/yilia/package.json","hash":"ee6aa61f1cb89fd549e3e087c0232207a9c9ee30","modified":1608589568403},{"_id":"themes/yilia/webpack.config.js","hash":"da7657347109ddb4ab8602b219778117254677fe","modified":1608589568447},{"_id":"themes/yilia/img/default-skin.png","hash":"ed95a8e40a2c3478c5915376acb8e5f33677f24d","modified":1609332675407},{"_id":"themes/yilia/img/quan.png","hash":"87113a168983df621e531a9feb14b31480bffe6f","modified":1609332675413},{"_id":"themes/yilia/img/preloader.gif","hash":"6342367c93c82da1b9c620e97c84a389cc43d96d","modified":1609332675408},{"_id":"themes/yilia/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1609332675414},{"_id":"themes/yilia/img/toux2.jpg","hash":"d375cf64f76816b35377ee8914748c8b254f13a9","modified":1609332675414},{"_id":"themes/yilia/languages/default.yml","hash":"f26a34a7983d4bc17c65c7f0f14da598e62ce66d","modified":1608589568379},{"_id":"themes/yilia/languages/fr.yml","hash":"b4be1c1592a72012e48df2b3ec41cc9685573e50","modified":1608589568380},{"_id":"themes/yilia/languages/no.yml","hash":"ddf2035e920a5ecb9076138c184257d9f51896a7","modified":1608589568381},{"_id":"themes/yilia/languages/nl.yml","hash":"3d82ec703d0b3287739d7cb4750a715ae83bfcb3","modified":1608589568380},{"_id":"themes/yilia/languages/ru.yml","hash":"2a476b4c6e04900914c81378941640ac5d58a1f0","modified":1608589568381},{"_id":"themes/yilia/languages/zh-CN.yml","hash":"b057f389c6713010f97d461e48ec959b0b6f3b44","modified":1608589568382},{"_id":"themes/yilia/languages/zh-tw.yml","hash":"f5f0ca88185da7a8457760d84bf221781473bd7c","modified":1608589568383},{"_id":"themes/yilia/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1608589568400},{"_id":"themes/yilia/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1608589568400},{"_id":"themes/yilia/layout/index.ejs","hash":"ec498c6c0606acde997ce195dad97b267418d980","modified":1608589568401},{"_id":"themes/yilia/layout/layout.ejs","hash":"b471ab706d48e0be3f783eab1c94bf5878ef5a94","modified":1608589568401},{"_id":"themes/yilia/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1608589568402},{"_id":"themes/yilia/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1608589568402},{"_id":"themes/yilia/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1608589568403},{"_id":"themes/yilia/source/main.0cf68a.css","hash":"ddf6e2c6b953c2c59a3c271e6070010a4cc81cf9","modified":1608589568443},{"_id":"themes/yilia/source/slider.e37972.js","hash":"ce5eac88301fe4f2fce0fb6203adfd58eb8313ac","modified":1608589568446},{"_id":"themes/yilia/source-src/css.ejs","hash":"cf7eab48d626433120d1ef9697f719a359817018","modified":1608589568404},{"_id":"themes/yilia/source-src/script.ejs","hash":"28abac2426761d7e715b38aadd86ce6549c8ae77","modified":1608589568436},{"_id":"themes/yilia/layout/_partial/archive-post.ejs","hash":"edc0154b30a4127acda10297bec6aacf754b4ac4","modified":1608589568384},{"_id":"themes/yilia/layout/_partial/after-footer.ejs","hash":"c70f367f54064a441e574c913f5e0ea121d0f899","modified":1608589568384},{"_id":"themes/yilia/layout/_partial/archive.ejs","hash":"a4eacc2bc1278095a0ef99f904b0634c78f980eb","modified":1608589568385},{"_id":"themes/yilia/layout/_partial/article.ejs","hash":"8dea8f5f93a60185439b330b0f1d1649a6ab4bd0","modified":1608589568385},{"_id":"themes/yilia/layout/_partial/baidu-analytics.ejs","hash":"155327c23607f69989b58845f24d842a54e504b8","modified":1608589568387},{"_id":"themes/yilia/layout/_partial/css.ejs","hash":"236f8a377b2e4e35754319c3029bcd4a4115431d","modified":1608589568387},{"_id":"themes/yilia/layout/_partial/aside.ejs","hash":"751e5deab5365348be5243688b419c82d337ab9a","modified":1608589568386},{"_id":"themes/yilia/layout/_partial/footer.ejs","hash":"871f81cacd5d41cb2eb001cd56254217a857dc2f","modified":1608589568388},{"_id":"themes/yilia/layout/_partial/google-analytics.ejs","hash":"1ccc627d7697e68fddc367c73ac09920457e5b35","modified":1608589568388},{"_id":"themes/yilia/layout/_partial/left-col.ejs","hash":"fb1b8457b9eb15b55da1bf7b133e12c375dd26f8","modified":1608589568390},{"_id":"themes/yilia/layout/_partial/head.ejs","hash":"12ca7d8dba56bc767b9309dda9526dcbaffc1614","modified":1608589568389},{"_id":"themes/yilia/layout/_partial/header.ejs","hash":"b69855e07b65117769adc515cb64b803932068c9","modified":1608589568390},{"_id":"themes/yilia/layout/_partial/mobile-nav.ejs","hash":"ccec1fc70f021cb50ac85b524e7949878ab93a18","modified":1608589568391},{"_id":"themes/yilia/layout/_partial/mathjax.ejs","hash":"11550a418921d330e6553be0569a94ab5a217967","modified":1608589568391},{"_id":"themes/yilia/layout/_partial/tools.ejs","hash":"0ffcb251b79e8a920c9b4cb6bb7a96a808816165","modified":1608589568399},{"_id":"themes/yilia/layout/_partial/viewer.ejs","hash":"cc1c39903aed0a0601d104238d2bbd13ad2a36f3","modified":1608589568399},{"_id":"themes/yilia/source/fonts/default-skin.b257fa.svg","hash":"2ac727c9e092331d35cce95af209ccfac6d4c7c7","modified":1608589568437},{"_id":"themes/yilia/source/fonts/iconfont.16acc2.ttf","hash":"f342ac8bf4d937f42a7d6a0032ad267ab47eb7f2","modified":1608589568438},{"_id":"themes/yilia/source/fonts/iconfont.45d7ee.svg","hash":"75767c904d483d9b93469afb6b92bb6bdface639","modified":1608589568438},{"_id":"themes/yilia/source/fonts/iconfont.8c627f.woff","hash":"aa9672cb097f7fd73ae5a03bcd3d9d726935bc0a","modified":1608589568439},{"_id":"themes/yilia/source/fonts/iconfont.b322fa.eot","hash":"bc8c5e88f4994a852041b4d83f126d9c4d419b4a","modified":1608589568440},{"_id":"themes/yilia/source/fonts/tooltip.4004ff.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1608589568440},{"_id":"themes/yilia/source/img/default-skin.png","hash":"ed95a8e40a2c3478c5915376acb8e5f33677f24d","modified":1608589568441},{"_id":"themes/yilia/source/img/preloader.gif","hash":"6342367c93c82da1b9c620e97c84a389cc43d96d","modified":1608589568442},{"_id":"themes/yilia/source/img/quan.png","hash":"87113a168983df621e531a9feb14b31480bffe6f","modified":1609332675415},{"_id":"themes/yilia/source/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1608589568442},{"_id":"themes/yilia/source/img/toux2.jpg","hash":"d375cf64f76816b35377ee8914748c8b254f13a9","modified":1608647728209},{"_id":"themes/yilia/source-src/css/_core.scss","hash":"29ba600e98ed55f7af4ade8038272c84cba21188","modified":1608589568405},{"_id":"themes/yilia/source-src/css/_function.scss","hash":"ce227b6f5a9af194fd5d455200630f32c05e151f","modified":1608589568406},{"_id":"themes/yilia/source-src/css/archive.scss","hash":"d6a7dd88404b383b5b94e4c7ec675a410c41f3cc","modified":1608589568406},{"_id":"themes/yilia/source-src/css/article-main.scss","hash":"1577a2336b3ad122f49f60dff2bc1a97d4e7b18b","modified":1608589568407},{"_id":"themes/yilia/source-src/css/article-inner.scss","hash":"f7388f5c11370ef462f7cb913d8f72edf24ecaf9","modified":1608589568407},{"_id":"themes/yilia/source-src/css/aside.scss","hash":"07244c188f58ecfb90bb7c047b8cde977f1dc4b4","modified":1608589568409},{"_id":"themes/yilia/source-src/css/article.scss","hash":"55d082fec4c6bb341725567acaa29ce37d50320a","modified":1608589568409},{"_id":"themes/yilia/source-src/css/article-nav.scss","hash":"8f82fe898ba1c1bd00c24a7d8270feddc7eba3bc","modified":1608589568408},{"_id":"themes/yilia/source-src/css/comment.scss","hash":"b85f344f2c66d43d7094746e0a9ccb21d0534201","modified":1608589568410},{"_id":"themes/yilia/source-src/css/fonts.scss","hash":"96d7eb1d42c06fdcccb8ef969f6ecd30c3194903","modified":1608589568413},{"_id":"themes/yilia/source-src/css/global.scss","hash":"b4cb4f45a55d4250cd9056f76dab2a3c0dabcec4","modified":1608589568418},{"_id":"themes/yilia/source-src/css/grid.scss","hash":"f53ea8270752b5919ec5d79224d22af91f2eda12","modified":1608589568418},{"_id":"themes/yilia/source-src/css/footer.scss","hash":"7ca837a4cc34db1c35f01baec85eb10ccc64ea86","modified":1608589568417},{"_id":"themes/yilia/source-src/css/highlight.scss","hash":"40e5aa5056dc0b3b9f51c5b387370b612e265d4e","modified":1608589568419},{"_id":"themes/yilia/source-src/css/left.scss","hash":"80dac621e43581a254d0152d5df901e4d0b01c09","modified":1608589568421},{"_id":"themes/yilia/source-src/css/main.scss","hash":"9eba1fcf4805256697528fcf3b767cf6dd8d0591","modified":1608589568422},{"_id":"themes/yilia/source-src/css/mobile-slider.scss","hash":"19f10fd2f0c3377aa4b165b3c2291ecf86dd9351","modified":1608589568422},{"_id":"themes/yilia/source-src/css/mobile.scss","hash":"d995dcd483a250fe61b426158afb61bf8923a927","modified":1608589568423},{"_id":"themes/yilia/source-src/css/page.scss","hash":"244c4d75c375978ff9edb74acc68825e63c6b235","modified":1608589568423},{"_id":"themes/yilia/source-src/css/reward.scss","hash":"a557a9ed244c82b8b71e9da9de3339d92783499f","modified":1608589568424},{"_id":"themes/yilia/source-src/css/scroll.scss","hash":"2495f7e4e3b055735c531f944b5f40a118a351ec","modified":1608589568424},{"_id":"themes/yilia/source-src/css/share.scss","hash":"9d6f6884f40c191882e56a1e1e1192400944a515","modified":1608589568425},{"_id":"themes/yilia/source-src/css/social.scss","hash":"a10a038a1dac8953cb4ffc7e04272eff9fac54e4","modified":1608589568426},{"_id":"themes/yilia/source-src/css/tags-cloud.scss","hash":"399744e98e7c67939ed9b23c2670d8baad044eda","modified":1608589568426},{"_id":"themes/yilia/source-src/css/tags.scss","hash":"915c93edd67c5326695cc7dc84b14c5f154dbcc8","modified":1608589568427},{"_id":"themes/yilia/source-src/css/tools.scss","hash":"2924fb6f77c4a9973cd928c2c7db0acb848ed483","modified":1608589568427},{"_id":"themes/yilia/source-src/css/tooltip.scss","hash":"b81cedbe31accca82e597801186911a7b5e6841c","modified":1608589568428},{"_id":"themes/yilia/source-src/js/Q.js","hash":"e56d9710afa79b31ca6b9fbd845f6d1895f5214b","modified":1608589568429},{"_id":"themes/yilia/source-src/js/aside.js","hash":"5e4c3c3d61f1e1ce2f09688d3aff25fadc851fff","modified":1608589568430},{"_id":"themes/yilia/source-src/js/browser.js","hash":"4dc04845cf27f350922b63f1813a9c82e6e33b05","modified":1608589568431},{"_id":"themes/yilia/source-src/js/fix.js","hash":"67b8819abb886c9d066fb3b0624ca15e06f63fe0","modified":1608589568431},{"_id":"themes/yilia/source-src/js/anm.js","hash":"d18f6276a352b871390a4112d479b9e58b8cdbbe","modified":1608589568430},{"_id":"themes/yilia/source-src/js/report.js","hash":"57680f9a23bd0a1eaafd64ae08cc33e20627ab15","modified":1608589568433},{"_id":"themes/yilia/source-src/js/main.js","hash":"fe98bf90ce61658fe16ae057f8b6a512a845af3b","modified":1608589568432},{"_id":"themes/yilia/source-src/js/mobile.js","hash":"461c08ffcbc724d74ec7e0ff38e171eefe0f89fd","modified":1608589568432},{"_id":"themes/yilia/source-src/js/slider.js","hash":"0beaa112657ad57c723d9e773d5b79de60c1dd74","modified":1608589568434},{"_id":"themes/yilia/source-src/js/share.js","hash":"d4ccff8266c37363b3904226f5d035b7db882c61","modified":1608589568434},{"_id":"themes/yilia/source-src/js/util.js","hash":"3bcdeb95072b85600874424e6929e3e22cfddaa0","modified":1608589568435},{"_id":"themes/yilia/source-src/js/viewer.js","hash":"c699cf3c89409ec8f044258e0715a470861b5d5d","modified":1608589568435},{"_id":"themes/yilia/layout/_partial/post/category.ejs","hash":"e777cbf959b11c4dfda649c562799899b90ab4a3","modified":1608589568392},{"_id":"themes/yilia/layout/_partial/post/changyan.ejs","hash":"086c8a88fd3bcae7ec13258df58e25d6354af2fa","modified":1608589568393},{"_id":"themes/yilia/layout/_partial/post/duoshuo.ejs","hash":"f6b4c4eaafb5ac386273354b5f64a26139b7a3b0","modified":1608589568393},{"_id":"themes/yilia/layout/_partial/post/gitment.ejs","hash":"25655016773aa5d0774c56115ae1736a9fc9ea1f","modified":1608589568394},{"_id":"themes/yilia/layout/_partial/post/date.ejs","hash":"aae96de18d48cd3b9b7bf6fed0100e15b53cca97","modified":1608589568393},{"_id":"themes/yilia/layout/_partial/post/nav.ejs","hash":"b6a97043f9ec37e571aacacfedcda1d4d75e3c7c","modified":1608589568395},{"_id":"themes/yilia/layout/_partial/post/share.ejs","hash":"345b262e3c3b75c0cd9a93d9ecabcf06e33e54ff","modified":1608589568395},{"_id":"themes/yilia/layout/_partial/post/tag.ejs","hash":"2c4e4ca36c9bb4318506c38aca7127f1f44d827f","modified":1608589568396},{"_id":"themes/yilia/layout/_partial/post/title.ejs","hash":"d4a460a35e2112d0c7414fd5e19b3a16093f1caf","modified":1608589568396},{"_id":"themes/yilia/layout/_partial/post/wangyiyun.ejs","hash":"fb022502c741b4a26bad6b2ad37245c10ede3f1a","modified":1608589568397},{"_id":"themes/yilia/source-src/css/core/_animation.scss","hash":"1834c3ed8560716e63bb3a50be94cac87fbbeaf3","modified":1608589568410},{"_id":"themes/yilia/source-src/css/core/_media-queries.scss","hash":"262ffcd88775080b7f511db37f58d2bcb1b2bfc7","modified":1608589568411},{"_id":"themes/yilia/source-src/css/core/_mixin.scss","hash":"91db061c9c17628291a005e5bd4936cf9d35a6c4","modified":1608589568412},{"_id":"themes/yilia/source-src/css/core/_reset.scss","hash":"398a49913b4a47d928103562b1ce94520be4026a","modified":1608589568412},{"_id":"themes/yilia/source-src/css/core/_variables.scss","hash":"6e75bdaa46de83094ba0873099c6e7d656a22453","modified":1608589568413},{"_id":"themes/yilia/source-src/css/fonts/iconfont.eot","hash":"bc8c5e88f4994a852041b4d83f126d9c4d419b4a","modified":1608589568415},{"_id":"themes/yilia/source-src/css/fonts/iconfont.svg","hash":"75767c904d483d9b93469afb6b92bb6bdface639","modified":1608589568415},{"_id":"themes/yilia/source-src/css/fonts/iconfont.woff","hash":"aa9672cb097f7fd73ae5a03bcd3d9d726935bc0a","modified":1608589568417},{"_id":"themes/yilia/source-src/css/fonts/iconfont.ttf","hash":"f342ac8bf4d937f42a7d6a0032ad267ab47eb7f2","modified":1608589568416},{"_id":"themes/yilia/source-src/css/img/checkered-pattern.png","hash":"049262fa0886989d750637b264bed34ab51c23c8","modified":1608589568420},{"_id":"themes/yilia/source-src/css/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1608589568420},{"_id":"themes/yilia/source-src/css/img/tooltip.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1608589568421},{"_id":"themes/yilia/source/main.0cf68a.js","hash":"283ae27ea37ac3e0e45b2e05c2482a4c594b9c25","modified":1608589568444},{"_id":"themes/yilia/source/mobile.992cbe.js","hash":"1801ef448909ea23c0a48e9d63b80d0cfd5534ce","modified":1608589568445},{"_id":"themes/yilia/layout/_partial/script.ejs","hash":"e98ec0b3b56f14d1d79af99ceb42727719a584f3","modified":1608589568398},{"_id":"public/content.json","hash":"0d433f97a040ab3eac350d6a72095af6b35f0862","modified":1609337918371},{"_id":"public/tags/index.html","hash":"b66cf79680eb06d1a3c1711dbb0fa391eb14713e","modified":1609337918371},{"_id":"public/categories/index.html","hash":"64e98c3d1ebc48d7d8f3f805f261a5db7766f3fa","modified":1609337918371},{"_id":"public/2020/12/29/hive知识整理/index.html","hash":"5049263ce5c4da3af8a06c43e268621d2c243093","modified":1609337918371},{"_id":"public/2020/12/28/java多线程/index.html","hash":"bbbc217c31058b78178df18dbec1a5f80c82ff36","modified":1609337918371},{"_id":"public/2020/12/24/dataworks命令/index.html","hash":"5b2f0f4af00c202858d1398cf3ffe7d4fb5da530","modified":1609337918371},{"_id":"public/2020/12/22/使用hexo+github搭建博客/index.html","hash":"2e0c6e00e28899e167df726818200dd7fd8012ff","modified":1609337918371},{"_id":"public/2020/12/24/java基础知识整理/index.html","hash":"72cd5ff18095fa3da97ef05925895ba0de802b26","modified":1609337918371},{"_id":"public/categories/工具/index.html","hash":"0744f49c4e8b1f7801dfd5c846b4b8bf248cbd5c","modified":1609337918371},{"_id":"public/categories/复习/index.html","hash":"efe80ff1dd01c52cb70a4fe550cfccffa99e1934","modified":1609337918371},{"_id":"public/archives/index.html","hash":"6eeccaf15b0883d9d8e01d5c6926208ec06bf6e0","modified":1609337918371},{"_id":"public/archives/2020/index.html","hash":"4d66355db61d754ea36223f28cdf42a136b9aceb","modified":1609337918371},{"_id":"public/archives/2020/12/index.html","hash":"a8f668d6f8cf0bef4af48ba51d15859fbeffce7e","modified":1609337918371},{"_id":"public/index.html","hash":"661deb5fed97298f924a2903d767a5dd2267a166","modified":1609337918371},{"_id":"public/tags/dataworks/index.html","hash":"84d6b3b0e222212d9bd3b0becb2650d727eaac66","modified":1609337918371},{"_id":"public/tags/随笔/index.html","hash":"3c219b824a91cf0c69dd1475e8bd6dc06c6d1bb1","modified":1609337918371},{"_id":"public/tags/hexo/index.html","hash":"e4f2d01293c89481a57ffc762362fbefba86557a","modified":1609337918371},{"_id":"public/tags/java/index.html","hash":"bf8a82c1caecdaadd552a43ee9fe0d8b71fd7b8d","modified":1609337918371},{"_id":"public/tags/hive/index.html","hash":"e6d2be68548eeb2252ba320af70a8e850ed9db60","modified":1609337918371},{"_id":"public/fonts/iconfont.16acc2.ttf","hash":"f342ac8bf4d937f42a7d6a0032ad267ab47eb7f2","modified":1609337918371},{"_id":"public/fonts/iconfont.b322fa.eot","hash":"bc8c5e88f4994a852041b4d83f126d9c4d419b4a","modified":1609337918371},{"_id":"public/fonts/iconfont.8c627f.woff","hash":"aa9672cb097f7fd73ae5a03bcd3d9d726935bc0a","modified":1609337918371},{"_id":"public/fonts/tooltip.4004ff.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1609337918371},{"_id":"public/img/default-skin.png","hash":"ed95a8e40a2c3478c5915376acb8e5f33677f24d","modified":1609337918371},{"_id":"public/img/preloader.gif","hash":"6342367c93c82da1b9c620e97c84a389cc43d96d","modified":1609337918371},{"_id":"public/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1609337918371},{"_id":"public/img/quan.png","hash":"87113a168983df621e531a9feb14b31480bffe6f","modified":1609337918371},{"_id":"public/img/toux2.jpg","hash":"d375cf64f76816b35377ee8914748c8b254f13a9","modified":1609337918371},{"_id":"public/2020/12/28/java多线程/20160713174739239","hash":"71d059ea97fa3a8aea9618bee7e818da763f2e14","modified":1609337918371},{"_id":"public/2020/12/22/使用hexo+github搭建博客/v2-1c3baeecf1ef3bec5c8ef3f14639f68b_720w.jpg","hash":"aefb6480e2f06bc5c6e4cfd00da9e364176a6720","modified":1609337918371},{"_id":"public/2020/12/22/使用hexo+github搭建博客/v2-01e7fc8bb9280437deb437bf73a190a1_720w.jpg","hash":"8b90fb208f1daed26029c2341c04ba6c99a4c136","modified":1609337918371},{"_id":"public/2020/12/22/使用hexo+github搭建博客/v2-27b47b5ae479ce7987851292a67774b0_720w.jpg","hash":"0128b814f34574a6309a34228462efcde90a38af","modified":1609337918371},{"_id":"public/2020/12/22/使用hexo+github搭建博客/v2-264c75c0e493ae8cc5f283567c64ff2c_720w.jpg","hash":"9ddcb0e5a0209611d2eff4c6153bd44fe67825ef","modified":1609337918371},{"_id":"public/2020/12/22/使用hexo+github搭建博客/v2-45701cf120ca77e6733ad30b40666f33_720w.jpg","hash":"8d5ee71d15aa6517b7d4b75043047b6804bfdc94","modified":1609337918371},{"_id":"public/2020/12/22/使用hexo+github搭建博客/v2-67a8165154f4c5f4a6333e76e78ed815_720w.jpg","hash":"6409ba4d0b090fcdc40b6c48d3deeb0f1d10c89c","modified":1609337918371},{"_id":"public/2020/12/22/使用hexo+github搭建博客/v2-9125065afd24332d7cd84feb6a350730_720w.jpg","hash":"7a260501704c3884d1adfe98c8e3b933a7603783","modified":1609337918371},{"_id":"public/fonts/default-skin.b257fa.svg","hash":"2ac727c9e092331d35cce95af209ccfac6d4c7c7","modified":1609337918371},{"_id":"public/fonts/iconfont.45d7ee.svg","hash":"75767c904d483d9b93469afb6b92bb6bdface639","modified":1609337918371},{"_id":"public/2020/12/22/使用hexo+github搭建博客/v2-54f8744afc9746884e6b3acecfc5f8cf_720w.jpg","hash":"a2543f2c675046be72ff89eeb93b0d3a46b93690","modified":1609337918371},{"_id":"public/2020/12/22/使用hexo+github搭建博客/v2-a193a47cf70fe6ecf156e5f3d34920ea_720w.jpg","hash":"9f743a487023cf2e99ca96e9af6af49f8f3135bc","modified":1609337918371},{"_id":"public/2020/12/22/使用hexo+github搭建博客/v2-d5d37c8ad523d8ab5c7c200fabc9585e_720w.jpg","hash":"ee49f3e983e6c3c8218b9cff1bc999a56ea39e58","modified":1609337918371},{"_id":"public/2020/12/22/使用hexo+github搭建博客/v2-b4c7524a2451f4ab42f9c22ea3c7b6be_720w.jpg","hash":"38cf318fb23e71a1b1f1d411964e0704f50e7be6","modified":1609337918371},{"_id":"public/2020/12/24/java基础知识整理/20160624152602394","hash":"508dfa4bce04d181c495af4ce551de5c5fe107e7","modified":1609337918371},{"_id":"public/2020/12/24/java基础知识整理/20160624152704286","hash":"927686932ca6f863d3d7c56d97edb26a5f9d35b9","modified":1609337918371},{"_id":"public/2020/12/24/java基础知识整理/20180803193134355","hash":"3fd5c6cdb93d1d43cd39c1afc469a27bc117ec27","modified":1609337918371},{"_id":"public/2020/12/24/java基础知识整理/3775272-55dfd603d6e9b95c.jpg","hash":"d2a4af8e3ed2f1660e4aaf624b13c6796cef39fb","modified":1609337918371},{"_id":"public/2020/12/24/java基础知识整理/772134-20160720003120122-551868817.png","hash":"3490c9b6e59121083efdc8154c8982aa6892fcf5","modified":1609337918371},{"_id":"public/2020/12/24/java基础知识整理/copycode.gif","hash":"7e9c17336e21497cc5b8871097e3e5c0332aa47d","modified":1609337918371},{"_id":"public/2020/12/29/hive知识整理/timg-1568381886490.jpg","hash":"ae3326aaaaef3325c43cd835e1c3c4b197a58e47","modified":1609337918371},{"_id":"public/2020/12/24/java基础知识整理/20180803193423722","hash":"c5f15f12cae94ccf3e18aaa423f1855ad1df4114","modified":1609337918371},{"_id":"public/main.0cf68a.css","hash":"ddf6e2c6b953c2c59a3c271e6070010a4cc81cf9","modified":1609337918371},{"_id":"public/slider.e37972.js","hash":"6dec4e220c89049037eebc44404abd8455d22ad7","modified":1609337918371},{"_id":"public/main.0cf68a.js","hash":"993fadeb5f6d296e9d997a49ee20dc97333ceab7","modified":1609337918371},{"_id":"public/mobile.992cbe.js","hash":"01b35e71e37aa2849664eb5daf26daede2278398","modified":1609337918371}],"Category":[{"name":"工具","_id":"ckjbi8tow000424vuds9nbkid"},{"name":"复习","_id":"ckjbi8toz000724vua9pufu3q"}],"Data":[],"Page":[{"title":"categories","date":"2020-12-22T13:08:59.000Z","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2020-12-22 21:08:59\n---\n","updated":"2020-12-22T13:08:59.243Z","path":"categories/index.html","comments":1,"layout":"page","_id":"ckjbi8ton000024vuel6770i1","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2020-12-22T13:11:27.000Z","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2020-12-22 21:11:27\n---\n","updated":"2020-12-22T13:11:27.043Z","path":"tags/index.html","comments":1,"layout":"page","_id":"ckjbi8tou000224vugw709811","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"dataworks命令","date":"2020-12-24T14:27:32.000Z","_content":"\n<!-- toc -->\n\n[TOC]\n\n# 一、DDL语句\n\n```sql\n\nalter table table_name1 rename to table_name2;   -- 修改表名\nalter table table_name1 changeowner to 'ALIYUN$xxx@aliyun.com'; --修改表的所有人\nalter table table_name1 set COMMENT 'tbl comment'; --修改表注释\nALTER TABLE sale_detail CHANGE COLUMN customer_name RENAME TO customer; --修改字段名 \nALTER TABLE sale_detail CHANGE COLUMN customer COMMENT 'customer';--修改字段注释\nALTER TABLE table_name CHANGE COLUMN old_col_name new_col_name column_type COMMENT 'column_comment';--同时修改列名和注释\nALTER TABLE table_name ADD COLUMNS (col_name1 type1 comment 'XXX',col_name2 type2 comment 'XXX');--添加列和注释\n\n```\n\n","source":"_posts/dataworks命令.md","raw":"---\ntitle: dataworks命令\ndate: 2020-12-24 22:27:32\ntags:\n- dataworks\n- 随笔\ncategories:\n - 工具\n---\n\n<!-- toc -->\n\n[TOC]\n\n# 一、DDL语句\n\n```sql\n\nalter table table_name1 rename to table_name2;   -- 修改表名\nalter table table_name1 changeowner to 'ALIYUN$xxx@aliyun.com'; --修改表的所有人\nalter table table_name1 set COMMENT 'tbl comment'; --修改表注释\nALTER TABLE sale_detail CHANGE COLUMN customer_name RENAME TO customer; --修改字段名 \nALTER TABLE sale_detail CHANGE COLUMN customer COMMENT 'customer';--修改字段注释\nALTER TABLE table_name CHANGE COLUMN old_col_name new_col_name column_type COMMENT 'column_comment';--同时修改列名和注释\nALTER TABLE table_name ADD COLUMNS (col_name1 type1 comment 'XXX',col_name2 type2 comment 'XXX');--添加列和注释\n\n```\n\n","slug":"dataworks命令","published":1,"updated":"2020-12-30T14:10:08.561Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckjbi8toq000124vuf8gecvrg","content":"<!-- toc -->\n\n<ul>\n<li><a href=\"#%E4%B8%80-ddl%E8%AF%AD%E5%8F%A5\">一、DDL语句</a></li>\n</ul>\n<!-- tocstop -->\n\n<p>[TOC]</p>\n<h1><span id=\"一-ddl语句\">一、DDL语句</span></h1><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">table</span> table_name1 <span class=\"keyword\">rename</span> <span class=\"keyword\">to</span> table_name2;   <span class=\"comment\">-- 修改表名</span></span><br><span class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">table</span> table_name1 changeowner <span class=\"keyword\">to</span> <span class=\"string\">&#x27;ALIYUN$xxx@aliyun.com&#x27;</span>; <span class=\"comment\">--修改表的所有人</span></span><br><span class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">table</span> table_name1 <span class=\"keyword\">set</span> <span class=\"keyword\">COMMENT</span> <span class=\"string\">&#x27;tbl comment&#x27;</span>; <span class=\"comment\">--修改表注释</span></span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> sale_detail <span class=\"keyword\">CHANGE</span> <span class=\"keyword\">COLUMN</span> customer_name <span class=\"keyword\">RENAME</span> <span class=\"keyword\">TO</span> customer; <span class=\"comment\">--修改字段名 </span></span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> sale_detail <span class=\"keyword\">CHANGE</span> <span class=\"keyword\">COLUMN</span> customer <span class=\"keyword\">COMMENT</span> <span class=\"string\">&#x27;customer&#x27;</span>;<span class=\"comment\">--修改字段注释</span></span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> table_name <span class=\"keyword\">CHANGE</span> <span class=\"keyword\">COLUMN</span> old_col_name new_col_name column_type <span class=\"keyword\">COMMENT</span> <span class=\"string\">&#x27;column_comment&#x27;</span>;<span class=\"comment\">--同时修改列名和注释</span></span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> table_name <span class=\"keyword\">ADD</span> <span class=\"keyword\">COLUMNS</span> (col_name1 type1 <span class=\"keyword\">comment</span> <span class=\"string\">&#x27;XXX&#x27;</span>,col_name2 type2 <span class=\"keyword\">comment</span> <span class=\"string\">&#x27;XXX&#x27;</span>);<span class=\"comment\">--添加列和注释</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<!-- toc -->\n\n<ul>\n<li><a href=\"#%E4%B8%80-ddl%E8%AF%AD%E5%8F%A5\">一、DDL语句</a></li>\n</ul>\n<!-- tocstop -->\n\n<p>[TOC]</p>\n<h1 id=\"一、DDL语句\"><a href=\"#一、DDL语句\" class=\"headerlink\" title=\"一、DDL语句\"></a>一、DDL语句</h1><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">table</span> table_name1 <span class=\"keyword\">rename</span> <span class=\"keyword\">to</span> table_name2;   <span class=\"comment\">-- 修改表名</span></span><br><span class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">table</span> table_name1 changeowner <span class=\"keyword\">to</span> <span class=\"string\">&#x27;ALIYUN$xxx@aliyun.com&#x27;</span>; <span class=\"comment\">--修改表的所有人</span></span><br><span class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">table</span> table_name1 <span class=\"keyword\">set</span> <span class=\"keyword\">COMMENT</span> <span class=\"string\">&#x27;tbl comment&#x27;</span>; <span class=\"comment\">--修改表注释</span></span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> sale_detail <span class=\"keyword\">CHANGE</span> <span class=\"keyword\">COLUMN</span> customer_name <span class=\"keyword\">RENAME</span> <span class=\"keyword\">TO</span> customer; <span class=\"comment\">--修改字段名 </span></span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> sale_detail <span class=\"keyword\">CHANGE</span> <span class=\"keyword\">COLUMN</span> customer <span class=\"keyword\">COMMENT</span> <span class=\"string\">&#x27;customer&#x27;</span>;<span class=\"comment\">--修改字段注释</span></span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> table_name <span class=\"keyword\">CHANGE</span> <span class=\"keyword\">COLUMN</span> old_col_name new_col_name column_type <span class=\"keyword\">COMMENT</span> <span class=\"string\">&#x27;column_comment&#x27;</span>;<span class=\"comment\">--同时修改列名和注释</span></span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> table_name <span class=\"keyword\">ADD</span> <span class=\"keyword\">COLUMNS</span> (col_name1 type1 <span class=\"keyword\">comment</span> <span class=\"string\">&#x27;XXX&#x27;</span>,col_name2 type2 <span class=\"keyword\">comment</span> <span class=\"string\">&#x27;XXX&#x27;</span>);<span class=\"comment\">--添加列和注释</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n"},{"title":"java多线程","date":"2020-12-28T14:20:52.000Z","_content":"\n<!-- toc -->\n\n[TOC]\n\n\n\n## 一、线程创建4种方式\n\n### 1、继承Thread\n\n### 2、实现Runnable接口\n\n### 3、使用FutureTask接受实现Callable接口类的构造，然后传入线程类\n\n### 4、使用线程池\n\n<!--more-->\n\n![FutureTask](java多线程/20160713174739239)\n\n\n\n## 二、常用线程池\n\n\tnewFixedThreadPool\n\tnewSingleThreadExecutor\n\tnewCachedThreadPool\n\t创建一个大小无限的线程池。此线程池支持定时以及周期性执行任务的需求\n\tnewScheduledThreadPool\n​\t\n\n\n\n## 三、线程池7大参数\n\n​\t\tcorePoolSize:线程池中的常驻核心线程数\n​\t\tmaximunPoolSize:线程池能够容纳同时执行的最大线程数\n​\t\tkeepAliveTime:多余的空闲线程的存活时间(多余线程池线程数据超过corePoolSize时，空闲时间达到keepAliveTime)\n​\t\tUnit:keepAliveTime的单位\n​\t\tworkQueue:任务队列，被提交但尚未被执行的任务\n​\t\tthreadFactory:表示生成线程池中工作线程的线程工厂，用来创建线程一般用默认的即可\n​\t\thandler:拒绝策略，当队列满了并且工作线程大于等于线程池的最大线程数maximunPoolSize时如何来如何拒绝请求执行的runnable的策略\n​\t\t\n\n\t\t线程池工作原理\n\t\t\t1.创建了线程池后，等待提交过来的任务请求。\n\t\t\t2.当调用execute()方法添加一个请求任务，线程池会做如下判断\n\t\t\t\t2.1如果正在运行的线程数量小于corePoolSize，那么马上创建线程运行这个任务\n\t\t\t\t2.2如果正在运行的线程数量大于等于corePoolSize，那么将这个任务放入队列\n\t\t\t\t2.3如果这时候队列满了且正在运行的线程数量还小于maximumPoolSize，那么还是要创建非核心线程立刻运行这个任务\n\t\t\t\t2.4如果队列满了且正在运行的线程数量大于或等于maximumPoolSize，那么线程池会启动饱和拒绝策略来执行\n\t\t\t3.当一个线程完成任务时，它会从队列中取下一个任务来执行\n\t\t\t4.当一个线程无事可做超过一定的时间（keepAliveTime）时，线程会判断：\n\t\t\t\t如果当前线程数大于corePoolSize，那么这个线程被停掉\n\t\t\t\t所以线程池的所有任务完成后它最终会收缩到corePoolSize的大小\n\t\t线程池的拒绝策略（等待队列已经满了，再也塞不下新任务了，线程池的max线程也达到了，无法继续为新任务服务，这时候用拒绝策略合理的处理这个问题）\n\t\t\t1.AbortPolicy:直接抛出RejectedExecutionException\n\t\t\t2.CallerRunsPolicy:\"调用者运行\"一种调节机制，该策略既不会抛弃任务，也不会抛异常。而实将某些任务回退到调用者，从而降低新的任务流量\n\t\t\t3.DiscardOldersPolicy:抛弃队列中等待最久的任务，然后把当前任务加入队列中尝试再次提交当前任务\n\t\t\t4.DiscardPolicy:直接丢弃任务，不予处理也不抛弃异常。\n\t\t线程池参数设置：CPU密集型:核心数+1  IO密集型:2*核心数，核心数/（1-阻尼系数（0.8-0.9））\n##  四、使用Lock代替Synchronized\n\n​\tSynchronized\tLock\n​\twait\t\t\t(Condition)c.await\n​\tnotify\t\t\t(Condition)c.signal\n​\t使用Lock可以让多线程之间按顺序执行\n​\t区别：\n\n​\t\t  1原始构成：Synchronized是关键字属于JVM层面（monitorenter monitorexit）Lock是具体类是API层面\n​\t      2使用方法：Synchronized不需要手动释放锁，执行完系统会自动让线程释放对锁的占用 Lock需要手动释放锁否则可能死锁\n​\t\t  3等待是否可中断：Synchronized不可中断，除非抛出异常，Lock可中断\n​\t\t  4加锁是否公平\n​\t\t  5锁绑定多个条件Condition(精准唤醒)","source":"_posts/java多线程.md","raw":"---\ntitle: java多线程\ndate: 2020-12-28 22:20:52\ntags:\n- java\n- 随笔\ncategories:\n - 复习\n---\n\n<!-- toc -->\n\n[TOC]\n\n\n\n## 一、线程创建4种方式\n\n### 1、继承Thread\n\n### 2、实现Runnable接口\n\n### 3、使用FutureTask接受实现Callable接口类的构造，然后传入线程类\n\n### 4、使用线程池\n\n<!--more-->\n\n![FutureTask](java多线程/20160713174739239)\n\n\n\n## 二、常用线程池\n\n\tnewFixedThreadPool\n\tnewSingleThreadExecutor\n\tnewCachedThreadPool\n\t创建一个大小无限的线程池。此线程池支持定时以及周期性执行任务的需求\n\tnewScheduledThreadPool\n​\t\n\n\n\n## 三、线程池7大参数\n\n​\t\tcorePoolSize:线程池中的常驻核心线程数\n​\t\tmaximunPoolSize:线程池能够容纳同时执行的最大线程数\n​\t\tkeepAliveTime:多余的空闲线程的存活时间(多余线程池线程数据超过corePoolSize时，空闲时间达到keepAliveTime)\n​\t\tUnit:keepAliveTime的单位\n​\t\tworkQueue:任务队列，被提交但尚未被执行的任务\n​\t\tthreadFactory:表示生成线程池中工作线程的线程工厂，用来创建线程一般用默认的即可\n​\t\thandler:拒绝策略，当队列满了并且工作线程大于等于线程池的最大线程数maximunPoolSize时如何来如何拒绝请求执行的runnable的策略\n​\t\t\n\n\t\t线程池工作原理\n\t\t\t1.创建了线程池后，等待提交过来的任务请求。\n\t\t\t2.当调用execute()方法添加一个请求任务，线程池会做如下判断\n\t\t\t\t2.1如果正在运行的线程数量小于corePoolSize，那么马上创建线程运行这个任务\n\t\t\t\t2.2如果正在运行的线程数量大于等于corePoolSize，那么将这个任务放入队列\n\t\t\t\t2.3如果这时候队列满了且正在运行的线程数量还小于maximumPoolSize，那么还是要创建非核心线程立刻运行这个任务\n\t\t\t\t2.4如果队列满了且正在运行的线程数量大于或等于maximumPoolSize，那么线程池会启动饱和拒绝策略来执行\n\t\t\t3.当一个线程完成任务时，它会从队列中取下一个任务来执行\n\t\t\t4.当一个线程无事可做超过一定的时间（keepAliveTime）时，线程会判断：\n\t\t\t\t如果当前线程数大于corePoolSize，那么这个线程被停掉\n\t\t\t\t所以线程池的所有任务完成后它最终会收缩到corePoolSize的大小\n\t\t线程池的拒绝策略（等待队列已经满了，再也塞不下新任务了，线程池的max线程也达到了，无法继续为新任务服务，这时候用拒绝策略合理的处理这个问题）\n\t\t\t1.AbortPolicy:直接抛出RejectedExecutionException\n\t\t\t2.CallerRunsPolicy:\"调用者运行\"一种调节机制，该策略既不会抛弃任务，也不会抛异常。而实将某些任务回退到调用者，从而降低新的任务流量\n\t\t\t3.DiscardOldersPolicy:抛弃队列中等待最久的任务，然后把当前任务加入队列中尝试再次提交当前任务\n\t\t\t4.DiscardPolicy:直接丢弃任务，不予处理也不抛弃异常。\n\t\t线程池参数设置：CPU密集型:核心数+1  IO密集型:2*核心数，核心数/（1-阻尼系数（0.8-0.9））\n##  四、使用Lock代替Synchronized\n\n​\tSynchronized\tLock\n​\twait\t\t\t(Condition)c.await\n​\tnotify\t\t\t(Condition)c.signal\n​\t使用Lock可以让多线程之间按顺序执行\n​\t区别：\n\n​\t\t  1原始构成：Synchronized是关键字属于JVM层面（monitorenter monitorexit）Lock是具体类是API层面\n​\t      2使用方法：Synchronized不需要手动释放锁，执行完系统会自动让线程释放对锁的占用 Lock需要手动释放锁否则可能死锁\n​\t\t  3等待是否可中断：Synchronized不可中断，除非抛出异常，Lock可中断\n​\t\t  4加锁是否公平\n​\t\t  5锁绑定多个条件Condition(精准唤醒)","slug":"java多线程","published":1,"updated":"2020-12-30T14:13:24.081Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckjbi8tou000324vugrkybeob","content":"<!-- toc -->\n\n<ul>\n<li><a href=\"#%E4%B8%80-%E7%BA%BF%E7%A8%8B%E5%88%9B%E5%BB%BA4%E7%A7%8D%E6%96%B9%E5%BC%8F\">一、线程创建4种方式</a><ul>\n<li><a href=\"#1-%E7%BB%A7%E6%89%BFthread\">1、继承Thread</a></li>\n<li><a href=\"#2-%E5%AE%9E%E7%8E%B0runnable%E6%8E%A5%E5%8F%A3\">2、实现Runnable接口</a></li>\n<li><a href=\"#3-%E4%BD%BF%E7%94%A8futuretask%E6%8E%A5%E5%8F%97%E5%AE%9E%E7%8E%B0callable%E6%8E%A5%E5%8F%A3%E7%B1%BB%E7%9A%84%E6%9E%84%E9%80%A0%E7%84%B6%E5%90%8E%E4%BC%A0%E5%85%A5%E7%BA%BF%E7%A8%8B%E7%B1%BB\">3、使用FutureTask接受实现Callable接口类的构造，然后传入线程类</a></li>\n<li><a href=\"#4-%E4%BD%BF%E7%94%A8%E7%BA%BF%E7%A8%8B%E6%B1%A0\">4、使用线程池</a></li>\n</ul>\n</li>\n<li><a href=\"#%E4%BA%8C-%E5%B8%B8%E7%94%A8%E7%BA%BF%E7%A8%8B%E6%B1%A0\">二、常用线程池</a></li>\n<li><a href=\"#%E4%B8%89-%E7%BA%BF%E7%A8%8B%E6%B1%A07%E5%A4%A7%E5%8F%82%E6%95%B0\">三、线程池7大参数</a></li>\n<li><a href=\"#%E5%9B%9B-%E4%BD%BF%E7%94%A8lock%E4%BB%A3%E6%9B%BFsynchronized\">四、使用Lock代替Synchronized</a></li>\n</ul>\n<!-- tocstop -->\n\n<p>[TOC]</p>\n<h2><span id=\"一-线程创建4种方式\">一、线程创建4种方式</span></h2><h3><span id=\"1-继承thread\">1、继承Thread</span></h3><h3><span id=\"2-实现runnable接口\">2、实现Runnable接口</span></h3><h3><span id=\"3-使用futuretask接受实现callable接口类的构造然后传入线程类\">3、使用FutureTask接受实现Callable接口类的构造，然后传入线程类</span></h3><h3><span id=\"4-使用线程池\">4、使用线程池</span></h3><a id=\"more\"></a>\n\n<p><img src=\"/2020/12/28/java%E5%A4%9A%E7%BA%BF%E7%A8%8B/20160713174739239\" alt=\"FutureTask\"></p>\n<h2><span id=\"二-常用线程池\">二、常用线程池</span></h2><pre><code>newFixedThreadPool\nnewSingleThreadExecutor\nnewCachedThreadPool\n创建一个大小无限的线程池。此线程池支持定时以及周期性执行任务的需求\nnewScheduledThreadPool</code></pre>\n<p>​    </p>\n<h2><span id=\"三-线程池7大参数\">三、线程池7大参数</span></h2><p>​        corePoolSize:线程池中的常驻核心线程数<br>​        maximunPoolSize:线程池能够容纳同时执行的最大线程数<br>​        keepAliveTime:多余的空闲线程的存活时间(多余线程池线程数据超过corePoolSize时，空闲时间达到keepAliveTime)<br>​        Unit:keepAliveTime的单位<br>​        workQueue:任务队列，被提交但尚未被执行的任务<br>​        threadFactory:表示生成线程池中工作线程的线程工厂，用来创建线程一般用默认的即可<br>​        handler:拒绝策略，当队列满了并且工作线程大于等于线程池的最大线程数maximunPoolSize时如何来如何拒绝请求执行的runnable的策略<br>​        </p>\n<pre><code>    线程池工作原理\n        1.创建了线程池后，等待提交过来的任务请求。\n        2.当调用execute()方法添加一个请求任务，线程池会做如下判断\n            2.1如果正在运行的线程数量小于corePoolSize，那么马上创建线程运行这个任务\n            2.2如果正在运行的线程数量大于等于corePoolSize，那么将这个任务放入队列\n            2.3如果这时候队列满了且正在运行的线程数量还小于maximumPoolSize，那么还是要创建非核心线程立刻运行这个任务\n            2.4如果队列满了且正在运行的线程数量大于或等于maximumPoolSize，那么线程池会启动饱和拒绝策略来执行\n        3.当一个线程完成任务时，它会从队列中取下一个任务来执行\n        4.当一个线程无事可做超过一定的时间（keepAliveTime）时，线程会判断：\n            如果当前线程数大于corePoolSize，那么这个线程被停掉\n            所以线程池的所有任务完成后它最终会收缩到corePoolSize的大小\n    线程池的拒绝策略（等待队列已经满了，再也塞不下新任务了，线程池的max线程也达到了，无法继续为新任务服务，这时候用拒绝策略合理的处理这个问题）\n        1.AbortPolicy:直接抛出RejectedExecutionException\n        2.CallerRunsPolicy:&quot;调用者运行&quot;一种调节机制，该策略既不会抛弃任务，也不会抛异常。而实将某些任务回退到调用者，从而降低新的任务流量\n        3.DiscardOldersPolicy:抛弃队列中等待最久的任务，然后把当前任务加入队列中尝试再次提交当前任务\n        4.DiscardPolicy:直接丢弃任务，不予处理也不抛弃异常。\n    线程池参数设置：CPU密集型:核心数+1  IO密集型:2*核心数，核心数/（1-阻尼系数（0.8-0.9））</code></pre>\n<h2><span id=\"四-使用lock代替synchronized\">四、使用Lock代替Synchronized</span></h2><p>​    Synchronized    Lock<br>​    wait            (Condition)c.await<br>​    notify            (Condition)c.signal<br>​    使用Lock可以让多线程之间按顺序执行<br>​    区别：</p>\n<p>​          1原始构成：Synchronized是关键字属于JVM层面（monitorenter monitorexit）Lock是具体类是API层面<br>​          2使用方法：Synchronized不需要手动释放锁，执行完系统会自动让线程释放对锁的占用 Lock需要手动释放锁否则可能死锁<br>​          3等待是否可中断：Synchronized不可中断，除非抛出异常，Lock可中断<br>​          4加锁是否公平<br>​          5锁绑定多个条件Condition(精准唤醒)</p>\n","site":{"data":{}},"excerpt":"<!-- toc -->\n\n<ul>\n<li><a href=\"#%E4%B8%80-%E7%BA%BF%E7%A8%8B%E5%88%9B%E5%BB%BA4%E7%A7%8D%E6%96%B9%E5%BC%8F\">一、线程创建4种方式</a><ul>\n<li><a href=\"#1-%E7%BB%A7%E6%89%BFthread\">1、继承Thread</a></li>\n<li><a href=\"#2-%E5%AE%9E%E7%8E%B0runnable%E6%8E%A5%E5%8F%A3\">2、实现Runnable接口</a></li>\n<li><a href=\"#3-%E4%BD%BF%E7%94%A8futuretask%E6%8E%A5%E5%8F%97%E5%AE%9E%E7%8E%B0callable%E6%8E%A5%E5%8F%A3%E7%B1%BB%E7%9A%84%E6%9E%84%E9%80%A0%E7%84%B6%E5%90%8E%E4%BC%A0%E5%85%A5%E7%BA%BF%E7%A8%8B%E7%B1%BB\">3、使用FutureTask接受实现Callable接口类的构造，然后传入线程类</a></li>\n<li><a href=\"#4-%E4%BD%BF%E7%94%A8%E7%BA%BF%E7%A8%8B%E6%B1%A0\">4、使用线程池</a></li>\n</ul>\n</li>\n<li><a href=\"#%E4%BA%8C-%E5%B8%B8%E7%94%A8%E7%BA%BF%E7%A8%8B%E6%B1%A0\">二、常用线程池</a></li>\n<li><a href=\"#%E4%B8%89-%E7%BA%BF%E7%A8%8B%E6%B1%A07%E5%A4%A7%E5%8F%82%E6%95%B0\">三、线程池7大参数</a></li>\n<li><a href=\"#%E5%9B%9B-%E4%BD%BF%E7%94%A8lock%E4%BB%A3%E6%9B%BFsynchronized\">四、使用Lock代替Synchronized</a></li>\n</ul>\n<!-- tocstop -->\n\n<p>[TOC]</p>\n<h2 id=\"一、线程创建4种方式\"><a href=\"#一、线程创建4种方式\" class=\"headerlink\" title=\"一、线程创建4种方式\"></a>一、线程创建4种方式</h2><h3 id=\"1、继承Thread\"><a href=\"#1、继承Thread\" class=\"headerlink\" title=\"1、继承Thread\"></a>1、继承Thread</h3><h3 id=\"2、实现Runnable接口\"><a href=\"#2、实现Runnable接口\" class=\"headerlink\" title=\"2、实现Runnable接口\"></a>2、实现Runnable接口</h3><h3 id=\"3、使用FutureTask接受实现Callable接口类的构造，然后传入线程类\"><a href=\"#3、使用FutureTask接受实现Callable接口类的构造，然后传入线程类\" class=\"headerlink\" title=\"3、使用FutureTask接受实现Callable接口类的构造，然后传入线程类\"></a>3、使用FutureTask接受实现Callable接口类的构造，然后传入线程类</h3><h3 id=\"4、使用线程池\"><a href=\"#4、使用线程池\" class=\"headerlink\" title=\"4、使用线程池\"></a>4、使用线程池</h3>","more":"<p><img src=\"/2020/12/28/java%E5%A4%9A%E7%BA%BF%E7%A8%8B/20160713174739239\" alt=\"FutureTask\"></p>\n<h2 id=\"二、常用线程池\"><a href=\"#二、常用线程池\" class=\"headerlink\" title=\"二、常用线程池\"></a>二、常用线程池</h2><pre><code>newFixedThreadPool\nnewSingleThreadExecutor\nnewCachedThreadPool\n创建一个大小无限的线程池。此线程池支持定时以及周期性执行任务的需求\nnewScheduledThreadPool</code></pre>\n<p>​    </p>\n<h2 id=\"三、线程池7大参数\"><a href=\"#三、线程池7大参数\" class=\"headerlink\" title=\"三、线程池7大参数\"></a>三、线程池7大参数</h2><p>​        corePoolSize:线程池中的常驻核心线程数<br>​        maximunPoolSize:线程池能够容纳同时执行的最大线程数<br>​        keepAliveTime:多余的空闲线程的存活时间(多余线程池线程数据超过corePoolSize时，空闲时间达到keepAliveTime)<br>​        Unit:keepAliveTime的单位<br>​        workQueue:任务队列，被提交但尚未被执行的任务<br>​        threadFactory:表示生成线程池中工作线程的线程工厂，用来创建线程一般用默认的即可<br>​        handler:拒绝策略，当队列满了并且工作线程大于等于线程池的最大线程数maximunPoolSize时如何来如何拒绝请求执行的runnable的策略<br>​        </p>\n<pre><code>    线程池工作原理\n        1.创建了线程池后，等待提交过来的任务请求。\n        2.当调用execute()方法添加一个请求任务，线程池会做如下判断\n            2.1如果正在运行的线程数量小于corePoolSize，那么马上创建线程运行这个任务\n            2.2如果正在运行的线程数量大于等于corePoolSize，那么将这个任务放入队列\n            2.3如果这时候队列满了且正在运行的线程数量还小于maximumPoolSize，那么还是要创建非核心线程立刻运行这个任务\n            2.4如果队列满了且正在运行的线程数量大于或等于maximumPoolSize，那么线程池会启动饱和拒绝策略来执行\n        3.当一个线程完成任务时，它会从队列中取下一个任务来执行\n        4.当一个线程无事可做超过一定的时间（keepAliveTime）时，线程会判断：\n            如果当前线程数大于corePoolSize，那么这个线程被停掉\n            所以线程池的所有任务完成后它最终会收缩到corePoolSize的大小\n    线程池的拒绝策略（等待队列已经满了，再也塞不下新任务了，线程池的max线程也达到了，无法继续为新任务服务，这时候用拒绝策略合理的处理这个问题）\n        1.AbortPolicy:直接抛出RejectedExecutionException\n        2.CallerRunsPolicy:&quot;调用者运行&quot;一种调节机制，该策略既不会抛弃任务，也不会抛异常。而实将某些任务回退到调用者，从而降低新的任务流量\n        3.DiscardOldersPolicy:抛弃队列中等待最久的任务，然后把当前任务加入队列中尝试再次提交当前任务\n        4.DiscardPolicy:直接丢弃任务，不予处理也不抛弃异常。\n    线程池参数设置：CPU密集型:核心数+1  IO密集型:2*核心数，核心数/（1-阻尼系数（0.8-0.9））</code></pre>\n<h2 id=\"四、使用Lock代替Synchronized\"><a href=\"#四、使用Lock代替Synchronized\" class=\"headerlink\" title=\"四、使用Lock代替Synchronized\"></a>四、使用Lock代替Synchronized</h2><p>​    Synchronized    Lock<br>​    wait            (Condition)c.await<br>​    notify            (Condition)c.signal<br>​    使用Lock可以让多线程之间按顺序执行<br>​    区别：</p>\n<p>​          1原始构成：Synchronized是关键字属于JVM层面（monitorenter monitorexit）Lock是具体类是API层面<br>​          2使用方法：Synchronized不需要手动释放锁，执行完系统会自动让线程释放对锁的占用 Lock需要手动释放锁否则可能死锁<br>​          3等待是否可中断：Synchronized不可中断，除非抛出异常，Lock可中断<br>​          4加锁是否公平<br>​          5锁绑定多个条件Condition(精准唤醒)</p>"},{"title":"使用hexo+github搭建博客","date":"2020-12-22T12:47:56.000Z","_content":"\n<!-- toc -->\n\n[TOC]\n\n\n\n## 前言\n\n近些年来很多用户都喜欢使用 GitHub Pages 来搭建 Hexo 静态博客网站，其最吸引人的莫过于完全免费使用，并且非常稳定。\n\n虽然搭建时比较麻烦，有点折腾，但是配置完成后，基本不需要操心维护的事，甚至放了几年都忘记了，打开来看文章依然还在。\n\n本文就详细介绍下如何使用 Hexo + GitHub 搭建免费个人博客网站的教程。\n\n------\n\n为了照顾小白用户（第一次使用 GitHub 和 Hexo），尽可能详细，包括常见的坑和问题都有提示说明。下面目录中**第 3~5 步为最重要的步骤**，其他内容如果已经会的可以选择性跳过。\n\n看起来有点繁杂，捋顺了倒也简单，认真跟教程走，完整操作一遍大概需要 30 分钟。\n\n<!--more-->\n\n**内容目录：**\n\n- 简介：GitHub Pages 和 Hexo & 原理\n\n1. 准备：环境搭建\n   1.1. 注意事项\n   1.2. 环境搭建\n2. 连接 Github\n3. 创建 Github Pages 仓库\n4. 本地安装 Hexo 博客程序\n   4.1. 安装 Hexo\n   4.2. Hexo 初始化和本地预览\n5. 部署 Hexo 到 GitHub Pages\n6. 绑定域名（可选）\n7. 开始使用\n   7.1. 发布文章\n   7.2. 网站设置\n   7.3. 更换主题\n   7.4. 常用代码\n8. 常见问题\n\n## 简介\n\n### GitHub Pages 是什么？\n\n- [What is GitHub Pages? - GitHub Help](https://link.zhihu.com/?target=https%3A//help.github.com/en/articles/what-is-github-pages)\n\nGitHub Pages 是由 GitHub 官方提供的一种免费的静态站点托管服务，让我们可以在 GitHub 仓库里托管和发布自己的静态网站页面。\n\n### Hexo 是什么？\n\n- 官网：[hexo.io](https://link.zhihu.com/?target=https%3A//hexo.io/zh-cn/)\n\nHexo 是一个快速、简洁且高效的静态博客框架，它基于 Node.js 运行，可以将我们撰写的 Markdown 文档解析渲染成静态的 HTML 网页。\n\n### Hexo + GitHub 文章发布原理\n\n在本地撰写 Markdown 格式文章后，通过 Hexo 解析文档，渲染生成具有主题样式的 HTML 静态网页，再推送到 GitHub 上完成博文的发布。\n\n![img](使用hexo+github搭建博客/v2-a193a47cf70fe6ecf156e5f3d34920ea_720w.jpg)\n\n### 优点和不足\n\n**优点：**完全免费；静态站点，轻量快速；可按需求自由定制改造；托管在 GitHub，安全省心；迁移方便……\n\n**不足：**发文不便，依赖于本地环境；更适合个人博客使用；GitHub 在国内访问速度有点不快。\n\n## 1. 准备\n\n### 注意事项\n\n- 输入代码时，核对准确，最好切换成英文输入法；\n- 将文中的 “用户名” 和 “邮箱” 替换为自己的 GitHub 账户名和绑定的邮箱；\n- 统一使用 Git Bash 进行操作（支持 Win、Mac）；\n- 小白请严格按步骤进行，不要跳！\n\n###  环境搭建\n\nHexo 基于 Node.js，搭建过程中还需要使用 npm（Node.js 已带） 和 git，因此先搭建本地操作环境，安装 Node.js 和 Git。\n\n- Node.js：[https://nodejs.org/zh-cn](https://link.zhihu.com/?target=https%3A//nodejs.org/zh-cn)\n- Git：[https://git-scm.com/downloads](https://link.zhihu.com/?target=https%3A//git-scm.com/downloads)\n\n下载 Node.js 和 Git 程序并安装，一路点 “下一步” 按默认配置完成安装。\n\n安装完成后，Win+R 输入 cmd 并打开，依次输入 `node -v`、`npm -v` 和 `git --version` 并回车，如下图出现程序版本号即可。\n\n![img](使用hexo+github搭建博客/v2-27b47b5ae479ce7987851292a67774b0_720w.jpg)\n\n## 2. 连接 Github\n\n使用邮箱注册 [GitHub](https://link.zhihu.com/?target=https%3A//github.com/) 账户，选择免费账户（Free），并完成邮件验证。\n\n右键 -> Git Bash Here，**设置用户名和邮箱**：\n\n```text\ngit config --global user.name \"GitHub 用户名\"\ngit config --global user.email \"GitHub 邮箱\"\n```\n\n**创建 SSH 密匙**：\n\n输入 `ssh-keygen -t rsa -C \"GitHub 邮箱\"`，然后一路回车。\n\n**添加密匙：**\n\n进入 [C:\\Users\\用户名\\.ssh] 目录（要勾选显示“隐藏的项目”），用记事本打开公钥 id_rsa.pub 文件并复制里面的内容。\n\n登陆 GitHub ，进入 Settings 页面，选择左边栏的 SSH and GPG keys，点击 New SSH key。\n\nTitle 随便取个名字，粘贴复制的 id_rsa.pub 内容到 Key 中，点击 Add SSH key 完成添加。\n\n![img](使用hexo+github搭建博客/v2-9125065afd24332d7cd84feb6a350730_720w.jpg)\n\n**验证连接：**\n\n打开 Git Bash，输入 `ssh -T git@github.com` 出现 “Are you sure……”，输入 yes 回车确认。\n\n![img](使用hexo+github搭建博客/v2-b4c7524a2451f4ab42f9c22ea3c7b6be_720w.jpg)\n\n显示 “Hi xxx! You've successfully……” 即连接成功。\n\n## 3. 创建 Github Pages 仓库\n\nGitHub 主页右上角加号 -> New repository：\n\n- Repository name 中输入 `用户名.github.io`\n- 勾选 “Initialize this repository with a README”\n- Description 选填\n\n填好后点击 Create repository 创建。\n\n![img](使用hexo+github搭建博客/v2-67a8165154f4c5f4a6333e76e78ed815_720w.jpg)\n\n创建后默认自动启用 HTTPS，博客地址为：`https://用户名.github.io`\n\n## 4. 本地安装 Hexo 博客程序\n\n新建一个文件夹用来存放 Hexo 的程序文件，如 Hexo-Blog。打开该文件夹，右键 -> Git Bash Here。\n\n### 4.1 安装 Hexo\n\n使用 npm 一键安装 Hexo 博客程序：\n\n```text\nnpm install -g hexo-cli\n```\n\nMac 用户需要管理员权限（sudo），运行这条命令：\n\n```text\nsudo npm install -g hexo-cli\n```\n\n安装时间有点久（真的很慢！），界面也没任何反应，**耐心等待**，安装完成后如下图。\n\n![img](使用hexo+github搭建博客/v2-01e7fc8bb9280437deb437bf73a190a1_720w.jpg)\n\n### 4.2 Hexo 初始化和本地预览\n\n**初始化并安装所需组件：**\n\n```text\nhexo init      # 初始化\nnpm install    # 安装组件\n```\n\n完成后依次输入下面命令，**启动本地服务器进行预览**：\n\n```text\nhexo g   # 生成页面\nhexo s   # 启动预览\n```\n\n**访问** `http://localhost:4000`**，出现 Hexo 默认页面，本地博客安装成功！**\n\n![img](使用hexo+github搭建博客/v2-1c3baeecf1ef3bec5c8ef3f14639f68b_720w.jpg)\n\n**Tips：**如果出现页面加载不出来，可能是端口被占用了。Ctrl+C 关闭服务器，运行 `hexo server -p 5000` 更改端口号后重试。\n\nHexo 博客文件夹目录结构如下：\n\n![img](使用hexo+github搭建博客/v2-264c75c0e493ae8cc5f283567c64ff2c_720w.jpg)\n\n## 5. 部署 Hexo 到 GitHub Pages\n\n本地博客测试成功后，就是上传到 GitHub 进行部署，使其能够在网络上访问。\n\n首先**安装 hexo-deployer-git**：\n\n```text\nnpm install hexo-deployer-git --save\n```\n\n然后**修改 _config.yml** 文件末尾的 Deployment 部分，修改成如下：\n\n```text\ndeploy:\n  type: git\n  repository: git@github.com:用户名/用户名.github.io.git\n  branch: master\n```\n\n完成后运行 `hexo d` 将网站上传部署到 GitHub Pages。\n\n完成！这时访问我们的 GitHub 域名 `https://用户名.github.io` 就可以看到 Hexo 网站了。\n\n## 6. 绑定域名（可选）\n\n博客搭建完成使用的是 GitHub 的子域名（用户名.[http://github.io](https://link.zhihu.com/?target=http%3A//github.io)），我们可以为 Hexo 博客绑定自己的域名替换 GitHub 域名，更加个性化和专业，也利于 SEO。\n\n我们使用 [Namesilo](https://link.zhihu.com/?target=https%3A//www.namesilo.com/%3Frid%3Dd27fa32do) 进行注册，便宜好用没啥套路，使用优惠码 `okoff` 优惠一美元，com 域名大概 50 块一年。\n\n###  6.1 域名注册和解析\n\n- 域名注册和解析教程：[Namesilo 域名购买及使用教程](https://zhuanlan.zhihu.com/p/33921436)\n\n按上面教程注册并解析域名，在 DNS 设置部分，删除自带的记录，然后添加 CNAME 记录将 www 域名解析指向 `用户名.github.io`。\n\n![img](使用hexo+github搭建博客/v2-d5d37c8ad523d8ab5c7c200fabc9585e_720w.jpg)\n\n###  6.2 绑定域名到 Hexo 博客\n\n进入本地博客文件夹的 source 目录，打开记事本，里面输入自己的域名，如 http://www.example.com，保存名称为 “CNAME”，格式为 “所有文件”（无 .txt 后缀）。\n\n清除缓存等文件并重新发布网站：\n\n```text\nhexo clean   # 清除缓存文件等\nhexo g       # 生成页面\nhexo s       # 启动预览\n```\n\n现在就可以使用自己的域名访问 Hexo 博客了。\n\n###  6.3 开启 HTTPS\n\n配置自己的域名后，需要我们手动开启 HTTPS。打开博客所在 GitHub 仓库，Settings -> 下拉找到 GitHub Pages -> 勾选 Enforce HTTPS。\n\n![img](使用hexo+github搭建博客/v2-54f8744afc9746884e6b3acecfc5f8cf_720w.jpg)\n\nHTTPS 证书部署成功需要一定时间，等大概几分钟再访问域名，就可以看到域名前面的小绿锁了，HTTPS 配置完成！\n\n## 7. 开始使用\n\n### 7.1 发布文章\n\n进入博客所在目录，右键打开 Git Bash Here，创建博文：\n\n```text\nhexo new \"My New Post\"\n```\n\n然后 source 文件夹中会出现一个 My New Post.md 文件，就可以使用 Markdown 编辑器在该文件中撰写文章了。\n\n写完后运行下面代码将文章渲染并部署到 GitHub Pages 上完成发布。**以后每次发布文章都是这两条命令。**\n\n```text\nhexo g   # 生成页面\nhexo d   # 部署发布\n```\n\n------\n\n也可以不使用命令自己创建 .md 文件，只需在文件开头手动加入如下格式 Front-matter 即可，写完后运行 `hexo g` 和 `hexo d` 发布。\n\n```text\n---\ntitle: Hello World # 标题\ndate: 2019/3/26 hh:mm:ss # 时间\ncategories: # 分类\n- Diary\ntags: # 标签\n- PS3\n- Games\n---\n\n```\n\n###  7.2 网站设置\n\n包括网站名称、描述、作者、链接样式等，全部在网站目录下的 _config.yml 文件中，参考[官方文档](https://link.zhihu.com/?target=https%3A//hexo.io/zh-cn/docs/configuration)按需要编辑。\n\n注意：冒号后要加一个空格！\n\n###  7.3 更换主题\n\n在 [Themes | Hexo](https://link.zhihu.com/?target=https%3A//hexo.io/themes/) 选择一个喜欢的主题，比如 [NexT](https://link.zhihu.com/?target=http%3A//theme-next.iissnan.com/getting-started.html)，进入网站目录打开 Git Bash Here 下载主题：\n\n```text\ngit clone https://github.com/iissnan/hexo-theme-next themes/next\n```\n\n然后修改 _config.yml 中的 theme 为新主题名称 next，发布。（有的主题需要将 _config.yml 替换为主题自带的，参考主题说明。）\n\n### 7.4 常用命令\n\n```text\nhexo new \"name\"       # 新建文章\nhexo new page \"name\"  # 新建页面\nhexo g                # 生成页面\nhexo d                # 部署\nhexo g -d             # 生成页面并部署\nhexo s                # 本地预览\nhexo clean            # 清除缓存和已生成的静态文件\nhexo help             # 帮助\n```\n\n## 8 常见问题\n\n**1、Hexo 设置显示文章摘要，首页不显示全文**\n\nHexo 主页文章列表默认会显示文章全文，浏览时很不方便，可以在文章中插入 `<!--more-->` 进行分段。\n\n该代码前面的内容会作为摘要显示，而后面的内容会替换为 “Read More” 隐藏起来。\n\n![img](使用hexo+github搭建博客/v2-45701cf120ca77e6733ad30b40666f33_720w.jpg)\n\n**2、设置网站图标**\n\n进入 themes/主题 文件夹，打开 _config.yml 配置文件，找到 favicon 修改，一般格式为：`favicon: 图标地址`。（不同主题可能略有差别）\n\n**3、修改并部署后没有效果**\n\n使用 `hexo clean` 清理后重新部署。\n\n**4、开启 HTTPS 后访问网站显示连接不安全？**\n\n证书还未部署生效，等待一会儿，清除浏览器缓存再试。\n\n**5、Mac 安装 Hexo 报错无法安装**\n\nMac 用户需要管理员权限运行，使用 `sudo npm install -g hexo-cli` 命令安装。\n\n**6、npm 下载速度慢，甚至完全没反应**\n\n使用 npm 安装程序等待很久也没反应，或者下载速度很慢，可以更换 npm 源为国内 npm 镜像。\n\n临时更换方法：在 npm 安装命令后面加上：\n\n```text\n--registry https://registry.npm.taobao.org \n```\n\n## 结语\n\nHexo 是一种纯静态的博客，我们必须要在本地完成文章的编辑再部署到 GitHub 上，依赖于本地环境。不能像 WordPress 或 Typecho 那样的动态博客一样能直接在浏览器中完成撰文和发布。","source":"_posts/使用hexo+github搭建博客.md","raw":"---\ntitle: 使用hexo+github搭建博客\ndate: 2020-12-22 20:47:56\ncategories: \n- 工具\ntags:\n- hexo\n- 随笔\n---\n\n<!-- toc -->\n\n[TOC]\n\n\n\n## 前言\n\n近些年来很多用户都喜欢使用 GitHub Pages 来搭建 Hexo 静态博客网站，其最吸引人的莫过于完全免费使用，并且非常稳定。\n\n虽然搭建时比较麻烦，有点折腾，但是配置完成后，基本不需要操心维护的事，甚至放了几年都忘记了，打开来看文章依然还在。\n\n本文就详细介绍下如何使用 Hexo + GitHub 搭建免费个人博客网站的教程。\n\n------\n\n为了照顾小白用户（第一次使用 GitHub 和 Hexo），尽可能详细，包括常见的坑和问题都有提示说明。下面目录中**第 3~5 步为最重要的步骤**，其他内容如果已经会的可以选择性跳过。\n\n看起来有点繁杂，捋顺了倒也简单，认真跟教程走，完整操作一遍大概需要 30 分钟。\n\n<!--more-->\n\n**内容目录：**\n\n- 简介：GitHub Pages 和 Hexo & 原理\n\n1. 准备：环境搭建\n   1.1. 注意事项\n   1.2. 环境搭建\n2. 连接 Github\n3. 创建 Github Pages 仓库\n4. 本地安装 Hexo 博客程序\n   4.1. 安装 Hexo\n   4.2. Hexo 初始化和本地预览\n5. 部署 Hexo 到 GitHub Pages\n6. 绑定域名（可选）\n7. 开始使用\n   7.1. 发布文章\n   7.2. 网站设置\n   7.3. 更换主题\n   7.4. 常用代码\n8. 常见问题\n\n## 简介\n\n### GitHub Pages 是什么？\n\n- [What is GitHub Pages? - GitHub Help](https://link.zhihu.com/?target=https%3A//help.github.com/en/articles/what-is-github-pages)\n\nGitHub Pages 是由 GitHub 官方提供的一种免费的静态站点托管服务，让我们可以在 GitHub 仓库里托管和发布自己的静态网站页面。\n\n### Hexo 是什么？\n\n- 官网：[hexo.io](https://link.zhihu.com/?target=https%3A//hexo.io/zh-cn/)\n\nHexo 是一个快速、简洁且高效的静态博客框架，它基于 Node.js 运行，可以将我们撰写的 Markdown 文档解析渲染成静态的 HTML 网页。\n\n### Hexo + GitHub 文章发布原理\n\n在本地撰写 Markdown 格式文章后，通过 Hexo 解析文档，渲染生成具有主题样式的 HTML 静态网页，再推送到 GitHub 上完成博文的发布。\n\n![img](使用hexo+github搭建博客/v2-a193a47cf70fe6ecf156e5f3d34920ea_720w.jpg)\n\n### 优点和不足\n\n**优点：**完全免费；静态站点，轻量快速；可按需求自由定制改造；托管在 GitHub，安全省心；迁移方便……\n\n**不足：**发文不便，依赖于本地环境；更适合个人博客使用；GitHub 在国内访问速度有点不快。\n\n## 1. 准备\n\n### 注意事项\n\n- 输入代码时，核对准确，最好切换成英文输入法；\n- 将文中的 “用户名” 和 “邮箱” 替换为自己的 GitHub 账户名和绑定的邮箱；\n- 统一使用 Git Bash 进行操作（支持 Win、Mac）；\n- 小白请严格按步骤进行，不要跳！\n\n###  环境搭建\n\nHexo 基于 Node.js，搭建过程中还需要使用 npm（Node.js 已带） 和 git，因此先搭建本地操作环境，安装 Node.js 和 Git。\n\n- Node.js：[https://nodejs.org/zh-cn](https://link.zhihu.com/?target=https%3A//nodejs.org/zh-cn)\n- Git：[https://git-scm.com/downloads](https://link.zhihu.com/?target=https%3A//git-scm.com/downloads)\n\n下载 Node.js 和 Git 程序并安装，一路点 “下一步” 按默认配置完成安装。\n\n安装完成后，Win+R 输入 cmd 并打开，依次输入 `node -v`、`npm -v` 和 `git --version` 并回车，如下图出现程序版本号即可。\n\n![img](使用hexo+github搭建博客/v2-27b47b5ae479ce7987851292a67774b0_720w.jpg)\n\n## 2. 连接 Github\n\n使用邮箱注册 [GitHub](https://link.zhihu.com/?target=https%3A//github.com/) 账户，选择免费账户（Free），并完成邮件验证。\n\n右键 -> Git Bash Here，**设置用户名和邮箱**：\n\n```text\ngit config --global user.name \"GitHub 用户名\"\ngit config --global user.email \"GitHub 邮箱\"\n```\n\n**创建 SSH 密匙**：\n\n输入 `ssh-keygen -t rsa -C \"GitHub 邮箱\"`，然后一路回车。\n\n**添加密匙：**\n\n进入 [C:\\Users\\用户名\\.ssh] 目录（要勾选显示“隐藏的项目”），用记事本打开公钥 id_rsa.pub 文件并复制里面的内容。\n\n登陆 GitHub ，进入 Settings 页面，选择左边栏的 SSH and GPG keys，点击 New SSH key。\n\nTitle 随便取个名字，粘贴复制的 id_rsa.pub 内容到 Key 中，点击 Add SSH key 完成添加。\n\n![img](使用hexo+github搭建博客/v2-9125065afd24332d7cd84feb6a350730_720w.jpg)\n\n**验证连接：**\n\n打开 Git Bash，输入 `ssh -T git@github.com` 出现 “Are you sure……”，输入 yes 回车确认。\n\n![img](使用hexo+github搭建博客/v2-b4c7524a2451f4ab42f9c22ea3c7b6be_720w.jpg)\n\n显示 “Hi xxx! You've successfully……” 即连接成功。\n\n## 3. 创建 Github Pages 仓库\n\nGitHub 主页右上角加号 -> New repository：\n\n- Repository name 中输入 `用户名.github.io`\n- 勾选 “Initialize this repository with a README”\n- Description 选填\n\n填好后点击 Create repository 创建。\n\n![img](使用hexo+github搭建博客/v2-67a8165154f4c5f4a6333e76e78ed815_720w.jpg)\n\n创建后默认自动启用 HTTPS，博客地址为：`https://用户名.github.io`\n\n## 4. 本地安装 Hexo 博客程序\n\n新建一个文件夹用来存放 Hexo 的程序文件，如 Hexo-Blog。打开该文件夹，右键 -> Git Bash Here。\n\n### 4.1 安装 Hexo\n\n使用 npm 一键安装 Hexo 博客程序：\n\n```text\nnpm install -g hexo-cli\n```\n\nMac 用户需要管理员权限（sudo），运行这条命令：\n\n```text\nsudo npm install -g hexo-cli\n```\n\n安装时间有点久（真的很慢！），界面也没任何反应，**耐心等待**，安装完成后如下图。\n\n![img](使用hexo+github搭建博客/v2-01e7fc8bb9280437deb437bf73a190a1_720w.jpg)\n\n### 4.2 Hexo 初始化和本地预览\n\n**初始化并安装所需组件：**\n\n```text\nhexo init      # 初始化\nnpm install    # 安装组件\n```\n\n完成后依次输入下面命令，**启动本地服务器进行预览**：\n\n```text\nhexo g   # 生成页面\nhexo s   # 启动预览\n```\n\n**访问** `http://localhost:4000`**，出现 Hexo 默认页面，本地博客安装成功！**\n\n![img](使用hexo+github搭建博客/v2-1c3baeecf1ef3bec5c8ef3f14639f68b_720w.jpg)\n\n**Tips：**如果出现页面加载不出来，可能是端口被占用了。Ctrl+C 关闭服务器，运行 `hexo server -p 5000` 更改端口号后重试。\n\nHexo 博客文件夹目录结构如下：\n\n![img](使用hexo+github搭建博客/v2-264c75c0e493ae8cc5f283567c64ff2c_720w.jpg)\n\n## 5. 部署 Hexo 到 GitHub Pages\n\n本地博客测试成功后，就是上传到 GitHub 进行部署，使其能够在网络上访问。\n\n首先**安装 hexo-deployer-git**：\n\n```text\nnpm install hexo-deployer-git --save\n```\n\n然后**修改 _config.yml** 文件末尾的 Deployment 部分，修改成如下：\n\n```text\ndeploy:\n  type: git\n  repository: git@github.com:用户名/用户名.github.io.git\n  branch: master\n```\n\n完成后运行 `hexo d` 将网站上传部署到 GitHub Pages。\n\n完成！这时访问我们的 GitHub 域名 `https://用户名.github.io` 就可以看到 Hexo 网站了。\n\n## 6. 绑定域名（可选）\n\n博客搭建完成使用的是 GitHub 的子域名（用户名.[http://github.io](https://link.zhihu.com/?target=http%3A//github.io)），我们可以为 Hexo 博客绑定自己的域名替换 GitHub 域名，更加个性化和专业，也利于 SEO。\n\n我们使用 [Namesilo](https://link.zhihu.com/?target=https%3A//www.namesilo.com/%3Frid%3Dd27fa32do) 进行注册，便宜好用没啥套路，使用优惠码 `okoff` 优惠一美元，com 域名大概 50 块一年。\n\n###  6.1 域名注册和解析\n\n- 域名注册和解析教程：[Namesilo 域名购买及使用教程](https://zhuanlan.zhihu.com/p/33921436)\n\n按上面教程注册并解析域名，在 DNS 设置部分，删除自带的记录，然后添加 CNAME 记录将 www 域名解析指向 `用户名.github.io`。\n\n![img](使用hexo+github搭建博客/v2-d5d37c8ad523d8ab5c7c200fabc9585e_720w.jpg)\n\n###  6.2 绑定域名到 Hexo 博客\n\n进入本地博客文件夹的 source 目录，打开记事本，里面输入自己的域名，如 http://www.example.com，保存名称为 “CNAME”，格式为 “所有文件”（无 .txt 后缀）。\n\n清除缓存等文件并重新发布网站：\n\n```text\nhexo clean   # 清除缓存文件等\nhexo g       # 生成页面\nhexo s       # 启动预览\n```\n\n现在就可以使用自己的域名访问 Hexo 博客了。\n\n###  6.3 开启 HTTPS\n\n配置自己的域名后，需要我们手动开启 HTTPS。打开博客所在 GitHub 仓库，Settings -> 下拉找到 GitHub Pages -> 勾选 Enforce HTTPS。\n\n![img](使用hexo+github搭建博客/v2-54f8744afc9746884e6b3acecfc5f8cf_720w.jpg)\n\nHTTPS 证书部署成功需要一定时间，等大概几分钟再访问域名，就可以看到域名前面的小绿锁了，HTTPS 配置完成！\n\n## 7. 开始使用\n\n### 7.1 发布文章\n\n进入博客所在目录，右键打开 Git Bash Here，创建博文：\n\n```text\nhexo new \"My New Post\"\n```\n\n然后 source 文件夹中会出现一个 My New Post.md 文件，就可以使用 Markdown 编辑器在该文件中撰写文章了。\n\n写完后运行下面代码将文章渲染并部署到 GitHub Pages 上完成发布。**以后每次发布文章都是这两条命令。**\n\n```text\nhexo g   # 生成页面\nhexo d   # 部署发布\n```\n\n------\n\n也可以不使用命令自己创建 .md 文件，只需在文件开头手动加入如下格式 Front-matter 即可，写完后运行 `hexo g` 和 `hexo d` 发布。\n\n```text\n---\ntitle: Hello World # 标题\ndate: 2019/3/26 hh:mm:ss # 时间\ncategories: # 分类\n- Diary\ntags: # 标签\n- PS3\n- Games\n---\n\n```\n\n###  7.2 网站设置\n\n包括网站名称、描述、作者、链接样式等，全部在网站目录下的 _config.yml 文件中，参考[官方文档](https://link.zhihu.com/?target=https%3A//hexo.io/zh-cn/docs/configuration)按需要编辑。\n\n注意：冒号后要加一个空格！\n\n###  7.3 更换主题\n\n在 [Themes | Hexo](https://link.zhihu.com/?target=https%3A//hexo.io/themes/) 选择一个喜欢的主题，比如 [NexT](https://link.zhihu.com/?target=http%3A//theme-next.iissnan.com/getting-started.html)，进入网站目录打开 Git Bash Here 下载主题：\n\n```text\ngit clone https://github.com/iissnan/hexo-theme-next themes/next\n```\n\n然后修改 _config.yml 中的 theme 为新主题名称 next，发布。（有的主题需要将 _config.yml 替换为主题自带的，参考主题说明。）\n\n### 7.4 常用命令\n\n```text\nhexo new \"name\"       # 新建文章\nhexo new page \"name\"  # 新建页面\nhexo g                # 生成页面\nhexo d                # 部署\nhexo g -d             # 生成页面并部署\nhexo s                # 本地预览\nhexo clean            # 清除缓存和已生成的静态文件\nhexo help             # 帮助\n```\n\n## 8 常见问题\n\n**1、Hexo 设置显示文章摘要，首页不显示全文**\n\nHexo 主页文章列表默认会显示文章全文，浏览时很不方便，可以在文章中插入 `<!--more-->` 进行分段。\n\n该代码前面的内容会作为摘要显示，而后面的内容会替换为 “Read More” 隐藏起来。\n\n![img](使用hexo+github搭建博客/v2-45701cf120ca77e6733ad30b40666f33_720w.jpg)\n\n**2、设置网站图标**\n\n进入 themes/主题 文件夹，打开 _config.yml 配置文件，找到 favicon 修改，一般格式为：`favicon: 图标地址`。（不同主题可能略有差别）\n\n**3、修改并部署后没有效果**\n\n使用 `hexo clean` 清理后重新部署。\n\n**4、开启 HTTPS 后访问网站显示连接不安全？**\n\n证书还未部署生效，等待一会儿，清除浏览器缓存再试。\n\n**5、Mac 安装 Hexo 报错无法安装**\n\nMac 用户需要管理员权限运行，使用 `sudo npm install -g hexo-cli` 命令安装。\n\n**6、npm 下载速度慢，甚至完全没反应**\n\n使用 npm 安装程序等待很久也没反应，或者下载速度很慢，可以更换 npm 源为国内 npm 镜像。\n\n临时更换方法：在 npm 安装命令后面加上：\n\n```text\n--registry https://registry.npm.taobao.org \n```\n\n## 结语\n\nHexo 是一种纯静态的博客，我们必须要在本地完成文章的编辑再部署到 GitHub 上，依赖于本地环境。不能像 WordPress 或 Typecho 那样的动态博客一样能直接在浏览器中完成撰文和发布。","slug":"使用hexo+github搭建博客","published":1,"updated":"2020-12-30T14:00:26.942Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckjbi8tox000624vudppbgv03","content":"<!-- toc -->\n\n<ul>\n<li><a href=\"#%E5%89%8D%E8%A8%80\">前言</a></li>\n<li><a href=\"#%E7%AE%80%E4%BB%8B\">简介</a><ul>\n<li><a href=\"#github-pages-%E6%98%AF%E4%BB%80%E4%B9%88\">GitHub Pages 是什么？</a></li>\n<li><a href=\"#hexo-%E6%98%AF%E4%BB%80%E4%B9%88\">Hexo 是什么？</a></li>\n<li><a href=\"#hexo-github-%E6%96%87%E7%AB%A0%E5%8F%91%E5%B8%83%E5%8E%9F%E7%90%86\">Hexo + GitHub 文章发布原理</a></li>\n<li><a href=\"#%E4%BC%98%E7%82%B9%E5%92%8C%E4%B8%8D%E8%B6%B3\">优点和不足</a></li>\n</ul>\n</li>\n<li><a href=\"#1-%E5%87%86%E5%A4%87\">1. 准备</a><ul>\n<li><a href=\"#%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9\">注意事项</a></li>\n<li><a href=\"#%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA\">环境搭建</a></li>\n</ul>\n</li>\n<li><a href=\"#2-%E8%BF%9E%E6%8E%A5-github\">2. 连接 Github</a></li>\n<li><a href=\"#3-%E5%88%9B%E5%BB%BA-github-pages-%E4%BB%93%E5%BA%93\">3. 创建 Github Pages 仓库</a></li>\n<li><a href=\"#4-%E6%9C%AC%E5%9C%B0%E5%AE%89%E8%A3%85-hexo-%E5%8D%9A%E5%AE%A2%E7%A8%8B%E5%BA%8F\">4. 本地安装 Hexo 博客程序</a><ul>\n<li><a href=\"#41-%E5%AE%89%E8%A3%85-hexo\">4.1 安装 Hexo</a></li>\n<li><a href=\"#42-hexo-%E5%88%9D%E5%A7%8B%E5%8C%96%E5%92%8C%E6%9C%AC%E5%9C%B0%E9%A2%84%E8%A7%88\">4.2 Hexo 初始化和本地预览</a></li>\n</ul>\n</li>\n<li><a href=\"#5-%E9%83%A8%E7%BD%B2-hexo-%E5%88%B0-github-pages\">5. 部署 Hexo 到 GitHub Pages</a></li>\n<li><a href=\"#6-%E7%BB%91%E5%AE%9A%E5%9F%9F%E5%90%8D%E5%8F%AF%E9%80%89\">6. 绑定域名（可选）</a><ul>\n<li><a href=\"#61-%E5%9F%9F%E5%90%8D%E6%B3%A8%E5%86%8C%E5%92%8C%E8%A7%A3%E6%9E%90\">6.1 域名注册和解析</a></li>\n<li><a href=\"#62-%E7%BB%91%E5%AE%9A%E5%9F%9F%E5%90%8D%E5%88%B0-hexo-%E5%8D%9A%E5%AE%A2\">6.2 绑定域名到 Hexo 博客</a></li>\n<li><a href=\"#63-%E5%BC%80%E5%90%AF-https\">6.3 开启 HTTPS</a></li>\n</ul>\n</li>\n<li><a href=\"#7-%E5%BC%80%E5%A7%8B%E4%BD%BF%E7%94%A8\">7. 开始使用</a><ul>\n<li><a href=\"#71-%E5%8F%91%E5%B8%83%E6%96%87%E7%AB%A0\">7.1 发布文章</a></li>\n</ul>\n</li>\n<li><a href=\"#hexopostrendercodeblockfigure-classhighlight-texttabletrtd-classgutterprespan-classline1spanbrspan-classline2spanbrpretdtd-classcodeprespan-classlinehexo-g-%E7%94%9F%E6%88%90%E9%A1%B5%E9%9D%A2spanbrspan-classlinehexo-d-%E9%83%A8%E7%BD%B2%E5%8F%91%E5%B8%83spanbrpretdtrtablefigurehexopostrendercodeblock\"><figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo g   # 生成页面</span><br><span class=\"line\">hexo d   # 部署发布</span><br></pre></td></tr></table></figure></a><ul>\n<li><a href=\"#72-%E7%BD%91%E7%AB%99%E8%AE%BE%E7%BD%AE\">7.2 网站设置</a></li>\n<li><a href=\"#73-%E6%9B%B4%E6%8D%A2%E4%B8%BB%E9%A2%98\">7.3 更换主题</a></li>\n<li><a href=\"#74-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4\">7.4 常用命令</a></li>\n</ul>\n</li>\n<li><a href=\"#8-%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98\">8 常见问题</a></li>\n<li><a href=\"#%E7%BB%93%E8%AF%AD\">结语</a></li>\n</ul>\n<!-- tocstop -->\n\n<p>[TOC]</p>\n<h2><span id=\"前言\">前言</span></h2><p>近些年来很多用户都喜欢使用 GitHub Pages 来搭建 Hexo 静态博客网站，其最吸引人的莫过于完全免费使用，并且非常稳定。</p>\n<p>虽然搭建时比较麻烦，有点折腾，但是配置完成后，基本不需要操心维护的事，甚至放了几年都忘记了，打开来看文章依然还在。</p>\n<p>本文就详细介绍下如何使用 Hexo + GitHub 搭建免费个人博客网站的教程。</p>\n<hr>\n<p>为了照顾小白用户（第一次使用 GitHub 和 Hexo），尽可能详细，包括常见的坑和问题都有提示说明。下面目录中<strong>第 3~5 步为最重要的步骤</strong>，其他内容如果已经会的可以选择性跳过。</p>\n<p>看起来有点繁杂，捋顺了倒也简单，认真跟教程走，完整操作一遍大概需要 30 分钟。</p>\n<a id=\"more\"></a>\n\n<p><strong>内容目录：</strong></p>\n<ul>\n<li>简介：GitHub Pages 和 Hexo &amp; 原理</li>\n</ul>\n<ol>\n<li>准备：环境搭建<br>1.1. 注意事项<br>1.2. 环境搭建</li>\n<li>连接 Github</li>\n<li>创建 Github Pages 仓库</li>\n<li>本地安装 Hexo 博客程序<br>4.1. 安装 Hexo<br>4.2. Hexo 初始化和本地预览</li>\n<li>部署 Hexo 到 GitHub Pages</li>\n<li>绑定域名（可选）</li>\n<li>开始使用<br>7.1. 发布文章<br>7.2. 网站设置<br>7.3. 更换主题<br>7.4. 常用代码</li>\n<li>常见问题</li>\n</ol>\n<h2><span id=\"简介\">简介</span></h2><h3><span id=\"github-pages-是什么\">GitHub Pages 是什么？</span></h3><ul>\n<li><a href=\"https://link.zhihu.com/?target=https://help.github.com/en/articles/what-is-github-pages\">What is GitHub Pages? - GitHub Help</a></li>\n</ul>\n<p>GitHub Pages 是由 GitHub 官方提供的一种免费的静态站点托管服务，让我们可以在 GitHub 仓库里托管和发布自己的静态网站页面。</p>\n<h3><span id=\"hexo-是什么\">Hexo 是什么？</span></h3><ul>\n<li>官网：<a href=\"https://link.zhihu.com/?target=https://hexo.io/zh-cn/\">hexo.io</a></li>\n</ul>\n<p>Hexo 是一个快速、简洁且高效的静态博客框架，它基于 Node.js 运行，可以将我们撰写的 Markdown 文档解析渲染成静态的 HTML 网页。</p>\n<h3><span id=\"hexo-github-文章发布原理\">Hexo + GitHub 文章发布原理</span></h3><p>在本地撰写 Markdown 格式文章后，通过 Hexo 解析文档，渲染生成具有主题样式的 HTML 静态网页，再推送到 GitHub 上完成博文的发布。</p>\n<p><img src=\"/2020/12/22/%E4%BD%BF%E7%94%A8hexo+github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/v2-a193a47cf70fe6ecf156e5f3d34920ea_720w.jpg\" alt=\"img\"></p>\n<h3><span id=\"优点和不足\">优点和不足</span></h3><p><strong>优点：</strong>完全免费；静态站点，轻量快速；可按需求自由定制改造；托管在 GitHub，安全省心；迁移方便……</p>\n<p><strong>不足：</strong>发文不便，依赖于本地环境；更适合个人博客使用；GitHub 在国内访问速度有点不快。</p>\n<h2><span id=\"1-准备\">1. 准备</span></h2><h3><span id=\"注意事项\">注意事项</span></h3><ul>\n<li>输入代码时，核对准确，最好切换成英文输入法；</li>\n<li>将文中的 “用户名” 和 “邮箱” 替换为自己的 GitHub 账户名和绑定的邮箱；</li>\n<li>统一使用 Git Bash 进行操作（支持 Win、Mac）；</li>\n<li>小白请严格按步骤进行，不要跳！</li>\n</ul>\n<h3><span id=\"环境搭建\">环境搭建</span></h3><p>Hexo 基于 Node.js，搭建过程中还需要使用 npm（Node.js 已带） 和 git，因此先搭建本地操作环境，安装 Node.js 和 Git。</p>\n<ul>\n<li>Node.js：<a href=\"https://link.zhihu.com/?target=https://nodejs.org/zh-cn\">https://nodejs.org/zh-cn</a></li>\n<li>Git：<a href=\"https://link.zhihu.com/?target=https://git-scm.com/downloads\">https://git-scm.com/downloads</a></li>\n</ul>\n<p>下载 Node.js 和 Git 程序并安装，一路点 “下一步” 按默认配置完成安装。</p>\n<p>安装完成后，Win+R 输入 cmd 并打开，依次输入 <code>node -v</code>、<code>npm -v</code> 和 <code>git --version</code> 并回车，如下图出现程序版本号即可。</p>\n<p><img src=\"/2020/12/22/%E4%BD%BF%E7%94%A8hexo+github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/v2-27b47b5ae479ce7987851292a67774b0_720w.jpg\" alt=\"img\"></p>\n<h2><span id=\"2-连接-github\">2. 连接 Github</span></h2><p>使用邮箱注册 <a href=\"https://link.zhihu.com/?target=https://github.com/\">GitHub</a> 账户，选择免费账户（Free），并完成邮件验证。</p>\n<p>右键 -&gt; Git Bash Here，<strong>设置用户名和邮箱</strong>：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global user.name &quot;GitHub 用户名&quot;</span><br><span class=\"line\">git config --global user.email &quot;GitHub 邮箱&quot;</span><br></pre></td></tr></table></figure>\n<p><strong>创建 SSH 密匙</strong>：</p>\n<p>输入 <code>ssh-keygen -t rsa -C &quot;GitHub 邮箱&quot;</code>，然后一路回车。</p>\n<p><strong>添加密匙：</strong></p>\n<p>进入 [C:\\Users\\用户名.ssh] 目录（要勾选显示“隐藏的项目”），用记事本打开公钥 id_rsa.pub 文件并复制里面的内容。</p>\n<p>登陆 GitHub ，进入 Settings 页面，选择左边栏的 SSH and GPG keys，点击 New SSH key。</p>\n<p>Title 随便取个名字，粘贴复制的 id_rsa.pub 内容到 Key 中，点击 Add SSH key 完成添加。</p>\n<p><img src=\"/2020/12/22/%E4%BD%BF%E7%94%A8hexo+github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/v2-9125065afd24332d7cd84feb6a350730_720w.jpg\" alt=\"img\"></p>\n<p><strong>验证连接：</strong></p>\n<p>打开 Git Bash，输入 <code>ssh -T git@github.com</code> 出现 “Are you sure……”，输入 yes 回车确认。</p>\n<p><img src=\"/2020/12/22/%E4%BD%BF%E7%94%A8hexo+github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/v2-b4c7524a2451f4ab42f9c22ea3c7b6be_720w.jpg\" alt=\"img\"></p>\n<p>显示 “Hi xxx! You’ve successfully……” 即连接成功。</p>\n<h2><span id=\"3-创建-github-pages-仓库\">3. 创建 Github Pages 仓库</span></h2><p>GitHub 主页右上角加号 -&gt; New repository：</p>\n<ul>\n<li>Repository name 中输入 <code>用户名.github.io</code></li>\n<li>勾选 “Initialize this repository with a README”</li>\n<li>Description 选填</li>\n</ul>\n<p>填好后点击 Create repository 创建。</p>\n<p><img src=\"/2020/12/22/%E4%BD%BF%E7%94%A8hexo+github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/v2-67a8165154f4c5f4a6333e76e78ed815_720w.jpg\" alt=\"img\"></p>\n<p>创建后默认自动启用 HTTPS，博客地址为：<code>https://用户名.github.io</code></p>\n<h2><span id=\"4-本地安装-hexo-博客程序\">4. 本地安装 Hexo 博客程序</span></h2><p>新建一个文件夹用来存放 Hexo 的程序文件，如 Hexo-Blog。打开该文件夹，右键 -&gt; Git Bash Here。</p>\n<h3><span id=\"41-安装-hexo\">4.1 安装 Hexo</span></h3><p>使用 npm 一键安装 Hexo 博客程序：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>\n<p>Mac 用户需要管理员权限（sudo），运行这条命令：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo npm install -g hexo-cli</span><br></pre></td></tr></table></figure>\n<p>安装时间有点久（真的很慢！），界面也没任何反应，<strong>耐心等待</strong>，安装完成后如下图。</p>\n<p><img src=\"/2020/12/22/%E4%BD%BF%E7%94%A8hexo+github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/v2-01e7fc8bb9280437deb437bf73a190a1_720w.jpg\" alt=\"img\"></p>\n<h3><span id=\"42-hexo-初始化和本地预览\">4.2 Hexo 初始化和本地预览</span></h3><p><strong>初始化并安装所需组件：</strong></p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo init      # 初始化</span><br><span class=\"line\">npm install    # 安装组件</span><br></pre></td></tr></table></figure>\n<p>完成后依次输入下面命令，<strong>启动本地服务器进行预览</strong>：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo g   # 生成页面</span><br><span class=\"line\">hexo s   # 启动预览</span><br></pre></td></tr></table></figure>\n<p><strong>访问</strong> <code>http://localhost:4000</code><strong>，出现 Hexo 默认页面，本地博客安装成功！</strong></p>\n<p><img src=\"/2020/12/22/%E4%BD%BF%E7%94%A8hexo+github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/v2-1c3baeecf1ef3bec5c8ef3f14639f68b_720w.jpg\" alt=\"img\"></p>\n<p><strong>Tips：</strong>如果出现页面加载不出来，可能是端口被占用了。Ctrl+C 关闭服务器，运行 <code>hexo server -p 5000</code> 更改端口号后重试。</p>\n<p>Hexo 博客文件夹目录结构如下：</p>\n<p><img src=\"/2020/12/22/%E4%BD%BF%E7%94%A8hexo+github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/v2-264c75c0e493ae8cc5f283567c64ff2c_720w.jpg\" alt=\"img\"></p>\n<h2><span id=\"5-部署-hexo-到-github-pages\">5. 部署 Hexo 到 GitHub Pages</span></h2><p>本地博客测试成功后，就是上传到 GitHub 进行部署，使其能够在网络上访问。</p>\n<p>首先<strong>安装 hexo-deployer-git</strong>：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>\n<p>然后<strong>修改 _config.yml</strong> 文件末尾的 Deployment 部分，修改成如下：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deploy:</span><br><span class=\"line\">  type: git</span><br><span class=\"line\">  repository: git@github.com:用户名/用户名.github.io.git</span><br><span class=\"line\">  branch: master</span><br></pre></td></tr></table></figure>\n<p>完成后运行 <code>hexo d</code> 将网站上传部署到 GitHub Pages。</p>\n<p>完成！这时访问我们的 GitHub 域名 <code>https://用户名.github.io</code> 就可以看到 Hexo 网站了。</p>\n<h2><span id=\"6-绑定域名可选\">6. 绑定域名（可选）</span></h2><p>博客搭建完成使用的是 GitHub 的子域名（用户名.<a href=\"https://link.zhihu.com/?target=http://github.io\">http://github.io</a>），我们可以为 Hexo 博客绑定自己的域名替换 GitHub 域名，更加个性化和专业，也利于 SEO。</p>\n<p>我们使用 <a href=\"https://link.zhihu.com/?target=https://www.namesilo.com/?rid=d27fa32do\">Namesilo</a> 进行注册，便宜好用没啥套路，使用优惠码 <code>okoff</code> 优惠一美元，com 域名大概 50 块一年。</p>\n<h3><span id=\"61-域名注册和解析\">6.1 域名注册和解析</span></h3><ul>\n<li>域名注册和解析教程：<a href=\"https://zhuanlan.zhihu.com/p/33921436\">Namesilo 域名购买及使用教程</a></li>\n</ul>\n<p>按上面教程注册并解析域名，在 DNS 设置部分，删除自带的记录，然后添加 CNAME 记录将 www 域名解析指向 <code>用户名.github.io</code>。</p>\n<p><img src=\"/2020/12/22/%E4%BD%BF%E7%94%A8hexo+github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/v2-d5d37c8ad523d8ab5c7c200fabc9585e_720w.jpg\" alt=\"img\"></p>\n<h3><span id=\"62-绑定域名到-hexo-博客\">6.2 绑定域名到 Hexo 博客</span></h3><p>进入本地博客文件夹的 source 目录，打开记事本，里面输入自己的域名，如 <a href=\"http://www.example.com,保存名称为/\">http://www.example.com，保存名称为</a> “CNAME”，格式为 “所有文件”（无 .txt 后缀）。</p>\n<p>清除缓存等文件并重新发布网站：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo clean   # 清除缓存文件等</span><br><span class=\"line\">hexo g       # 生成页面</span><br><span class=\"line\">hexo s       # 启动预览</span><br></pre></td></tr></table></figure>\n<p>现在就可以使用自己的域名访问 Hexo 博客了。</p>\n<h3><span id=\"63-开启-https\">6.3 开启 HTTPS</span></h3><p>配置自己的域名后，需要我们手动开启 HTTPS。打开博客所在 GitHub 仓库，Settings -&gt; 下拉找到 GitHub Pages -&gt; 勾选 Enforce HTTPS。</p>\n<p><img src=\"/2020/12/22/%E4%BD%BF%E7%94%A8hexo+github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/v2-54f8744afc9746884e6b3acecfc5f8cf_720w.jpg\" alt=\"img\"></p>\n<p>HTTPS 证书部署成功需要一定时间，等大概几分钟再访问域名，就可以看到域名前面的小绿锁了，HTTPS 配置完成！</p>\n<h2><span id=\"7-开始使用\">7. 开始使用</span></h2><h3><span id=\"71-发布文章\">7.1 发布文章</span></h3><p>进入博客所在目录，右键打开 Git Bash Here，创建博文：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new &quot;My New Post&quot;</span><br></pre></td></tr></table></figure>\n<p>然后 source 文件夹中会出现一个 My New Post.md 文件，就可以使用 Markdown 编辑器在该文件中撰写文章了。</p>\n<p>写完后运行下面代码将文章渲染并部署到 GitHub Pages 上完成发布。<strong>以后每次发布文章都是这两条命令。</strong></p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo g   # 生成页面</span><br><span class=\"line\">hexo d   # 部署发布</span><br></pre></td></tr></table></figure>\n<hr>\n<p>也可以不使用命令自己创建 .md 文件，只需在文件开头手动加入如下格式 Front-matter 即可，写完后运行 <code>hexo g</code> 和 <code>hexo d</code> 发布。</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: Hello World # 标题</span><br><span class=\"line\">date: 2019/3/26 hh:mm:ss # 时间</span><br><span class=\"line\">categories: # 分类</span><br><span class=\"line\">- Diary</span><br><span class=\"line\">tags: # 标签</span><br><span class=\"line\">- PS3</span><br><span class=\"line\">- Games</span><br><span class=\"line\">---</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3><span id=\"72-网站设置\">7.2 网站设置</span></h3><p>包括网站名称、描述、作者、链接样式等，全部在网站目录下的 _config.yml 文件中，参考<a href=\"https://link.zhihu.com/?target=https://hexo.io/zh-cn/docs/configuration\">官方文档</a>按需要编辑。</p>\n<p>注意：冒号后要加一个空格！</p>\n<h3><span id=\"73-更换主题\">7.3 更换主题</span></h3><p>在 <a href=\"https://link.zhihu.com/?target=https://hexo.io/themes/\">Themes | Hexo</a> 选择一个喜欢的主题，比如 <a href=\"https://link.zhihu.com/?target=http://theme-next.iissnan.com/getting-started.html\">NexT</a>，进入网站目录打开 Git Bash Here 下载主题：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone https://github.com/iissnan/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure>\n<p>然后修改 _config.yml 中的 theme 为新主题名称 next，发布。（有的主题需要将 _config.yml 替换为主题自带的，参考主题说明。）</p>\n<h3><span id=\"74-常用命令\">7.4 常用命令</span></h3><figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new &quot;name&quot;       # 新建文章</span><br><span class=\"line\">hexo new page &quot;name&quot;  # 新建页面</span><br><span class=\"line\">hexo g                # 生成页面</span><br><span class=\"line\">hexo d                # 部署</span><br><span class=\"line\">hexo g -d             # 生成页面并部署</span><br><span class=\"line\">hexo s                # 本地预览</span><br><span class=\"line\">hexo clean            # 清除缓存和已生成的静态文件</span><br><span class=\"line\">hexo help             # 帮助</span><br></pre></td></tr></table></figure>\n<h2><span id=\"8-常见问题\">8 常见问题</span></h2><p><strong>1、Hexo 设置显示文章摘要，首页不显示全文</strong></p>\n<p>Hexo 主页文章列表默认会显示文章全文，浏览时很不方便，可以在文章中插入 <code>&lt;!--more--&gt;</code> 进行分段。</p>\n<p>该代码前面的内容会作为摘要显示，而后面的内容会替换为 “Read More” 隐藏起来。</p>\n<p><img src=\"/2020/12/22/%E4%BD%BF%E7%94%A8hexo+github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/v2-45701cf120ca77e6733ad30b40666f33_720w.jpg\" alt=\"img\"></p>\n<p><strong>2、设置网站图标</strong></p>\n<p>进入 themes/主题 文件夹，打开 _config.yml 配置文件，找到 favicon 修改，一般格式为：<code>favicon: 图标地址</code>。（不同主题可能略有差别）</p>\n<p><strong>3、修改并部署后没有效果</strong></p>\n<p>使用 <code>hexo clean</code> 清理后重新部署。</p>\n<p><strong>4、开启 HTTPS 后访问网站显示连接不安全？</strong></p>\n<p>证书还未部署生效，等待一会儿，清除浏览器缓存再试。</p>\n<p><strong>5、Mac 安装 Hexo 报错无法安装</strong></p>\n<p>Mac 用户需要管理员权限运行，使用 <code>sudo npm install -g hexo-cli</code> 命令安装。</p>\n<p><strong>6、npm 下载速度慢，甚至完全没反应</strong></p>\n<p>使用 npm 安装程序等待很久也没反应，或者下载速度很慢，可以更换 npm 源为国内 npm 镜像。</p>\n<p>临时更换方法：在 npm 安装命令后面加上：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--registry https://registry.npm.taobao.org </span><br></pre></td></tr></table></figure>\n<h2><span id=\"结语\">结语</span></h2><p>Hexo 是一种纯静态的博客，我们必须要在本地完成文章的编辑再部署到 GitHub 上，依赖于本地环境。不能像 WordPress 或 Typecho 那样的动态博客一样能直接在浏览器中完成撰文和发布。</p>\n","site":{"data":{}},"excerpt":"<!-- toc -->\n\n<ul>\n<li><a href=\"#%E5%89%8D%E8%A8%80\">前言</a></li>\n<li><a href=\"#%E7%AE%80%E4%BB%8B\">简介</a><ul>\n<li><a href=\"#github-pages-%E6%98%AF%E4%BB%80%E4%B9%88\">GitHub Pages 是什么？</a></li>\n<li><a href=\"#hexo-%E6%98%AF%E4%BB%80%E4%B9%88\">Hexo 是什么？</a></li>\n<li><a href=\"#hexo-github-%E6%96%87%E7%AB%A0%E5%8F%91%E5%B8%83%E5%8E%9F%E7%90%86\">Hexo + GitHub 文章发布原理</a></li>\n<li><a href=\"#%E4%BC%98%E7%82%B9%E5%92%8C%E4%B8%8D%E8%B6%B3\">优点和不足</a></li>\n</ul>\n</li>\n<li><a href=\"#1-%E5%87%86%E5%A4%87\">1. 准备</a><ul>\n<li><a href=\"#%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9\">注意事项</a></li>\n<li><a href=\"#%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA\">环境搭建</a></li>\n</ul>\n</li>\n<li><a href=\"#2-%E8%BF%9E%E6%8E%A5-github\">2. 连接 Github</a></li>\n<li><a href=\"#3-%E5%88%9B%E5%BB%BA-github-pages-%E4%BB%93%E5%BA%93\">3. 创建 Github Pages 仓库</a></li>\n<li><a href=\"#4-%E6%9C%AC%E5%9C%B0%E5%AE%89%E8%A3%85-hexo-%E5%8D%9A%E5%AE%A2%E7%A8%8B%E5%BA%8F\">4. 本地安装 Hexo 博客程序</a><ul>\n<li><a href=\"#41-%E5%AE%89%E8%A3%85-hexo\">4.1 安装 Hexo</a></li>\n<li><a href=\"#42-hexo-%E5%88%9D%E5%A7%8B%E5%8C%96%E5%92%8C%E6%9C%AC%E5%9C%B0%E9%A2%84%E8%A7%88\">4.2 Hexo 初始化和本地预览</a></li>\n</ul>\n</li>\n<li><a href=\"#5-%E9%83%A8%E7%BD%B2-hexo-%E5%88%B0-github-pages\">5. 部署 Hexo 到 GitHub Pages</a></li>\n<li><a href=\"#6-%E7%BB%91%E5%AE%9A%E5%9F%9F%E5%90%8D%E5%8F%AF%E9%80%89\">6. 绑定域名（可选）</a><ul>\n<li><a href=\"#61-%E5%9F%9F%E5%90%8D%E6%B3%A8%E5%86%8C%E5%92%8C%E8%A7%A3%E6%9E%90\">6.1 域名注册和解析</a></li>\n<li><a href=\"#62-%E7%BB%91%E5%AE%9A%E5%9F%9F%E5%90%8D%E5%88%B0-hexo-%E5%8D%9A%E5%AE%A2\">6.2 绑定域名到 Hexo 博客</a></li>\n<li><a href=\"#63-%E5%BC%80%E5%90%AF-https\">6.3 开启 HTTPS</a></li>\n</ul>\n</li>\n<li><a href=\"#7-%E5%BC%80%E5%A7%8B%E4%BD%BF%E7%94%A8\">7. 开始使用</a><ul>\n<li><a href=\"#71-%E5%8F%91%E5%B8%83%E6%96%87%E7%AB%A0\">7.1 发布文章</a></li>\n</ul>\n</li>\n<li><a href=\"#hexopostrendercodeblockfigure-classhighlight-texttabletrtd-classgutterprespan-classline1spanbrspan-classline2spanbrpretdtd-classcodeprespan-classlinehexo-g-%E7%94%9F%E6%88%90%E9%A1%B5%E9%9D%A2spanbrspan-classlinehexo-d-%E9%83%A8%E7%BD%B2%E5%8F%91%E5%B8%83spanbrpretdtrtablefigurehexopostrendercodeblock\"><figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo g   # 生成页面</span><br><span class=\"line\">hexo d   # 部署发布</span><br></pre></td></tr></table></figure></a><ul>\n<li><a href=\"#72-%E7%BD%91%E7%AB%99%E8%AE%BE%E7%BD%AE\">7.2 网站设置</a></li>\n<li><a href=\"#73-%E6%9B%B4%E6%8D%A2%E4%B8%BB%E9%A2%98\">7.3 更换主题</a></li>\n<li><a href=\"#74-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4\">7.4 常用命令</a></li>\n</ul>\n</li>\n<li><a href=\"#8-%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98\">8 常见问题</a></li>\n<li><a href=\"#%E7%BB%93%E8%AF%AD\">结语</a></li>\n</ul>\n<!-- tocstop -->\n\n<p>[TOC]</p>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>近些年来很多用户都喜欢使用 GitHub Pages 来搭建 Hexo 静态博客网站，其最吸引人的莫过于完全免费使用，并且非常稳定。</p>\n<p>虽然搭建时比较麻烦，有点折腾，但是配置完成后，基本不需要操心维护的事，甚至放了几年都忘记了，打开来看文章依然还在。</p>\n<p>本文就详细介绍下如何使用 Hexo + GitHub 搭建免费个人博客网站的教程。</p>\n<hr>\n<p>为了照顾小白用户（第一次使用 GitHub 和 Hexo），尽可能详细，包括常见的坑和问题都有提示说明。下面目录中<strong>第 3~5 步为最重要的步骤</strong>，其他内容如果已经会的可以选择性跳过。</p>\n<p>看起来有点繁杂，捋顺了倒也简单，认真跟教程走，完整操作一遍大概需要 30 分钟。</p>","more":"<p><strong>内容目录：</strong></p>\n<ul>\n<li>简介：GitHub Pages 和 Hexo &amp; 原理</li>\n</ul>\n<ol>\n<li>准备：环境搭建<br>1.1. 注意事项<br>1.2. 环境搭建</li>\n<li>连接 Github</li>\n<li>创建 Github Pages 仓库</li>\n<li>本地安装 Hexo 博客程序<br>4.1. 安装 Hexo<br>4.2. Hexo 初始化和本地预览</li>\n<li>部署 Hexo 到 GitHub Pages</li>\n<li>绑定域名（可选）</li>\n<li>开始使用<br>7.1. 发布文章<br>7.2. 网站设置<br>7.3. 更换主题<br>7.4. 常用代码</li>\n<li>常见问题</li>\n</ol>\n<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><h3 id=\"GitHub-Pages-是什么？\"><a href=\"#GitHub-Pages-是什么？\" class=\"headerlink\" title=\"GitHub Pages 是什么？\"></a>GitHub Pages 是什么？</h3><ul>\n<li><a href=\"https://link.zhihu.com/?target=https://help.github.com/en/articles/what-is-github-pages\">What is GitHub Pages? - GitHub Help</a></li>\n</ul>\n<p>GitHub Pages 是由 GitHub 官方提供的一种免费的静态站点托管服务，让我们可以在 GitHub 仓库里托管和发布自己的静态网站页面。</p>\n<h3 id=\"Hexo-是什么？\"><a href=\"#Hexo-是什么？\" class=\"headerlink\" title=\"Hexo 是什么？\"></a>Hexo 是什么？</h3><ul>\n<li>官网：<a href=\"https://link.zhihu.com/?target=https://hexo.io/zh-cn/\">hexo.io</a></li>\n</ul>\n<p>Hexo 是一个快速、简洁且高效的静态博客框架，它基于 Node.js 运行，可以将我们撰写的 Markdown 文档解析渲染成静态的 HTML 网页。</p>\n<h3 id=\"Hexo-GitHub-文章发布原理\"><a href=\"#Hexo-GitHub-文章发布原理\" class=\"headerlink\" title=\"Hexo + GitHub 文章发布原理\"></a>Hexo + GitHub 文章发布原理</h3><p>在本地撰写 Markdown 格式文章后，通过 Hexo 解析文档，渲染生成具有主题样式的 HTML 静态网页，再推送到 GitHub 上完成博文的发布。</p>\n<p><img src=\"/2020/12/22/%E4%BD%BF%E7%94%A8hexo+github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/v2-a193a47cf70fe6ecf156e5f3d34920ea_720w.jpg\" alt=\"img\"></p>\n<h3 id=\"优点和不足\"><a href=\"#优点和不足\" class=\"headerlink\" title=\"优点和不足\"></a>优点和不足</h3><p><strong>优点：</strong>完全免费；静态站点，轻量快速；可按需求自由定制改造；托管在 GitHub，安全省心；迁移方便……</p>\n<p><strong>不足：</strong>发文不便，依赖于本地环境；更适合个人博客使用；GitHub 在国内访问速度有点不快。</p>\n<h2 id=\"1-准备\"><a href=\"#1-准备\" class=\"headerlink\" title=\"1. 准备\"></a>1. 准备</h2><h3 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h3><ul>\n<li>输入代码时，核对准确，最好切换成英文输入法；</li>\n<li>将文中的 “用户名” 和 “邮箱” 替换为自己的 GitHub 账户名和绑定的邮箱；</li>\n<li>统一使用 Git Bash 进行操作（支持 Win、Mac）；</li>\n<li>小白请严格按步骤进行，不要跳！</li>\n</ul>\n<h3 id=\"环境搭建\"><a href=\"#环境搭建\" class=\"headerlink\" title=\"环境搭建\"></a>环境搭建</h3><p>Hexo 基于 Node.js，搭建过程中还需要使用 npm（Node.js 已带） 和 git，因此先搭建本地操作环境，安装 Node.js 和 Git。</p>\n<ul>\n<li>Node.js：<a href=\"https://link.zhihu.com/?target=https://nodejs.org/zh-cn\">https://nodejs.org/zh-cn</a></li>\n<li>Git：<a href=\"https://link.zhihu.com/?target=https://git-scm.com/downloads\">https://git-scm.com/downloads</a></li>\n</ul>\n<p>下载 Node.js 和 Git 程序并安装，一路点 “下一步” 按默认配置完成安装。</p>\n<p>安装完成后，Win+R 输入 cmd 并打开，依次输入 <code>node -v</code>、<code>npm -v</code> 和 <code>git --version</code> 并回车，如下图出现程序版本号即可。</p>\n<p><img src=\"/2020/12/22/%E4%BD%BF%E7%94%A8hexo+github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/v2-27b47b5ae479ce7987851292a67774b0_720w.jpg\" alt=\"img\"></p>\n<h2 id=\"2-连接-Github\"><a href=\"#2-连接-Github\" class=\"headerlink\" title=\"2. 连接 Github\"></a>2. 连接 Github</h2><p>使用邮箱注册 <a href=\"https://link.zhihu.com/?target=https://github.com/\">GitHub</a> 账户，选择免费账户（Free），并完成邮件验证。</p>\n<p>右键 -&gt; Git Bash Here，<strong>设置用户名和邮箱</strong>：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global user.name &quot;GitHub 用户名&quot;</span><br><span class=\"line\">git config --global user.email &quot;GitHub 邮箱&quot;</span><br></pre></td></tr></table></figure>\n<p><strong>创建 SSH 密匙</strong>：</p>\n<p>输入 <code>ssh-keygen -t rsa -C &quot;GitHub 邮箱&quot;</code>，然后一路回车。</p>\n<p><strong>添加密匙：</strong></p>\n<p>进入 [C:\\Users\\用户名.ssh] 目录（要勾选显示“隐藏的项目”），用记事本打开公钥 id_rsa.pub 文件并复制里面的内容。</p>\n<p>登陆 GitHub ，进入 Settings 页面，选择左边栏的 SSH and GPG keys，点击 New SSH key。</p>\n<p>Title 随便取个名字，粘贴复制的 id_rsa.pub 内容到 Key 中，点击 Add SSH key 完成添加。</p>\n<p><img src=\"/2020/12/22/%E4%BD%BF%E7%94%A8hexo+github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/v2-9125065afd24332d7cd84feb6a350730_720w.jpg\" alt=\"img\"></p>\n<p><strong>验证连接：</strong></p>\n<p>打开 Git Bash，输入 <code>ssh -T git@github.com</code> 出现 “Are you sure……”，输入 yes 回车确认。</p>\n<p><img src=\"/2020/12/22/%E4%BD%BF%E7%94%A8hexo+github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/v2-b4c7524a2451f4ab42f9c22ea3c7b6be_720w.jpg\" alt=\"img\"></p>\n<p>显示 “Hi xxx! You’ve successfully……” 即连接成功。</p>\n<h2 id=\"3-创建-Github-Pages-仓库\"><a href=\"#3-创建-Github-Pages-仓库\" class=\"headerlink\" title=\"3. 创建 Github Pages 仓库\"></a>3. 创建 Github Pages 仓库</h2><p>GitHub 主页右上角加号 -&gt; New repository：</p>\n<ul>\n<li>Repository name 中输入 <code>用户名.github.io</code></li>\n<li>勾选 “Initialize this repository with a README”</li>\n<li>Description 选填</li>\n</ul>\n<p>填好后点击 Create repository 创建。</p>\n<p><img src=\"/2020/12/22/%E4%BD%BF%E7%94%A8hexo+github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/v2-67a8165154f4c5f4a6333e76e78ed815_720w.jpg\" alt=\"img\"></p>\n<p>创建后默认自动启用 HTTPS，博客地址为：<code>https://用户名.github.io</code></p>\n<h2 id=\"4-本地安装-Hexo-博客程序\"><a href=\"#4-本地安装-Hexo-博客程序\" class=\"headerlink\" title=\"4. 本地安装 Hexo 博客程序\"></a>4. 本地安装 Hexo 博客程序</h2><p>新建一个文件夹用来存放 Hexo 的程序文件，如 Hexo-Blog。打开该文件夹，右键 -&gt; Git Bash Here。</p>\n<h3 id=\"4-1-安装-Hexo\"><a href=\"#4-1-安装-Hexo\" class=\"headerlink\" title=\"4.1 安装 Hexo\"></a>4.1 安装 Hexo</h3><p>使用 npm 一键安装 Hexo 博客程序：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>\n<p>Mac 用户需要管理员权限（sudo），运行这条命令：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo npm install -g hexo-cli</span><br></pre></td></tr></table></figure>\n<p>安装时间有点久（真的很慢！），界面也没任何反应，<strong>耐心等待</strong>，安装完成后如下图。</p>\n<p><img src=\"/2020/12/22/%E4%BD%BF%E7%94%A8hexo+github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/v2-01e7fc8bb9280437deb437bf73a190a1_720w.jpg\" alt=\"img\"></p>\n<h3 id=\"4-2-Hexo-初始化和本地预览\"><a href=\"#4-2-Hexo-初始化和本地预览\" class=\"headerlink\" title=\"4.2 Hexo 初始化和本地预览\"></a>4.2 Hexo 初始化和本地预览</h3><p><strong>初始化并安装所需组件：</strong></p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo init      # 初始化</span><br><span class=\"line\">npm install    # 安装组件</span><br></pre></td></tr></table></figure>\n<p>完成后依次输入下面命令，<strong>启动本地服务器进行预览</strong>：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo g   # 生成页面</span><br><span class=\"line\">hexo s   # 启动预览</span><br></pre></td></tr></table></figure>\n<p><strong>访问</strong> <code>http://localhost:4000</code><strong>，出现 Hexo 默认页面，本地博客安装成功！</strong></p>\n<p><img src=\"/2020/12/22/%E4%BD%BF%E7%94%A8hexo+github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/v2-1c3baeecf1ef3bec5c8ef3f14639f68b_720w.jpg\" alt=\"img\"></p>\n<p><strong>Tips：</strong>如果出现页面加载不出来，可能是端口被占用了。Ctrl+C 关闭服务器，运行 <code>hexo server -p 5000</code> 更改端口号后重试。</p>\n<p>Hexo 博客文件夹目录结构如下：</p>\n<p><img src=\"/2020/12/22/%E4%BD%BF%E7%94%A8hexo+github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/v2-264c75c0e493ae8cc5f283567c64ff2c_720w.jpg\" alt=\"img\"></p>\n<h2 id=\"5-部署-Hexo-到-GitHub-Pages\"><a href=\"#5-部署-Hexo-到-GitHub-Pages\" class=\"headerlink\" title=\"5. 部署 Hexo 到 GitHub Pages\"></a>5. 部署 Hexo 到 GitHub Pages</h2><p>本地博客测试成功后，就是上传到 GitHub 进行部署，使其能够在网络上访问。</p>\n<p>首先<strong>安装 hexo-deployer-git</strong>：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>\n<p>然后<strong>修改 _config.yml</strong> 文件末尾的 Deployment 部分，修改成如下：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deploy:</span><br><span class=\"line\">  type: git</span><br><span class=\"line\">  repository: git@github.com:用户名/用户名.github.io.git</span><br><span class=\"line\">  branch: master</span><br></pre></td></tr></table></figure>\n<p>完成后运行 <code>hexo d</code> 将网站上传部署到 GitHub Pages。</p>\n<p>完成！这时访问我们的 GitHub 域名 <code>https://用户名.github.io</code> 就可以看到 Hexo 网站了。</p>\n<h2 id=\"6-绑定域名（可选）\"><a href=\"#6-绑定域名（可选）\" class=\"headerlink\" title=\"6. 绑定域名（可选）\"></a>6. 绑定域名（可选）</h2><p>博客搭建完成使用的是 GitHub 的子域名（用户名.<a href=\"https://link.zhihu.com/?target=http://github.io\">http://github.io</a>），我们可以为 Hexo 博客绑定自己的域名替换 GitHub 域名，更加个性化和专业，也利于 SEO。</p>\n<p>我们使用 <a href=\"https://link.zhihu.com/?target=https://www.namesilo.com/?rid=d27fa32do\">Namesilo</a> 进行注册，便宜好用没啥套路，使用优惠码 <code>okoff</code> 优惠一美元，com 域名大概 50 块一年。</p>\n<h3 id=\"6-1-域名注册和解析\"><a href=\"#6-1-域名注册和解析\" class=\"headerlink\" title=\"6.1 域名注册和解析\"></a>6.1 域名注册和解析</h3><ul>\n<li>域名注册和解析教程：<a href=\"https://zhuanlan.zhihu.com/p/33921436\">Namesilo 域名购买及使用教程</a></li>\n</ul>\n<p>按上面教程注册并解析域名，在 DNS 设置部分，删除自带的记录，然后添加 CNAME 记录将 www 域名解析指向 <code>用户名.github.io</code>。</p>\n<p><img src=\"/2020/12/22/%E4%BD%BF%E7%94%A8hexo+github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/v2-d5d37c8ad523d8ab5c7c200fabc9585e_720w.jpg\" alt=\"img\"></p>\n<h3 id=\"6-2-绑定域名到-Hexo-博客\"><a href=\"#6-2-绑定域名到-Hexo-博客\" class=\"headerlink\" title=\"6.2 绑定域名到 Hexo 博客\"></a>6.2 绑定域名到 Hexo 博客</h3><p>进入本地博客文件夹的 source 目录，打开记事本，里面输入自己的域名，如 <a href=\"http://www.example.com,保存名称为/\">http://www.example.com，保存名称为</a> “CNAME”，格式为 “所有文件”（无 .txt 后缀）。</p>\n<p>清除缓存等文件并重新发布网站：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo clean   # 清除缓存文件等</span><br><span class=\"line\">hexo g       # 生成页面</span><br><span class=\"line\">hexo s       # 启动预览</span><br></pre></td></tr></table></figure>\n<p>现在就可以使用自己的域名访问 Hexo 博客了。</p>\n<h3 id=\"6-3-开启-HTTPS\"><a href=\"#6-3-开启-HTTPS\" class=\"headerlink\" title=\"6.3 开启 HTTPS\"></a>6.3 开启 HTTPS</h3><p>配置自己的域名后，需要我们手动开启 HTTPS。打开博客所在 GitHub 仓库，Settings -&gt; 下拉找到 GitHub Pages -&gt; 勾选 Enforce HTTPS。</p>\n<p><img src=\"/2020/12/22/%E4%BD%BF%E7%94%A8hexo+github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/v2-54f8744afc9746884e6b3acecfc5f8cf_720w.jpg\" alt=\"img\"></p>\n<p>HTTPS 证书部署成功需要一定时间，等大概几分钟再访问域名，就可以看到域名前面的小绿锁了，HTTPS 配置完成！</p>\n<h2 id=\"7-开始使用\"><a href=\"#7-开始使用\" class=\"headerlink\" title=\"7. 开始使用\"></a>7. 开始使用</h2><h3 id=\"7-1-发布文章\"><a href=\"#7-1-发布文章\" class=\"headerlink\" title=\"7.1 发布文章\"></a>7.1 发布文章</h3><p>进入博客所在目录，右键打开 Git Bash Here，创建博文：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new &quot;My New Post&quot;</span><br></pre></td></tr></table></figure>\n<p>然后 source 文件夹中会出现一个 My New Post.md 文件，就可以使用 Markdown 编辑器在该文件中撰写文章了。</p>\n<p>写完后运行下面代码将文章渲染并部署到 GitHub Pages 上完成发布。<strong>以后每次发布文章都是这两条命令。</strong></p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo g   # 生成页面</span><br><span class=\"line\">hexo d   # 部署发布</span><br></pre></td></tr></table></figure>\n<hr>\n<p>也可以不使用命令自己创建 .md 文件，只需在文件开头手动加入如下格式 Front-matter 即可，写完后运行 <code>hexo g</code> 和 <code>hexo d</code> 发布。</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: Hello World # 标题</span><br><span class=\"line\">date: 2019/3/26 hh:mm:ss # 时间</span><br><span class=\"line\">categories: # 分类</span><br><span class=\"line\">- Diary</span><br><span class=\"line\">tags: # 标签</span><br><span class=\"line\">- PS3</span><br><span class=\"line\">- Games</span><br><span class=\"line\">---</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"7-2-网站设置\"><a href=\"#7-2-网站设置\" class=\"headerlink\" title=\"7.2 网站设置\"></a>7.2 网站设置</h3><p>包括网站名称、描述、作者、链接样式等，全部在网站目录下的 _config.yml 文件中，参考<a href=\"https://link.zhihu.com/?target=https://hexo.io/zh-cn/docs/configuration\">官方文档</a>按需要编辑。</p>\n<p>注意：冒号后要加一个空格！</p>\n<h3 id=\"7-3-更换主题\"><a href=\"#7-3-更换主题\" class=\"headerlink\" title=\"7.3 更换主题\"></a>7.3 更换主题</h3><p>在 <a href=\"https://link.zhihu.com/?target=https://hexo.io/themes/\">Themes | Hexo</a> 选择一个喜欢的主题，比如 <a href=\"https://link.zhihu.com/?target=http://theme-next.iissnan.com/getting-started.html\">NexT</a>，进入网站目录打开 Git Bash Here 下载主题：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone https://github.com/iissnan/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure>\n<p>然后修改 _config.yml 中的 theme 为新主题名称 next，发布。（有的主题需要将 _config.yml 替换为主题自带的，参考主题说明。）</p>\n<h3 id=\"7-4-常用命令\"><a href=\"#7-4-常用命令\" class=\"headerlink\" title=\"7.4 常用命令\"></a>7.4 常用命令</h3><figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new &quot;name&quot;       # 新建文章</span><br><span class=\"line\">hexo new page &quot;name&quot;  # 新建页面</span><br><span class=\"line\">hexo g                # 生成页面</span><br><span class=\"line\">hexo d                # 部署</span><br><span class=\"line\">hexo g -d             # 生成页面并部署</span><br><span class=\"line\">hexo s                # 本地预览</span><br><span class=\"line\">hexo clean            # 清除缓存和已生成的静态文件</span><br><span class=\"line\">hexo help             # 帮助</span><br></pre></td></tr></table></figure>\n<h2 id=\"8-常见问题\"><a href=\"#8-常见问题\" class=\"headerlink\" title=\"8 常见问题\"></a>8 常见问题</h2><p><strong>1、Hexo 设置显示文章摘要，首页不显示全文</strong></p>\n<p>Hexo 主页文章列表默认会显示文章全文，浏览时很不方便，可以在文章中插入 <code>&lt;!--more--&gt;</code> 进行分段。</p>\n<p>该代码前面的内容会作为摘要显示，而后面的内容会替换为 “Read More” 隐藏起来。</p>\n<p><img src=\"/2020/12/22/%E4%BD%BF%E7%94%A8hexo+github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/v2-45701cf120ca77e6733ad30b40666f33_720w.jpg\" alt=\"img\"></p>\n<p><strong>2、设置网站图标</strong></p>\n<p>进入 themes/主题 文件夹，打开 _config.yml 配置文件，找到 favicon 修改，一般格式为：<code>favicon: 图标地址</code>。（不同主题可能略有差别）</p>\n<p><strong>3、修改并部署后没有效果</strong></p>\n<p>使用 <code>hexo clean</code> 清理后重新部署。</p>\n<p><strong>4、开启 HTTPS 后访问网站显示连接不安全？</strong></p>\n<p>证书还未部署生效，等待一会儿，清除浏览器缓存再试。</p>\n<p><strong>5、Mac 安装 Hexo 报错无法安装</strong></p>\n<p>Mac 用户需要管理员权限运行，使用 <code>sudo npm install -g hexo-cli</code> 命令安装。</p>\n<p><strong>6、npm 下载速度慢，甚至完全没反应</strong></p>\n<p>使用 npm 安装程序等待很久也没反应，或者下载速度很慢，可以更换 npm 源为国内 npm 镜像。</p>\n<p>临时更换方法：在 npm 安装命令后面加上：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--registry https://registry.npm.taobao.org </span><br></pre></td></tr></table></figure>\n<h2 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h2><p>Hexo 是一种纯静态的博客，我们必须要在本地完成文章的编辑再部署到 GitHub 上，依赖于本地环境。不能像 WordPress 或 Typecho 那样的动态博客一样能直接在浏览器中完成撰文和发布。</p>"},{"title":"java基础知识整理","date":"2020-12-24T13:40:50.000Z","_content":"\n# 一、面向对象概念\n\n### 1. 类与对象\n\n##### 1.1 面向过程和面向对象\n\n 面向过程 （Procedural Programming）侧重流程\n 面向对象 （Object-Oriented Programming ）(OOP) 侧重功能\n\n<!--more-->\n\n##### 1.2 类和对象的概念、关系、组成\n\n- 概念：\n\n  - **类**：类是一个模板，它描述一组具有相 同属性和方法的对象\n  - **对象**：最小子系统，有属性和方法。\n\n- 关系：类是对象的抽象，对象是类的实例\n\n- 组成：\n\n  - 成员变量（Attributes）\n  - 构造方法（Constructor） 一个类可以有多个构 造方法\n  - 成员方法（Methods）\n\n##### 1.3 构造函数，对象的初始化、使用\n\n- 构造方法：在创建一个对象的时候，至少要调用一个构造方法。 构造方法的名称必须与类同名，一个类可以有多个构 造方法。\n\n- 对象初始化：\n\n  - 声明：声明一个对象，包括对象名称和对象类型。\n  - 实例化：使用关键字new来创建一个对象。\n  - 初始化：使用new创建对象时，会调用构造方法初始化对象\n\n- 对象的使用：\n\n  \n\n  ```cpp\n  /* 实例化对象 */ ObjectReference = new Constructor();\n  /* 访问成员变量 */ ObjectReference.variableName; \n  /* 访问成员方法 */ ObjectReference.MethodName();\n  ```\n\n### 2.  封装、继承、多态\n\n##### 2.1  封装 Encapsulation\n\n**好处：**\n 从设计上讲，为了实现模块化\n 从使用上讲，减少了复杂度\n 良好的封装能够减少代码的耦合\n\n**实现：**\n\n![img](java基础知识整理/3775272-55dfd603d6e9b95c.jpg)\n\n\n private: 只能被该类的对象访问。\n default: 即不加任何访问修饰符，只允许在同一个包中进行访问。\n protected: 只能被类本身的方法及子类访问，即使子类在不同的包中也可以访问。\n public： 不仅可以跨类访问，而且允许跨包（package）访问。\n\n\n\n一个源文件中只能有一个public类;\n 源文件的名称应该和public类的类名保持一致;\n 如果一个类定义在某个包中，那么package语句应该在源文件的首行;\n\n##### 2.2 继承 Heritage\n\n继承是一种类和类之间的关系，是一种“is a kind of”的关系。\n **好处：**\n 易于修改，容易扩展\n\n**实现：**\n\n\n\n```java\npublic class Parent{   … }  \npublic class Child extends Parent {   … } \n```\n\njava中的继承是单继承的，一个子类只能继承一个父类，使用extends关键字\n 子类继承了父类中所有非private成员方法（除了构造方法）和所有非private的成员变量。\n\n**super：**\n 对于构造函数而言，它只能够被调用，而不能被继承。\n 当我们需要调用父类的构造方法时，只需使用super()即可\n\n**重写（覆盖） override：**\n 子类中有和父类中可访问（可继承到子类）的同名&&同返 回类型&&同参数表的方法，就会重写（覆盖）从父类继承来 的方法。\n\n**重载 overload：**\n 被重载的方法必须改变参数列表(参 数个数或类型或顺序不一样)；\n 被重载的方法可以改变返回类型；\n 被重载的方法可以改变访问修饰符；\n final 关键字声明类可以把类定义为不能继承的，即最终类； 或者用于修饰方法，该方法不能被子类重写：\n\n**向上转型**\n 上转型对象可以操作被子类继承和重写的方法，但不能操作子类新增的成员变量和方法。\n\n##### 2.3 多态 Polymorphism\n\n**多态就是指一种名称定义不同的方法**\n\n**分类**\n 编译时多态 - 方法的重载（overload）\n 运行时多态 - 程序中定义的引用变量所指向的具体类型和通过该引用变量发出的方法调用在编程 时并不确定，而是在程序运行期间才确定，即一个引用变量倒底会指向哪个类的实 例对象，该引用变量发出的方法调用到底是哪个类中实现的方法，必须在由程序运 行期间才能决定。\n\n**实现方法（继承、接口）**\n 以继承实现多态 -向上转型、方法重写，以一般代表特殊，以特殊代替一般\n 以接口实现多态\n\n**如何使用**\n 可以在方法的参数中传入其父类（或接口）类型，在运行时会根据实际的运行时类型来 在方法中进行相应的操作。\n 多态用于返回值，可以在方法的返回值类型上使用其实际返回值的父（接口）类型，不关心返回值的实际类型。\n\n### 3.抽象类和抽象方法，静态方法和静态变量\n\n具体类：可以被实例化的类\n 抽象类：不能被实例化的类\n 定义抽象类的基本目的是提供合适的超类， 使其他类可以继承它，以实现共享。\n\n\n\n```csharp\npublic abstract class Form{   …   public abstract void draw(); } \n```\n\n### 4. 接口\n\n**定义**\n\n\n\n```php\n[public] interface 接口名 [extends 其他的接口名列表] {\n    [public static final] 数据类型 常量名 = 值;\n    [public abstract] 返回类型 方法名（形参列表）;\n}\n```\n\n**实现**\n\n\n\n```dart\n[访问修饰符] class 类名 [extends 超类名] implements 接口名列表 {\n        类体 \n}\n```\n\n**特性**\n 接口中可以含有变量，变量会被隐式的指定为 public static final（用 private 修饰 会报编译错误）\n 接口中的方法会被隐式的指定为 public abstract\n\n**功能**\n\n1. 接口提供了一组功能的命名集合\n2. 接口定义了不同类交互的标准\n    实现了“多继承” ；分离了方法的声明和方法的实现\n\n**接口 v.s. 类**\n 接口不能用于实例化对象。\n 接口没有构造方法。\n 接口中所有的方法必须是抽象方法。\n 接口只能包含static final成员变量。\n 接口不是被类继承了，而是要被类实现。\n 接口支持多继承。\n\n抽象类是对类抽象，而接口是对行为的抽象\n 抽象类是自底向上抽象而来的，接口是自顶向下设计出来的\n\n**接口名作为类型**\n 可以把使用实现了某一接口的类创建的对象的引用赋给该接口声明的接口变量， 那么该接口变量就可以调用被类实现的接口的方法。\n\n# 二、反射及动态代理\n\n反射 一般使用 Class.forName()方法;\n\n动态代理就是实现InvocationHandler 接口；\n\n要想理解反射的原理，首先要了解什么是类型信息。Java让我们在运行时识别对象和类的信息，主要有2种方式：一种是传统的RTTI，它假定我们在编译时已经知道了所有的类型信息；另一种是反射机制，它允许我们在运行时发现和使用类的信息。\n\n### 1、Class对象\n\n　　理解RTTI在Java中的工作原理，首先需要知道类型信息在运行时是如何表示的，这是由Class对象来完成的，它包含了与类有关的信息。Class对象就是用来创建所有“常规”对象的，Java使用Class对象来执行RTTI，即使你正在执行的是类似类型转换这样的操作。\n\n　　每个类都会产生一个对应的Class对象，也就是保存在.class文件。所有类都是在对其第一次使用时，动态加载到JVM的，当程序创建一个对类的静态成员的引用时，就会加载这个类。Class对象仅在需要的时候才会加载，static初始化是在类加载时进行的。 \n\n```\npublic class TestMain {\n    public static void main(String[] args) {\n        System.out.println(XYZ.name);\n    }\n}\n\nclass XYZ {\n    public static String name = \"luoxn28\";\n\n    static {\n        System.out.println(\"xyz静态块\");\n    }\n\n    public XYZ() {\n        System.out.println(\"xyz构造了\");\n    }\n}\n```\n\n输出结果为：\n\n![img](java基础知识整理/772134-20160720003120122-551868817.png)\n\n　　类加载器首先会检查这个类的Class对象是否已被加载过，如果尚未加载，默认的类加载器就会根据类名查找对应的.class文件。\n\n　　想在运行时使用类型信息，必须获取对象(比如类Base对象)的Class对象的引用，使用功能Class.forName(“Base”)可以实现该目的，或者使用base.class。注意，有一点很有趣，使用功能”.class”来创建Class对象的引用时，不会自动初始化该Class对象，使用forName()会自动初始化该Class对象。为了使用类而做的准备工作一般有以下3个步骤：\n\n- 加载：由类加载器完成，找到对应的字节码，创建一个Class对象\n- 链接：验证类中的字节码，为静态域分配空间\n- 初始化：如果该类有超类，则对其初始化，执行静态初始化器和静态初始化块 \n\n```\npublic class Base {\n    static int num = 1;\n    \n    static {\n        System.out.println(\"Base \" + num);\n    }\n}\npublic class Main {\n    public static void main(String[] args) {\n        // 不会初始化静态块\n        Class clazz1 = Base.class;\n        System.out.println(\"------\");\n        // 会初始化\n        Class clazz2 = Class.forName(\"zzz.Base\");\n    }\n}\n```\n\n \n\n### 2、类型转换前先做检查\n\n　　编译器将检查类型向下转型是否合法，如果不合法将抛出异常。向下转换类型前，可以使用instanceof判断。 \n\n[![复制代码](java基础知识整理/copycode.gif)](javascript:void(0);)\n\n```\nclass Base { }\nclass Derived extends Base { }\n\npublic class Main {\n    public static void main(String[] args) {\n        Base base = new Derived();\n        if (base instanceof Derived) {\n            // 这里可以向下转换了\n            System.out.println(\"ok\");\n        }\n        else {\n            System.out.println(\"not ok\");\n        }\n    }\n}\n```\n\n \n\n### 3、反射：运行时类信息\n\n　　如果不知道某个对象的确切类型，RTTI可以告诉你，但是有一个前提：这个类型在编译时必须已知，这样才能使用RTTI来识别它。Class类与java.lang.reflect类库一起对反射进行了支持，该类库包含Field、Method和Constructor类，这些类的对象由JVM在启动时创建，用以表示未知类里对应的成员。这样的话就可以使用Contructor创建新的对象，用get()和set()方法获取和修改类中与Field对象关联的字段，用invoke()方法调用与Method对象关联的方法。另外，还可以调用getFields()、getMethods()和getConstructors()等许多便利的方法，以返回表示字段、方法、以及构造器对象的数组，这样，对象信息可以在运行时被完全确定下来，而在编译时不需要知道关于类的任何事情。\n\n　　反射机制并没有什么神奇之处，当通过反射与一个未知类型的对象打交道时，JVM只是简单地检查这个对象，看它属于哪个特定的类。因此，那个类的`.class`对于JVM来说必须是可获取的，要么在本地机器上，要么从网络获取。所以对于RTTI和反射之间的真正区别只在于：\n\n- RTTI，编译器在编译时打开和检查.class文件\n- 反射，运行时打开和检查.class文件 \n\n```\npublic class Person implements Serializable {\n\n    private String name;\n    private int age;\n// get/set方法\n}\npublic static void main(String[] args) {\n    Person person = new Person(\"luoxn28\", 23);\n    Class clazz = person.getClass();\n\n    Field[] fields = clazz.getDeclaredFields();\n    for (Field field : fields) {\n        String key = field.getName();\n        PropertyDescriptor descriptor = new PropertyDescriptor(key, clazz);\n        Method method = descriptor.getReadMethod();\n        Object value = method.invoke(person);\n\n        System.out.println(key + \":\" + value);\n\n    }\n}\n```\n\n　　以上通过getReadMethod()方法调用类的get函数，可以通过getWriteMethod()方法来调用类的set方法。通常来说，我们不需要使用反射工具，但是它们在创建动态代码会更有用，反射在Java中用来支持其他特性的，例如对象的序列化和JavaBean等。\n\n### 4、动态代理\n\n　　代理模式是为了提供额外或不同的操作，而插入的用来替代”实际”对象的对象，这些操作涉及到与”实际”对象的通信，因此代理通常充当中间人角色。Java的动态代理比代理的思想更前进了一步，它可以动态地创建并代理并动态地处理对所代理方法的调用。在动态代理上所做的所有调用都会被重定向到单一的**调用处理器**上，它的工作是揭示调用的类型并确定相应的策略。 \n\n \n\n**学习Spring的时候，我们知道Spring主要有两大思想，一个是IoC，另一个就是AOP，对于IoC，它利用的是反射机制，依赖注入就不用多说了，而对于Spring的核心AOP来说，使用了动态代理，其实底层也是反射。我们不但要知道怎么通过AOP来满足的我们的功能，我们更需要学习的是其底层是怎么样的一个原理，而AOP的原理就是java的动态代理机制，所以本篇随笔就是对java的动态机制进行一个回顾。**\n\n在java的动态代理机制中，有两个重要的类或接口，一个是 InvocationHandler(Interface)、另一个则是 Proxy(Class)，这一个类和接口是实现我们动态代理所必须用到的。首先我们先来看看java的API帮助文档是怎么样对这两个类进行描述的：\n\nInvocationHandler:\n\n```\nInvocationHandler is the interface implemented by the invocation handler of a proxy instance. \n\nEach proxy instance has an associated invocation handler. When a method is invoked on a proxy instance, the method invocation is encoded and dispatched to the invoke method of its invocation handler.\n```\n\n每一个动态代理类都必须要实现InvocationHandler这个接口，并且每个代理类的实例都关联到了一个handler，当我们通过代理对象调用一个方法的时候，这个方法的调用就会被转发为由InvocationHandler这个接口的 invoke 方法来进行调用。我们来看看InvocationHandler这个接口的唯一一个方法 invoke 方法：\n\n```\nObject invoke(Object proxy, Method method, Object[] args) throws Throwable\n```\n\n我们看到这个方法一共接受三个参数，那么这三个参数分别代表什么呢？\n\n```\nObject invoke(Object proxy, Method method, Object[] args) throws Throwable\n\nproxy:　　指代我们所代理的那个真实对象\nmethod:　　指代的是我们所要调用真实对象的某个方法的Method对象\nargs:　　指代的是调用真实对象某个方法时接受的参数\n```\n\n如果不是很明白，等下通过一个实例会对这几个参数进行更深的讲解。\n\n接下来我们来看看Proxy这个类：\n\n```\nProxy provides static methods for creating dynamic proxy classes and instances, and it is also the superclass of all dynamic proxy classes created by those methods. \n```\n\nProxy这个类的作用就是用来动态创建一个代理对象的类，它提供了许多的方法，但是我们用的最多的就是 newProxyInstance 这个方法：\n\n```\npublic static Object newProxyInstance(ClassLoader loader, Class<?>[] interfaces,  InvocationHandler h)  throws IllegalArgumentException\nReturns an instance of a proxy class for the specified interfaces that dispatches method invocations to the specified invocation handler.\n```\n\n这个方法的作用就是得到一个动态的代理对象，其接收三个参数，我们来看看这三个参数所代表的含义： \n\n```\npublic static Object newProxyInstance(ClassLoader loader, Class<?>[] interfaces, InvocationHandler h) throws IllegalArgumentException\n\nloader:　　一个ClassLoader对象，定义了由哪个ClassLoader对象来对生成的代理对象进行加载\n\ninterfaces:　　一个Interface对象的数组，表示的是我将要给我需要代理的对象提供一组什么接口，如果我提供了一组接口给它，那么这个代理对象就宣称实现了该接口(多态)，这样我就能调用这组接口中的方法了\n\nh:　　一个InvocationHandler对象，表示的是当我这个动态代理对象在调用方法的时候，会关联到哪一个InvocationHandler对象上\n```\n\n好了，在介绍完这两个接口(类)以后，我们来通过一个实例来看看我们的动态代理模式是什么样的：\n\n首先我们定义了一个Subject类型的接口，为其声明了两个方法：\n\n```\npublic interface Subject\n{\n    public void rent();\n    \n    public void hello(String str);\n}\n```\n\n接着，定义了一个类来实现这个接口，这个类就是我们的真实对象，RealSubject类：  \n\n下一步，我们就要定义一个动态代理类了，前面说个，每一个动态代理类都必须要实现 InvocationHandler 这个接口，因此我们这个动态代理类也不例外： \n\n```\npublic class DynamicProxy implements InvocationHandler\n{\n    //　这个就是我们要代理的真实对象\n    private Object subject;\n    \n    //    构造方法，给我们要代理的真实对象赋初值\n    public DynamicProxy(Object subject)\n    {\n        this.subject = subject;\n    }\n    \n    @Override\n    public Object invoke(Object object, Method method, Object[] args)\n            throws Throwable\n    {\n        //　　在代理真实对象前我们可以添加一些自己的操作\n        System.out.println(\"before invoke\");\n        \n        System.out.println(\"Method:\" + method);\n        \n        //    当代理对象调用真实对象的方法时，其会自动的跳转到代理对象关联的handler对象的invoke方法来进行调用\n        method.invoke(subject, args);\n        \n        //　　在代理真实对象后我们也可以添加一些自己的操作\n        System.out.println(\"after invoke\");\n        \n        return null;\n    }\n\n}[![复制代码](java基础知识整理/copycode.gif)](javascript:void(0);\n```\n\n \n\n最后，来看看我们的Client类： \n\n```\npublic class Client\n{\n    public static void main(String[] args)\n    {\n        //    我们要代理的真实对象\n        Subject realSubject = new RealSubject();\n\n        //    我们要代理哪个真实对象，就将该对象传进去，最后是通过该真实对象来调用其方法的\n        InvocationHandler handler = new DynamicProxy(realSubject);\n\n        /*\n         * 通过Proxy的newProxyInstance方法来创建我们的代理对象，我们来看看其三个参数\n         * 第一个参数 handler.getClass().getClassLoader() ，我们这里使用handler这个类的ClassLoader对象来加载我们的代理对象\n         * 第二个参数realSubject.getClass().getInterfaces()，我们这里为代理对象提供的接口是真实对象所实行的接口，表示我要代理的是该真实对象，这样我就能调用这组接口中的方法了\n         * 第三个参数handler， 我们这里将这个代理对象关联到了上方的 InvocationHandler 这个对象上\n         */\n        Subject subject = (Subject)Proxy.newProxyInstance(handler.getClass().getClassLoader(), realSubject\n                .getClass().getInterfaces(), handler);\n        \n        System.out.println(subject.getClass().getName());\n        subject.rent();\n        subject.hello(\"world\");\n    }\n}\n```\n\n我们先来看看控制台的输出： \n\n```\n$Proxy0\n\nbefore invoke\nMethod:public abstract void com.xiaoluo.dynamicproxy.Subject.rent()\nI want to rent my house\nafter invoke\n\nbefore invoke\nMethod:public abstract void com.xiaoluo.dynamicproxy.Subject.hello(java.lang.String)\nhello: world\nafter invoke\n```\n\n当调试的时候，如果把鼠标放在subject 上面，会自动的执行toString()方法，也就是\n\n```\nbefore invoke\nMethod:public abstract void com.xiaoluo.dynamicproxy.Subject.toString()\n \nafter invoke\n```\n\n \n\n我们首先来看看 $Proxy0 这东西，我们看到，这个东西是由 System.out.println(subject.getClass().getName()); 这条语句打印出来的，那么为什么我们返回的这个代理对象的类名是这样的呢？\n\n```\nSubject subject = (Subject)Proxy.newProxyInstance(handler.getClass().getClassLoader(), realSubject\n                .getClass().getInterfaces(), handler);\n```\n\n可能我以为返回的这个代理对象会是Subject类型的对象，或者是InvocationHandler的对象，结果却不是**，首先我们解释一下为什么我们这里可以将其转化为Subject类型的对象？原因就是在newProxyInstance这个方法的第二个参数上，我们给这个代理对象提供了一组什么接口，那么我这个代理对象就会实现了这组接口，这个时候我们当然可以将这个代理对象强制类型转化为这组接口中的任意一个，因为这里的接口是Subject类型，所以就可以将其转化为Subject类型了**。\n\n**同时我们一定要记住，通过 Proxy.newProxyInstance 创建的代理对象是在jvm运行时动态生成的一个对象，它并不是我们的InvocationHandler类型，也不是我们定义的那组接口的类型，而是在运行是动态生成的一个对象，并且命名方式都是这样的形式，以$开头，proxy为中，最后一个数字表示对象的标号**。\n\n接着我们来看看这两句 \n\nsubject.rent();\nsubject.hello(\"world\");\n\n这里是通过代理对象来调用实现的那种接口中的方法，这个时候程序就会跳转到由这个代理对象关联到的 handler 中的invoke方法去执行，而我们的这个 handler 对象又接受了一个 RealSubject类型的参数，表示我要代理的就是这个真实对象，所以此时就会调用 handler 中的invoke方法去执行： \n\n```\npublic Object invoke(Object object, Method method, Object[] args)\n            throws Throwable\n    {\n        //　　在代理真实对象前我们可以添加一些自己的操作\n        System.out.println(\"before invoke\");\n        \n        System.out.println(\"Method:\" + method);\n        \n        //    当代理对象调用真实对象的方法时，其会自动的跳转到代理对象关联的handler对象的invoke方法来进行调用\n        method.invoke(subject, args);\n        \n        //　　在代理真实对象后我们也可以添加一些自己的操作\n        System.out.println(\"after invoke\");\n        \n        return null;\n    }\n```\n\n我们看到，在真正通过代理对象来调用真实对象的方法的时候，我们可以在该方法前后添加自己的一些操作，同时我们看到我们的这个 method 对象是这样的：\n\n```\npublic abstract void com.xiaoluo.dynamicproxy.Subject.rent()\n\npublic abstract void com.xiaoluo.dynamicproxy.Subject.hello(java.lang.String)\n```\n\n正好就是我们的Subject接口中的两个方法，这也就证明了当我通过代理对象来调用方法的时候，起实际就是委托由其关联到的 handler 对象的invoke方法中来调用，并不是自己来真实调用，而是通过代理的方式来调用的。\n\n这就是我们的java动态代理机制\n\n# 三、java集合\n\n### 1、java中的集合类结构\n\n![集合结构](java基础知识整理/20160624152602394)\n\n### 2、List、Set和Map：\n\n​    List是有序的集合，Set是无序的集合。Map是无序的键值对。\n\n#### 1.集合和数组的区别：\n\n![这里写图片描述](java基础知识整理/20180803193134355)\n\n#### 2.Collection集合的方法：\n\n![这里写图片描述](java基础知识整理/20180803193423722)\n\n### 3、HashMap详解：\n\n​    HashMap有两个参数影响其性能：初始容量和加载因子。默认初始容量是16，加载因子是0.75。容量是哈希表中桶(Entry数组)的数量，初始容量只是哈希表在创建时的容量。加载因子是哈希表在其容量自动增加之前可以达到多满的一种尺度。当哈希表中的条目数超出了加载因子与当前容量的乘积时，通过调用 rehash 方法将容量翻倍。\n\n### 4、ArrayList和Vector对比：\n\n​    都是List的实现类。他们都是有序集合，即存储在这两个集合中的元素的位置都是有顺序的，相当于一种动态的数组，我们以后可以按位置索引号取出某个元素\n​    Vector是线程安全的，也就是说是它的方法之间是线程同步的，而ArrayList是线程序不安全的，它的方法之间是线程不同步的。如果只有一个线程会访问到集合，那最好是使用ArrayList，因为它不考虑线程安全，效率会高些；如果有多个线程会访问到集合，那最好是使用Vector，因为不需要我们自己再去考虑和编写线程安全的代码\n\n### 5、ArrayList和LinkedList对比：\n\n​    1.ArrayList是实现了基于动态数组的数据结构，LinkedList基于链表的数据结构。\n​    2.对于随机访问get和set，ArrayList觉得优于LinkedList，因为LinkedList要移动指针。\n​    3.对于新增和删除操作add和remove，LinedList比较占优势，因为ArrayList要移动数据。\n\n### 6、HashSet和TreeSet对比：\n\n​    HashSet比TreeSet的性能要好，因为TreeSet需要额外的红黑树算法来维护集合的次序。所以只有当需要保持排序的Set时候，才会使用TreeSet，否则都应该使用HashSet。\n\n### 7、HashSet和HashMap对比：\n\n​    都是采用Hash算法来决定元素的存储位置，并通过hash算法来增加集合大小的。其中最大的区别就是，HashSet实现的Set接口，他不允许有重复的值。HashMap实现的是Map接口，里面存储的是键值对，map中不允许存在重复的key。\n\n### 8、HashMap和HashTable对比：\n\n​    HashTable是一个线程安全的Map实现，但HashMap是线程不安全的实现，所以HashMap比HashTable的性能高一些；但是如果有多个线程访问同一个Map对象时候，应该使用HashTable。\n​    HashTable不允许使用null作为key和value，如果视图把null值放入HashTable中会引发NullPointerException异常，但是HashMap可以使用null作为key或value。null可以作为键，这样的键只有一个；可以有一个或多个键所对应的值为null。当get()方法返回null值时，即可以表示 HashMap中没有该键，也可以表示该键所对应的值为null。因此，在HashMap中不能由get()方法来判断HashMap中是否存在某个键，而应该用containsKey()方法来判断。\n\n## 各集合对比：\n\n![集合对比](java基础知识整理/20160624152704286)","source":"_posts/java基础知识整理.md","raw":"---\ntitle: java基础知识整理\ndate: 2020-12-24 21:40:50\ntags:\n- java\n- 随笔\ncategories:\n - 复习\n---\n\n# 一、面向对象概念\n\n### 1. 类与对象\n\n##### 1.1 面向过程和面向对象\n\n 面向过程 （Procedural Programming）侧重流程\n 面向对象 （Object-Oriented Programming ）(OOP) 侧重功能\n\n<!--more-->\n\n##### 1.2 类和对象的概念、关系、组成\n\n- 概念：\n\n  - **类**：类是一个模板，它描述一组具有相 同属性和方法的对象\n  - **对象**：最小子系统，有属性和方法。\n\n- 关系：类是对象的抽象，对象是类的实例\n\n- 组成：\n\n  - 成员变量（Attributes）\n  - 构造方法（Constructor） 一个类可以有多个构 造方法\n  - 成员方法（Methods）\n\n##### 1.3 构造函数，对象的初始化、使用\n\n- 构造方法：在创建一个对象的时候，至少要调用一个构造方法。 构造方法的名称必须与类同名，一个类可以有多个构 造方法。\n\n- 对象初始化：\n\n  - 声明：声明一个对象，包括对象名称和对象类型。\n  - 实例化：使用关键字new来创建一个对象。\n  - 初始化：使用new创建对象时，会调用构造方法初始化对象\n\n- 对象的使用：\n\n  \n\n  ```cpp\n  /* 实例化对象 */ ObjectReference = new Constructor();\n  /* 访问成员变量 */ ObjectReference.variableName; \n  /* 访问成员方法 */ ObjectReference.MethodName();\n  ```\n\n### 2.  封装、继承、多态\n\n##### 2.1  封装 Encapsulation\n\n**好处：**\n 从设计上讲，为了实现模块化\n 从使用上讲，减少了复杂度\n 良好的封装能够减少代码的耦合\n\n**实现：**\n\n![img](java基础知识整理/3775272-55dfd603d6e9b95c.jpg)\n\n\n private: 只能被该类的对象访问。\n default: 即不加任何访问修饰符，只允许在同一个包中进行访问。\n protected: 只能被类本身的方法及子类访问，即使子类在不同的包中也可以访问。\n public： 不仅可以跨类访问，而且允许跨包（package）访问。\n\n\n\n一个源文件中只能有一个public类;\n 源文件的名称应该和public类的类名保持一致;\n 如果一个类定义在某个包中，那么package语句应该在源文件的首行;\n\n##### 2.2 继承 Heritage\n\n继承是一种类和类之间的关系，是一种“is a kind of”的关系。\n **好处：**\n 易于修改，容易扩展\n\n**实现：**\n\n\n\n```java\npublic class Parent{   … }  \npublic class Child extends Parent {   … } \n```\n\njava中的继承是单继承的，一个子类只能继承一个父类，使用extends关键字\n 子类继承了父类中所有非private成员方法（除了构造方法）和所有非private的成员变量。\n\n**super：**\n 对于构造函数而言，它只能够被调用，而不能被继承。\n 当我们需要调用父类的构造方法时，只需使用super()即可\n\n**重写（覆盖） override：**\n 子类中有和父类中可访问（可继承到子类）的同名&&同返 回类型&&同参数表的方法，就会重写（覆盖）从父类继承来 的方法。\n\n**重载 overload：**\n 被重载的方法必须改变参数列表(参 数个数或类型或顺序不一样)；\n 被重载的方法可以改变返回类型；\n 被重载的方法可以改变访问修饰符；\n final 关键字声明类可以把类定义为不能继承的，即最终类； 或者用于修饰方法，该方法不能被子类重写：\n\n**向上转型**\n 上转型对象可以操作被子类继承和重写的方法，但不能操作子类新增的成员变量和方法。\n\n##### 2.3 多态 Polymorphism\n\n**多态就是指一种名称定义不同的方法**\n\n**分类**\n 编译时多态 - 方法的重载（overload）\n 运行时多态 - 程序中定义的引用变量所指向的具体类型和通过该引用变量发出的方法调用在编程 时并不确定，而是在程序运行期间才确定，即一个引用变量倒底会指向哪个类的实 例对象，该引用变量发出的方法调用到底是哪个类中实现的方法，必须在由程序运 行期间才能决定。\n\n**实现方法（继承、接口）**\n 以继承实现多态 -向上转型、方法重写，以一般代表特殊，以特殊代替一般\n 以接口实现多态\n\n**如何使用**\n 可以在方法的参数中传入其父类（或接口）类型，在运行时会根据实际的运行时类型来 在方法中进行相应的操作。\n 多态用于返回值，可以在方法的返回值类型上使用其实际返回值的父（接口）类型，不关心返回值的实际类型。\n\n### 3.抽象类和抽象方法，静态方法和静态变量\n\n具体类：可以被实例化的类\n 抽象类：不能被实例化的类\n 定义抽象类的基本目的是提供合适的超类， 使其他类可以继承它，以实现共享。\n\n\n\n```csharp\npublic abstract class Form{   …   public abstract void draw(); } \n```\n\n### 4. 接口\n\n**定义**\n\n\n\n```php\n[public] interface 接口名 [extends 其他的接口名列表] {\n    [public static final] 数据类型 常量名 = 值;\n    [public abstract] 返回类型 方法名（形参列表）;\n}\n```\n\n**实现**\n\n\n\n```dart\n[访问修饰符] class 类名 [extends 超类名] implements 接口名列表 {\n        类体 \n}\n```\n\n**特性**\n 接口中可以含有变量，变量会被隐式的指定为 public static final（用 private 修饰 会报编译错误）\n 接口中的方法会被隐式的指定为 public abstract\n\n**功能**\n\n1. 接口提供了一组功能的命名集合\n2. 接口定义了不同类交互的标准\n    实现了“多继承” ；分离了方法的声明和方法的实现\n\n**接口 v.s. 类**\n 接口不能用于实例化对象。\n 接口没有构造方法。\n 接口中所有的方法必须是抽象方法。\n 接口只能包含static final成员变量。\n 接口不是被类继承了，而是要被类实现。\n 接口支持多继承。\n\n抽象类是对类抽象，而接口是对行为的抽象\n 抽象类是自底向上抽象而来的，接口是自顶向下设计出来的\n\n**接口名作为类型**\n 可以把使用实现了某一接口的类创建的对象的引用赋给该接口声明的接口变量， 那么该接口变量就可以调用被类实现的接口的方法。\n\n# 二、反射及动态代理\n\n反射 一般使用 Class.forName()方法;\n\n动态代理就是实现InvocationHandler 接口；\n\n要想理解反射的原理，首先要了解什么是类型信息。Java让我们在运行时识别对象和类的信息，主要有2种方式：一种是传统的RTTI，它假定我们在编译时已经知道了所有的类型信息；另一种是反射机制，它允许我们在运行时发现和使用类的信息。\n\n### 1、Class对象\n\n　　理解RTTI在Java中的工作原理，首先需要知道类型信息在运行时是如何表示的，这是由Class对象来完成的，它包含了与类有关的信息。Class对象就是用来创建所有“常规”对象的，Java使用Class对象来执行RTTI，即使你正在执行的是类似类型转换这样的操作。\n\n　　每个类都会产生一个对应的Class对象，也就是保存在.class文件。所有类都是在对其第一次使用时，动态加载到JVM的，当程序创建一个对类的静态成员的引用时，就会加载这个类。Class对象仅在需要的时候才会加载，static初始化是在类加载时进行的。 \n\n```\npublic class TestMain {\n    public static void main(String[] args) {\n        System.out.println(XYZ.name);\n    }\n}\n\nclass XYZ {\n    public static String name = \"luoxn28\";\n\n    static {\n        System.out.println(\"xyz静态块\");\n    }\n\n    public XYZ() {\n        System.out.println(\"xyz构造了\");\n    }\n}\n```\n\n输出结果为：\n\n![img](java基础知识整理/772134-20160720003120122-551868817.png)\n\n　　类加载器首先会检查这个类的Class对象是否已被加载过，如果尚未加载，默认的类加载器就会根据类名查找对应的.class文件。\n\n　　想在运行时使用类型信息，必须获取对象(比如类Base对象)的Class对象的引用，使用功能Class.forName(“Base”)可以实现该目的，或者使用base.class。注意，有一点很有趣，使用功能”.class”来创建Class对象的引用时，不会自动初始化该Class对象，使用forName()会自动初始化该Class对象。为了使用类而做的准备工作一般有以下3个步骤：\n\n- 加载：由类加载器完成，找到对应的字节码，创建一个Class对象\n- 链接：验证类中的字节码，为静态域分配空间\n- 初始化：如果该类有超类，则对其初始化，执行静态初始化器和静态初始化块 \n\n```\npublic class Base {\n    static int num = 1;\n    \n    static {\n        System.out.println(\"Base \" + num);\n    }\n}\npublic class Main {\n    public static void main(String[] args) {\n        // 不会初始化静态块\n        Class clazz1 = Base.class;\n        System.out.println(\"------\");\n        // 会初始化\n        Class clazz2 = Class.forName(\"zzz.Base\");\n    }\n}\n```\n\n \n\n### 2、类型转换前先做检查\n\n　　编译器将检查类型向下转型是否合法，如果不合法将抛出异常。向下转换类型前，可以使用instanceof判断。 \n\n[![复制代码](java基础知识整理/copycode.gif)](javascript:void(0);)\n\n```\nclass Base { }\nclass Derived extends Base { }\n\npublic class Main {\n    public static void main(String[] args) {\n        Base base = new Derived();\n        if (base instanceof Derived) {\n            // 这里可以向下转换了\n            System.out.println(\"ok\");\n        }\n        else {\n            System.out.println(\"not ok\");\n        }\n    }\n}\n```\n\n \n\n### 3、反射：运行时类信息\n\n　　如果不知道某个对象的确切类型，RTTI可以告诉你，但是有一个前提：这个类型在编译时必须已知，这样才能使用RTTI来识别它。Class类与java.lang.reflect类库一起对反射进行了支持，该类库包含Field、Method和Constructor类，这些类的对象由JVM在启动时创建，用以表示未知类里对应的成员。这样的话就可以使用Contructor创建新的对象，用get()和set()方法获取和修改类中与Field对象关联的字段，用invoke()方法调用与Method对象关联的方法。另外，还可以调用getFields()、getMethods()和getConstructors()等许多便利的方法，以返回表示字段、方法、以及构造器对象的数组，这样，对象信息可以在运行时被完全确定下来，而在编译时不需要知道关于类的任何事情。\n\n　　反射机制并没有什么神奇之处，当通过反射与一个未知类型的对象打交道时，JVM只是简单地检查这个对象，看它属于哪个特定的类。因此，那个类的`.class`对于JVM来说必须是可获取的，要么在本地机器上，要么从网络获取。所以对于RTTI和反射之间的真正区别只在于：\n\n- RTTI，编译器在编译时打开和检查.class文件\n- 反射，运行时打开和检查.class文件 \n\n```\npublic class Person implements Serializable {\n\n    private String name;\n    private int age;\n// get/set方法\n}\npublic static void main(String[] args) {\n    Person person = new Person(\"luoxn28\", 23);\n    Class clazz = person.getClass();\n\n    Field[] fields = clazz.getDeclaredFields();\n    for (Field field : fields) {\n        String key = field.getName();\n        PropertyDescriptor descriptor = new PropertyDescriptor(key, clazz);\n        Method method = descriptor.getReadMethod();\n        Object value = method.invoke(person);\n\n        System.out.println(key + \":\" + value);\n\n    }\n}\n```\n\n　　以上通过getReadMethod()方法调用类的get函数，可以通过getWriteMethod()方法来调用类的set方法。通常来说，我们不需要使用反射工具，但是它们在创建动态代码会更有用，反射在Java中用来支持其他特性的，例如对象的序列化和JavaBean等。\n\n### 4、动态代理\n\n　　代理模式是为了提供额外或不同的操作，而插入的用来替代”实际”对象的对象，这些操作涉及到与”实际”对象的通信，因此代理通常充当中间人角色。Java的动态代理比代理的思想更前进了一步，它可以动态地创建并代理并动态地处理对所代理方法的调用。在动态代理上所做的所有调用都会被重定向到单一的**调用处理器**上，它的工作是揭示调用的类型并确定相应的策略。 \n\n \n\n**学习Spring的时候，我们知道Spring主要有两大思想，一个是IoC，另一个就是AOP，对于IoC，它利用的是反射机制，依赖注入就不用多说了，而对于Spring的核心AOP来说，使用了动态代理，其实底层也是反射。我们不但要知道怎么通过AOP来满足的我们的功能，我们更需要学习的是其底层是怎么样的一个原理，而AOP的原理就是java的动态代理机制，所以本篇随笔就是对java的动态机制进行一个回顾。**\n\n在java的动态代理机制中，有两个重要的类或接口，一个是 InvocationHandler(Interface)、另一个则是 Proxy(Class)，这一个类和接口是实现我们动态代理所必须用到的。首先我们先来看看java的API帮助文档是怎么样对这两个类进行描述的：\n\nInvocationHandler:\n\n```\nInvocationHandler is the interface implemented by the invocation handler of a proxy instance. \n\nEach proxy instance has an associated invocation handler. When a method is invoked on a proxy instance, the method invocation is encoded and dispatched to the invoke method of its invocation handler.\n```\n\n每一个动态代理类都必须要实现InvocationHandler这个接口，并且每个代理类的实例都关联到了一个handler，当我们通过代理对象调用一个方法的时候，这个方法的调用就会被转发为由InvocationHandler这个接口的 invoke 方法来进行调用。我们来看看InvocationHandler这个接口的唯一一个方法 invoke 方法：\n\n```\nObject invoke(Object proxy, Method method, Object[] args) throws Throwable\n```\n\n我们看到这个方法一共接受三个参数，那么这三个参数分别代表什么呢？\n\n```\nObject invoke(Object proxy, Method method, Object[] args) throws Throwable\n\nproxy:　　指代我们所代理的那个真实对象\nmethod:　　指代的是我们所要调用真实对象的某个方法的Method对象\nargs:　　指代的是调用真实对象某个方法时接受的参数\n```\n\n如果不是很明白，等下通过一个实例会对这几个参数进行更深的讲解。\n\n接下来我们来看看Proxy这个类：\n\n```\nProxy provides static methods for creating dynamic proxy classes and instances, and it is also the superclass of all dynamic proxy classes created by those methods. \n```\n\nProxy这个类的作用就是用来动态创建一个代理对象的类，它提供了许多的方法，但是我们用的最多的就是 newProxyInstance 这个方法：\n\n```\npublic static Object newProxyInstance(ClassLoader loader, Class<?>[] interfaces,  InvocationHandler h)  throws IllegalArgumentException\nReturns an instance of a proxy class for the specified interfaces that dispatches method invocations to the specified invocation handler.\n```\n\n这个方法的作用就是得到一个动态的代理对象，其接收三个参数，我们来看看这三个参数所代表的含义： \n\n```\npublic static Object newProxyInstance(ClassLoader loader, Class<?>[] interfaces, InvocationHandler h) throws IllegalArgumentException\n\nloader:　　一个ClassLoader对象，定义了由哪个ClassLoader对象来对生成的代理对象进行加载\n\ninterfaces:　　一个Interface对象的数组，表示的是我将要给我需要代理的对象提供一组什么接口，如果我提供了一组接口给它，那么这个代理对象就宣称实现了该接口(多态)，这样我就能调用这组接口中的方法了\n\nh:　　一个InvocationHandler对象，表示的是当我这个动态代理对象在调用方法的时候，会关联到哪一个InvocationHandler对象上\n```\n\n好了，在介绍完这两个接口(类)以后，我们来通过一个实例来看看我们的动态代理模式是什么样的：\n\n首先我们定义了一个Subject类型的接口，为其声明了两个方法：\n\n```\npublic interface Subject\n{\n    public void rent();\n    \n    public void hello(String str);\n}\n```\n\n接着，定义了一个类来实现这个接口，这个类就是我们的真实对象，RealSubject类：  \n\n下一步，我们就要定义一个动态代理类了，前面说个，每一个动态代理类都必须要实现 InvocationHandler 这个接口，因此我们这个动态代理类也不例外： \n\n```\npublic class DynamicProxy implements InvocationHandler\n{\n    //　这个就是我们要代理的真实对象\n    private Object subject;\n    \n    //    构造方法，给我们要代理的真实对象赋初值\n    public DynamicProxy(Object subject)\n    {\n        this.subject = subject;\n    }\n    \n    @Override\n    public Object invoke(Object object, Method method, Object[] args)\n            throws Throwable\n    {\n        //　　在代理真实对象前我们可以添加一些自己的操作\n        System.out.println(\"before invoke\");\n        \n        System.out.println(\"Method:\" + method);\n        \n        //    当代理对象调用真实对象的方法时，其会自动的跳转到代理对象关联的handler对象的invoke方法来进行调用\n        method.invoke(subject, args);\n        \n        //　　在代理真实对象后我们也可以添加一些自己的操作\n        System.out.println(\"after invoke\");\n        \n        return null;\n    }\n\n}[![复制代码](java基础知识整理/copycode.gif)](javascript:void(0);\n```\n\n \n\n最后，来看看我们的Client类： \n\n```\npublic class Client\n{\n    public static void main(String[] args)\n    {\n        //    我们要代理的真实对象\n        Subject realSubject = new RealSubject();\n\n        //    我们要代理哪个真实对象，就将该对象传进去，最后是通过该真实对象来调用其方法的\n        InvocationHandler handler = new DynamicProxy(realSubject);\n\n        /*\n         * 通过Proxy的newProxyInstance方法来创建我们的代理对象，我们来看看其三个参数\n         * 第一个参数 handler.getClass().getClassLoader() ，我们这里使用handler这个类的ClassLoader对象来加载我们的代理对象\n         * 第二个参数realSubject.getClass().getInterfaces()，我们这里为代理对象提供的接口是真实对象所实行的接口，表示我要代理的是该真实对象，这样我就能调用这组接口中的方法了\n         * 第三个参数handler， 我们这里将这个代理对象关联到了上方的 InvocationHandler 这个对象上\n         */\n        Subject subject = (Subject)Proxy.newProxyInstance(handler.getClass().getClassLoader(), realSubject\n                .getClass().getInterfaces(), handler);\n        \n        System.out.println(subject.getClass().getName());\n        subject.rent();\n        subject.hello(\"world\");\n    }\n}\n```\n\n我们先来看看控制台的输出： \n\n```\n$Proxy0\n\nbefore invoke\nMethod:public abstract void com.xiaoluo.dynamicproxy.Subject.rent()\nI want to rent my house\nafter invoke\n\nbefore invoke\nMethod:public abstract void com.xiaoluo.dynamicproxy.Subject.hello(java.lang.String)\nhello: world\nafter invoke\n```\n\n当调试的时候，如果把鼠标放在subject 上面，会自动的执行toString()方法，也就是\n\n```\nbefore invoke\nMethod:public abstract void com.xiaoluo.dynamicproxy.Subject.toString()\n \nafter invoke\n```\n\n \n\n我们首先来看看 $Proxy0 这东西，我们看到，这个东西是由 System.out.println(subject.getClass().getName()); 这条语句打印出来的，那么为什么我们返回的这个代理对象的类名是这样的呢？\n\n```\nSubject subject = (Subject)Proxy.newProxyInstance(handler.getClass().getClassLoader(), realSubject\n                .getClass().getInterfaces(), handler);\n```\n\n可能我以为返回的这个代理对象会是Subject类型的对象，或者是InvocationHandler的对象，结果却不是**，首先我们解释一下为什么我们这里可以将其转化为Subject类型的对象？原因就是在newProxyInstance这个方法的第二个参数上，我们给这个代理对象提供了一组什么接口，那么我这个代理对象就会实现了这组接口，这个时候我们当然可以将这个代理对象强制类型转化为这组接口中的任意一个，因为这里的接口是Subject类型，所以就可以将其转化为Subject类型了**。\n\n**同时我们一定要记住，通过 Proxy.newProxyInstance 创建的代理对象是在jvm运行时动态生成的一个对象，它并不是我们的InvocationHandler类型，也不是我们定义的那组接口的类型，而是在运行是动态生成的一个对象，并且命名方式都是这样的形式，以$开头，proxy为中，最后一个数字表示对象的标号**。\n\n接着我们来看看这两句 \n\nsubject.rent();\nsubject.hello(\"world\");\n\n这里是通过代理对象来调用实现的那种接口中的方法，这个时候程序就会跳转到由这个代理对象关联到的 handler 中的invoke方法去执行，而我们的这个 handler 对象又接受了一个 RealSubject类型的参数，表示我要代理的就是这个真实对象，所以此时就会调用 handler 中的invoke方法去执行： \n\n```\npublic Object invoke(Object object, Method method, Object[] args)\n            throws Throwable\n    {\n        //　　在代理真实对象前我们可以添加一些自己的操作\n        System.out.println(\"before invoke\");\n        \n        System.out.println(\"Method:\" + method);\n        \n        //    当代理对象调用真实对象的方法时，其会自动的跳转到代理对象关联的handler对象的invoke方法来进行调用\n        method.invoke(subject, args);\n        \n        //　　在代理真实对象后我们也可以添加一些自己的操作\n        System.out.println(\"after invoke\");\n        \n        return null;\n    }\n```\n\n我们看到，在真正通过代理对象来调用真实对象的方法的时候，我们可以在该方法前后添加自己的一些操作，同时我们看到我们的这个 method 对象是这样的：\n\n```\npublic abstract void com.xiaoluo.dynamicproxy.Subject.rent()\n\npublic abstract void com.xiaoluo.dynamicproxy.Subject.hello(java.lang.String)\n```\n\n正好就是我们的Subject接口中的两个方法，这也就证明了当我通过代理对象来调用方法的时候，起实际就是委托由其关联到的 handler 对象的invoke方法中来调用，并不是自己来真实调用，而是通过代理的方式来调用的。\n\n这就是我们的java动态代理机制\n\n# 三、java集合\n\n### 1、java中的集合类结构\n\n![集合结构](java基础知识整理/20160624152602394)\n\n### 2、List、Set和Map：\n\n​    List是有序的集合，Set是无序的集合。Map是无序的键值对。\n\n#### 1.集合和数组的区别：\n\n![这里写图片描述](java基础知识整理/20180803193134355)\n\n#### 2.Collection集合的方法：\n\n![这里写图片描述](java基础知识整理/20180803193423722)\n\n### 3、HashMap详解：\n\n​    HashMap有两个参数影响其性能：初始容量和加载因子。默认初始容量是16，加载因子是0.75。容量是哈希表中桶(Entry数组)的数量，初始容量只是哈希表在创建时的容量。加载因子是哈希表在其容量自动增加之前可以达到多满的一种尺度。当哈希表中的条目数超出了加载因子与当前容量的乘积时，通过调用 rehash 方法将容量翻倍。\n\n### 4、ArrayList和Vector对比：\n\n​    都是List的实现类。他们都是有序集合，即存储在这两个集合中的元素的位置都是有顺序的，相当于一种动态的数组，我们以后可以按位置索引号取出某个元素\n​    Vector是线程安全的，也就是说是它的方法之间是线程同步的，而ArrayList是线程序不安全的，它的方法之间是线程不同步的。如果只有一个线程会访问到集合，那最好是使用ArrayList，因为它不考虑线程安全，效率会高些；如果有多个线程会访问到集合，那最好是使用Vector，因为不需要我们自己再去考虑和编写线程安全的代码\n\n### 5、ArrayList和LinkedList对比：\n\n​    1.ArrayList是实现了基于动态数组的数据结构，LinkedList基于链表的数据结构。\n​    2.对于随机访问get和set，ArrayList觉得优于LinkedList，因为LinkedList要移动指针。\n​    3.对于新增和删除操作add和remove，LinedList比较占优势，因为ArrayList要移动数据。\n\n### 6、HashSet和TreeSet对比：\n\n​    HashSet比TreeSet的性能要好，因为TreeSet需要额外的红黑树算法来维护集合的次序。所以只有当需要保持排序的Set时候，才会使用TreeSet，否则都应该使用HashSet。\n\n### 7、HashSet和HashMap对比：\n\n​    都是采用Hash算法来决定元素的存储位置，并通过hash算法来增加集合大小的。其中最大的区别就是，HashSet实现的Set接口，他不允许有重复的值。HashMap实现的是Map接口，里面存储的是键值对，map中不允许存在重复的key。\n\n### 8、HashMap和HashTable对比：\n\n​    HashTable是一个线程安全的Map实现，但HashMap是线程不安全的实现，所以HashMap比HashTable的性能高一些；但是如果有多个线程访问同一个Map对象时候，应该使用HashTable。\n​    HashTable不允许使用null作为key和value，如果视图把null值放入HashTable中会引发NullPointerException异常，但是HashMap可以使用null作为key或value。null可以作为键，这样的键只有一个；可以有一个或多个键所对应的值为null。当get()方法返回null值时，即可以表示 HashMap中没有该键，也可以表示该键所对应的值为null。因此，在HashMap中不能由get()方法来判断HashMap中是否存在某个键，而应该用containsKey()方法来判断。\n\n## 各集合对比：\n\n![集合对比](java基础知识整理/20160624152704286)","slug":"java基础知识整理","published":1,"updated":"2020-12-30T14:17:30.947Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckjbi8tp7000n24vu4hv30hq7","content":"<h1><span id=\"一-面向对象概念\">一、面向对象概念</span></h1><h3><span id=\"1-类与对象\">1. 类与对象</span></h3><h5><span id=\"11-面向过程和面向对象\">1.1 面向过程和面向对象</span></h5><p> 面向过程 （Procedural Programming）侧重流程<br> 面向对象 （Object-Oriented Programming ）(OOP) 侧重功能</p>\n<a id=\"more\"></a>\n\n<h5><span id=\"12-类和对象的概念-关系-组成\">1.2 类和对象的概念、关系、组成</span></h5><ul>\n<li><p>概念：</p>\n<ul>\n<li><strong>类</strong>：类是一个模板，它描述一组具有相 同属性和方法的对象</li>\n<li><strong>对象</strong>：最小子系统，有属性和方法。</li>\n</ul>\n</li>\n<li><p>关系：类是对象的抽象，对象是类的实例</p>\n</li>\n<li><p>组成：</p>\n<ul>\n<li>成员变量（Attributes）</li>\n<li>构造方法（Constructor） 一个类可以有多个构 造方法</li>\n<li>成员方法（Methods）</li>\n</ul>\n</li>\n</ul>\n<h5><span id=\"13-构造函数对象的初始化-使用\">1.3 构造函数，对象的初始化、使用</span></h5><ul>\n<li><p>构造方法：在创建一个对象的时候，至少要调用一个构造方法。 构造方法的名称必须与类同名，一个类可以有多个构 造方法。</p>\n</li>\n<li><p>对象初始化：</p>\n<ul>\n<li>声明：声明一个对象，包括对象名称和对象类型。</li>\n<li>实例化：使用关键字new来创建一个对象。</li>\n<li>初始化：使用new创建对象时，会调用构造方法初始化对象</li>\n</ul>\n</li>\n<li><p>对象的使用：</p>\n</li>\n</ul>\n  <figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 实例化对象 */</span> ObjectReference = <span class=\"keyword\">new</span> Constructor();</span><br><span class=\"line\"><span class=\"comment\">/* 访问成员变量 */</span> ObjectReference.variableName; </span><br><span class=\"line\"><span class=\"comment\">/* 访问成员方法 */</span> ObjectReference.MethodName();</span><br></pre></td></tr></table></figure>\n<h3><span id=\"2-封装-继承-多态\">2.  封装、继承、多态</span></h3><h5><span id=\"21-封装-encapsulation\">2.1  封装 Encapsulation</span></h5><p><strong>好处：</strong><br> 从设计上讲，为了实现模块化<br> 从使用上讲，减少了复杂度<br> 良好的封装能够减少代码的耦合</p>\n<p><strong>实现：</strong></p>\n<p><img src=\"/2020/12/24/java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E6%95%B4%E7%90%86/3775272-55dfd603d6e9b95c.jpg\" alt=\"img\"></p>\n<p> private: 只能被该类的对象访问。<br> default: 即不加任何访问修饰符，只允许在同一个包中进行访问。<br> protected: 只能被类本身的方法及子类访问，即使子类在不同的包中也可以访问。<br> public： 不仅可以跨类访问，而且允许跨包（package）访问。</p>\n<p>一个源文件中只能有一个public类;<br> 源文件的名称应该和public类的类名保持一致;<br> 如果一个类定义在某个包中，那么package语句应该在源文件的首行;</p>\n<h5><span id=\"22-继承-heritage\">2.2 继承 Heritage</span></h5><p>继承是一种类和类之间的关系，是一种“is a kind of”的关系。<br> <strong>好处：</strong><br> 易于修改，容易扩展</p>\n<p><strong>实现：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Parent</span></span>&#123;   … &#125;  </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Child</span> <span class=\"keyword\">extends</span> <span class=\"title\">Parent</span> </span>&#123;   … &#125; </span><br></pre></td></tr></table></figure>\n<p>java中的继承是单继承的，一个子类只能继承一个父类，使用extends关键字<br> 子类继承了父类中所有非private成员方法（除了构造方法）和所有非private的成员变量。</p>\n<p><strong>super：</strong><br> 对于构造函数而言，它只能够被调用，而不能被继承。<br> 当我们需要调用父类的构造方法时，只需使用super()即可</p>\n<p><strong>重写（覆盖） override：</strong><br> 子类中有和父类中可访问（可继承到子类）的同名&amp;&amp;同返 回类型&amp;&amp;同参数表的方法，就会重写（覆盖）从父类继承来 的方法。</p>\n<p><strong>重载 overload：</strong><br> 被重载的方法必须改变参数列表(参 数个数或类型或顺序不一样)；<br> 被重载的方法可以改变返回类型；<br> 被重载的方法可以改变访问修饰符；<br> final 关键字声明类可以把类定义为不能继承的，即最终类； 或者用于修饰方法，该方法不能被子类重写：</p>\n<p><strong>向上转型</strong><br> 上转型对象可以操作被子类继承和重写的方法，但不能操作子类新增的成员变量和方法。</p>\n<h5><span id=\"23-多态-polymorphism\">2.3 多态 Polymorphism</span></h5><p><strong>多态就是指一种名称定义不同的方法</strong></p>\n<p><strong>分类</strong><br> 编译时多态 - 方法的重载（overload）<br> 运行时多态 - 程序中定义的引用变量所指向的具体类型和通过该引用变量发出的方法调用在编程 时并不确定，而是在程序运行期间才确定，即一个引用变量倒底会指向哪个类的实 例对象，该引用变量发出的方法调用到底是哪个类中实现的方法，必须在由程序运 行期间才能决定。</p>\n<p><strong>实现方法（继承、接口）</strong><br> 以继承实现多态 -向上转型、方法重写，以一般代表特殊，以特殊代替一般<br> 以接口实现多态</p>\n<p><strong>如何使用</strong><br> 可以在方法的参数中传入其父类（或接口）类型，在运行时会根据实际的运行时类型来 在方法中进行相应的操作。<br> 多态用于返回值，可以在方法的返回值类型上使用其实际返回值的父（接口）类型，不关心返回值的实际类型。</p>\n<h3><span id=\"3抽象类和抽象方法静态方法和静态变量\">3.抽象类和抽象方法，静态方法和静态变量</span></h3><p>具体类：可以被实例化的类<br> 抽象类：不能被实例化的类<br> 定义抽象类的基本目的是提供合适的超类， 使其他类可以继承它，以实现共享。</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title\">Form</span>&#123;   …   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">draw</span>(<span class=\"params\"></span>)</span>; &#125; </span><br></pre></td></tr></table></figure>\n<h3><span id=\"4-接口\">4. 接口</span></h3><p><strong>定义</strong></p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"keyword\">public</span>] <span class=\"class\"><span class=\"keyword\">interface</span> 接口名 [<span class=\"keyword\">extends</span> 其他的接口名列表] </span>&#123;</span><br><span class=\"line\">    [<span class=\"keyword\">public</span> <span class=\"built_in\">static</span> <span class=\"keyword\">final</span>] 数据类型 常量名 = 值;</span><br><span class=\"line\">    [<span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span>] 返回类型 方法名（形参列表）;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>实现</strong></p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[访问修饰符] <span class=\"class\"><span class=\"keyword\">class</span> 类名 [<span class=\"keyword\">extends</span> 超类名] <span class=\"keyword\">implements</span> 接口名列表 </span>&#123;</span><br><span class=\"line\">        类体 </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>特性</strong><br> 接口中可以含有变量，变量会被隐式的指定为 public static final（用 private 修饰 会报编译错误）<br> 接口中的方法会被隐式的指定为 public abstract</p>\n<p><strong>功能</strong></p>\n<ol>\n<li>接口提供了一组功能的命名集合</li>\n<li>接口定义了不同类交互的标准<br> 实现了“多继承” ；分离了方法的声明和方法的实现</li>\n</ol>\n<p><strong>接口 v.s. 类</strong><br> 接口不能用于实例化对象。<br> 接口没有构造方法。<br> 接口中所有的方法必须是抽象方法。<br> 接口只能包含static final成员变量。<br> 接口不是被类继承了，而是要被类实现。<br> 接口支持多继承。</p>\n<p>抽象类是对类抽象，而接口是对行为的抽象<br> 抽象类是自底向上抽象而来的，接口是自顶向下设计出来的</p>\n<p><strong>接口名作为类型</strong><br> 可以把使用实现了某一接口的类创建的对象的引用赋给该接口声明的接口变量， 那么该接口变量就可以调用被类实现的接口的方法。</p>\n<h1><span id=\"二-反射及动态代理\">二、反射及动态代理</span></h1><p>反射 一般使用 Class.forName()方法;</p>\n<p>动态代理就是实现InvocationHandler 接口；</p>\n<p>要想理解反射的原理，首先要了解什么是类型信息。Java让我们在运行时识别对象和类的信息，主要有2种方式：一种是传统的RTTI，它假定我们在编译时已经知道了所有的类型信息；另一种是反射机制，它允许我们在运行时发现和使用类的信息。</p>\n<h3><span id=\"1-class对象\">1、Class对象</span></h3><p>　　理解RTTI在Java中的工作原理，首先需要知道类型信息在运行时是如何表示的，这是由Class对象来完成的，它包含了与类有关的信息。Class对象就是用来创建所有“常规”对象的，Java使用Class对象来执行RTTI，即使你正在执行的是类似类型转换这样的操作。</p>\n<p>　　每个类都会产生一个对应的Class对象，也就是保存在.class文件。所有类都是在对其第一次使用时，动态加载到JVM的，当程序创建一个对类的静态成员的引用时，就会加载这个类。Class对象仅在需要的时候才会加载，static初始化是在类加载时进行的。 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class TestMain &#123;</span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        System.out.println(XYZ.name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class XYZ &#123;</span><br><span class=\"line\">    public static String name &#x3D; &quot;luoxn28&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">    static &#123;</span><br><span class=\"line\">        System.out.println(&quot;xyz静态块&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public XYZ() &#123;</span><br><span class=\"line\">        System.out.println(&quot;xyz构造了&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出结果为：</p>\n<p><img src=\"/2020/12/24/java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E6%95%B4%E7%90%86/772134-20160720003120122-551868817.png\" alt=\"img\"></p>\n<p>　　类加载器首先会检查这个类的Class对象是否已被加载过，如果尚未加载，默认的类加载器就会根据类名查找对应的.class文件。</p>\n<p>　　想在运行时使用类型信息，必须获取对象(比如类Base对象)的Class对象的引用，使用功能Class.forName(“Base”)可以实现该目的，或者使用base.class。注意，有一点很有趣，使用功能”.class”来创建Class对象的引用时，不会自动初始化该Class对象，使用forName()会自动初始化该Class对象。为了使用类而做的准备工作一般有以下3个步骤：</p>\n<ul>\n<li>加载：由类加载器完成，找到对应的字节码，创建一个Class对象</li>\n<li>链接：验证类中的字节码，为静态域分配空间</li>\n<li>初始化：如果该类有超类，则对其初始化，执行静态初始化器和静态初始化块 </li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Base &#123;</span><br><span class=\"line\">    static int num &#x3D; 1;</span><br><span class=\"line\">    </span><br><span class=\"line\">    static &#123;</span><br><span class=\"line\">        System.out.println(&quot;Base &quot; + num);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">public class Main &#123;</span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        &#x2F;&#x2F; 不会初始化静态块</span><br><span class=\"line\">        Class clazz1 &#x3D; Base.class;</span><br><span class=\"line\">        System.out.println(&quot;------&quot;);</span><br><span class=\"line\">        &#x2F;&#x2F; 会初始化</span><br><span class=\"line\">        Class clazz2 &#x3D; Class.forName(&quot;zzz.Base&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h3><span id=\"2-类型转换前先做检查\">2、类型转换前先做检查</span></h3><p>　　编译器将检查类型向下转型是否合法，如果不合法将抛出异常。向下转换类型前，可以使用instanceof判断。 </p>\n<p><a href=\"javascript:void(0);\"><img src=\"/2020/12/24/java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E6%95%B4%E7%90%86/copycode.gif\" alt=\"复制代码\"></a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Base &#123; &#125;</span><br><span class=\"line\">class Derived extends Base &#123; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">public class Main &#123;</span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        Base base &#x3D; new Derived();</span><br><span class=\"line\">        if (base instanceof Derived) &#123;</span><br><span class=\"line\">            &#x2F;&#x2F; 这里可以向下转换了</span><br><span class=\"line\">            System.out.println(&quot;ok&quot;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        else &#123;</span><br><span class=\"line\">            System.out.println(&quot;not ok&quot;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h3><span id=\"3-反射运行时类信息\">3、反射：运行时类信息</span></h3><p>　　如果不知道某个对象的确切类型，RTTI可以告诉你，但是有一个前提：这个类型在编译时必须已知，这样才能使用RTTI来识别它。Class类与java.lang.reflect类库一起对反射进行了支持，该类库包含Field、Method和Constructor类，这些类的对象由JVM在启动时创建，用以表示未知类里对应的成员。这样的话就可以使用Contructor创建新的对象，用get()和set()方法获取和修改类中与Field对象关联的字段，用invoke()方法调用与Method对象关联的方法。另外，还可以调用getFields()、getMethods()和getConstructors()等许多便利的方法，以返回表示字段、方法、以及构造器对象的数组，这样，对象信息可以在运行时被完全确定下来，而在编译时不需要知道关于类的任何事情。</p>\n<p>　　反射机制并没有什么神奇之处，当通过反射与一个未知类型的对象打交道时，JVM只是简单地检查这个对象，看它属于哪个特定的类。因此，那个类的<code>.class</code>对于JVM来说必须是可获取的，要么在本地机器上，要么从网络获取。所以对于RTTI和反射之间的真正区别只在于：</p>\n<ul>\n<li>RTTI，编译器在编译时打开和检查.class文件</li>\n<li>反射，运行时打开和检查.class文件 </li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Person implements Serializable &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    private String name;</span><br><span class=\"line\">    private int age;</span><br><span class=\"line\">&#x2F;&#x2F; get&#x2F;set方法</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">public static void main(String[] args) &#123;</span><br><span class=\"line\">    Person person &#x3D; new Person(&quot;luoxn28&quot;, 23);</span><br><span class=\"line\">    Class clazz &#x3D; person.getClass();</span><br><span class=\"line\"></span><br><span class=\"line\">    Field[] fields &#x3D; clazz.getDeclaredFields();</span><br><span class=\"line\">    for (Field field : fields) &#123;</span><br><span class=\"line\">        String key &#x3D; field.getName();</span><br><span class=\"line\">        PropertyDescriptor descriptor &#x3D; new PropertyDescriptor(key, clazz);</span><br><span class=\"line\">        Method method &#x3D; descriptor.getReadMethod();</span><br><span class=\"line\">        Object value &#x3D; method.invoke(person);</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(key + &quot;:&quot; + value);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>　　以上通过getReadMethod()方法调用类的get函数，可以通过getWriteMethod()方法来调用类的set方法。通常来说，我们不需要使用反射工具，但是它们在创建动态代码会更有用，反射在Java中用来支持其他特性的，例如对象的序列化和JavaBean等。</p>\n<h3><span id=\"4-动态代理\">4、动态代理</span></h3><p>　　代理模式是为了提供额外或不同的操作，而插入的用来替代”实际”对象的对象，这些操作涉及到与”实际”对象的通信，因此代理通常充当中间人角色。Java的动态代理比代理的思想更前进了一步，它可以动态地创建并代理并动态地处理对所代理方法的调用。在动态代理上所做的所有调用都会被重定向到单一的<strong>调用处理器</strong>上，它的工作是揭示调用的类型并确定相应的策略。 </p>\n<p><strong>学习Spring的时候，我们知道Spring主要有两大思想，一个是IoC，另一个就是AOP，对于IoC，它利用的是反射机制，依赖注入就不用多说了，而对于Spring的核心AOP来说，使用了动态代理，其实底层也是反射。我们不但要知道怎么通过AOP来满足的我们的功能，我们更需要学习的是其底层是怎么样的一个原理，而AOP的原理就是java的动态代理机制，所以本篇随笔就是对java的动态机制进行一个回顾。</strong></p>\n<p>在java的动态代理机制中，有两个重要的类或接口，一个是 InvocationHandler(Interface)、另一个则是 Proxy(Class)，这一个类和接口是实现我们动态代理所必须用到的。首先我们先来看看java的API帮助文档是怎么样对这两个类进行描述的：</p>\n<p>InvocationHandler:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">InvocationHandler is the interface implemented by the invocation handler of a proxy instance. </span><br><span class=\"line\"></span><br><span class=\"line\">Each proxy instance has an associated invocation handler. When a method is invoked on a proxy instance, the method invocation is encoded and dispatched to the invoke method of its invocation handler.</span><br></pre></td></tr></table></figure>\n<p>每一个动态代理类都必须要实现InvocationHandler这个接口，并且每个代理类的实例都关联到了一个handler，当我们通过代理对象调用一个方法的时候，这个方法的调用就会被转发为由InvocationHandler这个接口的 invoke 方法来进行调用。我们来看看InvocationHandler这个接口的唯一一个方法 invoke 方法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Object invoke(Object proxy, Method method, Object[] args) throws Throwable</span><br></pre></td></tr></table></figure>\n<p>我们看到这个方法一共接受三个参数，那么这三个参数分别代表什么呢？</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Object invoke(Object proxy, Method method, Object[] args) throws Throwable</span><br><span class=\"line\"></span><br><span class=\"line\">proxy:　　指代我们所代理的那个真实对象</span><br><span class=\"line\">method:　　指代的是我们所要调用真实对象的某个方法的Method对象</span><br><span class=\"line\">args:　　指代的是调用真实对象某个方法时接受的参数</span><br></pre></td></tr></table></figure>\n<p>如果不是很明白，等下通过一个实例会对这几个参数进行更深的讲解。</p>\n<p>接下来我们来看看Proxy这个类：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Proxy provides static methods for creating dynamic proxy classes and instances, and it is also the superclass of all dynamic proxy classes created by those methods. </span><br></pre></td></tr></table></figure>\n<p>Proxy这个类的作用就是用来动态创建一个代理对象的类，它提供了许多的方法，但是我们用的最多的就是 newProxyInstance 这个方法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static Object newProxyInstance(ClassLoader loader, Class&lt;?&gt;[] interfaces,  InvocationHandler h)  throws IllegalArgumentException</span><br><span class=\"line\">Returns an instance of a proxy class for the specified interfaces that dispatches method invocations to the specified invocation handler.</span><br></pre></td></tr></table></figure>\n<p>这个方法的作用就是得到一个动态的代理对象，其接收三个参数，我们来看看这三个参数所代表的含义： </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static Object newProxyInstance(ClassLoader loader, Class&lt;?&gt;[] interfaces, InvocationHandler h) throws IllegalArgumentException</span><br><span class=\"line\"></span><br><span class=\"line\">loader:　　一个ClassLoader对象，定义了由哪个ClassLoader对象来对生成的代理对象进行加载</span><br><span class=\"line\"></span><br><span class=\"line\">interfaces:　　一个Interface对象的数组，表示的是我将要给我需要代理的对象提供一组什么接口，如果我提供了一组接口给它，那么这个代理对象就宣称实现了该接口(多态)，这样我就能调用这组接口中的方法了</span><br><span class=\"line\"></span><br><span class=\"line\">h:　　一个InvocationHandler对象，表示的是当我这个动态代理对象在调用方法的时候，会关联到哪一个InvocationHandler对象上</span><br></pre></td></tr></table></figure>\n<p>好了，在介绍完这两个接口(类)以后，我们来通过一个实例来看看我们的动态代理模式是什么样的：</p>\n<p>首先我们定义了一个Subject类型的接口，为其声明了两个方法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public interface Subject</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public void rent();</span><br><span class=\"line\">    </span><br><span class=\"line\">    public void hello(String str);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>接着，定义了一个类来实现这个接口，这个类就是我们的真实对象，RealSubject类：  </p>\n<p>下一步，我们就要定义一个动态代理类了，前面说个，每一个动态代理类都必须要实现 InvocationHandler 这个接口，因此我们这个动态代理类也不例外： </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class DynamicProxy implements InvocationHandler</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    &#x2F;&#x2F;　这个就是我们要代理的真实对象</span><br><span class=\"line\">    private Object subject;</span><br><span class=\"line\">    </span><br><span class=\"line\">    &#x2F;&#x2F;    构造方法，给我们要代理的真实对象赋初值</span><br><span class=\"line\">    public DynamicProxy(Object subject)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        this.subject &#x3D; subject;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public Object invoke(Object object, Method method, Object[] args)</span><br><span class=\"line\">            throws Throwable</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        &#x2F;&#x2F;　　在代理真实对象前我们可以添加一些自己的操作</span><br><span class=\"line\">        System.out.println(&quot;before invoke&quot;);</span><br><span class=\"line\">        </span><br><span class=\"line\">        System.out.println(&quot;Method:&quot; + method);</span><br><span class=\"line\">        </span><br><span class=\"line\">        &#x2F;&#x2F;    当代理对象调用真实对象的方法时，其会自动的跳转到代理对象关联的handler对象的invoke方法来进行调用</span><br><span class=\"line\">        method.invoke(subject, args);</span><br><span class=\"line\">        </span><br><span class=\"line\">        &#x2F;&#x2F;　　在代理真实对象后我们也可以添加一些自己的操作</span><br><span class=\"line\">        System.out.println(&quot;after invoke&quot;);</span><br><span class=\"line\">        </span><br><span class=\"line\">        return null;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;[![复制代码](java基础知识整理&#x2F;copycode.gif)](javascript:void(0);</span><br></pre></td></tr></table></figure>\n\n\n<p>最后，来看看我们的Client类： </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Client</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public static void main(String[] args)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        &#x2F;&#x2F;    我们要代理的真实对象</span><br><span class=\"line\">        Subject realSubject &#x3D; new RealSubject();</span><br><span class=\"line\"></span><br><span class=\"line\">        &#x2F;&#x2F;    我们要代理哪个真实对象，就将该对象传进去，最后是通过该真实对象来调用其方法的</span><br><span class=\"line\">        InvocationHandler handler &#x3D; new DynamicProxy(realSubject);</span><br><span class=\"line\"></span><br><span class=\"line\">        &#x2F;*</span><br><span class=\"line\">         * 通过Proxy的newProxyInstance方法来创建我们的代理对象，我们来看看其三个参数</span><br><span class=\"line\">         * 第一个参数 handler.getClass().getClassLoader() ，我们这里使用handler这个类的ClassLoader对象来加载我们的代理对象</span><br><span class=\"line\">         * 第二个参数realSubject.getClass().getInterfaces()，我们这里为代理对象提供的接口是真实对象所实行的接口，表示我要代理的是该真实对象，这样我就能调用这组接口中的方法了</span><br><span class=\"line\">         * 第三个参数handler， 我们这里将这个代理对象关联到了上方的 InvocationHandler 这个对象上</span><br><span class=\"line\">         *&#x2F;</span><br><span class=\"line\">        Subject subject &#x3D; (Subject)Proxy.newProxyInstance(handler.getClass().getClassLoader(), realSubject</span><br><span class=\"line\">                .getClass().getInterfaces(), handler);</span><br><span class=\"line\">        </span><br><span class=\"line\">        System.out.println(subject.getClass().getName());</span><br><span class=\"line\">        subject.rent();</span><br><span class=\"line\">        subject.hello(&quot;world&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们先来看看控制台的输出： </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$Proxy0</span><br><span class=\"line\"></span><br><span class=\"line\">before invoke</span><br><span class=\"line\">Method:public abstract void com.xiaoluo.dynamicproxy.Subject.rent()</span><br><span class=\"line\">I want to rent my house</span><br><span class=\"line\">after invoke</span><br><span class=\"line\"></span><br><span class=\"line\">before invoke</span><br><span class=\"line\">Method:public abstract void com.xiaoluo.dynamicproxy.Subject.hello(java.lang.String)</span><br><span class=\"line\">hello: world</span><br><span class=\"line\">after invoke</span><br></pre></td></tr></table></figure>\n<p>当调试的时候，如果把鼠标放在subject 上面，会自动的执行toString()方法，也就是</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">before invoke</span><br><span class=\"line\">Method:public abstract void com.xiaoluo.dynamicproxy.Subject.toString()</span><br><span class=\"line\"> </span><br><span class=\"line\">after invoke</span><br></pre></td></tr></table></figure>\n\n\n<p>我们首先来看看 $Proxy0 这东西，我们看到，这个东西是由 System.out.println(subject.getClass().getName()); 这条语句打印出来的，那么为什么我们返回的这个代理对象的类名是这样的呢？</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Subject subject &#x3D; (Subject)Proxy.newProxyInstance(handler.getClass().getClassLoader(), realSubject</span><br><span class=\"line\">                .getClass().getInterfaces(), handler);</span><br></pre></td></tr></table></figure>\n<p>可能我以为返回的这个代理对象会是Subject类型的对象，或者是InvocationHandler的对象，结果却不是<strong>，首先我们解释一下为什么我们这里可以将其转化为Subject类型的对象？原因就是在newProxyInstance这个方法的第二个参数上，我们给这个代理对象提供了一组什么接口，那么我这个代理对象就会实现了这组接口，这个时候我们当然可以将这个代理对象强制类型转化为这组接口中的任意一个，因为这里的接口是Subject类型，所以就可以将其转化为Subject类型了</strong>。</p>\n<p><strong>同时我们一定要记住，通过 Proxy.newProxyInstance 创建的代理对象是在jvm运行时动态生成的一个对象，它并不是我们的InvocationHandler类型，也不是我们定义的那组接口的类型，而是在运行是动态生成的一个对象，并且命名方式都是这样的形式，以$开头，proxy为中，最后一个数字表示对象的标号</strong>。</p>\n<p>接着我们来看看这两句 </p>\n<p>subject.rent();<br>subject.hello(“world”);</p>\n<p>这里是通过代理对象来调用实现的那种接口中的方法，这个时候程序就会跳转到由这个代理对象关联到的 handler 中的invoke方法去执行，而我们的这个 handler 对象又接受了一个 RealSubject类型的参数，表示我要代理的就是这个真实对象，所以此时就会调用 handler 中的invoke方法去执行： </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public Object invoke(Object object, Method method, Object[] args)</span><br><span class=\"line\">            throws Throwable</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        &#x2F;&#x2F;　　在代理真实对象前我们可以添加一些自己的操作</span><br><span class=\"line\">        System.out.println(&quot;before invoke&quot;);</span><br><span class=\"line\">        </span><br><span class=\"line\">        System.out.println(&quot;Method:&quot; + method);</span><br><span class=\"line\">        </span><br><span class=\"line\">        &#x2F;&#x2F;    当代理对象调用真实对象的方法时，其会自动的跳转到代理对象关联的handler对象的invoke方法来进行调用</span><br><span class=\"line\">        method.invoke(subject, args);</span><br><span class=\"line\">        </span><br><span class=\"line\">        &#x2F;&#x2F;　　在代理真实对象后我们也可以添加一些自己的操作</span><br><span class=\"line\">        System.out.println(&quot;after invoke&quot;);</span><br><span class=\"line\">        </span><br><span class=\"line\">        return null;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>我们看到，在真正通过代理对象来调用真实对象的方法的时候，我们可以在该方法前后添加自己的一些操作，同时我们看到我们的这个 method 对象是这样的：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public abstract void com.xiaoluo.dynamicproxy.Subject.rent()</span><br><span class=\"line\"></span><br><span class=\"line\">public abstract void com.xiaoluo.dynamicproxy.Subject.hello(java.lang.String)</span><br></pre></td></tr></table></figure>\n<p>正好就是我们的Subject接口中的两个方法，这也就证明了当我通过代理对象来调用方法的时候，起实际就是委托由其关联到的 handler 对象的invoke方法中来调用，并不是自己来真实调用，而是通过代理的方式来调用的。</p>\n<p>这就是我们的java动态代理机制</p>\n<h1><span id=\"三-java集合\">三、java集合</span></h1><h3><span id=\"1-java中的集合类结构\">1、java中的集合类结构</span></h3><p><img src=\"/2020/12/24/java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E6%95%B4%E7%90%86/20160624152602394\" alt=\"集合结构\"></p>\n<h3><span id=\"2-list-set和map\">2、List、Set和Map：</span></h3><p>​    List是有序的集合，Set是无序的集合。Map是无序的键值对。</p>\n<h4><span id=\"1集合和数组的区别\">1.集合和数组的区别：</span></h4><p><img src=\"/2020/12/24/java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E6%95%B4%E7%90%86/20180803193134355\" alt=\"这里写图片描述\"></p>\n<h4><span id=\"2collection集合的方法\">2.Collection集合的方法：</span></h4><p><img src=\"/2020/12/24/java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E6%95%B4%E7%90%86/20180803193423722\" alt=\"这里写图片描述\"></p>\n<h3><span id=\"3-hashmap详解\">3、HashMap详解：</span></h3><p>​    HashMap有两个参数影响其性能：初始容量和加载因子。默认初始容量是16，加载因子是0.75。容量是哈希表中桶(Entry数组)的数量，初始容量只是哈希表在创建时的容量。加载因子是哈希表在其容量自动增加之前可以达到多满的一种尺度。当哈希表中的条目数超出了加载因子与当前容量的乘积时，通过调用 rehash 方法将容量翻倍。</p>\n<h3><span id=\"4-arraylist和vector对比\">4、ArrayList和Vector对比：</span></h3><p>​    都是List的实现类。他们都是有序集合，即存储在这两个集合中的元素的位置都是有顺序的，相当于一种动态的数组，我们以后可以按位置索引号取出某个元素<br>​    Vector是线程安全的，也就是说是它的方法之间是线程同步的，而ArrayList是线程序不安全的，它的方法之间是线程不同步的。如果只有一个线程会访问到集合，那最好是使用ArrayList，因为它不考虑线程安全，效率会高些；如果有多个线程会访问到集合，那最好是使用Vector，因为不需要我们自己再去考虑和编写线程安全的代码</p>\n<h3><span id=\"5-arraylist和linkedlist对比\">5、ArrayList和LinkedList对比：</span></h3><p>​    1.ArrayList是实现了基于动态数组的数据结构，LinkedList基于链表的数据结构。<br>​    2.对于随机访问get和set，ArrayList觉得优于LinkedList，因为LinkedList要移动指针。<br>​    3.对于新增和删除操作add和remove，LinedList比较占优势，因为ArrayList要移动数据。</p>\n<h3><span id=\"6-hashset和treeset对比\">6、HashSet和TreeSet对比：</span></h3><p>​    HashSet比TreeSet的性能要好，因为TreeSet需要额外的红黑树算法来维护集合的次序。所以只有当需要保持排序的Set时候，才会使用TreeSet，否则都应该使用HashSet。</p>\n<h3><span id=\"7-hashset和hashmap对比\">7、HashSet和HashMap对比：</span></h3><p>​    都是采用Hash算法来决定元素的存储位置，并通过hash算法来增加集合大小的。其中最大的区别就是，HashSet实现的Set接口，他不允许有重复的值。HashMap实现的是Map接口，里面存储的是键值对，map中不允许存在重复的key。</p>\n<h3><span id=\"8-hashmap和hashtable对比\">8、HashMap和HashTable对比：</span></h3><p>​    HashTable是一个线程安全的Map实现，但HashMap是线程不安全的实现，所以HashMap比HashTable的性能高一些；但是如果有多个线程访问同一个Map对象时候，应该使用HashTable。<br>​    HashTable不允许使用null作为key和value，如果视图把null值放入HashTable中会引发NullPointerException异常，但是HashMap可以使用null作为key或value。null可以作为键，这样的键只有一个；可以有一个或多个键所对应的值为null。当get()方法返回null值时，即可以表示 HashMap中没有该键，也可以表示该键所对应的值为null。因此，在HashMap中不能由get()方法来判断HashMap中是否存在某个键，而应该用containsKey()方法来判断。</p>\n<h2><span id=\"各集合对比\">各集合对比：</span></h2><p><img src=\"/2020/12/24/java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E6%95%B4%E7%90%86/20160624152704286\" alt=\"集合对比\"></p>\n","site":{"data":{}},"excerpt":"<h1 id=\"一、面向对象概念\"><a href=\"#一、面向对象概念\" class=\"headerlink\" title=\"一、面向对象概念\"></a>一、面向对象概念</h1><h3 id=\"1-类与对象\"><a href=\"#1-类与对象\" class=\"headerlink\" title=\"1. 类与对象\"></a>1. 类与对象</h3><h5 id=\"1-1-面向过程和面向对象\"><a href=\"#1-1-面向过程和面向对象\" class=\"headerlink\" title=\"1.1 面向过程和面向对象\"></a>1.1 面向过程和面向对象</h5><p> 面向过程 （Procedural Programming）侧重流程<br> 面向对象 （Object-Oriented Programming ）(OOP) 侧重功能</p>","more":"<h5 id=\"1-2-类和对象的概念、关系、组成\"><a href=\"#1-2-类和对象的概念、关系、组成\" class=\"headerlink\" title=\"1.2 类和对象的概念、关系、组成\"></a>1.2 类和对象的概念、关系、组成</h5><ul>\n<li><p>概念：</p>\n<ul>\n<li><strong>类</strong>：类是一个模板，它描述一组具有相 同属性和方法的对象</li>\n<li><strong>对象</strong>：最小子系统，有属性和方法。</li>\n</ul>\n</li>\n<li><p>关系：类是对象的抽象，对象是类的实例</p>\n</li>\n<li><p>组成：</p>\n<ul>\n<li>成员变量（Attributes）</li>\n<li>构造方法（Constructor） 一个类可以有多个构 造方法</li>\n<li>成员方法（Methods）</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"1-3-构造函数，对象的初始化、使用\"><a href=\"#1-3-构造函数，对象的初始化、使用\" class=\"headerlink\" title=\"1.3 构造函数，对象的初始化、使用\"></a>1.3 构造函数，对象的初始化、使用</h5><ul>\n<li><p>构造方法：在创建一个对象的时候，至少要调用一个构造方法。 构造方法的名称必须与类同名，一个类可以有多个构 造方法。</p>\n</li>\n<li><p>对象初始化：</p>\n<ul>\n<li>声明：声明一个对象，包括对象名称和对象类型。</li>\n<li>实例化：使用关键字new来创建一个对象。</li>\n<li>初始化：使用new创建对象时，会调用构造方法初始化对象</li>\n</ul>\n</li>\n<li><p>对象的使用：</p>\n</li>\n</ul>\n  <figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 实例化对象 */</span> ObjectReference = <span class=\"keyword\">new</span> Constructor();</span><br><span class=\"line\"><span class=\"comment\">/* 访问成员变量 */</span> ObjectReference.variableName; </span><br><span class=\"line\"><span class=\"comment\">/* 访问成员方法 */</span> ObjectReference.MethodName();</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-封装、继承、多态\"><a href=\"#2-封装、继承、多态\" class=\"headerlink\" title=\"2.  封装、继承、多态\"></a>2.  封装、继承、多态</h3><h5 id=\"2-1-封装-Encapsulation\"><a href=\"#2-1-封装-Encapsulation\" class=\"headerlink\" title=\"2.1  封装 Encapsulation\"></a>2.1  封装 Encapsulation</h5><p><strong>好处：</strong><br> 从设计上讲，为了实现模块化<br> 从使用上讲，减少了复杂度<br> 良好的封装能够减少代码的耦合</p>\n<p><strong>实现：</strong></p>\n<p><img src=\"/2020/12/24/java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E6%95%B4%E7%90%86/3775272-55dfd603d6e9b95c.jpg\" alt=\"img\"></p>\n<p> private: 只能被该类的对象访问。<br> default: 即不加任何访问修饰符，只允许在同一个包中进行访问。<br> protected: 只能被类本身的方法及子类访问，即使子类在不同的包中也可以访问。<br> public： 不仅可以跨类访问，而且允许跨包（package）访问。</p>\n<p>一个源文件中只能有一个public类;<br> 源文件的名称应该和public类的类名保持一致;<br> 如果一个类定义在某个包中，那么package语句应该在源文件的首行;</p>\n<h5 id=\"2-2-继承-Heritage\"><a href=\"#2-2-继承-Heritage\" class=\"headerlink\" title=\"2.2 继承 Heritage\"></a>2.2 继承 Heritage</h5><p>继承是一种类和类之间的关系，是一种“is a kind of”的关系。<br> <strong>好处：</strong><br> 易于修改，容易扩展</p>\n<p><strong>实现：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Parent</span></span>&#123;   … &#125;  </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Child</span> <span class=\"keyword\">extends</span> <span class=\"title\">Parent</span> </span>&#123;   … &#125; </span><br></pre></td></tr></table></figure>\n<p>java中的继承是单继承的，一个子类只能继承一个父类，使用extends关键字<br> 子类继承了父类中所有非private成员方法（除了构造方法）和所有非private的成员变量。</p>\n<p><strong>super：</strong><br> 对于构造函数而言，它只能够被调用，而不能被继承。<br> 当我们需要调用父类的构造方法时，只需使用super()即可</p>\n<p><strong>重写（覆盖） override：</strong><br> 子类中有和父类中可访问（可继承到子类）的同名&amp;&amp;同返 回类型&amp;&amp;同参数表的方法，就会重写（覆盖）从父类继承来 的方法。</p>\n<p><strong>重载 overload：</strong><br> 被重载的方法必须改变参数列表(参 数个数或类型或顺序不一样)；<br> 被重载的方法可以改变返回类型；<br> 被重载的方法可以改变访问修饰符；<br> final 关键字声明类可以把类定义为不能继承的，即最终类； 或者用于修饰方法，该方法不能被子类重写：</p>\n<p><strong>向上转型</strong><br> 上转型对象可以操作被子类继承和重写的方法，但不能操作子类新增的成员变量和方法。</p>\n<h5 id=\"2-3-多态-Polymorphism\"><a href=\"#2-3-多态-Polymorphism\" class=\"headerlink\" title=\"2.3 多态 Polymorphism\"></a>2.3 多态 Polymorphism</h5><p><strong>多态就是指一种名称定义不同的方法</strong></p>\n<p><strong>分类</strong><br> 编译时多态 - 方法的重载（overload）<br> 运行时多态 - 程序中定义的引用变量所指向的具体类型和通过该引用变量发出的方法调用在编程 时并不确定，而是在程序运行期间才确定，即一个引用变量倒底会指向哪个类的实 例对象，该引用变量发出的方法调用到底是哪个类中实现的方法，必须在由程序运 行期间才能决定。</p>\n<p><strong>实现方法（继承、接口）</strong><br> 以继承实现多态 -向上转型、方法重写，以一般代表特殊，以特殊代替一般<br> 以接口实现多态</p>\n<p><strong>如何使用</strong><br> 可以在方法的参数中传入其父类（或接口）类型，在运行时会根据实际的运行时类型来 在方法中进行相应的操作。<br> 多态用于返回值，可以在方法的返回值类型上使用其实际返回值的父（接口）类型，不关心返回值的实际类型。</p>\n<h3 id=\"3-抽象类和抽象方法，静态方法和静态变量\"><a href=\"#3-抽象类和抽象方法，静态方法和静态变量\" class=\"headerlink\" title=\"3.抽象类和抽象方法，静态方法和静态变量\"></a>3.抽象类和抽象方法，静态方法和静态变量</h3><p>具体类：可以被实例化的类<br> 抽象类：不能被实例化的类<br> 定义抽象类的基本目的是提供合适的超类， 使其他类可以继承它，以实现共享。</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title\">Form</span>&#123;   …   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">draw</span>(<span class=\"params\"></span>)</span>; &#125; </span><br></pre></td></tr></table></figure>\n<h3 id=\"4-接口\"><a href=\"#4-接口\" class=\"headerlink\" title=\"4. 接口\"></a>4. 接口</h3><p><strong>定义</strong></p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"keyword\">public</span>] <span class=\"class\"><span class=\"keyword\">interface</span> 接口名 [<span class=\"keyword\">extends</span> 其他的接口名列表] </span>&#123;</span><br><span class=\"line\">    [<span class=\"keyword\">public</span> <span class=\"built_in\">static</span> <span class=\"keyword\">final</span>] 数据类型 常量名 = 值;</span><br><span class=\"line\">    [<span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span>] 返回类型 方法名（形参列表）;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>实现</strong></p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[访问修饰符] <span class=\"class\"><span class=\"keyword\">class</span> 类名 [<span class=\"keyword\">extends</span> 超类名] <span class=\"keyword\">implements</span> 接口名列表 </span>&#123;</span><br><span class=\"line\">        类体 </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>特性</strong><br> 接口中可以含有变量，变量会被隐式的指定为 public static final（用 private 修饰 会报编译错误）<br> 接口中的方法会被隐式的指定为 public abstract</p>\n<p><strong>功能</strong></p>\n<ol>\n<li>接口提供了一组功能的命名集合</li>\n<li>接口定义了不同类交互的标准<br> 实现了“多继承” ；分离了方法的声明和方法的实现</li>\n</ol>\n<p><strong>接口 v.s. 类</strong><br> 接口不能用于实例化对象。<br> 接口没有构造方法。<br> 接口中所有的方法必须是抽象方法。<br> 接口只能包含static final成员变量。<br> 接口不是被类继承了，而是要被类实现。<br> 接口支持多继承。</p>\n<p>抽象类是对类抽象，而接口是对行为的抽象<br> 抽象类是自底向上抽象而来的，接口是自顶向下设计出来的</p>\n<p><strong>接口名作为类型</strong><br> 可以把使用实现了某一接口的类创建的对象的引用赋给该接口声明的接口变量， 那么该接口变量就可以调用被类实现的接口的方法。</p>\n<h1 id=\"二、反射及动态代理\"><a href=\"#二、反射及动态代理\" class=\"headerlink\" title=\"二、反射及动态代理\"></a>二、反射及动态代理</h1><p>反射 一般使用 Class.forName()方法;</p>\n<p>动态代理就是实现InvocationHandler 接口；</p>\n<p>要想理解反射的原理，首先要了解什么是类型信息。Java让我们在运行时识别对象和类的信息，主要有2种方式：一种是传统的RTTI，它假定我们在编译时已经知道了所有的类型信息；另一种是反射机制，它允许我们在运行时发现和使用类的信息。</p>\n<h3 id=\"1、Class对象\"><a href=\"#1、Class对象\" class=\"headerlink\" title=\"1、Class对象\"></a>1、Class对象</h3><p>　　理解RTTI在Java中的工作原理，首先需要知道类型信息在运行时是如何表示的，这是由Class对象来完成的，它包含了与类有关的信息。Class对象就是用来创建所有“常规”对象的，Java使用Class对象来执行RTTI，即使你正在执行的是类似类型转换这样的操作。</p>\n<p>　　每个类都会产生一个对应的Class对象，也就是保存在.class文件。所有类都是在对其第一次使用时，动态加载到JVM的，当程序创建一个对类的静态成员的引用时，就会加载这个类。Class对象仅在需要的时候才会加载，static初始化是在类加载时进行的。 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class TestMain &#123;</span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        System.out.println(XYZ.name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class XYZ &#123;</span><br><span class=\"line\">    public static String name &#x3D; &quot;luoxn28&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">    static &#123;</span><br><span class=\"line\">        System.out.println(&quot;xyz静态块&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public XYZ() &#123;</span><br><span class=\"line\">        System.out.println(&quot;xyz构造了&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出结果为：</p>\n<p><img src=\"/2020/12/24/java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E6%95%B4%E7%90%86/772134-20160720003120122-551868817.png\" alt=\"img\"></p>\n<p>　　类加载器首先会检查这个类的Class对象是否已被加载过，如果尚未加载，默认的类加载器就会根据类名查找对应的.class文件。</p>\n<p>　　想在运行时使用类型信息，必须获取对象(比如类Base对象)的Class对象的引用，使用功能Class.forName(“Base”)可以实现该目的，或者使用base.class。注意，有一点很有趣，使用功能”.class”来创建Class对象的引用时，不会自动初始化该Class对象，使用forName()会自动初始化该Class对象。为了使用类而做的准备工作一般有以下3个步骤：</p>\n<ul>\n<li>加载：由类加载器完成，找到对应的字节码，创建一个Class对象</li>\n<li>链接：验证类中的字节码，为静态域分配空间</li>\n<li>初始化：如果该类有超类，则对其初始化，执行静态初始化器和静态初始化块 </li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Base &#123;</span><br><span class=\"line\">    static int num &#x3D; 1;</span><br><span class=\"line\">    </span><br><span class=\"line\">    static &#123;</span><br><span class=\"line\">        System.out.println(&quot;Base &quot; + num);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">public class Main &#123;</span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        &#x2F;&#x2F; 不会初始化静态块</span><br><span class=\"line\">        Class clazz1 &#x3D; Base.class;</span><br><span class=\"line\">        System.out.println(&quot;------&quot;);</span><br><span class=\"line\">        &#x2F;&#x2F; 会初始化</span><br><span class=\"line\">        Class clazz2 &#x3D; Class.forName(&quot;zzz.Base&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"2、类型转换前先做检查\"><a href=\"#2、类型转换前先做检查\" class=\"headerlink\" title=\"2、类型转换前先做检查\"></a>2、类型转换前先做检查</h3><p>　　编译器将检查类型向下转型是否合法，如果不合法将抛出异常。向下转换类型前，可以使用instanceof判断。 </p>\n<p><a href=\"javascript:void(0);\"><img src=\"/2020/12/24/java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E6%95%B4%E7%90%86/copycode.gif\" alt=\"复制代码\"></a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Base &#123; &#125;</span><br><span class=\"line\">class Derived extends Base &#123; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">public class Main &#123;</span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        Base base &#x3D; new Derived();</span><br><span class=\"line\">        if (base instanceof Derived) &#123;</span><br><span class=\"line\">            &#x2F;&#x2F; 这里可以向下转换了</span><br><span class=\"line\">            System.out.println(&quot;ok&quot;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        else &#123;</span><br><span class=\"line\">            System.out.println(&quot;not ok&quot;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"3、反射：运行时类信息\"><a href=\"#3、反射：运行时类信息\" class=\"headerlink\" title=\"3、反射：运行时类信息\"></a>3、反射：运行时类信息</h3><p>　　如果不知道某个对象的确切类型，RTTI可以告诉你，但是有一个前提：这个类型在编译时必须已知，这样才能使用RTTI来识别它。Class类与java.lang.reflect类库一起对反射进行了支持，该类库包含Field、Method和Constructor类，这些类的对象由JVM在启动时创建，用以表示未知类里对应的成员。这样的话就可以使用Contructor创建新的对象，用get()和set()方法获取和修改类中与Field对象关联的字段，用invoke()方法调用与Method对象关联的方法。另外，还可以调用getFields()、getMethods()和getConstructors()等许多便利的方法，以返回表示字段、方法、以及构造器对象的数组，这样，对象信息可以在运行时被完全确定下来，而在编译时不需要知道关于类的任何事情。</p>\n<p>　　反射机制并没有什么神奇之处，当通过反射与一个未知类型的对象打交道时，JVM只是简单地检查这个对象，看它属于哪个特定的类。因此，那个类的<code>.class</code>对于JVM来说必须是可获取的，要么在本地机器上，要么从网络获取。所以对于RTTI和反射之间的真正区别只在于：</p>\n<ul>\n<li>RTTI，编译器在编译时打开和检查.class文件</li>\n<li>反射，运行时打开和检查.class文件 </li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Person implements Serializable &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    private String name;</span><br><span class=\"line\">    private int age;</span><br><span class=\"line\">&#x2F;&#x2F; get&#x2F;set方法</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">public static void main(String[] args) &#123;</span><br><span class=\"line\">    Person person &#x3D; new Person(&quot;luoxn28&quot;, 23);</span><br><span class=\"line\">    Class clazz &#x3D; person.getClass();</span><br><span class=\"line\"></span><br><span class=\"line\">    Field[] fields &#x3D; clazz.getDeclaredFields();</span><br><span class=\"line\">    for (Field field : fields) &#123;</span><br><span class=\"line\">        String key &#x3D; field.getName();</span><br><span class=\"line\">        PropertyDescriptor descriptor &#x3D; new PropertyDescriptor(key, clazz);</span><br><span class=\"line\">        Method method &#x3D; descriptor.getReadMethod();</span><br><span class=\"line\">        Object value &#x3D; method.invoke(person);</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(key + &quot;:&quot; + value);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>　　以上通过getReadMethod()方法调用类的get函数，可以通过getWriteMethod()方法来调用类的set方法。通常来说，我们不需要使用反射工具，但是它们在创建动态代码会更有用，反射在Java中用来支持其他特性的，例如对象的序列化和JavaBean等。</p>\n<h3 id=\"4、动态代理\"><a href=\"#4、动态代理\" class=\"headerlink\" title=\"4、动态代理\"></a>4、动态代理</h3><p>　　代理模式是为了提供额外或不同的操作，而插入的用来替代”实际”对象的对象，这些操作涉及到与”实际”对象的通信，因此代理通常充当中间人角色。Java的动态代理比代理的思想更前进了一步，它可以动态地创建并代理并动态地处理对所代理方法的调用。在动态代理上所做的所有调用都会被重定向到单一的<strong>调用处理器</strong>上，它的工作是揭示调用的类型并确定相应的策略。 </p>\n<p><strong>学习Spring的时候，我们知道Spring主要有两大思想，一个是IoC，另一个就是AOP，对于IoC，它利用的是反射机制，依赖注入就不用多说了，而对于Spring的核心AOP来说，使用了动态代理，其实底层也是反射。我们不但要知道怎么通过AOP来满足的我们的功能，我们更需要学习的是其底层是怎么样的一个原理，而AOP的原理就是java的动态代理机制，所以本篇随笔就是对java的动态机制进行一个回顾。</strong></p>\n<p>在java的动态代理机制中，有两个重要的类或接口，一个是 InvocationHandler(Interface)、另一个则是 Proxy(Class)，这一个类和接口是实现我们动态代理所必须用到的。首先我们先来看看java的API帮助文档是怎么样对这两个类进行描述的：</p>\n<p>InvocationHandler:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">InvocationHandler is the interface implemented by the invocation handler of a proxy instance. </span><br><span class=\"line\"></span><br><span class=\"line\">Each proxy instance has an associated invocation handler. When a method is invoked on a proxy instance, the method invocation is encoded and dispatched to the invoke method of its invocation handler.</span><br></pre></td></tr></table></figure>\n<p>每一个动态代理类都必须要实现InvocationHandler这个接口，并且每个代理类的实例都关联到了一个handler，当我们通过代理对象调用一个方法的时候，这个方法的调用就会被转发为由InvocationHandler这个接口的 invoke 方法来进行调用。我们来看看InvocationHandler这个接口的唯一一个方法 invoke 方法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Object invoke(Object proxy, Method method, Object[] args) throws Throwable</span><br></pre></td></tr></table></figure>\n<p>我们看到这个方法一共接受三个参数，那么这三个参数分别代表什么呢？</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Object invoke(Object proxy, Method method, Object[] args) throws Throwable</span><br><span class=\"line\"></span><br><span class=\"line\">proxy:　　指代我们所代理的那个真实对象</span><br><span class=\"line\">method:　　指代的是我们所要调用真实对象的某个方法的Method对象</span><br><span class=\"line\">args:　　指代的是调用真实对象某个方法时接受的参数</span><br></pre></td></tr></table></figure>\n<p>如果不是很明白，等下通过一个实例会对这几个参数进行更深的讲解。</p>\n<p>接下来我们来看看Proxy这个类：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Proxy provides static methods for creating dynamic proxy classes and instances, and it is also the superclass of all dynamic proxy classes created by those methods. </span><br></pre></td></tr></table></figure>\n<p>Proxy这个类的作用就是用来动态创建一个代理对象的类，它提供了许多的方法，但是我们用的最多的就是 newProxyInstance 这个方法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static Object newProxyInstance(ClassLoader loader, Class&lt;?&gt;[] interfaces,  InvocationHandler h)  throws IllegalArgumentException</span><br><span class=\"line\">Returns an instance of a proxy class for the specified interfaces that dispatches method invocations to the specified invocation handler.</span><br></pre></td></tr></table></figure>\n<p>这个方法的作用就是得到一个动态的代理对象，其接收三个参数，我们来看看这三个参数所代表的含义： </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static Object newProxyInstance(ClassLoader loader, Class&lt;?&gt;[] interfaces, InvocationHandler h) throws IllegalArgumentException</span><br><span class=\"line\"></span><br><span class=\"line\">loader:　　一个ClassLoader对象，定义了由哪个ClassLoader对象来对生成的代理对象进行加载</span><br><span class=\"line\"></span><br><span class=\"line\">interfaces:　　一个Interface对象的数组，表示的是我将要给我需要代理的对象提供一组什么接口，如果我提供了一组接口给它，那么这个代理对象就宣称实现了该接口(多态)，这样我就能调用这组接口中的方法了</span><br><span class=\"line\"></span><br><span class=\"line\">h:　　一个InvocationHandler对象，表示的是当我这个动态代理对象在调用方法的时候，会关联到哪一个InvocationHandler对象上</span><br></pre></td></tr></table></figure>\n<p>好了，在介绍完这两个接口(类)以后，我们来通过一个实例来看看我们的动态代理模式是什么样的：</p>\n<p>首先我们定义了一个Subject类型的接口，为其声明了两个方法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public interface Subject</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public void rent();</span><br><span class=\"line\">    </span><br><span class=\"line\">    public void hello(String str);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>接着，定义了一个类来实现这个接口，这个类就是我们的真实对象，RealSubject类：  </p>\n<p>下一步，我们就要定义一个动态代理类了，前面说个，每一个动态代理类都必须要实现 InvocationHandler 这个接口，因此我们这个动态代理类也不例外： </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class DynamicProxy implements InvocationHandler</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    &#x2F;&#x2F;　这个就是我们要代理的真实对象</span><br><span class=\"line\">    private Object subject;</span><br><span class=\"line\">    </span><br><span class=\"line\">    &#x2F;&#x2F;    构造方法，给我们要代理的真实对象赋初值</span><br><span class=\"line\">    public DynamicProxy(Object subject)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        this.subject &#x3D; subject;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public Object invoke(Object object, Method method, Object[] args)</span><br><span class=\"line\">            throws Throwable</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        &#x2F;&#x2F;　　在代理真实对象前我们可以添加一些自己的操作</span><br><span class=\"line\">        System.out.println(&quot;before invoke&quot;);</span><br><span class=\"line\">        </span><br><span class=\"line\">        System.out.println(&quot;Method:&quot; + method);</span><br><span class=\"line\">        </span><br><span class=\"line\">        &#x2F;&#x2F;    当代理对象调用真实对象的方法时，其会自动的跳转到代理对象关联的handler对象的invoke方法来进行调用</span><br><span class=\"line\">        method.invoke(subject, args);</span><br><span class=\"line\">        </span><br><span class=\"line\">        &#x2F;&#x2F;　　在代理真实对象后我们也可以添加一些自己的操作</span><br><span class=\"line\">        System.out.println(&quot;after invoke&quot;);</span><br><span class=\"line\">        </span><br><span class=\"line\">        return null;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;[![复制代码](java基础知识整理&#x2F;copycode.gif)](javascript:void(0);</span><br></pre></td></tr></table></figure>\n\n\n<p>最后，来看看我们的Client类： </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Client</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public static void main(String[] args)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        &#x2F;&#x2F;    我们要代理的真实对象</span><br><span class=\"line\">        Subject realSubject &#x3D; new RealSubject();</span><br><span class=\"line\"></span><br><span class=\"line\">        &#x2F;&#x2F;    我们要代理哪个真实对象，就将该对象传进去，最后是通过该真实对象来调用其方法的</span><br><span class=\"line\">        InvocationHandler handler &#x3D; new DynamicProxy(realSubject);</span><br><span class=\"line\"></span><br><span class=\"line\">        &#x2F;*</span><br><span class=\"line\">         * 通过Proxy的newProxyInstance方法来创建我们的代理对象，我们来看看其三个参数</span><br><span class=\"line\">         * 第一个参数 handler.getClass().getClassLoader() ，我们这里使用handler这个类的ClassLoader对象来加载我们的代理对象</span><br><span class=\"line\">         * 第二个参数realSubject.getClass().getInterfaces()，我们这里为代理对象提供的接口是真实对象所实行的接口，表示我要代理的是该真实对象，这样我就能调用这组接口中的方法了</span><br><span class=\"line\">         * 第三个参数handler， 我们这里将这个代理对象关联到了上方的 InvocationHandler 这个对象上</span><br><span class=\"line\">         *&#x2F;</span><br><span class=\"line\">        Subject subject &#x3D; (Subject)Proxy.newProxyInstance(handler.getClass().getClassLoader(), realSubject</span><br><span class=\"line\">                .getClass().getInterfaces(), handler);</span><br><span class=\"line\">        </span><br><span class=\"line\">        System.out.println(subject.getClass().getName());</span><br><span class=\"line\">        subject.rent();</span><br><span class=\"line\">        subject.hello(&quot;world&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们先来看看控制台的输出： </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$Proxy0</span><br><span class=\"line\"></span><br><span class=\"line\">before invoke</span><br><span class=\"line\">Method:public abstract void com.xiaoluo.dynamicproxy.Subject.rent()</span><br><span class=\"line\">I want to rent my house</span><br><span class=\"line\">after invoke</span><br><span class=\"line\"></span><br><span class=\"line\">before invoke</span><br><span class=\"line\">Method:public abstract void com.xiaoluo.dynamicproxy.Subject.hello(java.lang.String)</span><br><span class=\"line\">hello: world</span><br><span class=\"line\">after invoke</span><br></pre></td></tr></table></figure>\n<p>当调试的时候，如果把鼠标放在subject 上面，会自动的执行toString()方法，也就是</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">before invoke</span><br><span class=\"line\">Method:public abstract void com.xiaoluo.dynamicproxy.Subject.toString()</span><br><span class=\"line\"> </span><br><span class=\"line\">after invoke</span><br></pre></td></tr></table></figure>\n\n\n<p>我们首先来看看 $Proxy0 这东西，我们看到，这个东西是由 System.out.println(subject.getClass().getName()); 这条语句打印出来的，那么为什么我们返回的这个代理对象的类名是这样的呢？</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Subject subject &#x3D; (Subject)Proxy.newProxyInstance(handler.getClass().getClassLoader(), realSubject</span><br><span class=\"line\">                .getClass().getInterfaces(), handler);</span><br></pre></td></tr></table></figure>\n<p>可能我以为返回的这个代理对象会是Subject类型的对象，或者是InvocationHandler的对象，结果却不是<strong>，首先我们解释一下为什么我们这里可以将其转化为Subject类型的对象？原因就是在newProxyInstance这个方法的第二个参数上，我们给这个代理对象提供了一组什么接口，那么我这个代理对象就会实现了这组接口，这个时候我们当然可以将这个代理对象强制类型转化为这组接口中的任意一个，因为这里的接口是Subject类型，所以就可以将其转化为Subject类型了</strong>。</p>\n<p><strong>同时我们一定要记住，通过 Proxy.newProxyInstance 创建的代理对象是在jvm运行时动态生成的一个对象，它并不是我们的InvocationHandler类型，也不是我们定义的那组接口的类型，而是在运行是动态生成的一个对象，并且命名方式都是这样的形式，以$开头，proxy为中，最后一个数字表示对象的标号</strong>。</p>\n<p>接着我们来看看这两句 </p>\n<p>subject.rent();<br>subject.hello(“world”);</p>\n<p>这里是通过代理对象来调用实现的那种接口中的方法，这个时候程序就会跳转到由这个代理对象关联到的 handler 中的invoke方法去执行，而我们的这个 handler 对象又接受了一个 RealSubject类型的参数，表示我要代理的就是这个真实对象，所以此时就会调用 handler 中的invoke方法去执行： </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public Object invoke(Object object, Method method, Object[] args)</span><br><span class=\"line\">            throws Throwable</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        &#x2F;&#x2F;　　在代理真实对象前我们可以添加一些自己的操作</span><br><span class=\"line\">        System.out.println(&quot;before invoke&quot;);</span><br><span class=\"line\">        </span><br><span class=\"line\">        System.out.println(&quot;Method:&quot; + method);</span><br><span class=\"line\">        </span><br><span class=\"line\">        &#x2F;&#x2F;    当代理对象调用真实对象的方法时，其会自动的跳转到代理对象关联的handler对象的invoke方法来进行调用</span><br><span class=\"line\">        method.invoke(subject, args);</span><br><span class=\"line\">        </span><br><span class=\"line\">        &#x2F;&#x2F;　　在代理真实对象后我们也可以添加一些自己的操作</span><br><span class=\"line\">        System.out.println(&quot;after invoke&quot;);</span><br><span class=\"line\">        </span><br><span class=\"line\">        return null;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>我们看到，在真正通过代理对象来调用真实对象的方法的时候，我们可以在该方法前后添加自己的一些操作，同时我们看到我们的这个 method 对象是这样的：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public abstract void com.xiaoluo.dynamicproxy.Subject.rent()</span><br><span class=\"line\"></span><br><span class=\"line\">public abstract void com.xiaoluo.dynamicproxy.Subject.hello(java.lang.String)</span><br></pre></td></tr></table></figure>\n<p>正好就是我们的Subject接口中的两个方法，这也就证明了当我通过代理对象来调用方法的时候，起实际就是委托由其关联到的 handler 对象的invoke方法中来调用，并不是自己来真实调用，而是通过代理的方式来调用的。</p>\n<p>这就是我们的java动态代理机制</p>\n<h1 id=\"三、java集合\"><a href=\"#三、java集合\" class=\"headerlink\" title=\"三、java集合\"></a>三、java集合</h1><h3 id=\"1、java中的集合类结构\"><a href=\"#1、java中的集合类结构\" class=\"headerlink\" title=\"1、java中的集合类结构\"></a>1、java中的集合类结构</h3><p><img src=\"/2020/12/24/java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E6%95%B4%E7%90%86/20160624152602394\" alt=\"集合结构\"></p>\n<h3 id=\"2、List、Set和Map：\"><a href=\"#2、List、Set和Map：\" class=\"headerlink\" title=\"2、List、Set和Map：\"></a>2、List、Set和Map：</h3><p>​    List是有序的集合，Set是无序的集合。Map是无序的键值对。</p>\n<h4 id=\"1-集合和数组的区别：\"><a href=\"#1-集合和数组的区别：\" class=\"headerlink\" title=\"1.集合和数组的区别：\"></a>1.集合和数组的区别：</h4><p><img src=\"/2020/12/24/java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E6%95%B4%E7%90%86/20180803193134355\" alt=\"这里写图片描述\"></p>\n<h4 id=\"2-Collection集合的方法：\"><a href=\"#2-Collection集合的方法：\" class=\"headerlink\" title=\"2.Collection集合的方法：\"></a>2.Collection集合的方法：</h4><p><img src=\"/2020/12/24/java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E6%95%B4%E7%90%86/20180803193423722\" alt=\"这里写图片描述\"></p>\n<h3 id=\"3、HashMap详解：\"><a href=\"#3、HashMap详解：\" class=\"headerlink\" title=\"3、HashMap详解：\"></a>3、HashMap详解：</h3><p>​    HashMap有两个参数影响其性能：初始容量和加载因子。默认初始容量是16，加载因子是0.75。容量是哈希表中桶(Entry数组)的数量，初始容量只是哈希表在创建时的容量。加载因子是哈希表在其容量自动增加之前可以达到多满的一种尺度。当哈希表中的条目数超出了加载因子与当前容量的乘积时，通过调用 rehash 方法将容量翻倍。</p>\n<h3 id=\"4、ArrayList和Vector对比：\"><a href=\"#4、ArrayList和Vector对比：\" class=\"headerlink\" title=\"4、ArrayList和Vector对比：\"></a>4、ArrayList和Vector对比：</h3><p>​    都是List的实现类。他们都是有序集合，即存储在这两个集合中的元素的位置都是有顺序的，相当于一种动态的数组，我们以后可以按位置索引号取出某个元素<br>​    Vector是线程安全的，也就是说是它的方法之间是线程同步的，而ArrayList是线程序不安全的，它的方法之间是线程不同步的。如果只有一个线程会访问到集合，那最好是使用ArrayList，因为它不考虑线程安全，效率会高些；如果有多个线程会访问到集合，那最好是使用Vector，因为不需要我们自己再去考虑和编写线程安全的代码</p>\n<h3 id=\"5、ArrayList和LinkedList对比：\"><a href=\"#5、ArrayList和LinkedList对比：\" class=\"headerlink\" title=\"5、ArrayList和LinkedList对比：\"></a>5、ArrayList和LinkedList对比：</h3><p>​    1.ArrayList是实现了基于动态数组的数据结构，LinkedList基于链表的数据结构。<br>​    2.对于随机访问get和set，ArrayList觉得优于LinkedList，因为LinkedList要移动指针。<br>​    3.对于新增和删除操作add和remove，LinedList比较占优势，因为ArrayList要移动数据。</p>\n<h3 id=\"6、HashSet和TreeSet对比：\"><a href=\"#6、HashSet和TreeSet对比：\" class=\"headerlink\" title=\"6、HashSet和TreeSet对比：\"></a>6、HashSet和TreeSet对比：</h3><p>​    HashSet比TreeSet的性能要好，因为TreeSet需要额外的红黑树算法来维护集合的次序。所以只有当需要保持排序的Set时候，才会使用TreeSet，否则都应该使用HashSet。</p>\n<h3 id=\"7、HashSet和HashMap对比：\"><a href=\"#7、HashSet和HashMap对比：\" class=\"headerlink\" title=\"7、HashSet和HashMap对比：\"></a>7、HashSet和HashMap对比：</h3><p>​    都是采用Hash算法来决定元素的存储位置，并通过hash算法来增加集合大小的。其中最大的区别就是，HashSet实现的Set接口，他不允许有重复的值。HashMap实现的是Map接口，里面存储的是键值对，map中不允许存在重复的key。</p>\n<h3 id=\"8、HashMap和HashTable对比：\"><a href=\"#8、HashMap和HashTable对比：\" class=\"headerlink\" title=\"8、HashMap和HashTable对比：\"></a>8、HashMap和HashTable对比：</h3><p>​    HashTable是一个线程安全的Map实现，但HashMap是线程不安全的实现，所以HashMap比HashTable的性能高一些；但是如果有多个线程访问同一个Map对象时候，应该使用HashTable。<br>​    HashTable不允许使用null作为key和value，如果视图把null值放入HashTable中会引发NullPointerException异常，但是HashMap可以使用null作为key或value。null可以作为键，这样的键只有一个；可以有一个或多个键所对应的值为null。当get()方法返回null值时，即可以表示 HashMap中没有该键，也可以表示该键所对应的值为null。因此，在HashMap中不能由get()方法来判断HashMap中是否存在某个键，而应该用containsKey()方法来判断。</p>\n<h2 id=\"各集合对比：\"><a href=\"#各集合对比：\" class=\"headerlink\" title=\"各集合对比：\"></a>各集合对比：</h2><p><img src=\"/2020/12/24/java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E6%95%B4%E7%90%86/20160624152704286\" alt=\"集合对比\"></p>"},{"title":"hive知识整理","date":"2020-12-29T13:16:31.000Z","_content":"\n# Hive\n\n<!-- toc -->\n\n[TOC]\n\n\n\n## 概述\n\nHive是基于Hadoop的一个数据仓库工具，可以将结构化的数据文件映射为一张数据库表，并提供类SQL查询功能。\n\n本质是将SQL转换为MapReduce程序\n\n主要用途：用来做离线数据分析，比直接用MapReduce开发效率更高\n\n<!--more-->\n\n![img](hive知识整理/timg-1568381886490.jpg) \n\n数据仓库和数据库的区别\n\n* 数据库是面向事务的设计，数据仓库是面向主题设计的。\n\n* 数据库一般存储业务数据，数据仓库存储的一般是历史数据。\n\n* 数据库设计是尽量避免冗余，一般针对某一业务应用进行设计，比如一张简单的User表，记录用户名、密码等简单数据即可，符合业务应用，但是不符合分析。数据仓库在设计是有意引入冗余，依照分析需求，分析维度、分析指标进行设计。\n\n* 数据库是为捕获数据而设计，数据仓库是为分析数据而设计。\n\n数据仓库分层架构\n\n==源数据层（ODS）==：此层数据无任何更改，直接沿用外围系统数据结构和数据，不对外开放；为临时存储层，是接口数据的临时存储区域，为后一步的数据处理做准备。\n\n==数据仓库层（DW）==：也称为细节层，DW层的数据应该是一致的、准确的、干净的数据，即对源系统数据进行了清洗（去除了杂质）后的数据。\n\n==数据应用层（DA或APP）==：前端应用直接读取的数据源；根据报表、专题分析需求而计算生成的数据。\n\n \n\n~~~bash\n先启动metastore服务再启动hiveserver2服务\n/export/servers/hive/bin/beeline\nbeeline> ! connect jdbc:hive2://hdp3:10000\n\n~~~\n\n\n\nhive SQL语句中 select from where group by having order by 的==执行顺序==？\n\n1.from--where--group by--having--select--order by， \n\n2.from：需要从哪个数据表检索数据 \n\n3.where：过滤表中数据的条件 \n\n4.group by：如何将上面过滤出的数据分组 \n\n5.having：对上面已经分组的数据进行过滤的条件 \n\n6.select：查看结果集中的哪个列，或列的计算结果 \n\n7.order by ：按照什么样的顺序来查看返回的数据\n\n## 1.DDL操作\n\n设置hive程序本地运行模式：\n\n~~~bash\nset hive.exec.mode.local.auto=true;\n~~~\n\n### 1.1  创建表\n\n```sql\ncreate [external] table [if not exists] tb_name (...) [like] existing_table;\n[row format delimited fields terminated by char\n\t\t\t\t\tcollection items terminated by char\n\t\t\t\t\tmap keys terminated by char\n\t\t\t\t\tlines terminated by char\n\t\t\t\t\t...]\n[partitioned by ]\n[stored as file_format]\n[CLUSTERED BY (col_name, col_name, ...) [SORTED BY (col_name [ASC|DESC], ...)] INTO num_buckets BUCKETS]\n[LOCATION hdfs_path]\n\n\n```\n\n1.create table 创建一个指定名字的表，如果表以存在可以用[if not exists]跳过异常\n\n2.[external] 关键字可以让给用户创建一个外部表。\n\n创建内部表时会将数据移动到数据仓库指向的路径，删除表时元数据和数据都被删除。\n\n外部表仅记录数据所在的路径，删除时只删除元数据，不删除数据。\n\n3.[like] 允许用户复制现有的表结构，但是不复制数据\n\n4.[row format delimited] 指定表列与列的分隔符。hive建表的时候默认分隔符是‘\\001’,\n\n5.[partitioned by] 分区命令。每个表可以有多个分区，每个分区以文件夹的形式单独存在表文件夹目录下。分区是以字段的形式在表结构中存在。\n\n6.[stored as sequencedile|textfile|refile]   如果文件数据是纯文本，可以使用textfile,如果数据需要压缩，使用sequencedile。\n\ntextfile是默认的文件格式，使用delimited子句来读取分隔文件\n\n7.[clustered by (col_name,col_name,....)]   分桶\n\n8.[LOCATION hdfs_path]  指定这张表所在的hdfs上的目录，如果不指定，默认在数据库的目录下面\n\n```sql\ncreate table tb_name as select statement;将sql语句的结果进行保存\ncreate table tb_new like tb_old;创建一张结构与tb_old一样的表\ndrop table [if exists] tb_name;删除表\ntruncate table tb_name;清空表\nshow functions;查看所有的函数\nshow partitions tb_name;查看所有分区\ndesc formatted tb_name；查看表信息\n\n```\n\n#### 1.1.1 管理表\n\n最普通的表，默认表的类型就是管理表\n\n```sql\ncreate table tb_name();\n\n```\n\n#### 1.1.2 外部表\n\n```sql\ncreate external table tb_name();\n\n```\n\n特点：在删除时，不会删除表数据\n\n应用场景：1-如果需要多张表共用同一份数据，都建立外部表，使用完以后，删除表互不影响。2-如果数据需要进行额外的使用：存档等等\n\n#### 1.1.3 分区表\n\n```sql\ncreate external table tb_part(\nid string\n name string\n)\npartitioned by (day string)\nrow format delimited fields terminated by '\\t';\n--创建分区表，指定分区字段day\nload data local inpath '/export/datas/20180718' into table tb_name partition(day='18');\n--加载文件数据，创建分区字段day=18\nload data local inpath '/export/datas/20180719' into table tb_name partition(day='19');\n--加载文件数据，创建分区字段day=19\nselect * from tb_part where day = 19;\n--过滤条件需是分区的字段，如果不是分区字段就会从整个分区目录中查找\n\n```\n\n- 手动分区：加载数据时，手动指定文件的分区\n\n  分区字段为查询的语句的最后一个字段 \n\n  ```sql\n  insert overwrite table tb_emp_part partition (deptno)\n    select empno\n    ename,\n    job,\n    manager,\n    inday,\n    salary,\n    jiangjin,\n    deptno\n  from tb_emp_normal;\n  \n  ```\n\n  - 应用场景：将普通表的数据转换成一个分区表\n    \t\t   原始表【tb1】中的数据没有做分区\n      \t\t   希望将原始表中的数据按照分区存放到新的分区表[tb2]\n\n  - 自动分区：默认按照原始表的最后一列进行分区\n\n  ```sql\n  set hive.exec.dynamic.partition.mode=nonstrict;\n  配置自动分区\n  show partitions tb_name;\n  查看当前所有分区\n  \n  ```\n\n  数据加载问题：\n  1-如果手动将数据文件放入一张普通表的目录下？表能不能读到数据？\n\n  ​\t可以，元数据查询时直接将表的目录作为查询目录\n  2-如果手动将数据文件放入一张分区表的分区目录下？表能不能读到数据？表的分区能不能读到数据？\n  ​\t可以的，因为元数据查询时直接将分区的目录作为查询目录\n  3-如果手动在HDFS上创建一个分区的目录，将数据放入分区目录下，表能不能读到数据？\n  ​\t不能，因为Hive中没有该分区的元数据\n\n  方案一：修复表的元数据（资源占用多）\n\n  ```sql\n  msck repair table tb_emp;\n  \n  ```\n\n  方案二：手动向表中添加一个分区\n\n  ```sql\n  alter table tb_name add [if exists] partition (dt='20') location '/user/hadoop/dt=20';\n  --要求建立的目录必须与分区自动创建的目录格式一样\n  \n  ```\n\n  删除分区\n\n  ~~~bash\n  alter table tb_name drop [if exists] partition (dt='20');\n  ~~~\n\n  \n\n  #### 1.1.4  分桶表\n\n  ```sql\n  create table tb_emp_bucket(\n  empno int ,\n  ename string,\n  job string,\n  manager int,\n  inday string,\n  salary double,\n  jiangjin double,\n  deptno int\n  ) \n  clustered by (deptno) into 3 BUCKETS\n  row format delimited fields terminated by '\\t';\n  \n  ```\n\n  应用场景：大表join大表时\n\n  ```sql\n  --开启分桶\n  set hive.enforce.bucketing=true;\n  \n  insert overwrite table tb_emp_bucket\n  select * from tb_emp_normal cluster by (deptno);\n  \n  ```\n\n  连个桶表桶的个数必须相同，或者b表桶是a表的倍数\n\n  ### 1.2 修改表\n\n  增加分区：\n\n  ```sql\n  alter table tb_name add partition (dt='20170101') location '/user/hadoop/table_name/dt=20170101';\n  \n  ```\n\n  删除分区\n\n  ```sql\n  alter table tb_name drop if exists partition (dt='20170101')\n  \n  ```\n\n  修改分区\n\n  ```sql\n  alter table tb_name partition (dt='20170101') rename to partition(dt='20170202')\n  \n  ```\n\n  添加列\n\n  ```sql\n  --添加列\n  alter table tb_name add|replace columns (col_name string);\n  --修改表名\n  alter table stu_par rename to stu_par1\n  --增加列\n  alter table stu1 add columns(score string);\n  --修改列类型\n  alter table stu1 change column score score double;\n  --\n  ```\n\n  ## 2.DML操作\n\n  ### 2.1 load \n\n  在将数据加载到表中时，Hive不会进行任何转换。加载操作是将数据文件移动到与Hive表对应的位置的纯复制/移动操作。\n\n  ```sql\n  load data [local] inpath 'filepath' [overwrite] into table tb_name [partition(partcol1=val1,partcol2=val2...)]\n  \n  ```\n\n  ### 2.2 insert\n\n  Hive中insert主要是结合select查询语句使用，将查询结果插入到表中\n\n  ```sql\n  --查询结果的列数要和插入数据表格的列数一致\n  insert overwrite table tb_name select statement\n  --将查询语句结果保存至HDFS中\n  insert overwrite directory \"/movie/answer10/\" select statement;\n  \n  ```\n\n  ### 2.3 join\n\n  inner join: 两张表都有结果才有\n\n  left join: 左表有，结果就有\n\n  right join: 右表有，结果就有\n\n  full join：两边任意一边有，结果就有\n\n  cross join:笛卡尔积      --一般用于结果的漏斗计算\n\n  ### 2.4 排序\n\n  ```sql\n  set hive.exec.reducers.bytes.per.reducer=<number>\n  \t每个reduce最多处理多少数据量\n  set hive.exec.reducers.max=<number>\t\n  \t最多启动多少个reduce\n  set mapreduce.job.reduces=<number>\n  \t设置reduce的个数\n  \n  ```\n\n  #### order by\n\n  全局排序，对整体进行排序，只有一个reduce的情况下\n\n  在启用多个reduce的情况下如果使用order by 结果依旧全局有序，但只会启用一个reduce\n\n  ```sql\n  select  empno,ename,salary,deptno from tb_emp_normal order by empno;\n  \n  ```\n\n  #### sort by\n\n  局部排序，多个reduce的 情况下，每个reduce内部有序（分区内有序）\n\n  ```sql\n  set mapreduce.job.reduces=3;\n  设置reduce个数\n  insert overwrite local directory '/export/datas/sort' \n  row format delimited fields terminated by '\\t' \n  select  empno,ename,salary,deptno from tb_emp_normal \n  sort by empno;\n  \n  ```\n\n  #### distribute by\n\n  指定多个reduce情况下，以哪一列作为分区字段。将相同的数据放入同一个结果文件，类似MR中Partition，进行分区，结合sort by使用  \n\n  ```sql\n  insert overwrite local directory '/export/datas/dis' \n  row format delimited fields terminated by '\\t' \n  select  empno,ename,salary,deptno from tb_emp_normal \n  distribute by deptno \n  sort by empno;\n  \n  ```\n\n  #### cluster by\n\n  如果sort by与distribute by使用同一个字段可以用此代替，但是排序只能是升序排序，不能指定排序规则为ASC或者DESC。\n\n  \n\n## 3.hive参数配置\n\n### 3.1 Hive shell命令行\n\n针对bin/hive，除了可以当第一代客户端之外。还可以在hive中启动其他用途。\n\n1、 -i  初始化HQL文件。\n\n2、 -e从命令行执行指定的HQL \n\n3、 -f 执行HQL脚本 \n\n4、 -v 输出执行的HQL语句到控制台 \n\n5、 -p <port> connect to Hive Server on port number \n\n6、 -hiveconf x=y Use this to set hive/hadoop configuration variables.\n\n例如：\n\n~~~bash\n$HIVE_HOME/bin/hive -e 'select * from table a'\t\n\n$HIVE_HOME/bin/hive -f /home/my/hive-script.sql\n\n$HIVE_HOME/bin/hive -f hdfs://<namenode>:<port>/hive-script.sql\n\n$HIVE_HOME/bin/hive -i /home/my/hive-init.sql\n\n~~~\n\n\n\n### 3.2 Hive 参数配置方式\n\n*Hive参数大全：*\n\n[*https://cwiki.apache.org/confluence/display/Hive/Configuration+Properties*\n\n 开发Hive应用时，不可避免地需要设定Hive的参数。设定Hive的参数可以调优HQL代码的执行效率，或帮助定位问题。然而实践中经常遇到的一个问题是，为什么设定的参数没有起作用？这通常是错误的设定方式导致的。\n\n对于一般参数，有以下三种设定方式：\n\n配置文件   （全局有效）\n\n命令行参数   （对hive启动实例有效）\n\n参数声明   （对hive的连接session有效）\n\n配置文件 \n\n用户自定义配置文件：$HIVE_CONF_DIR/hive-site.xml\n\n默认配置文件：$HIVE_CONF_DIR/hive-default.xml \n\n用户自定义配置会覆盖默认配置。\n\n另外，Hive也会读入Hadoop的配置，因为Hive是作为Hadoop的客户端启动的，Hive的配置会覆盖Hadoop的配置。\n\n配置文件的设定对本机启动的所有Hive进程都有效。\n\n 命令行参数\n\n启动Hive（客户端或Server方式）时，可以在命令行添加-hiveconf来设定参数\t例如：bin/hive -hiveconf hive.root.logger=INFO,console\n\n设定对本次启动的Session（对于Server方式启动，则是所有请求的Sessions）有效。\n\n 参数声明\n\n可以在HQL中使用SET关键字设定参数，这一设定的作用域也是session级的。\n\n比如：\n\nset hive.exec.reducers.bytes.per.reducer=<number>  每个reduce task的平均负载数据量\n\nset hive.exec.reducers.max=<number>   设置reduce task数量的上限\n\nset mapreduce.job.reduces=<number>    指定固定的reduce task数量\n\n但是，这个参数在必要时<业务逻辑决定只能用一个reduce task> hive会忽略\n\n上述三种设定方式的优先级依次递增。即参数声明覆盖命令行参数，命令行参数覆盖配置文件设定。注意某些系统级的参数，例如log4j相关的设定，必须用前两种方式设定，因为那些参数的读取在Session建立以前已经完成了。\n\n## 4.hive中复杂数据类型的使用\n\n### 4.1 数组类型\n\n~~~\n--数据如下：vim /export/datas/array.txt\nzhangsan\tbeijing,shanghai,tianjin,hangzhou\nwangwu\tshanghai,chengdu,wuhan,haerbin\n~~~\n\n~~~sql\n--创建表\ncreate table complex_array(\nname string,\nwork_locations array<string>\n)\nrow format delimited fields terminated by '\\t' --指定列的分隔符\ncollection items terminated by ',';--指定数组中元素的分隔符\n\n--加载数据\nload data local inpath '/export/datas/array.txt' into table complex_array;\n\n--查询\nselect * from complex_array;\nselect size(work_locations) from complex_array;\nselect work_locations[0],work_locations[1] from complex_array;\n~~~\n\n### 4.2 map类型\n\n~~~\n--数据如下：vim /export/datas/map.txt\n1,zhangsan,唱歌:非常喜欢-跳舞:喜欢-游泳:一般般\n2,lisi,打游戏:非常喜欢-篮球:不喜欢\n~~~\n\n~~~sql\n--创建表\ncreate table complex_map(\nid int,\nname string,\nhobby map<string,string>)\nrow format delimited fields terminated by ',' --指定列的分隔符\ncollection items terminated by '-' map keys terminated by ':' ;--指定keyvalue的分割\n\n--加载数据\nload data local inpath '/export/datas/map.txt' into table complex_map;\n\n--查询\nselect * from complex_map;\nselect size(hobby) from complex_map;\nselect hobby[\"唱歌\"] from complex_map;\n~~~\n\n### 4.3 正则类型\n\n```sql\n--数据如下:vim /export/datas/regex.txt\ntom 男 23 上海\n```\n\n```sql\n--使用正则加载数据\nCREATE TABLE user_regex(\nname string,\nsex string,\nage int,\ncity string\n)\nROW FORMAT SERDE 'org.apache.hadoop.hive.serde2.RegexSerDe'\nWITH SERDEPROPERTIES (\n  \"input.regex\" = \"([^ ]+) ([^ ]+) ([0-9]+) (.+)\"\n)\nSTORED AS TEXTFILE;\n\nload data local inpath '/root/regex.txt' into table user_regex;\n```\n\n### 4.4 json类型\n\n~~~sql\n--通过专门的解析类直接加载一个json格式的数据到Hive中\n--数据如下:vim /export/datas/hivedata.json\n{\"id\": 1701439105,\"ids\": [2154137571,3889177061],\"total_number\": 493}\n{\"id\": 1701439106,\"ids\": [2154137571,3889177061],\"total_number\": 494}\n--添加jar包\nadd jar /export/datas/json-serde-1.3.7-jar-with-dependencies.jar;\n~~~\n\n~~~sql\n--创建表：\ncreate table tb_json_test2 (\nid string,\nids array<string>,\ntotal_number int)\nROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'\nSTORED AS TEXTFILE;\n\n\n--加载数据\nload data local inpath '/export/datas/hivedata.json' into table tb_json_test2;\n~~~\n\n### 4.5 python类型\n\n```sql\n--创建Python脚本实现将原始表的时间转为对应的星期几\nvim /export/datas/weekday_mapper.py\n\nimport sys\nimport datetime\n\nfor line in sys.stdin:\n  line = line.strip()\n  userid, movieid, rating, unixtime = line.split('\\t')\n  weekday = datetime.datetime.fromtimestamp(float(unixtime)).isoweekday()\n  print '\\t'.join([userid, movieid, rating, str(weekday)])\n \n```\n\n```sql\n--加载python脚本并将数据写入新表\nadd FILE /export/datas/weekday_mapper.py;\nINSERT OVERWRITE TABLE u_data_new\nSELECT\n  TRANSFORM (userid, movieid, rating, unixtime)\n  USING 'python weekday_mapper.py'\n  AS (userid, movieid, rating, weekday)\nFROM u_data;\n```\n\n## 5.Hive函数\n\n### 5.1自定义函数\n\n#### 5.1.1 UDF\n\nUDF（User-Defined-Function）普通函数 一进一出\n\n1、自定义一个类，继承UDF,实现一个或重载多个evaluate方法，打包上传jar包到linux环境\n\n```xml\n       <!-- 指定该项目可以从哪些地方下载依赖包 -->\n\t\t\t<repository>\n\t\t\t\t<id>aliyun</id>\n\t\t\t\t<url>http://maven.aliyun.com/nexus/content/groups/public/</url>\n\t\t\t</repository>\n\t\t\t<repository>\n\t\t\t\t<id>cloudera</id>\n\t\t\t\t<url>https://repository.cloudera.com/artifactory/cloudera-repos/</url>\n\t\t\t</repository>\n\t\t\t<repository>\n\t\t\t\t<id>jboss</id>\n\t\t\t\t<url>http://repository.jboss.org/nexus/content/groups/public</url>\n\t\t\t</repository>\n\t\t</repositories>\n\t\t<!--指定字符编码-->\n\t\t<properties>\n\t\t\t<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n\t\t</properties>\n\t\t<!--指定依赖-->\n\t\t<dependencies>\n\t\t\t<dependency>\n\t\t\t\t<groupId>org.apache.hadoop</groupId>\n\t\t\t\t<artifactId>hadoop-common</artifactId>\n\t\t\t\t<version>2.6.0-cdh5.14.0</version>\n\t\t\t</dependency>\n\t\t\t<dependency>\n\t\t\t\t<groupId>org.apache.hadoop</groupId>\n\t\t\t\t<artifactId>hadoop-hdfs</artifactId>\n\t\t\t\t<version>2.6.0-cdh5.14.0</version>\n\t\t\t</dependency>\n\n\t\t\t<dependency>\n\t\t\t\t<groupId>org.apache.hadoop</groupId>\n\t\t\t\t<artifactId>hadoop-client</artifactId>\n\t\t\t\t<version>2.6.0-cdh5.14.0</version>\n\t\t\t</dependency>\n\t\t\t<dependency>\n\t\t\t\t<groupId>org.apache.hive</groupId>\n\t\t\t\t<artifactId>hive-exec</artifactId>\n\t\t\t\t<version>1.1.0-cdh5.14.0</version>\n\t\t\t</dependency>\n\t\t\t<dependency>\n\t\t\t\t<groupId>org.apache.hive</groupId>\n\t\t\t\t<artifactId>hive-common</artifactId>\n\t\t\t\t<version>1.1.0-cdh5.14.0</version>\n\t\t\t</dependency>\n\t\t\t<dependency>\n\t\t\t\t<groupId>org.apache.hive</groupId>\n\t\t\t\t<artifactId>hive-cli</artifactId>\n\t\t\t\t<version>1.1.0-cdh5.14.0</version>\n\t\t\t</dependency>\n\t\t\t<dependency>\n\t\t\t\t<groupId>org.apache.hive</groupId>\n\t\t\t\t<artifactId>hive-jdbc</artifactId>\n\t\t\t\t<version>1.1.0-cdh5.14.0</version>\n\t\t\t</dependency>\n\t\t</dependencies>\n```\n\n```java\nimport org.apache.hadoop.hive.ql.exec.UDF;\nimport org.apache.hadoop.io.Text;\npublic class UserUDF extends UDF{\n\tpublic Text evaluate(Text s){\n        if(s==null){\n            return null;\n        }\n        return new Text(s.toString().toLowerCase());\n    }\n}\n```\n\n\n\n2、将jar包添加到hive环境中\n\n```\nadd jar /export/datas/udf.jar;\n\n```\n\n3、在hive中创建一个函数\n\n```\ncreate temporary function fc_name as 'com.neusoft.data.UserUDF';\n\n```\n\n4、使用函数\n\n```\nselect fc_name(age),name from tb_name;\n\n```\n\n#### 5.1.2自定义udf,udtf,udaf开发\n\nUDF：\n1-开发udf程序：继承UDF类，实现一个或者多个evaluate方法\n2-打成jar包\n3-上传jar包到集群中，并添加到hive的环境变量中，在hive中执行\n\tadd jar /export/datas/udf.jar;\n4-创建临时函数：\n\tcreate temporary function  transDate as 'cn.itcast.bigdata.hive.TransDate';\n5-测试函数：\n\tselect transDate(\"18/Aug/2019:12:30:05\");\n6-删除临时函数\n\tDROP TEMPORARY FUNCTION transDate;\n\nUDTF\n1-开发udtf程序：继承UDTF类，重写process方法\n2-打成jar包\n3-上传jar包到集群中，并添加到hive的环境变量中，在hive中执行\n\tadd jar /export/datas/udtf.jar;\n4-创建临时函数：\n\tcreate temporary function  transMap as 'cn.itcast.bigdata.hive.UserUDTF';\n5-测试函数：\n\t第一种用法：直接调用\n\t\tselect transMap(\"uuid=root&url=www.taobao.com\") as (userCol1,userCol2);\n\t第二种用法：和侧视图一起使用\n\t\tselect deptno,deptname,a.* from tb_dept lateral view transMap(\"uuid=root&url=www.taobao.com\") a as col1,col2;\n\t注意：\n\t\t1-udtf只能直接select中使用\n\t\t2-不可以添加其他字段使用\n\t\t3-不可以嵌套调用\n\t\t4-不可以和group by/cluster by/distribute by/sort by一起使用\n\n\n\n\n\nUDAF\n1-开发udaf程序：继承UDAF类，重写iterate方法\n2-打成jar包\n3-上传jar包到集群中，并添加到hive的环境变量中，在hive中执行\n\tadd jar /export/datas/udaf.jar;\n4-创建临时函数：\n\tcreate temporary function  userMax as 'cn.itcast.bigdata.hive.UserUDAF';\n5-测试函数：\n\tselect userMax(deptno) from tb_dept;\n\n### 5.2UDAF\n\nUDAF（User-Defined Aggregation Function）聚合函数，多进一出\n\n#### 窗口函数：SUM、AVG、COUNT、MAX、MIN\n\n功能：用于实现数据分区后的聚合\n\t-》语法：fun_name(col1) over (partition by col2 order by col3)\n\t\t\t\t实现功能\tover  按照什么分区，分区内部按照什么排序\n\t-》示例：实现分区内的累加，其他的原理类似\n\n~~~\ncookie1,2018-04-10,1\ncookie1,2018-04-11,5\ncookie1,2018-04-12,7\ncookie1,2018-04-13,3\ncookie2,2018-04-13,3\ncookie2,2018-04-14,2\ncookie2,2018-04-15,4\ncookie1,2018-04-14,2\ncookie1,2018-04-15,4\ncookie1,2018-04-16,4\ncookie2,2018-04-10,1\ncookie2,2018-04-11,5\ncookie2,2018-04-12,7\n~~~\n\n~~~sql\n--创建表\ncreate database db_function;\nuse db_function;\ncreate table user_f1(\ncookieid string,\ndaystr string,\npv int\n) row format delimited fields terminated by ',';\n--加载数据\nload data local inpath '/export/datas/window.txt' into table user_f1;\nset hive.exec.mode.local.auto=true;\n--实现分区内起始到当前行的pv累加，默认窗口：取第一行开始到当前行的和\nselect \n  cookieid,\n  daystr,\n  pv,\n  sum(pv) over(partition by cookieid order by daystr) as pv1 \nfrom \n  user_f1;\n   \n--实现分区内所有pv的累加，不指定排序默认窗口：从第一行到最后一行\nselect \n  cookieid,\n  daystr,\n  pv,\n  sum(pv) over(partition by cookieid ) as pv2\nfrom \n  user_f1;\n  \n    \n--手动指定窗口的大小：分区\nrows between 起始位置 and 结束位置\nrows between unbounded preceding and current row\n\n--实现分区内起始到当前行的pv累加\nselect \n  cookieid,\n  daystr,\n  pv,\n  sum(pv) over(partition by cookieid order by daystr rows between unbounded preceding and current row) as pv3\nfrom \n  user_f1;\n--实现分区内指定前N行到当前行的pv累加\nselect \n  cookieid,\n  daystr,\n  pv,\n  sum(pv) over(partition by cookieid order by daystr rows between 3 preceding and current row) as pv4\nfrom \n  user_f1;\n--实现分区内指定前N行到后N行的pv累加 \nselect \n  cookieid,\n  daystr,\n  pv,\n  sum(pv) over(partition by cookieid order by daystr rows between 3 preceding and 1 following) as pv5\nfrom \n  user_f1;\n--实现分区内指定当前行到后N行的pv累加   \nselect \n  cookieid,\n  daystr,\n  pv,\n  sum(pv) over(partition by cookieid order by daystr rows between current row and unbounded following) as pv6\nfrom \n  user_f1;\n  \n  \n- preceding：往前\n- following：往后\n- current row：当前行\n- unbounded：起点\n- unbounded preceding 表示从前面的起点\n- unbounded following：表示到后面的终点\n~~~\n\n#### 窗口函数：LAG、LEAD、FIRST_VALUE、LAST_VALUE\n\nFIRST_VALUE\n\t功能：取每个分区内某列的第一个值\n\t语法：FIRST_VALUE(col) over (partition by col1 order by col2)\n\n~~~sql\n--取每个部门薪资最高的员工编号\nselect\n  empno,\n  ename,\n  salary,\n  deptno,\n  FIRST_VALUE(ename) over (partition by deptno order by salary desc) as first\nfrom\n  db_emp.tb_emp_normal;\n~~~\n\nLAST_VALUE\n\t功能：取每个分区内某列的最后一个值\n\t语法：LAST_VALUE() over (partition by col1 order by col2)\n\t注意：默认窗口是从第一条到当前条\n\n~~~sql\n--取每个部门薪资最低的员工编号\nselect\n  empno,\n  ename,\n  salary,\n  deptno,\n  LAST_VALUE(empno) over (partition by deptno order by salary desc) as last\nfrom\n  db_emp.tb_emp_normal; \n\nselect\n  empno,\n  ename,\n  salary,\n  deptno,\n  LAST_VALUE(empno) over (partition by deptno order by salary desc rows between unbounded preceding and unbounded following) as last\nfrom\n  db_emp.tb_emp_normal;\n~~~\n\nLAG\n\t功能：取每个分区内某列的前N个值\n\t语法：LAG(col,N,defaultValue) over (partition by col1 order by col2)\n\n~~~sql\nselect\n  empno,\n  ename,\n  salary,\n  deptno,\n  LAG(salary,1,0) over (partition by deptno order by salary) as deptno2\nfrom\n  db_emp.tb_emp_normal;\n~~~\n\nLEAD\n\t功能：向后取每个分区内某列的前N个值\n\t语法：LEAD(col,N,defaultValue) over (partition by col1 order by col2)\n\n~~~sql\nselect\n  empno,\n  ename,\n  salary,\n  deptno,\n  LEAD(salary,1,0) over (partition by deptno order by salary) as deptno2\nfrom\n  db_emp.tb_emp_normal;\n~~~\n\n\n\n\n\n#### 分析函数：ROW_NUMBER、RANK、DENSE_RANK、NTILE\n\n==ROW_NUMBER==\n\t功能：用于实现分区内记录编号\n\t语法：row_number() over (partition by col1 order by col2)\n\n~~~sql\n--统计每个部门薪资最高的前两名\nselect * from \n(select\n  empno,\n  ename,\n  salary,\n  deptno,\n  row_number() over (partition by deptno order by salary desc) as numb\nfrom\n  db_emp.tb_emp_normal) t where t.numb < 3;\n~~~\n\nRANK\n\t功能：用于实现分区内排名编号[会留空位]\n\t\t与row_number的区别：\n\t\t\trow_number：如果排序时数值相同，继续编号\n\t\t\trank：如果排序时数值相同，编号不变，但留下空位\n\t语法：rank() over (partition by col1 order by col2)\n\n~~~sql\n--统计每个部门薪资排名\nselect\n  empno,\n  ename,\n  salary,\n  deptno,\n  rank() over (partition by deptno order by salary desc) as numb\nfrom\n  db_emp.tb_emp_normal;\n~~~\n\nDENSE_RANK\n\t功能：用于实现分区内排名编号[不留空位]\n\t\t与rank的区别：\n\t\t\t==row_number：如果排序时数值相同，编号不变，并留下排名空位==\n\t\t\t==dense_rank：如果排序时数值相同，编号不变，不留空位==\n\t\t\t==rank：如果排序时数值相同，编号不变，但留下空位==\n\t语法：dense_rank() over (partition by col1 order by col2)\n\n~~~sql\n--统计每个部门薪资排名\nselect\n  empno,\n  ename,\n  salary,\n  deptno,\n  dense_rank() over (partition by deptno order by salary desc) as numb\nfrom\n  db_emp.tb_emp_normal;\n~~~\n\nNTILE\n\t功能：将每个分区内排序后的结果均分成N份【如果不能均分，优先分配编号小的】\n\t\t本质：将每个分区拆分成更小的分区\n\t语法：NTILE(N) over (partition by col1 order by col2)\n\n~~~sql\n--统计每个部门薪资排名，将每个部门的薪资分为两个部分，区分高薪和低薪\nselect\n  empno,\n  ename,\n  salary,\n  deptno,\n  NTILE(2) over (partition by deptno order by salary desc) as numb\nfrom\n  db_emp.tb_emp_normal;\n~~~\n\n\n\n### 5.3UDTF\n\nUDTF（User-Defined Table-Generating Functions）表生成函数 一进多出\n\n#### lateral view\n\n分类：视图\n功能：配合UDTF来使用,把某一行数据拆分成多行数据\n\t与UDTF直接使用的区别：\n\t\t==很多的UDTF不能将结果与源表进行关联，使用lateral view==\n\t\t可以将UDTF拆分的单个字段数据与原始表数据关联上==\n使用方式：\n\ttabel A lateral view UDTF(xxx) 视图名 as a,b,c\n\n~~~sql\n--准备数据:vim /export/datas/lateral.txt\n1\thttp://facebook.com/path/p1.php?query=1\n2\thttp://www.baidu.com/news/index.jsp?uuid=frank\n3\thttp://www.jd.com/index?source=baidu\n\n--创建表\ncreate table tb_url(\nid int,\nurl string\n) row format delimited fields terminated by '\\t';\n\n--加载数据\nload data local inpath '/export/datas/lateral.txt' into table tb_url;\n\n--使用UDTF解析\nSELECT parse_url_tuple(url, 'HOST') from tb_url;\n\n--使用UDTF+lateral view\nselect a.id,b.* from tb_url a lateral view parse_url_tuple(url, 'HOST') b as host;\n\n--对比\nSELECT id,parse_url_tuple(url, 'HOST') from tb_url;--失败，UDTF函数不能与字段连用\n~~~\n\n\n\n#### explode\n\n功能：函数可以将一个array或者map展开\n\texplode(array)：\n\t\t将array列表里的每个元素生成一行\n\texplode(map)：\n\t\t每一对元素作为一行，key为一列，value为一列\n使用方式：\n\t1-直接使用\n\t2-与lateral view连用\n\n~~~sql\n--实现wordcount【explode(array)】\n\tselect explode(split(word,\" \")) from wc1;\n--将兴趣爱好展开【explode(map)】\n\tselect explode(hobby) from complex_map;\n--与侧视图连用\n\tselect a.name,b.* from complex_map a lateral view explode(hobby) b as hobby,deep;\n~~~\n\n#### reflect\n\n功能：用于在Hive中直接调用Java中静态类的方法\n\t用法：reflect(classname,method,args)\n\n~~~sql\nselect reflect(\"java.util.UUID\", \"randomUUID\");\nselect reflect(\"java.lang.Math\",\"max\",20,30);\nselect reflect(\"org.apache.commons.lang.math.NumberUtils\",\"isNumber\",\"123\");\n~~~\n\n#### get_json_object\n\n处理json格式数据\n\n~~~sql\n--创建数据：vim /export/datas/hivedata.json\n{\"id\": 1701439105,\"ids\": [2154137571,3889177061],\"total_number\": 493}\n{\"id\": 1701439106,\"ids\": [2154137571,3889177061],\"total_number\": 494}\n--创建表：\ncreate table tb_json_test1 (\njson string\n);\n--加载数据\nload data local inpath '/export/datas/hivedata.json' into table tb_json_test1;\n~~~\n\n~~~sql\n--处理读取\nselect \n  get_json_object(t.json,'$.id'), \n  get_json_object(t.json,'$.total_number') \nfrom \n  tb_json_test1 t ;\n  \nselect \n  t2.* \nfrom \n  tb_json_test1 t1 \nlateral view \n  json_tuple(t1.json, 'id', 'total_number') t2 as c1,c2;\n~~~\n\n\n\n#### COALESCE\n\nCOALESCE(col,0)\n\n如果单列值为null，替换为默认值0\n\nconcat\n\n~~~sql\nconcat( 'liubei','xihuan','xiaoqiao' )\nliubeixihuanxiaoqiao\n~~~\n\n\n\n#### concat_ws&collect_set\n\nconcat_ws('|', collect_set(c_id))\n\n~~~sql\nid    name\n1001    A\n1001    B\n1001    C\n-------------------------\nid      name\n1001    A,B,C\n\nselect id,collect_list(name) from tb_ss group by id\n\n如果需要去重课可以使用collect_set,返回的是数组\nconcat_ws('|',collect_set(c_id))可以将数组内容按|拼接\n\n如果该列不是string，先用cast(col) as string 转换为string类型\nselect id,concat_ws(',',collect_list(cast (name as string))) from tb_ss group by id\n~~~\n\n\n\n#### instr\n\n查找字符串str中子字符串substr的位置， 如果查找失败将返回0，如果任一参数为Null将返回null，注意位置为从1开始的 \n\n~~~\ninstr(string str, string substr)\n~~~\n\n\n\n#### substring\n\n截取字符串\n\n~~~\nhello\nsubstring(col,1,2) -> 'he'\nsubstring(col,-2,2) -> 'lo'\n~~~\n\n\n\n### 5.4常见自带的hive函数\n\nshow functions;\n\n使用desc function  extended 函数名查看帮助\n\n•UNIX时间戳转日期函数: from_unixtime\n\n• 获取当前UNIX时间戳函数: unix_timestamp\n\n•日期转UNIX时间戳函数: unix_timestamp\n\n• 指定格式日期转UNIX时间戳函数: unix_timestamp\n\n•日期时间转日期函数: to_date\n\n•日期转年函数: year\n\n• 日期转月函数: month\n\n• 日期转天函数: day\n\n• 日期转小时函数: hour\n\n• 日期转分钟函数: minute\n\n• 日期转秒函数: second\n\n• 日期转周函数: weekofyear\n\n• 两个日期之间有多少个月:months_between('2020-01-10', u.birthday)(多用户得出用户年龄)\n\n• 日期比较函数: datediff\n\n• 日期增加函数: date_add\n\n• 日期减少函数: date_sub\n\n• 取当前天的下一周的周几：next_day(\"xxxx-xx-xx\",\"Mo\")\n\n• 取当前月的最后一天：last_day(\"xxxx-xx-xx\")\n\n•If函数: if\n\n•非空查找函数: COALESCE\n\n•条件判断函数：CASE\n\n•字符串长度函数：length\n\n•字符串反转函数：reverse\n\n•字符串连接函数：concat\n\n• 带分隔符字符串连接函数：concat_ws\n\n• 字符串截取函数：substr,substring\n\n•正则表达式替换函数：regexp_replace\n\n•正则表达式解析函数：regexp_extract\n\n•URL解析函数：parse_url\n\n​\t\t\t\t\t\t\tparse_url_tuple\n\n•json解析函数：get_json_object\n\n​\t\t\t\t\t\t\tjson_tuple\n\n•分割字符串函数: split\n\n•集合查找函数: find_in_set\n\n### 5.5关于union和union all\n\n总结分析\n\n1. 子查询相当于表名，使用 from 关键字需要指定真实表名或表别名。\n\n2. hive 不支持union ，只支持union all \n\n3. 子查询中使用union all 时，在子查询里不能使用count、sum 等 聚合函数 \n\n4. 两表直接进行union all 可以使用count、sum 等聚合函数 \n\n5. 两张表进行union all 取相同的字段名称，可正常输出指定数据内容，且结果为两张表的结果集\n\n## 6.hive语法要点\n\n~~~sql\n(1).Hive不支持join的非等值连接,不支持or\n分别举例如下及实现解决办法。\n  不支持不等值连接\n       错误:select * from a inner join b on a.id<>b.id\n       替代方法:select * from a inner join b on a.id=b.id and a.id is null;\n 不支持or\n       错误:select * from a inner join b on a.id=b.id or a.name=b.name\n       替代方法:select * from a inner join b on a.id=b.id\n                union all\n                select * from a inner join b on a.name=b.name\n  两个sql union all的字段名必须一样或者列别名要一样。\n        \n(2).分号字符:不能智能识别concat(‘;’,key)，只会将‘；’当做SQL结束符号。\n    •分号是SQL语句结束标记，在HiveQL中也是，但是在HiveQL中，对分号的识别没有那么智慧，例如：\n        •select concat(key,concat(';',key)) from dual;\n    •但HiveQL在解析语句时提示：\n        FAILED: Parse Error: line 0:-1 mismatched input '<EOF>' expecting ) in function specification\n    •解决的办法是，使用分号的八进制的ASCII码进行转义，那么上述语句应写成：\n        •select concat(key,concat('\\073',key)) from dual;\n\n(3).不支持INSERT INTO 表 Values（）, UPDATE, DELETE等操作.这样的话，就不要很复杂的锁机制来读写数据。\n    INSERT INTO syntax is only available starting in version 0.8。INSERT INTO就是在表或分区中追加数据。\n\n(4).HiveQL中String类型的字段若是空(empty)字符串, 即长度为0, 那么对它进行IS NULL的判断结果是False，使用left join可以进行筛选行。\n\n(5).不支持 ‘< dt <’这种格式的范围查找，可以用dt in(”,”)或者between替代。\n\n(6).Hive不支持将数据插入现有的表或分区中，仅支持覆盖重写整个表，示例如下：\n    INSERT OVERWRITE TABLE t1 SELECT * FROM t2;\n    \n(7).group by的字段,必须是select后面的字段，select后面的字段不能比group by的字段多.\n    如果select后面有聚合函数,则该select语句中必须有group by语句\n    而且group by后面不能使用别名\n    \n(8).hive的0.13版之前select , where 及 having 之后不能跟子查询语句(一般使用left join、right join 或者inner join替代)\n\n(9).先join(及inner join) 然后left join或right join\n\n(10).hive不支持group_concat方法,可用 concat_ws('|', collect_set(str)) 实现\n\n(11).not in 后不能包含查询语句,可用left join tmp on tableName.id = tmp.id where tmp.id is null 替代实现\n\n1.case when ... then ... else ... end\n\n2.length(string)\n\n3.cast(string as bigint)\n\n4.rand()       返回一个0到1范围内的随机数\n\n5.ceiling(double)    向上取整\n\n6.substr(string A, int start, int len)\n\n7.collect_set(col)函数只接受基本数据类型，它的主要作用是将某字段的值进行去重汇总，产生array类型字段\n\n8.concat()函数\n    1、功能：将多个字符串连接成一个字符串。\n    2、语法：concat(str1, str2,...)\n    返回结果为连接参数产生的字符串，如果有任何一个参数为null，则返回值为null。\n\n    9.concat_ws()函数\n    1、功能：和concat()一样，将多个字符串连接成一个字符串，但是可以一次性指定分隔符～（concat_ws就是concat with separator）\n    2、语法：concat_ws(separator, str1, str2, ...)\n    说明：第一个参数指定分隔符。需要注意的是分隔符不能为null，如果为null，则返回结果为null。\n\n    10.nvl(expr1, expr2)：空值转换函数  nvl(x,y)    Returns y if x is null else return x\n\n11.if(boolean testCondition, T valueTrue, T valueFalse)\n\n12.row_number()over()分组排序功能,over()里头的分组以及排序的执行晚于 where group by  order by 的执行。\n\n13.获取年、月、日、小时、分钟、秒、当年第几周\n    select \n        year('2018-02-27 10:00:00')       as year\n        ,month('2018-02-27 10:00:00')      as month\n        ,day('2018-02-27 10:00:00')        as day\n        ,hour('2018-02-27 10:00:00')       as hour\n        ,minute('2018-02-27 10:00:00')     as minute\n        ,second('2018-02-27 10:00:00')     as second\n        ,weekofyear('2018-02-27 10:00:00') as weekofyear\n  获取当前时间:\n        1).current_timestamp\n        2).unix_timestamp()\n        3).from_unixtime(unix_timestamp())\n        4).CURRENT_DATE\n~~~\n\n\n\n## 7.hive优化\n\n\n\n### 7.1大表join大表优化\n\n```sql\n如果Hive优化实战2中mapjoin中小表dim_seller很大呢？比如超过了1GB大小？这种就是大表join大表的问题。首先引入一个具体的问题场景，然后基于此介绍各自优化方案。\n\n1、问题场景\n问题场景如下：\n\nA表为一个汇总表，汇总的是卖家买家最近N天交易汇总信息，即对于每个卖家最近N天，其每个买家共成交了多少单，总金额是多少，假设N取90天，汇总值仅取成交单数。\n\nA表的字段有：buyer_id、seller_id、pay_cnt_90day。\n\nB表为卖家基本信息表，其字段有seller_id、sale_level，其中sale_levels是卖家的一个分层评级信息，比如吧卖家分为6个级别：S0、S1、S2、S3、S4和S5。\n\n要获得的结果是每个买家在各个级别的卖家的成交比例信息，比如：\n\n某买家：S0:10%；S1:20%；S2:20%；S3:10%；S4:20%；S5:10%。\n\n正如mapjoin中的例子一样，第一反应是直接join两表并统计：\n\nselect\n\nm.buyer_id,\n\nsum(pay_cnt_90day)  as pay_cnt_90day,\n\nsum(case when m.sale_level = 0  then pay_cnt_90day  end)  as pay_cnt_90day_s0,\n\nsum(case when m.sale_level = 1  then pay_cnt_90day  end)  as pay_cnt_90day_s1,\n\nsum(case when m.sale_level = 2  then pay_cnt_90day  end)  as pay_cnt_90day_s2,\n\nsum(case when m.sale_level = 3  then pay_cnt_90day  end)  as pay_cnt_90day_s3,\n\nsum(case when m.sale_level = 4  then pay_cnt_90day  end)  as pay_cnt_90day_s4,\n\nsum(case when m.sale_level = 5  then pay_cnt_90day  end)  as pay_cnt_90day_s5\n\nfrom (\n\nselect  a.buer_id,  a.seller_id,  b.sale_level, a.pay_cnt_90day\n\nfrom (  select buyer_id,  seller_id,  pay_cnt_90day   from table_A)  a\n\njoin\n\n(select seller_id,  sale_level  from table_B)  b\n\non  a.seller_id  = b.seller_id\n\n)  m\n\ngroup by m.buyer_id\n\n但是此SQL会引起数据倾斜，原因在于卖家的二八准则，某些卖家90天内会有几百万甚至上千万的买家，但是大部分的卖家90天内买家的数目并不多，join table_A和table_B的时候，\n\nODPS会按照seller_id进行分发，table_A的大卖家引起了数据倾斜。\n\n但是数据本身无法用mapjoin table_B解决，因为卖家超过千万条，文件大小有几个GB，超过了1GB的限制。\n\n优化方案1：转为mapjoin\n一个很正常的想法是，尽管B表无法直接mapjoin, 但是是否可以间接mapjoin它呢？\n\n实际上此思路有两种途径：限制行和限制列。\n\n限制行的思路是不需要join B全表，而只需要join其在A表中存在的，对于本问题场景，就是过滤掉90天内没有成交的卖家。\n\n限制列的思路是只取需要的字段。\n\n加上如上的限制后，检查过滤后的B表是否满足了Hive  mapjoin的条件，如果能满足，那么添加过滤条件生成一个临时B表，然后mapjoin该表即可。采用此思路的语句如下：\n\n\n\nselect\n\nm.buyer_id,\n\nsum(pay_cnt_90day)  as pay_cnt_90day,\n\nsum(case when m.sale_level = 0  then pay_cnt_90day  end)  as pay_cnt_90day_s0,\n\nsum(case when m.sale_level = 1  then pay_cnt_90day  end)  as pay_cnt_90day_s1,\n\nsum(case when m.sale_level = 2  then pay_cnt_90day  end)  as pay_cnt_90day_s2,\n\nsum(case when m.sale_level = 3  then pay_cnt_90day  end)  as pay_cnt_90day_s3,\n\nsum(case when m.sale_level = 4  then pay_cnt_90day  end)  as pay_cnt_90day_s4,\n\nsum(case when m.sale_level = 5  then pay_cnt_90day  end)  as pay_cnt_90day_s5\n\nfrom ( \n\nselect  /*+mapjoin(b)*/\n\na.buer_id,  a.seller_id,  b.sale_level, a.pay_cnt_90day\n\nfrom (  select buyer_id,  seller_id,  pay_cnt_90day   from table_A)  a\n\njoin\n\n(\n\nselect seller_id,  sale_level  from table_B b0\n\njoin \n\n(select seller_id from table_A group by seller_id) a0\n\non b0.seller_id = a0.selller_id\n\n)  b\n\non  a.seller_id  = b.seller_id\n\n)  m\n\ngroup by m.buyer_id\n\n此方案在一些情况可以起作用，但是很多时候还是无法解决上述问题，因为大部分卖家尽管90天内买家不多，但还是有一些的，过滤后的B表仍然很多。\n\n\n优化方案2：join时用case when语句\n此种解决方案应用场景是：倾斜的值是明确的而且数量很少，比如null值引起的倾斜。其核心是将这些引起倾斜的值随机分发到Reduce,其主要核心逻辑在于join时对这些特殊值concat随机数，\n\n从而达到随机分发的目的。此方案的核心逻辑如下：\n\nselect a.user_id, a.order_id, b.user_id\n\nfrom table_a a join table_b b\n\non (case when a.user_is is null then concat('hive', rand()) else a.user_id end) = b.user_id\n\nHive 已对此进行了优化，只需要设置参数skewinfo和skewjoin参数，不修改SQL代码，例如，由于table_B的值“0” 和“1”引起了倾斜，值需要做如下设置：\n\nset hive.optimize.skewinfo=table_B:(selleer_id) [ ( \"0\") (\"1\") ) ] \n\nset hive.optimize.skewjoin = true;\n\n但是方案2因为无法解决本问题场景的倾斜问题，因为倾斜的卖家大量存在而且动态变化。\n\n\n优化方案3：倍数B表，再取模join\n1、通用方案\n此方案的思路是建立一个numbers表，其值只有一列int 行，比如从1到10（具体值可根据倾斜程度确定），然后放大B表10倍，再取模join。代码如下：\n\n\n\nselect\n\nm.buyer_id,\n\nsum(pay_cnt_90day)  as pay_cnt_90day,\n\nsum(case when m.sale_level = 0  then pay_cnt_90day  end)  as pay_cnt_90day_s0,\n\nsum(case when m.sale_level = 1  then pay_cnt_90day  end)  as pay_cnt_90day_s1,\n\nsum(case when m.sale_level = 2  then pay_cnt_90day  end)  as pay_cnt_90day_s2,\n\nsum(case when m.sale_level = 3  then pay_cnt_90day  end)  as pay_cnt_90day_s3,\n\nsum(case when m.sale_level = 4  then pay_cnt_90day  end)  as pay_cnt_90day_s4,\n\nsum(case when m.sale_level = 5  then pay_cnt_90day  end)  as pay_cnt_90day_s5\n\nfrom (\n\nselect  a.buer_id,  a.seller_id,  b.sale_level, a.pay_cnt_90day\n\nfrom (  select buyer_id,  seller_id,  pay_cnt_90day   from table_A)  a\n\njoin\n\n(\n\nselect  /*+mapjoin(members)*/\n\nseller_id,  sale_level ,member\n\nfrom table_B\n\njoin members\n\n)  b\n\non  a.seller_id  = b.seller_id\n\nand mod(a.pay_cnt_90day,10)+1 = b.number \n\n)  m\n\ngroup by m.buyer_id\n\n此思路的核心在于，既然按照seller_id分发会倾斜，那么再人工增加一列进行分发，这样之前倾斜的值的倾斜程度会减少到原来的1/10，可以通过配置numbers表改放大倍数来降低倾斜程度，\n\n但这样做的一个弊端是B表也会膨胀N倍。\n\n2、专用方案\n通用方案的思路把B表的每条数据都放大了相同的倍数，实际上这是不需要的，只需要把大卖家放大倍数即可：需要首先知道大卖家的名单，即先建立一个临时表动态存放每天最新的大卖家（\n\n比如dim_big_seller）,同时此表的大卖家要膨胀预先设定的倍数（1000倍）。\n\n在A表和B表分别新建一个join列，其逻辑为：如果是大卖家，那么concat一个随机分配正整数（0到预定义的倍数之间，本例为0~1000）；如果不是，保持不变。具体代码如下：\n\n\n\nselect\n\nm.buyer_id,\n\nsum(pay_cnt_90day)  as pay_cnt_90day,\n\nsum(case when m.sale_level = 0  then pay_cnt_90day  end)  as pay_cnt_90day_s0,\n\nsum(case when m.sale_level = 1  then pay_cnt_90day  end)  as pay_cnt_90day_s1,\n\nsum(case when m.sale_level = 2  then pay_cnt_90day  end)  as pay_cnt_90day_s2,\n\nsum(case when m.sale_level = 3  then pay_cnt_90day  end)  as pay_cnt_90day_s3,\n\nsum(case when m.sale_level = 4  then pay_cnt_90day  end)  as pay_cnt_90day_s4,\n\nsum(case when m.sale_level = 5  then pay_cnt_90day  end)  as pay_cnt_90day_s5\n\nfrom (\n\nselect  a.buer_id,  a.seller_id,  b.sale_level, a.pay_cnt_90day\n\nfrom (  \n\nselect  /*+mapjoin(big)*/\n\nbuyer_id,  seller_id,  pay_cnt_90day,\n\nif(big.seller_id is not null, concat(  table_A.seller_id,  'rnd',  cast(  rand() * 1000 as bigint ), table_A.seller_id)  as seller_id_joinkey\n\nfrom table_A\n\nleft outer join\n\n--big表seller_id有重复，请注意一定要group by 后再join,保证table_A的行数保持不变\n\n（select seller_id  from dim_big_seller  group by seller_id）big\n\non table_A.seller_id = big.seller_id\n\n)  a\n\njoin\n\n(\n\nselect  /*+mapjoin(big)*/\n\nseller_id,  sale_level ,\n\n--big表的seller_id_joinkey生成逻辑和上面的生成逻辑一样\n\ncoalesce(seller_id_joinkey,table_B.seller_id) as seller_id_joinkey\n\nfrom table_B\n\nleft out join\n\n--table_B表join大卖家表后大卖家行数扩大1000倍，其它卖家行数保持不变\n\n(select seller_id, seller_id_joinkey from dim_big_seller) big\n\non table_B.seller_id= big.seller_id\n\n)  b\n\non  a.seller_id_joinkey= b.seller_id_joinkey\n\nand mod(a.pay_cnt_90day,10)+1 = b.number \n\n)  m\n\ngroup by m.buyer_id\n\n相比通用方案，专用方案的运行效率明细好了许多，因为只是将B表中大卖家的行数放大了1000倍，其它卖家的行数保持不变，但同时代码复杂了很多，而且必须首先建立大数据表。\n\n方案4：动态一分为二\n实际上方案2和3都用了一分为二的思想，但是都不彻底，对于mapjoin不能解决的问题，终极解决方案是动态一分为二，即对倾斜的键值和不倾斜的键值分开处理，不倾斜的正常join即可，倾斜的把他们找出来做mapjoin，最后union all其结果即可。\n\n但是此种解决方案比较麻烦，代码复杂而且需要一个临时表存放倾斜的键值。代码如下：\n\n--由于数据倾斜，先找出90天买家超过10000的卖家\n\ninsert overwrite table  temp_table_B\n\nselect \n\nm.seller_id,  n.sale_level\n\nfrom (\n\nselect   seller_id\n\nfrom (\n\nselect seller_id,count(buyer_id) as byr_cnt\n\nfrom table_A\n\ngroup by seller_id\n\n) a\n\nwhere a.byr_cnt >10000\n\n) m\n\nleft join \n\n(\n\nselect seller_id, sale_level  from table_B\n\n) n\n\non m.seller_id = n.seller_id;\n\n\n\n--对于90天买家超过10000的卖家直接mapjoin,对其它卖家直接正常join即可。\n\n\n\nselect\n\nm.buyer_id,\n\nsum(pay_cnt_90day)  as pay_cnt_90day,\n\nsum(case when m.sale_level = 0  then pay_cnt_90day  end)  as pay_cnt_90day_s0,\n\nsum(case when m.sale_level = 1  then pay_cnt_90day  end)  as pay_cnt_90day_s1,\n\nsum(case when m.sale_level = 2  then pay_cnt_90day  end)  as pay_cnt_90day_s2,\n\nsum(case when m.sale_level = 3  then pay_cnt_90day  end)  as pay_cnt_90day_s3,\n\nsum(case when m.sale_level = 4  then pay_cnt_90day  end)  as pay_cnt_90day_s4,\n\nsum(case when m.sale_level = 5  then pay_cnt_90day  end)  as pay_cnt_90day_s5\n\nfrom (\n\nselect  a.buer_id,  a.seller_id,  b.sale_level, a.pay_cnt_90day\n\nfrom (  select buyer_id,  seller_id,  pay_cnt_90day   from table_A)  a\n\njoin\n\n(\n\nselect seller_id,  a.sale_level \n\nfrom table_A  a\n\nleft join temp_table_B b\n\non a.seller_id = b.seller_id\n\nwhere b.seller_id is not null\n\n)  b\n\non  a.seller_id  = b.seller_id\n\nunion all\n\n\n\nselect  /*+mapjoin(b)*/\n\na.buer_id,  a.seller_id,  b.sale_level, a.pay_cnt_90day\n\nfrom ( \n\nselect buyer_id,  seller_id,  pay_cnt_90day   \n\nfrom table_A\n\n)  a\n\njoin\n\n(\n\nselect seller_id,  sale_level  from table_B \n\n)  b\n\non  a.seller_id  = b.seller_id\n\n)  m  group by m.buyer_id\n\n) m\n\ngroup by m.buyer_id\n\n\n\n总结：方案1、2以及方案3中的同用方案不能保证解决大表join大表问题，因为它们都存在种种不同的限制和特定使用场景。\n\n而方案3的专用方案和方案4是推荐的优化方案，但是它们都需要新建一个临时表来存储每日动态变化的大卖家。相对方案4来说，方案3的专用方案不需要对代码框架进行修改，但是B表会被放大，所以一定要是是维度表，不然统计结果会是错误的。方案4最通用，自由度最高，但是对代码的更改也最大，甚至修改更难代码框架，可以作为终极方案使用。\n```","source":"_posts/hive知识整理.md","raw":"---\ntitle: hive知识整理\ndate: 2020-12-29 21:16:31\ntags:\n- hive\ncategories: \n- 工具\n---\n\n# Hive\n\n<!-- toc -->\n\n[TOC]\n\n\n\n## 概述\n\nHive是基于Hadoop的一个数据仓库工具，可以将结构化的数据文件映射为一张数据库表，并提供类SQL查询功能。\n\n本质是将SQL转换为MapReduce程序\n\n主要用途：用来做离线数据分析，比直接用MapReduce开发效率更高\n\n<!--more-->\n\n![img](hive知识整理/timg-1568381886490.jpg) \n\n数据仓库和数据库的区别\n\n* 数据库是面向事务的设计，数据仓库是面向主题设计的。\n\n* 数据库一般存储业务数据，数据仓库存储的一般是历史数据。\n\n* 数据库设计是尽量避免冗余，一般针对某一业务应用进行设计，比如一张简单的User表，记录用户名、密码等简单数据即可，符合业务应用，但是不符合分析。数据仓库在设计是有意引入冗余，依照分析需求，分析维度、分析指标进行设计。\n\n* 数据库是为捕获数据而设计，数据仓库是为分析数据而设计。\n\n数据仓库分层架构\n\n==源数据层（ODS）==：此层数据无任何更改，直接沿用外围系统数据结构和数据，不对外开放；为临时存储层，是接口数据的临时存储区域，为后一步的数据处理做准备。\n\n==数据仓库层（DW）==：也称为细节层，DW层的数据应该是一致的、准确的、干净的数据，即对源系统数据进行了清洗（去除了杂质）后的数据。\n\n==数据应用层（DA或APP）==：前端应用直接读取的数据源；根据报表、专题分析需求而计算生成的数据。\n\n \n\n~~~bash\n先启动metastore服务再启动hiveserver2服务\n/export/servers/hive/bin/beeline\nbeeline> ! connect jdbc:hive2://hdp3:10000\n\n~~~\n\n\n\nhive SQL语句中 select from where group by having order by 的==执行顺序==？\n\n1.from--where--group by--having--select--order by， \n\n2.from：需要从哪个数据表检索数据 \n\n3.where：过滤表中数据的条件 \n\n4.group by：如何将上面过滤出的数据分组 \n\n5.having：对上面已经分组的数据进行过滤的条件 \n\n6.select：查看结果集中的哪个列，或列的计算结果 \n\n7.order by ：按照什么样的顺序来查看返回的数据\n\n## 1.DDL操作\n\n设置hive程序本地运行模式：\n\n~~~bash\nset hive.exec.mode.local.auto=true;\n~~~\n\n### 1.1  创建表\n\n```sql\ncreate [external] table [if not exists] tb_name (...) [like] existing_table;\n[row format delimited fields terminated by char\n\t\t\t\t\tcollection items terminated by char\n\t\t\t\t\tmap keys terminated by char\n\t\t\t\t\tlines terminated by char\n\t\t\t\t\t...]\n[partitioned by ]\n[stored as file_format]\n[CLUSTERED BY (col_name, col_name, ...) [SORTED BY (col_name [ASC|DESC], ...)] INTO num_buckets BUCKETS]\n[LOCATION hdfs_path]\n\n\n```\n\n1.create table 创建一个指定名字的表，如果表以存在可以用[if not exists]跳过异常\n\n2.[external] 关键字可以让给用户创建一个外部表。\n\n创建内部表时会将数据移动到数据仓库指向的路径，删除表时元数据和数据都被删除。\n\n外部表仅记录数据所在的路径，删除时只删除元数据，不删除数据。\n\n3.[like] 允许用户复制现有的表结构，但是不复制数据\n\n4.[row format delimited] 指定表列与列的分隔符。hive建表的时候默认分隔符是‘\\001’,\n\n5.[partitioned by] 分区命令。每个表可以有多个分区，每个分区以文件夹的形式单独存在表文件夹目录下。分区是以字段的形式在表结构中存在。\n\n6.[stored as sequencedile|textfile|refile]   如果文件数据是纯文本，可以使用textfile,如果数据需要压缩，使用sequencedile。\n\ntextfile是默认的文件格式，使用delimited子句来读取分隔文件\n\n7.[clustered by (col_name,col_name,....)]   分桶\n\n8.[LOCATION hdfs_path]  指定这张表所在的hdfs上的目录，如果不指定，默认在数据库的目录下面\n\n```sql\ncreate table tb_name as select statement;将sql语句的结果进行保存\ncreate table tb_new like tb_old;创建一张结构与tb_old一样的表\ndrop table [if exists] tb_name;删除表\ntruncate table tb_name;清空表\nshow functions;查看所有的函数\nshow partitions tb_name;查看所有分区\ndesc formatted tb_name；查看表信息\n\n```\n\n#### 1.1.1 管理表\n\n最普通的表，默认表的类型就是管理表\n\n```sql\ncreate table tb_name();\n\n```\n\n#### 1.1.2 外部表\n\n```sql\ncreate external table tb_name();\n\n```\n\n特点：在删除时，不会删除表数据\n\n应用场景：1-如果需要多张表共用同一份数据，都建立外部表，使用完以后，删除表互不影响。2-如果数据需要进行额外的使用：存档等等\n\n#### 1.1.3 分区表\n\n```sql\ncreate external table tb_part(\nid string\n name string\n)\npartitioned by (day string)\nrow format delimited fields terminated by '\\t';\n--创建分区表，指定分区字段day\nload data local inpath '/export/datas/20180718' into table tb_name partition(day='18');\n--加载文件数据，创建分区字段day=18\nload data local inpath '/export/datas/20180719' into table tb_name partition(day='19');\n--加载文件数据，创建分区字段day=19\nselect * from tb_part where day = 19;\n--过滤条件需是分区的字段，如果不是分区字段就会从整个分区目录中查找\n\n```\n\n- 手动分区：加载数据时，手动指定文件的分区\n\n  分区字段为查询的语句的最后一个字段 \n\n  ```sql\n  insert overwrite table tb_emp_part partition (deptno)\n    select empno\n    ename,\n    job,\n    manager,\n    inday,\n    salary,\n    jiangjin,\n    deptno\n  from tb_emp_normal;\n  \n  ```\n\n  - 应用场景：将普通表的数据转换成一个分区表\n    \t\t   原始表【tb1】中的数据没有做分区\n      \t\t   希望将原始表中的数据按照分区存放到新的分区表[tb2]\n\n  - 自动分区：默认按照原始表的最后一列进行分区\n\n  ```sql\n  set hive.exec.dynamic.partition.mode=nonstrict;\n  配置自动分区\n  show partitions tb_name;\n  查看当前所有分区\n  \n  ```\n\n  数据加载问题：\n  1-如果手动将数据文件放入一张普通表的目录下？表能不能读到数据？\n\n  ​\t可以，元数据查询时直接将表的目录作为查询目录\n  2-如果手动将数据文件放入一张分区表的分区目录下？表能不能读到数据？表的分区能不能读到数据？\n  ​\t可以的，因为元数据查询时直接将分区的目录作为查询目录\n  3-如果手动在HDFS上创建一个分区的目录，将数据放入分区目录下，表能不能读到数据？\n  ​\t不能，因为Hive中没有该分区的元数据\n\n  方案一：修复表的元数据（资源占用多）\n\n  ```sql\n  msck repair table tb_emp;\n  \n  ```\n\n  方案二：手动向表中添加一个分区\n\n  ```sql\n  alter table tb_name add [if exists] partition (dt='20') location '/user/hadoop/dt=20';\n  --要求建立的目录必须与分区自动创建的目录格式一样\n  \n  ```\n\n  删除分区\n\n  ~~~bash\n  alter table tb_name drop [if exists] partition (dt='20');\n  ~~~\n\n  \n\n  #### 1.1.4  分桶表\n\n  ```sql\n  create table tb_emp_bucket(\n  empno int ,\n  ename string,\n  job string,\n  manager int,\n  inday string,\n  salary double,\n  jiangjin double,\n  deptno int\n  ) \n  clustered by (deptno) into 3 BUCKETS\n  row format delimited fields terminated by '\\t';\n  \n  ```\n\n  应用场景：大表join大表时\n\n  ```sql\n  --开启分桶\n  set hive.enforce.bucketing=true;\n  \n  insert overwrite table tb_emp_bucket\n  select * from tb_emp_normal cluster by (deptno);\n  \n  ```\n\n  连个桶表桶的个数必须相同，或者b表桶是a表的倍数\n\n  ### 1.2 修改表\n\n  增加分区：\n\n  ```sql\n  alter table tb_name add partition (dt='20170101') location '/user/hadoop/table_name/dt=20170101';\n  \n  ```\n\n  删除分区\n\n  ```sql\n  alter table tb_name drop if exists partition (dt='20170101')\n  \n  ```\n\n  修改分区\n\n  ```sql\n  alter table tb_name partition (dt='20170101') rename to partition(dt='20170202')\n  \n  ```\n\n  添加列\n\n  ```sql\n  --添加列\n  alter table tb_name add|replace columns (col_name string);\n  --修改表名\n  alter table stu_par rename to stu_par1\n  --增加列\n  alter table stu1 add columns(score string);\n  --修改列类型\n  alter table stu1 change column score score double;\n  --\n  ```\n\n  ## 2.DML操作\n\n  ### 2.1 load \n\n  在将数据加载到表中时，Hive不会进行任何转换。加载操作是将数据文件移动到与Hive表对应的位置的纯复制/移动操作。\n\n  ```sql\n  load data [local] inpath 'filepath' [overwrite] into table tb_name [partition(partcol1=val1,partcol2=val2...)]\n  \n  ```\n\n  ### 2.2 insert\n\n  Hive中insert主要是结合select查询语句使用，将查询结果插入到表中\n\n  ```sql\n  --查询结果的列数要和插入数据表格的列数一致\n  insert overwrite table tb_name select statement\n  --将查询语句结果保存至HDFS中\n  insert overwrite directory \"/movie/answer10/\" select statement;\n  \n  ```\n\n  ### 2.3 join\n\n  inner join: 两张表都有结果才有\n\n  left join: 左表有，结果就有\n\n  right join: 右表有，结果就有\n\n  full join：两边任意一边有，结果就有\n\n  cross join:笛卡尔积      --一般用于结果的漏斗计算\n\n  ### 2.4 排序\n\n  ```sql\n  set hive.exec.reducers.bytes.per.reducer=<number>\n  \t每个reduce最多处理多少数据量\n  set hive.exec.reducers.max=<number>\t\n  \t最多启动多少个reduce\n  set mapreduce.job.reduces=<number>\n  \t设置reduce的个数\n  \n  ```\n\n  #### order by\n\n  全局排序，对整体进行排序，只有一个reduce的情况下\n\n  在启用多个reduce的情况下如果使用order by 结果依旧全局有序，但只会启用一个reduce\n\n  ```sql\n  select  empno,ename,salary,deptno from tb_emp_normal order by empno;\n  \n  ```\n\n  #### sort by\n\n  局部排序，多个reduce的 情况下，每个reduce内部有序（分区内有序）\n\n  ```sql\n  set mapreduce.job.reduces=3;\n  设置reduce个数\n  insert overwrite local directory '/export/datas/sort' \n  row format delimited fields terminated by '\\t' \n  select  empno,ename,salary,deptno from tb_emp_normal \n  sort by empno;\n  \n  ```\n\n  #### distribute by\n\n  指定多个reduce情况下，以哪一列作为分区字段。将相同的数据放入同一个结果文件，类似MR中Partition，进行分区，结合sort by使用  \n\n  ```sql\n  insert overwrite local directory '/export/datas/dis' \n  row format delimited fields terminated by '\\t' \n  select  empno,ename,salary,deptno from tb_emp_normal \n  distribute by deptno \n  sort by empno;\n  \n  ```\n\n  #### cluster by\n\n  如果sort by与distribute by使用同一个字段可以用此代替，但是排序只能是升序排序，不能指定排序规则为ASC或者DESC。\n\n  \n\n## 3.hive参数配置\n\n### 3.1 Hive shell命令行\n\n针对bin/hive，除了可以当第一代客户端之外。还可以在hive中启动其他用途。\n\n1、 -i  初始化HQL文件。\n\n2、 -e从命令行执行指定的HQL \n\n3、 -f 执行HQL脚本 \n\n4、 -v 输出执行的HQL语句到控制台 \n\n5、 -p <port> connect to Hive Server on port number \n\n6、 -hiveconf x=y Use this to set hive/hadoop configuration variables.\n\n例如：\n\n~~~bash\n$HIVE_HOME/bin/hive -e 'select * from table a'\t\n\n$HIVE_HOME/bin/hive -f /home/my/hive-script.sql\n\n$HIVE_HOME/bin/hive -f hdfs://<namenode>:<port>/hive-script.sql\n\n$HIVE_HOME/bin/hive -i /home/my/hive-init.sql\n\n~~~\n\n\n\n### 3.2 Hive 参数配置方式\n\n*Hive参数大全：*\n\n[*https://cwiki.apache.org/confluence/display/Hive/Configuration+Properties*\n\n 开发Hive应用时，不可避免地需要设定Hive的参数。设定Hive的参数可以调优HQL代码的执行效率，或帮助定位问题。然而实践中经常遇到的一个问题是，为什么设定的参数没有起作用？这通常是错误的设定方式导致的。\n\n对于一般参数，有以下三种设定方式：\n\n配置文件   （全局有效）\n\n命令行参数   （对hive启动实例有效）\n\n参数声明   （对hive的连接session有效）\n\n配置文件 \n\n用户自定义配置文件：$HIVE_CONF_DIR/hive-site.xml\n\n默认配置文件：$HIVE_CONF_DIR/hive-default.xml \n\n用户自定义配置会覆盖默认配置。\n\n另外，Hive也会读入Hadoop的配置，因为Hive是作为Hadoop的客户端启动的，Hive的配置会覆盖Hadoop的配置。\n\n配置文件的设定对本机启动的所有Hive进程都有效。\n\n 命令行参数\n\n启动Hive（客户端或Server方式）时，可以在命令行添加-hiveconf来设定参数\t例如：bin/hive -hiveconf hive.root.logger=INFO,console\n\n设定对本次启动的Session（对于Server方式启动，则是所有请求的Sessions）有效。\n\n 参数声明\n\n可以在HQL中使用SET关键字设定参数，这一设定的作用域也是session级的。\n\n比如：\n\nset hive.exec.reducers.bytes.per.reducer=<number>  每个reduce task的平均负载数据量\n\nset hive.exec.reducers.max=<number>   设置reduce task数量的上限\n\nset mapreduce.job.reduces=<number>    指定固定的reduce task数量\n\n但是，这个参数在必要时<业务逻辑决定只能用一个reduce task> hive会忽略\n\n上述三种设定方式的优先级依次递增。即参数声明覆盖命令行参数，命令行参数覆盖配置文件设定。注意某些系统级的参数，例如log4j相关的设定，必须用前两种方式设定，因为那些参数的读取在Session建立以前已经完成了。\n\n## 4.hive中复杂数据类型的使用\n\n### 4.1 数组类型\n\n~~~\n--数据如下：vim /export/datas/array.txt\nzhangsan\tbeijing,shanghai,tianjin,hangzhou\nwangwu\tshanghai,chengdu,wuhan,haerbin\n~~~\n\n~~~sql\n--创建表\ncreate table complex_array(\nname string,\nwork_locations array<string>\n)\nrow format delimited fields terminated by '\\t' --指定列的分隔符\ncollection items terminated by ',';--指定数组中元素的分隔符\n\n--加载数据\nload data local inpath '/export/datas/array.txt' into table complex_array;\n\n--查询\nselect * from complex_array;\nselect size(work_locations) from complex_array;\nselect work_locations[0],work_locations[1] from complex_array;\n~~~\n\n### 4.2 map类型\n\n~~~\n--数据如下：vim /export/datas/map.txt\n1,zhangsan,唱歌:非常喜欢-跳舞:喜欢-游泳:一般般\n2,lisi,打游戏:非常喜欢-篮球:不喜欢\n~~~\n\n~~~sql\n--创建表\ncreate table complex_map(\nid int,\nname string,\nhobby map<string,string>)\nrow format delimited fields terminated by ',' --指定列的分隔符\ncollection items terminated by '-' map keys terminated by ':' ;--指定keyvalue的分割\n\n--加载数据\nload data local inpath '/export/datas/map.txt' into table complex_map;\n\n--查询\nselect * from complex_map;\nselect size(hobby) from complex_map;\nselect hobby[\"唱歌\"] from complex_map;\n~~~\n\n### 4.3 正则类型\n\n```sql\n--数据如下:vim /export/datas/regex.txt\ntom 男 23 上海\n```\n\n```sql\n--使用正则加载数据\nCREATE TABLE user_regex(\nname string,\nsex string,\nage int,\ncity string\n)\nROW FORMAT SERDE 'org.apache.hadoop.hive.serde2.RegexSerDe'\nWITH SERDEPROPERTIES (\n  \"input.regex\" = \"([^ ]+) ([^ ]+) ([0-9]+) (.+)\"\n)\nSTORED AS TEXTFILE;\n\nload data local inpath '/root/regex.txt' into table user_regex;\n```\n\n### 4.4 json类型\n\n~~~sql\n--通过专门的解析类直接加载一个json格式的数据到Hive中\n--数据如下:vim /export/datas/hivedata.json\n{\"id\": 1701439105,\"ids\": [2154137571,3889177061],\"total_number\": 493}\n{\"id\": 1701439106,\"ids\": [2154137571,3889177061],\"total_number\": 494}\n--添加jar包\nadd jar /export/datas/json-serde-1.3.7-jar-with-dependencies.jar;\n~~~\n\n~~~sql\n--创建表：\ncreate table tb_json_test2 (\nid string,\nids array<string>,\ntotal_number int)\nROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'\nSTORED AS TEXTFILE;\n\n\n--加载数据\nload data local inpath '/export/datas/hivedata.json' into table tb_json_test2;\n~~~\n\n### 4.5 python类型\n\n```sql\n--创建Python脚本实现将原始表的时间转为对应的星期几\nvim /export/datas/weekday_mapper.py\n\nimport sys\nimport datetime\n\nfor line in sys.stdin:\n  line = line.strip()\n  userid, movieid, rating, unixtime = line.split('\\t')\n  weekday = datetime.datetime.fromtimestamp(float(unixtime)).isoweekday()\n  print '\\t'.join([userid, movieid, rating, str(weekday)])\n \n```\n\n```sql\n--加载python脚本并将数据写入新表\nadd FILE /export/datas/weekday_mapper.py;\nINSERT OVERWRITE TABLE u_data_new\nSELECT\n  TRANSFORM (userid, movieid, rating, unixtime)\n  USING 'python weekday_mapper.py'\n  AS (userid, movieid, rating, weekday)\nFROM u_data;\n```\n\n## 5.Hive函数\n\n### 5.1自定义函数\n\n#### 5.1.1 UDF\n\nUDF（User-Defined-Function）普通函数 一进一出\n\n1、自定义一个类，继承UDF,实现一个或重载多个evaluate方法，打包上传jar包到linux环境\n\n```xml\n       <!-- 指定该项目可以从哪些地方下载依赖包 -->\n\t\t\t<repository>\n\t\t\t\t<id>aliyun</id>\n\t\t\t\t<url>http://maven.aliyun.com/nexus/content/groups/public/</url>\n\t\t\t</repository>\n\t\t\t<repository>\n\t\t\t\t<id>cloudera</id>\n\t\t\t\t<url>https://repository.cloudera.com/artifactory/cloudera-repos/</url>\n\t\t\t</repository>\n\t\t\t<repository>\n\t\t\t\t<id>jboss</id>\n\t\t\t\t<url>http://repository.jboss.org/nexus/content/groups/public</url>\n\t\t\t</repository>\n\t\t</repositories>\n\t\t<!--指定字符编码-->\n\t\t<properties>\n\t\t\t<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n\t\t</properties>\n\t\t<!--指定依赖-->\n\t\t<dependencies>\n\t\t\t<dependency>\n\t\t\t\t<groupId>org.apache.hadoop</groupId>\n\t\t\t\t<artifactId>hadoop-common</artifactId>\n\t\t\t\t<version>2.6.0-cdh5.14.0</version>\n\t\t\t</dependency>\n\t\t\t<dependency>\n\t\t\t\t<groupId>org.apache.hadoop</groupId>\n\t\t\t\t<artifactId>hadoop-hdfs</artifactId>\n\t\t\t\t<version>2.6.0-cdh5.14.0</version>\n\t\t\t</dependency>\n\n\t\t\t<dependency>\n\t\t\t\t<groupId>org.apache.hadoop</groupId>\n\t\t\t\t<artifactId>hadoop-client</artifactId>\n\t\t\t\t<version>2.6.0-cdh5.14.0</version>\n\t\t\t</dependency>\n\t\t\t<dependency>\n\t\t\t\t<groupId>org.apache.hive</groupId>\n\t\t\t\t<artifactId>hive-exec</artifactId>\n\t\t\t\t<version>1.1.0-cdh5.14.0</version>\n\t\t\t</dependency>\n\t\t\t<dependency>\n\t\t\t\t<groupId>org.apache.hive</groupId>\n\t\t\t\t<artifactId>hive-common</artifactId>\n\t\t\t\t<version>1.1.0-cdh5.14.0</version>\n\t\t\t</dependency>\n\t\t\t<dependency>\n\t\t\t\t<groupId>org.apache.hive</groupId>\n\t\t\t\t<artifactId>hive-cli</artifactId>\n\t\t\t\t<version>1.1.0-cdh5.14.0</version>\n\t\t\t</dependency>\n\t\t\t<dependency>\n\t\t\t\t<groupId>org.apache.hive</groupId>\n\t\t\t\t<artifactId>hive-jdbc</artifactId>\n\t\t\t\t<version>1.1.0-cdh5.14.0</version>\n\t\t\t</dependency>\n\t\t</dependencies>\n```\n\n```java\nimport org.apache.hadoop.hive.ql.exec.UDF;\nimport org.apache.hadoop.io.Text;\npublic class UserUDF extends UDF{\n\tpublic Text evaluate(Text s){\n        if(s==null){\n            return null;\n        }\n        return new Text(s.toString().toLowerCase());\n    }\n}\n```\n\n\n\n2、将jar包添加到hive环境中\n\n```\nadd jar /export/datas/udf.jar;\n\n```\n\n3、在hive中创建一个函数\n\n```\ncreate temporary function fc_name as 'com.neusoft.data.UserUDF';\n\n```\n\n4、使用函数\n\n```\nselect fc_name(age),name from tb_name;\n\n```\n\n#### 5.1.2自定义udf,udtf,udaf开发\n\nUDF：\n1-开发udf程序：继承UDF类，实现一个或者多个evaluate方法\n2-打成jar包\n3-上传jar包到集群中，并添加到hive的环境变量中，在hive中执行\n\tadd jar /export/datas/udf.jar;\n4-创建临时函数：\n\tcreate temporary function  transDate as 'cn.itcast.bigdata.hive.TransDate';\n5-测试函数：\n\tselect transDate(\"18/Aug/2019:12:30:05\");\n6-删除临时函数\n\tDROP TEMPORARY FUNCTION transDate;\n\nUDTF\n1-开发udtf程序：继承UDTF类，重写process方法\n2-打成jar包\n3-上传jar包到集群中，并添加到hive的环境变量中，在hive中执行\n\tadd jar /export/datas/udtf.jar;\n4-创建临时函数：\n\tcreate temporary function  transMap as 'cn.itcast.bigdata.hive.UserUDTF';\n5-测试函数：\n\t第一种用法：直接调用\n\t\tselect transMap(\"uuid=root&url=www.taobao.com\") as (userCol1,userCol2);\n\t第二种用法：和侧视图一起使用\n\t\tselect deptno,deptname,a.* from tb_dept lateral view transMap(\"uuid=root&url=www.taobao.com\") a as col1,col2;\n\t注意：\n\t\t1-udtf只能直接select中使用\n\t\t2-不可以添加其他字段使用\n\t\t3-不可以嵌套调用\n\t\t4-不可以和group by/cluster by/distribute by/sort by一起使用\n\n\n\n\n\nUDAF\n1-开发udaf程序：继承UDAF类，重写iterate方法\n2-打成jar包\n3-上传jar包到集群中，并添加到hive的环境变量中，在hive中执行\n\tadd jar /export/datas/udaf.jar;\n4-创建临时函数：\n\tcreate temporary function  userMax as 'cn.itcast.bigdata.hive.UserUDAF';\n5-测试函数：\n\tselect userMax(deptno) from tb_dept;\n\n### 5.2UDAF\n\nUDAF（User-Defined Aggregation Function）聚合函数，多进一出\n\n#### 窗口函数：SUM、AVG、COUNT、MAX、MIN\n\n功能：用于实现数据分区后的聚合\n\t-》语法：fun_name(col1) over (partition by col2 order by col3)\n\t\t\t\t实现功能\tover  按照什么分区，分区内部按照什么排序\n\t-》示例：实现分区内的累加，其他的原理类似\n\n~~~\ncookie1,2018-04-10,1\ncookie1,2018-04-11,5\ncookie1,2018-04-12,7\ncookie1,2018-04-13,3\ncookie2,2018-04-13,3\ncookie2,2018-04-14,2\ncookie2,2018-04-15,4\ncookie1,2018-04-14,2\ncookie1,2018-04-15,4\ncookie1,2018-04-16,4\ncookie2,2018-04-10,1\ncookie2,2018-04-11,5\ncookie2,2018-04-12,7\n~~~\n\n~~~sql\n--创建表\ncreate database db_function;\nuse db_function;\ncreate table user_f1(\ncookieid string,\ndaystr string,\npv int\n) row format delimited fields terminated by ',';\n--加载数据\nload data local inpath '/export/datas/window.txt' into table user_f1;\nset hive.exec.mode.local.auto=true;\n--实现分区内起始到当前行的pv累加，默认窗口：取第一行开始到当前行的和\nselect \n  cookieid,\n  daystr,\n  pv,\n  sum(pv) over(partition by cookieid order by daystr) as pv1 \nfrom \n  user_f1;\n   \n--实现分区内所有pv的累加，不指定排序默认窗口：从第一行到最后一行\nselect \n  cookieid,\n  daystr,\n  pv,\n  sum(pv) over(partition by cookieid ) as pv2\nfrom \n  user_f1;\n  \n    \n--手动指定窗口的大小：分区\nrows between 起始位置 and 结束位置\nrows between unbounded preceding and current row\n\n--实现分区内起始到当前行的pv累加\nselect \n  cookieid,\n  daystr,\n  pv,\n  sum(pv) over(partition by cookieid order by daystr rows between unbounded preceding and current row) as pv3\nfrom \n  user_f1;\n--实现分区内指定前N行到当前行的pv累加\nselect \n  cookieid,\n  daystr,\n  pv,\n  sum(pv) over(partition by cookieid order by daystr rows between 3 preceding and current row) as pv4\nfrom \n  user_f1;\n--实现分区内指定前N行到后N行的pv累加 \nselect \n  cookieid,\n  daystr,\n  pv,\n  sum(pv) over(partition by cookieid order by daystr rows between 3 preceding and 1 following) as pv5\nfrom \n  user_f1;\n--实现分区内指定当前行到后N行的pv累加   \nselect \n  cookieid,\n  daystr,\n  pv,\n  sum(pv) over(partition by cookieid order by daystr rows between current row and unbounded following) as pv6\nfrom \n  user_f1;\n  \n  \n- preceding：往前\n- following：往后\n- current row：当前行\n- unbounded：起点\n- unbounded preceding 表示从前面的起点\n- unbounded following：表示到后面的终点\n~~~\n\n#### 窗口函数：LAG、LEAD、FIRST_VALUE、LAST_VALUE\n\nFIRST_VALUE\n\t功能：取每个分区内某列的第一个值\n\t语法：FIRST_VALUE(col) over (partition by col1 order by col2)\n\n~~~sql\n--取每个部门薪资最高的员工编号\nselect\n  empno,\n  ename,\n  salary,\n  deptno,\n  FIRST_VALUE(ename) over (partition by deptno order by salary desc) as first\nfrom\n  db_emp.tb_emp_normal;\n~~~\n\nLAST_VALUE\n\t功能：取每个分区内某列的最后一个值\n\t语法：LAST_VALUE() over (partition by col1 order by col2)\n\t注意：默认窗口是从第一条到当前条\n\n~~~sql\n--取每个部门薪资最低的员工编号\nselect\n  empno,\n  ename,\n  salary,\n  deptno,\n  LAST_VALUE(empno) over (partition by deptno order by salary desc) as last\nfrom\n  db_emp.tb_emp_normal; \n\nselect\n  empno,\n  ename,\n  salary,\n  deptno,\n  LAST_VALUE(empno) over (partition by deptno order by salary desc rows between unbounded preceding and unbounded following) as last\nfrom\n  db_emp.tb_emp_normal;\n~~~\n\nLAG\n\t功能：取每个分区内某列的前N个值\n\t语法：LAG(col,N,defaultValue) over (partition by col1 order by col2)\n\n~~~sql\nselect\n  empno,\n  ename,\n  salary,\n  deptno,\n  LAG(salary,1,0) over (partition by deptno order by salary) as deptno2\nfrom\n  db_emp.tb_emp_normal;\n~~~\n\nLEAD\n\t功能：向后取每个分区内某列的前N个值\n\t语法：LEAD(col,N,defaultValue) over (partition by col1 order by col2)\n\n~~~sql\nselect\n  empno,\n  ename,\n  salary,\n  deptno,\n  LEAD(salary,1,0) over (partition by deptno order by salary) as deptno2\nfrom\n  db_emp.tb_emp_normal;\n~~~\n\n\n\n\n\n#### 分析函数：ROW_NUMBER、RANK、DENSE_RANK、NTILE\n\n==ROW_NUMBER==\n\t功能：用于实现分区内记录编号\n\t语法：row_number() over (partition by col1 order by col2)\n\n~~~sql\n--统计每个部门薪资最高的前两名\nselect * from \n(select\n  empno,\n  ename,\n  salary,\n  deptno,\n  row_number() over (partition by deptno order by salary desc) as numb\nfrom\n  db_emp.tb_emp_normal) t where t.numb < 3;\n~~~\n\nRANK\n\t功能：用于实现分区内排名编号[会留空位]\n\t\t与row_number的区别：\n\t\t\trow_number：如果排序时数值相同，继续编号\n\t\t\trank：如果排序时数值相同，编号不变，但留下空位\n\t语法：rank() over (partition by col1 order by col2)\n\n~~~sql\n--统计每个部门薪资排名\nselect\n  empno,\n  ename,\n  salary,\n  deptno,\n  rank() over (partition by deptno order by salary desc) as numb\nfrom\n  db_emp.tb_emp_normal;\n~~~\n\nDENSE_RANK\n\t功能：用于实现分区内排名编号[不留空位]\n\t\t与rank的区别：\n\t\t\t==row_number：如果排序时数值相同，编号不变，并留下排名空位==\n\t\t\t==dense_rank：如果排序时数值相同，编号不变，不留空位==\n\t\t\t==rank：如果排序时数值相同，编号不变，但留下空位==\n\t语法：dense_rank() over (partition by col1 order by col2)\n\n~~~sql\n--统计每个部门薪资排名\nselect\n  empno,\n  ename,\n  salary,\n  deptno,\n  dense_rank() over (partition by deptno order by salary desc) as numb\nfrom\n  db_emp.tb_emp_normal;\n~~~\n\nNTILE\n\t功能：将每个分区内排序后的结果均分成N份【如果不能均分，优先分配编号小的】\n\t\t本质：将每个分区拆分成更小的分区\n\t语法：NTILE(N) over (partition by col1 order by col2)\n\n~~~sql\n--统计每个部门薪资排名，将每个部门的薪资分为两个部分，区分高薪和低薪\nselect\n  empno,\n  ename,\n  salary,\n  deptno,\n  NTILE(2) over (partition by deptno order by salary desc) as numb\nfrom\n  db_emp.tb_emp_normal;\n~~~\n\n\n\n### 5.3UDTF\n\nUDTF（User-Defined Table-Generating Functions）表生成函数 一进多出\n\n#### lateral view\n\n分类：视图\n功能：配合UDTF来使用,把某一行数据拆分成多行数据\n\t与UDTF直接使用的区别：\n\t\t==很多的UDTF不能将结果与源表进行关联，使用lateral view==\n\t\t可以将UDTF拆分的单个字段数据与原始表数据关联上==\n使用方式：\n\ttabel A lateral view UDTF(xxx) 视图名 as a,b,c\n\n~~~sql\n--准备数据:vim /export/datas/lateral.txt\n1\thttp://facebook.com/path/p1.php?query=1\n2\thttp://www.baidu.com/news/index.jsp?uuid=frank\n3\thttp://www.jd.com/index?source=baidu\n\n--创建表\ncreate table tb_url(\nid int,\nurl string\n) row format delimited fields terminated by '\\t';\n\n--加载数据\nload data local inpath '/export/datas/lateral.txt' into table tb_url;\n\n--使用UDTF解析\nSELECT parse_url_tuple(url, 'HOST') from tb_url;\n\n--使用UDTF+lateral view\nselect a.id,b.* from tb_url a lateral view parse_url_tuple(url, 'HOST') b as host;\n\n--对比\nSELECT id,parse_url_tuple(url, 'HOST') from tb_url;--失败，UDTF函数不能与字段连用\n~~~\n\n\n\n#### explode\n\n功能：函数可以将一个array或者map展开\n\texplode(array)：\n\t\t将array列表里的每个元素生成一行\n\texplode(map)：\n\t\t每一对元素作为一行，key为一列，value为一列\n使用方式：\n\t1-直接使用\n\t2-与lateral view连用\n\n~~~sql\n--实现wordcount【explode(array)】\n\tselect explode(split(word,\" \")) from wc1;\n--将兴趣爱好展开【explode(map)】\n\tselect explode(hobby) from complex_map;\n--与侧视图连用\n\tselect a.name,b.* from complex_map a lateral view explode(hobby) b as hobby,deep;\n~~~\n\n#### reflect\n\n功能：用于在Hive中直接调用Java中静态类的方法\n\t用法：reflect(classname,method,args)\n\n~~~sql\nselect reflect(\"java.util.UUID\", \"randomUUID\");\nselect reflect(\"java.lang.Math\",\"max\",20,30);\nselect reflect(\"org.apache.commons.lang.math.NumberUtils\",\"isNumber\",\"123\");\n~~~\n\n#### get_json_object\n\n处理json格式数据\n\n~~~sql\n--创建数据：vim /export/datas/hivedata.json\n{\"id\": 1701439105,\"ids\": [2154137571,3889177061],\"total_number\": 493}\n{\"id\": 1701439106,\"ids\": [2154137571,3889177061],\"total_number\": 494}\n--创建表：\ncreate table tb_json_test1 (\njson string\n);\n--加载数据\nload data local inpath '/export/datas/hivedata.json' into table tb_json_test1;\n~~~\n\n~~~sql\n--处理读取\nselect \n  get_json_object(t.json,'$.id'), \n  get_json_object(t.json,'$.total_number') \nfrom \n  tb_json_test1 t ;\n  \nselect \n  t2.* \nfrom \n  tb_json_test1 t1 \nlateral view \n  json_tuple(t1.json, 'id', 'total_number') t2 as c1,c2;\n~~~\n\n\n\n#### COALESCE\n\nCOALESCE(col,0)\n\n如果单列值为null，替换为默认值0\n\nconcat\n\n~~~sql\nconcat( 'liubei','xihuan','xiaoqiao' )\nliubeixihuanxiaoqiao\n~~~\n\n\n\n#### concat_ws&collect_set\n\nconcat_ws('|', collect_set(c_id))\n\n~~~sql\nid    name\n1001    A\n1001    B\n1001    C\n-------------------------\nid      name\n1001    A,B,C\n\nselect id,collect_list(name) from tb_ss group by id\n\n如果需要去重课可以使用collect_set,返回的是数组\nconcat_ws('|',collect_set(c_id))可以将数组内容按|拼接\n\n如果该列不是string，先用cast(col) as string 转换为string类型\nselect id,concat_ws(',',collect_list(cast (name as string))) from tb_ss group by id\n~~~\n\n\n\n#### instr\n\n查找字符串str中子字符串substr的位置， 如果查找失败将返回0，如果任一参数为Null将返回null，注意位置为从1开始的 \n\n~~~\ninstr(string str, string substr)\n~~~\n\n\n\n#### substring\n\n截取字符串\n\n~~~\nhello\nsubstring(col,1,2) -> 'he'\nsubstring(col,-2,2) -> 'lo'\n~~~\n\n\n\n### 5.4常见自带的hive函数\n\nshow functions;\n\n使用desc function  extended 函数名查看帮助\n\n•UNIX时间戳转日期函数: from_unixtime\n\n• 获取当前UNIX时间戳函数: unix_timestamp\n\n•日期转UNIX时间戳函数: unix_timestamp\n\n• 指定格式日期转UNIX时间戳函数: unix_timestamp\n\n•日期时间转日期函数: to_date\n\n•日期转年函数: year\n\n• 日期转月函数: month\n\n• 日期转天函数: day\n\n• 日期转小时函数: hour\n\n• 日期转分钟函数: minute\n\n• 日期转秒函数: second\n\n• 日期转周函数: weekofyear\n\n• 两个日期之间有多少个月:months_between('2020-01-10', u.birthday)(多用户得出用户年龄)\n\n• 日期比较函数: datediff\n\n• 日期增加函数: date_add\n\n• 日期减少函数: date_sub\n\n• 取当前天的下一周的周几：next_day(\"xxxx-xx-xx\",\"Mo\")\n\n• 取当前月的最后一天：last_day(\"xxxx-xx-xx\")\n\n•If函数: if\n\n•非空查找函数: COALESCE\n\n•条件判断函数：CASE\n\n•字符串长度函数：length\n\n•字符串反转函数：reverse\n\n•字符串连接函数：concat\n\n• 带分隔符字符串连接函数：concat_ws\n\n• 字符串截取函数：substr,substring\n\n•正则表达式替换函数：regexp_replace\n\n•正则表达式解析函数：regexp_extract\n\n•URL解析函数：parse_url\n\n​\t\t\t\t\t\t\tparse_url_tuple\n\n•json解析函数：get_json_object\n\n​\t\t\t\t\t\t\tjson_tuple\n\n•分割字符串函数: split\n\n•集合查找函数: find_in_set\n\n### 5.5关于union和union all\n\n总结分析\n\n1. 子查询相当于表名，使用 from 关键字需要指定真实表名或表别名。\n\n2. hive 不支持union ，只支持union all \n\n3. 子查询中使用union all 时，在子查询里不能使用count、sum 等 聚合函数 \n\n4. 两表直接进行union all 可以使用count、sum 等聚合函数 \n\n5. 两张表进行union all 取相同的字段名称，可正常输出指定数据内容，且结果为两张表的结果集\n\n## 6.hive语法要点\n\n~~~sql\n(1).Hive不支持join的非等值连接,不支持or\n分别举例如下及实现解决办法。\n  不支持不等值连接\n       错误:select * from a inner join b on a.id<>b.id\n       替代方法:select * from a inner join b on a.id=b.id and a.id is null;\n 不支持or\n       错误:select * from a inner join b on a.id=b.id or a.name=b.name\n       替代方法:select * from a inner join b on a.id=b.id\n                union all\n                select * from a inner join b on a.name=b.name\n  两个sql union all的字段名必须一样或者列别名要一样。\n        \n(2).分号字符:不能智能识别concat(‘;’,key)，只会将‘；’当做SQL结束符号。\n    •分号是SQL语句结束标记，在HiveQL中也是，但是在HiveQL中，对分号的识别没有那么智慧，例如：\n        •select concat(key,concat(';',key)) from dual;\n    •但HiveQL在解析语句时提示：\n        FAILED: Parse Error: line 0:-1 mismatched input '<EOF>' expecting ) in function specification\n    •解决的办法是，使用分号的八进制的ASCII码进行转义，那么上述语句应写成：\n        •select concat(key,concat('\\073',key)) from dual;\n\n(3).不支持INSERT INTO 表 Values（）, UPDATE, DELETE等操作.这样的话，就不要很复杂的锁机制来读写数据。\n    INSERT INTO syntax is only available starting in version 0.8。INSERT INTO就是在表或分区中追加数据。\n\n(4).HiveQL中String类型的字段若是空(empty)字符串, 即长度为0, 那么对它进行IS NULL的判断结果是False，使用left join可以进行筛选行。\n\n(5).不支持 ‘< dt <’这种格式的范围查找，可以用dt in(”,”)或者between替代。\n\n(6).Hive不支持将数据插入现有的表或分区中，仅支持覆盖重写整个表，示例如下：\n    INSERT OVERWRITE TABLE t1 SELECT * FROM t2;\n    \n(7).group by的字段,必须是select后面的字段，select后面的字段不能比group by的字段多.\n    如果select后面有聚合函数,则该select语句中必须有group by语句\n    而且group by后面不能使用别名\n    \n(8).hive的0.13版之前select , where 及 having 之后不能跟子查询语句(一般使用left join、right join 或者inner join替代)\n\n(9).先join(及inner join) 然后left join或right join\n\n(10).hive不支持group_concat方法,可用 concat_ws('|', collect_set(str)) 实现\n\n(11).not in 后不能包含查询语句,可用left join tmp on tableName.id = tmp.id where tmp.id is null 替代实现\n\n1.case when ... then ... else ... end\n\n2.length(string)\n\n3.cast(string as bigint)\n\n4.rand()       返回一个0到1范围内的随机数\n\n5.ceiling(double)    向上取整\n\n6.substr(string A, int start, int len)\n\n7.collect_set(col)函数只接受基本数据类型，它的主要作用是将某字段的值进行去重汇总，产生array类型字段\n\n8.concat()函数\n    1、功能：将多个字符串连接成一个字符串。\n    2、语法：concat(str1, str2,...)\n    返回结果为连接参数产生的字符串，如果有任何一个参数为null，则返回值为null。\n\n    9.concat_ws()函数\n    1、功能：和concat()一样，将多个字符串连接成一个字符串，但是可以一次性指定分隔符～（concat_ws就是concat with separator）\n    2、语法：concat_ws(separator, str1, str2, ...)\n    说明：第一个参数指定分隔符。需要注意的是分隔符不能为null，如果为null，则返回结果为null。\n\n    10.nvl(expr1, expr2)：空值转换函数  nvl(x,y)    Returns y if x is null else return x\n\n11.if(boolean testCondition, T valueTrue, T valueFalse)\n\n12.row_number()over()分组排序功能,over()里头的分组以及排序的执行晚于 where group by  order by 的执行。\n\n13.获取年、月、日、小时、分钟、秒、当年第几周\n    select \n        year('2018-02-27 10:00:00')       as year\n        ,month('2018-02-27 10:00:00')      as month\n        ,day('2018-02-27 10:00:00')        as day\n        ,hour('2018-02-27 10:00:00')       as hour\n        ,minute('2018-02-27 10:00:00')     as minute\n        ,second('2018-02-27 10:00:00')     as second\n        ,weekofyear('2018-02-27 10:00:00') as weekofyear\n  获取当前时间:\n        1).current_timestamp\n        2).unix_timestamp()\n        3).from_unixtime(unix_timestamp())\n        4).CURRENT_DATE\n~~~\n\n\n\n## 7.hive优化\n\n\n\n### 7.1大表join大表优化\n\n```sql\n如果Hive优化实战2中mapjoin中小表dim_seller很大呢？比如超过了1GB大小？这种就是大表join大表的问题。首先引入一个具体的问题场景，然后基于此介绍各自优化方案。\n\n1、问题场景\n问题场景如下：\n\nA表为一个汇总表，汇总的是卖家买家最近N天交易汇总信息，即对于每个卖家最近N天，其每个买家共成交了多少单，总金额是多少，假设N取90天，汇总值仅取成交单数。\n\nA表的字段有：buyer_id、seller_id、pay_cnt_90day。\n\nB表为卖家基本信息表，其字段有seller_id、sale_level，其中sale_levels是卖家的一个分层评级信息，比如吧卖家分为6个级别：S0、S1、S2、S3、S4和S5。\n\n要获得的结果是每个买家在各个级别的卖家的成交比例信息，比如：\n\n某买家：S0:10%；S1:20%；S2:20%；S3:10%；S4:20%；S5:10%。\n\n正如mapjoin中的例子一样，第一反应是直接join两表并统计：\n\nselect\n\nm.buyer_id,\n\nsum(pay_cnt_90day)  as pay_cnt_90day,\n\nsum(case when m.sale_level = 0  then pay_cnt_90day  end)  as pay_cnt_90day_s0,\n\nsum(case when m.sale_level = 1  then pay_cnt_90day  end)  as pay_cnt_90day_s1,\n\nsum(case when m.sale_level = 2  then pay_cnt_90day  end)  as pay_cnt_90day_s2,\n\nsum(case when m.sale_level = 3  then pay_cnt_90day  end)  as pay_cnt_90day_s3,\n\nsum(case when m.sale_level = 4  then pay_cnt_90day  end)  as pay_cnt_90day_s4,\n\nsum(case when m.sale_level = 5  then pay_cnt_90day  end)  as pay_cnt_90day_s5\n\nfrom (\n\nselect  a.buer_id,  a.seller_id,  b.sale_level, a.pay_cnt_90day\n\nfrom (  select buyer_id,  seller_id,  pay_cnt_90day   from table_A)  a\n\njoin\n\n(select seller_id,  sale_level  from table_B)  b\n\non  a.seller_id  = b.seller_id\n\n)  m\n\ngroup by m.buyer_id\n\n但是此SQL会引起数据倾斜，原因在于卖家的二八准则，某些卖家90天内会有几百万甚至上千万的买家，但是大部分的卖家90天内买家的数目并不多，join table_A和table_B的时候，\n\nODPS会按照seller_id进行分发，table_A的大卖家引起了数据倾斜。\n\n但是数据本身无法用mapjoin table_B解决，因为卖家超过千万条，文件大小有几个GB，超过了1GB的限制。\n\n优化方案1：转为mapjoin\n一个很正常的想法是，尽管B表无法直接mapjoin, 但是是否可以间接mapjoin它呢？\n\n实际上此思路有两种途径：限制行和限制列。\n\n限制行的思路是不需要join B全表，而只需要join其在A表中存在的，对于本问题场景，就是过滤掉90天内没有成交的卖家。\n\n限制列的思路是只取需要的字段。\n\n加上如上的限制后，检查过滤后的B表是否满足了Hive  mapjoin的条件，如果能满足，那么添加过滤条件生成一个临时B表，然后mapjoin该表即可。采用此思路的语句如下：\n\n\n\nselect\n\nm.buyer_id,\n\nsum(pay_cnt_90day)  as pay_cnt_90day,\n\nsum(case when m.sale_level = 0  then pay_cnt_90day  end)  as pay_cnt_90day_s0,\n\nsum(case when m.sale_level = 1  then pay_cnt_90day  end)  as pay_cnt_90day_s1,\n\nsum(case when m.sale_level = 2  then pay_cnt_90day  end)  as pay_cnt_90day_s2,\n\nsum(case when m.sale_level = 3  then pay_cnt_90day  end)  as pay_cnt_90day_s3,\n\nsum(case when m.sale_level = 4  then pay_cnt_90day  end)  as pay_cnt_90day_s4,\n\nsum(case when m.sale_level = 5  then pay_cnt_90day  end)  as pay_cnt_90day_s5\n\nfrom ( \n\nselect  /*+mapjoin(b)*/\n\na.buer_id,  a.seller_id,  b.sale_level, a.pay_cnt_90day\n\nfrom (  select buyer_id,  seller_id,  pay_cnt_90day   from table_A)  a\n\njoin\n\n(\n\nselect seller_id,  sale_level  from table_B b0\n\njoin \n\n(select seller_id from table_A group by seller_id) a0\n\non b0.seller_id = a0.selller_id\n\n)  b\n\non  a.seller_id  = b.seller_id\n\n)  m\n\ngroup by m.buyer_id\n\n此方案在一些情况可以起作用，但是很多时候还是无法解决上述问题，因为大部分卖家尽管90天内买家不多，但还是有一些的，过滤后的B表仍然很多。\n\n\n优化方案2：join时用case when语句\n此种解决方案应用场景是：倾斜的值是明确的而且数量很少，比如null值引起的倾斜。其核心是将这些引起倾斜的值随机分发到Reduce,其主要核心逻辑在于join时对这些特殊值concat随机数，\n\n从而达到随机分发的目的。此方案的核心逻辑如下：\n\nselect a.user_id, a.order_id, b.user_id\n\nfrom table_a a join table_b b\n\non (case when a.user_is is null then concat('hive', rand()) else a.user_id end) = b.user_id\n\nHive 已对此进行了优化，只需要设置参数skewinfo和skewjoin参数，不修改SQL代码，例如，由于table_B的值“0” 和“1”引起了倾斜，值需要做如下设置：\n\nset hive.optimize.skewinfo=table_B:(selleer_id) [ ( \"0\") (\"1\") ) ] \n\nset hive.optimize.skewjoin = true;\n\n但是方案2因为无法解决本问题场景的倾斜问题，因为倾斜的卖家大量存在而且动态变化。\n\n\n优化方案3：倍数B表，再取模join\n1、通用方案\n此方案的思路是建立一个numbers表，其值只有一列int 行，比如从1到10（具体值可根据倾斜程度确定），然后放大B表10倍，再取模join。代码如下：\n\n\n\nselect\n\nm.buyer_id,\n\nsum(pay_cnt_90day)  as pay_cnt_90day,\n\nsum(case when m.sale_level = 0  then pay_cnt_90day  end)  as pay_cnt_90day_s0,\n\nsum(case when m.sale_level = 1  then pay_cnt_90day  end)  as pay_cnt_90day_s1,\n\nsum(case when m.sale_level = 2  then pay_cnt_90day  end)  as pay_cnt_90day_s2,\n\nsum(case when m.sale_level = 3  then pay_cnt_90day  end)  as pay_cnt_90day_s3,\n\nsum(case when m.sale_level = 4  then pay_cnt_90day  end)  as pay_cnt_90day_s4,\n\nsum(case when m.sale_level = 5  then pay_cnt_90day  end)  as pay_cnt_90day_s5\n\nfrom (\n\nselect  a.buer_id,  a.seller_id,  b.sale_level, a.pay_cnt_90day\n\nfrom (  select buyer_id,  seller_id,  pay_cnt_90day   from table_A)  a\n\njoin\n\n(\n\nselect  /*+mapjoin(members)*/\n\nseller_id,  sale_level ,member\n\nfrom table_B\n\njoin members\n\n)  b\n\non  a.seller_id  = b.seller_id\n\nand mod(a.pay_cnt_90day,10)+1 = b.number \n\n)  m\n\ngroup by m.buyer_id\n\n此思路的核心在于，既然按照seller_id分发会倾斜，那么再人工增加一列进行分发，这样之前倾斜的值的倾斜程度会减少到原来的1/10，可以通过配置numbers表改放大倍数来降低倾斜程度，\n\n但这样做的一个弊端是B表也会膨胀N倍。\n\n2、专用方案\n通用方案的思路把B表的每条数据都放大了相同的倍数，实际上这是不需要的，只需要把大卖家放大倍数即可：需要首先知道大卖家的名单，即先建立一个临时表动态存放每天最新的大卖家（\n\n比如dim_big_seller）,同时此表的大卖家要膨胀预先设定的倍数（1000倍）。\n\n在A表和B表分别新建一个join列，其逻辑为：如果是大卖家，那么concat一个随机分配正整数（0到预定义的倍数之间，本例为0~1000）；如果不是，保持不变。具体代码如下：\n\n\n\nselect\n\nm.buyer_id,\n\nsum(pay_cnt_90day)  as pay_cnt_90day,\n\nsum(case when m.sale_level = 0  then pay_cnt_90day  end)  as pay_cnt_90day_s0,\n\nsum(case when m.sale_level = 1  then pay_cnt_90day  end)  as pay_cnt_90day_s1,\n\nsum(case when m.sale_level = 2  then pay_cnt_90day  end)  as pay_cnt_90day_s2,\n\nsum(case when m.sale_level = 3  then pay_cnt_90day  end)  as pay_cnt_90day_s3,\n\nsum(case when m.sale_level = 4  then pay_cnt_90day  end)  as pay_cnt_90day_s4,\n\nsum(case when m.sale_level = 5  then pay_cnt_90day  end)  as pay_cnt_90day_s5\n\nfrom (\n\nselect  a.buer_id,  a.seller_id,  b.sale_level, a.pay_cnt_90day\n\nfrom (  \n\nselect  /*+mapjoin(big)*/\n\nbuyer_id,  seller_id,  pay_cnt_90day,\n\nif(big.seller_id is not null, concat(  table_A.seller_id,  'rnd',  cast(  rand() * 1000 as bigint ), table_A.seller_id)  as seller_id_joinkey\n\nfrom table_A\n\nleft outer join\n\n--big表seller_id有重复，请注意一定要group by 后再join,保证table_A的行数保持不变\n\n（select seller_id  from dim_big_seller  group by seller_id）big\n\non table_A.seller_id = big.seller_id\n\n)  a\n\njoin\n\n(\n\nselect  /*+mapjoin(big)*/\n\nseller_id,  sale_level ,\n\n--big表的seller_id_joinkey生成逻辑和上面的生成逻辑一样\n\ncoalesce(seller_id_joinkey,table_B.seller_id) as seller_id_joinkey\n\nfrom table_B\n\nleft out join\n\n--table_B表join大卖家表后大卖家行数扩大1000倍，其它卖家行数保持不变\n\n(select seller_id, seller_id_joinkey from dim_big_seller) big\n\non table_B.seller_id= big.seller_id\n\n)  b\n\non  a.seller_id_joinkey= b.seller_id_joinkey\n\nand mod(a.pay_cnt_90day,10)+1 = b.number \n\n)  m\n\ngroup by m.buyer_id\n\n相比通用方案，专用方案的运行效率明细好了许多，因为只是将B表中大卖家的行数放大了1000倍，其它卖家的行数保持不变，但同时代码复杂了很多，而且必须首先建立大数据表。\n\n方案4：动态一分为二\n实际上方案2和3都用了一分为二的思想，但是都不彻底，对于mapjoin不能解决的问题，终极解决方案是动态一分为二，即对倾斜的键值和不倾斜的键值分开处理，不倾斜的正常join即可，倾斜的把他们找出来做mapjoin，最后union all其结果即可。\n\n但是此种解决方案比较麻烦，代码复杂而且需要一个临时表存放倾斜的键值。代码如下：\n\n--由于数据倾斜，先找出90天买家超过10000的卖家\n\ninsert overwrite table  temp_table_B\n\nselect \n\nm.seller_id,  n.sale_level\n\nfrom (\n\nselect   seller_id\n\nfrom (\n\nselect seller_id,count(buyer_id) as byr_cnt\n\nfrom table_A\n\ngroup by seller_id\n\n) a\n\nwhere a.byr_cnt >10000\n\n) m\n\nleft join \n\n(\n\nselect seller_id, sale_level  from table_B\n\n) n\n\non m.seller_id = n.seller_id;\n\n\n\n--对于90天买家超过10000的卖家直接mapjoin,对其它卖家直接正常join即可。\n\n\n\nselect\n\nm.buyer_id,\n\nsum(pay_cnt_90day)  as pay_cnt_90day,\n\nsum(case when m.sale_level = 0  then pay_cnt_90day  end)  as pay_cnt_90day_s0,\n\nsum(case when m.sale_level = 1  then pay_cnt_90day  end)  as pay_cnt_90day_s1,\n\nsum(case when m.sale_level = 2  then pay_cnt_90day  end)  as pay_cnt_90day_s2,\n\nsum(case when m.sale_level = 3  then pay_cnt_90day  end)  as pay_cnt_90day_s3,\n\nsum(case when m.sale_level = 4  then pay_cnt_90day  end)  as pay_cnt_90day_s4,\n\nsum(case when m.sale_level = 5  then pay_cnt_90day  end)  as pay_cnt_90day_s5\n\nfrom (\n\nselect  a.buer_id,  a.seller_id,  b.sale_level, a.pay_cnt_90day\n\nfrom (  select buyer_id,  seller_id,  pay_cnt_90day   from table_A)  a\n\njoin\n\n(\n\nselect seller_id,  a.sale_level \n\nfrom table_A  a\n\nleft join temp_table_B b\n\non a.seller_id = b.seller_id\n\nwhere b.seller_id is not null\n\n)  b\n\non  a.seller_id  = b.seller_id\n\nunion all\n\n\n\nselect  /*+mapjoin(b)*/\n\na.buer_id,  a.seller_id,  b.sale_level, a.pay_cnt_90day\n\nfrom ( \n\nselect buyer_id,  seller_id,  pay_cnt_90day   \n\nfrom table_A\n\n)  a\n\njoin\n\n(\n\nselect seller_id,  sale_level  from table_B \n\n)  b\n\non  a.seller_id  = b.seller_id\n\n)  m  group by m.buyer_id\n\n) m\n\ngroup by m.buyer_id\n\n\n\n总结：方案1、2以及方案3中的同用方案不能保证解决大表join大表问题，因为它们都存在种种不同的限制和特定使用场景。\n\n而方案3的专用方案和方案4是推荐的优化方案，但是它们都需要新建一个临时表来存储每日动态变化的大卖家。相对方案4来说，方案3的专用方案不需要对代码框架进行修改，但是B表会被放大，所以一定要是是维度表，不然统计结果会是错误的。方案4最通用，自由度最高，但是对代码的更改也最大，甚至修改更难代码框架，可以作为终极方案使用。\n```","slug":"hive知识整理","published":1,"updated":"2020-12-30T13:37:12.691Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckjbi8tq0000r24vugqm19rc7","content":"<h1><span id=\"hive\">Hive</span></h1><!-- toc -->\n\n<ul>\n<li><a href=\"#%E6%A6%82%E8%BF%B0\">概述</a></li>\n<li><a href=\"#1ddl%E6%93%8D%E4%BD%9C\">1.DDL操作</a><ul>\n<li><a href=\"#11-%E5%88%9B%E5%BB%BA%E8%A1%A8\">1.1 创建表</a></li>\n<li><a href=\"#12-%E4%BF%AE%E6%94%B9%E8%A1%A8\">1.2 修改表</a></li>\n</ul>\n</li>\n<li><a href=\"#2dml%E6%93%8D%E4%BD%9C\">2.DML操作</a><ul>\n<li><a href=\"#21-load\">2.1 load</a></li>\n<li><a href=\"#22-insert\">2.2 insert</a></li>\n<li><a href=\"#23-join\">2.3 join</a></li>\n<li><a href=\"#24-%E6%8E%92%E5%BA%8F\">2.4 排序</a></li>\n</ul>\n</li>\n<li><a href=\"#3hive%E5%8F%82%E6%95%B0%E9%85%8D%E7%BD%AE\">3.hive参数配置</a><ul>\n<li><a href=\"#31-hive-shell%E5%91%BD%E4%BB%A4%E8%A1%8C\">3.1 Hive shell命令行</a></li>\n<li><a href=\"#32-hive-%E5%8F%82%E6%95%B0%E9%85%8D%E7%BD%AE%E6%96%B9%E5%BC%8F\">3.2 Hive 参数配置方式</a></li>\n</ul>\n</li>\n<li><a href=\"#4hive%E4%B8%AD%E5%A4%8D%E6%9D%82%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E7%9A%84%E4%BD%BF%E7%94%A8\">4.hive中复杂数据类型的使用</a><ul>\n<li><a href=\"#41-%E6%95%B0%E7%BB%84%E7%B1%BB%E5%9E%8B\">4.1 数组类型</a></li>\n<li><a href=\"#42-map%E7%B1%BB%E5%9E%8B\">4.2 map类型</a></li>\n<li><a href=\"#43-%E6%AD%A3%E5%88%99%E7%B1%BB%E5%9E%8B\">4.3 正则类型</a></li>\n<li><a href=\"#44-json%E7%B1%BB%E5%9E%8B\">4.4 json类型</a></li>\n<li><a href=\"#45-python%E7%B1%BB%E5%9E%8B\">4.5 python类型</a></li>\n</ul>\n</li>\n<li><a href=\"#5hive%E5%87%BD%E6%95%B0\">5.Hive函数</a><ul>\n<li><a href=\"#51%E8%87%AA%E5%AE%9A%E4%B9%89%E5%87%BD%E6%95%B0\">5.1自定义函数</a></li>\n<li><a href=\"#52udaf\">5.2UDAF</a></li>\n<li><a href=\"#53udtf\">5.3UDTF</a></li>\n<li><a href=\"#54%E5%B8%B8%E8%A7%81%E8%87%AA%E5%B8%A6%E7%9A%84hive%E5%87%BD%E6%95%B0\">5.4常见自带的hive函数</a></li>\n<li><a href=\"#55%E5%85%B3%E4%BA%8Eunion%E5%92%8Cunion-all\">5.5关于union和union all</a></li>\n</ul>\n</li>\n<li><a href=\"#6hive%E8%AF%AD%E6%B3%95%E8%A6%81%E7%82%B9\">6.hive语法要点</a></li>\n<li><a href=\"#7hive%E4%BC%98%E5%8C%96\">7.hive优化</a><ul>\n<li><a href=\"#71%E5%A4%A7%E8%A1%A8join%E5%A4%A7%E8%A1%A8%E4%BC%98%E5%8C%96\">7.1大表join大表优化</a></li>\n</ul>\n</li>\n</ul>\n<!-- tocstop -->\n\n<p>[TOC]</p>\n<h2><span id=\"概述\">概述</span></h2><p>Hive是基于Hadoop的一个数据仓库工具，可以将结构化的数据文件映射为一张数据库表，并提供类SQL查询功能。</p>\n<p>本质是将SQL转换为MapReduce程序</p>\n<p>主要用途：用来做离线数据分析，比直接用MapReduce开发效率更高</p>\n<a id=\"more\"></a>\n\n<p><img src=\"/2020/12/29/hive%E7%9F%A5%E8%AF%86%E6%95%B4%E7%90%86/timg-1568381886490.jpg\" alt=\"img\"> </p>\n<p>数据仓库和数据库的区别</p>\n<ul>\n<li><p>数据库是面向事务的设计，数据仓库是面向主题设计的。</p>\n</li>\n<li><p>数据库一般存储业务数据，数据仓库存储的一般是历史数据。</p>\n</li>\n<li><p>数据库设计是尽量避免冗余，一般针对某一业务应用进行设计，比如一张简单的User表，记录用户名、密码等简单数据即可，符合业务应用，但是不符合分析。数据仓库在设计是有意引入冗余，依照分析需求，分析维度、分析指标进行设计。</p>\n</li>\n<li><p>数据库是为捕获数据而设计，数据仓库是为分析数据而设计。</p>\n</li>\n</ul>\n<p>数据仓库分层架构</p>\n<p>==源数据层（ODS）==：此层数据无任何更改，直接沿用外围系统数据结构和数据，不对外开放；为临时存储层，是接口数据的临时存储区域，为后一步的数据处理做准备。</p>\n<p>==数据仓库层（DW）==：也称为细节层，DW层的数据应该是一致的、准确的、干净的数据，即对源系统数据进行了清洗（去除了杂质）后的数据。</p>\n<p>==数据应用层（DA或APP）==：前端应用直接读取的数据源；根据报表、专题分析需求而计算生成的数据。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">先启动metastore服务再启动hiveserver2服务</span><br><span class=\"line\">/<span class=\"built_in\">export</span>/servers/hive/bin/beeline</span><br><span class=\"line\">beeline&gt; ! connect jdbc:hive2://hdp3:10000</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n<p>hive SQL语句中 select from where group by having order by 的==执行顺序==？</p>\n<p>1.from–where–group by–having–select–order by， </p>\n<p>2.from：需要从哪个数据表检索数据 </p>\n<p>3.where：过滤表中数据的条件 </p>\n<p>4.group by：如何将上面过滤出的数据分组 </p>\n<p>5.having：对上面已经分组的数据进行过滤的条件 </p>\n<p>6.select：查看结果集中的哪个列，或列的计算结果 </p>\n<p>7.order by ：按照什么样的顺序来查看返回的数据</p>\n<h2><span id=\"1ddl操作\">1.DDL操作</span></h2><p>设置hive程序本地运行模式：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">set</span> hive.exec.mode.local.auto=<span class=\"literal\">true</span>;</span><br></pre></td></tr></table></figure>\n<h3><span id=\"11-创建表\">1.1  创建表</span></h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create</span> [<span class=\"keyword\">external</span>] <span class=\"keyword\">table</span> [<span class=\"keyword\">if</span> <span class=\"keyword\">not</span> <span class=\"keyword\">exists</span>] tb_name (...) [<span class=\"keyword\">like</span>] existing_table;</span><br><span class=\"line\">[row format delimited fields terminated by char</span><br><span class=\"line\">\t\t\t\t\tcollection items terminated by char</span><br><span class=\"line\">\t\t\t\t\tmap keys terminated by char</span><br><span class=\"line\">\t\t\t\t\tlines terminated by char</span><br><span class=\"line\">\t\t\t\t\t...]</span><br><span class=\"line\">[partitioned by ]</span><br><span class=\"line\">[stored as file_format]</span><br><span class=\"line\">[CLUSTERED BY (col_name, col_name, ...) [SORTED BY (col_name [ASC|DESC], ...)] INTO num_buckets BUCKETS]</span><br><span class=\"line\">[LOCATION hdfs_path]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>1.create table 创建一个指定名字的表，如果表以存在可以用[if not exists]跳过异常</p>\n<p>2.[external] 关键字可以让给用户创建一个外部表。</p>\n<p>创建内部表时会将数据移动到数据仓库指向的路径，删除表时元数据和数据都被删除。</p>\n<p>外部表仅记录数据所在的路径，删除时只删除元数据，不删除数据。</p>\n<p>3.[like] 允许用户复制现有的表结构，但是不复制数据</p>\n<p>4.[row format delimited] 指定表列与列的分隔符。hive建表的时候默认分隔符是‘\\001’,</p>\n<p>5.[partitioned by] 分区命令。每个表可以有多个分区，每个分区以文件夹的形式单独存在表文件夹目录下。分区是以字段的形式在表结构中存在。</p>\n<p>6.[stored as sequencedile|textfile|refile]   如果文件数据是纯文本，可以使用textfile,如果数据需要压缩，使用sequencedile。</p>\n<p>textfile是默认的文件格式，使用delimited子句来读取分隔文件</p>\n<p>7.[clustered by (col_name,col_name,….)]   分桶</p>\n<p>8.[LOCATION hdfs_path]  指定这张表所在的hdfs上的目录，如果不指定，默认在数据库的目录下面</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span> tb_name <span class=\"keyword\">as</span> <span class=\"keyword\">select</span> <span class=\"keyword\">statement</span>;将sql语句的结果进行保存</span><br><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span> tb_new <span class=\"keyword\">like</span> tb_old;创建一张结构与tb_old一样的表</span><br><span class=\"line\"><span class=\"keyword\">drop</span> <span class=\"keyword\">table</span> [<span class=\"keyword\">if</span> <span class=\"keyword\">exists</span>] tb_name;删除表</span><br><span class=\"line\"><span class=\"keyword\">truncate</span> <span class=\"keyword\">table</span> tb_name;清空表</span><br><span class=\"line\"><span class=\"keyword\">show</span> functions;查看所有的函数</span><br><span class=\"line\"><span class=\"keyword\">show</span> <span class=\"keyword\">partitions</span> tb_name;查看所有分区</span><br><span class=\"line\">desc formatted tb_name；查看表信息</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4><span id=\"111-管理表\">1.1.1 管理表</span></h4><p>最普通的表，默认表的类型就是管理表</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span> tb_name();</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4><span id=\"112-外部表\">1.1.2 外部表</span></h4><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">external</span> <span class=\"keyword\">table</span> tb_name();</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>特点：在删除时，不会删除表数据</p>\n<p>应用场景：1-如果需要多张表共用同一份数据，都建立外部表，使用完以后，删除表互不影响。2-如果数据需要进行额外的使用：存档等等</p>\n<h4><span id=\"113-分区表\">1.1.3 分区表</span></h4><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">external</span> <span class=\"keyword\">table</span> tb_part(</span><br><span class=\"line\"><span class=\"keyword\">id</span> <span class=\"keyword\">string</span></span><br><span class=\"line\"> <span class=\"keyword\">name</span> <span class=\"keyword\">string</span></span><br><span class=\"line\">)</span><br><span class=\"line\">partitioned <span class=\"keyword\">by</span> (<span class=\"keyword\">day</span> <span class=\"keyword\">string</span>)</span><br><span class=\"line\"><span class=\"keyword\">row</span> <span class=\"keyword\">format</span> <span class=\"keyword\">delimited</span> <span class=\"keyword\">fields</span> <span class=\"keyword\">terminated</span> <span class=\"keyword\">by</span> <span class=\"string\">&#x27;\\t&#x27;</span>;</span><br><span class=\"line\"><span class=\"comment\">--创建分区表，指定分区字段day</span></span><br><span class=\"line\"><span class=\"keyword\">load</span> <span class=\"keyword\">data</span> <span class=\"keyword\">local</span> inpath <span class=\"string\">&#x27;/export/datas/20180718&#x27;</span> <span class=\"keyword\">into</span> <span class=\"keyword\">table</span> tb_name <span class=\"keyword\">partition</span>(<span class=\"keyword\">day</span>=<span class=\"string\">&#x27;18&#x27;</span>);</span><br><span class=\"line\"><span class=\"comment\">--加载文件数据，创建分区字段day=18</span></span><br><span class=\"line\"><span class=\"keyword\">load</span> <span class=\"keyword\">data</span> <span class=\"keyword\">local</span> inpath <span class=\"string\">&#x27;/export/datas/20180719&#x27;</span> <span class=\"keyword\">into</span> <span class=\"keyword\">table</span> tb_name <span class=\"keyword\">partition</span>(<span class=\"keyword\">day</span>=<span class=\"string\">&#x27;19&#x27;</span>);</span><br><span class=\"line\"><span class=\"comment\">--加载文件数据，创建分区字段day=19</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> tb_part <span class=\"keyword\">where</span> <span class=\"keyword\">day</span> = <span class=\"number\">19</span>;</span><br><span class=\"line\"><span class=\"comment\">--过滤条件需是分区的字段，如果不是分区字段就会从整个分区目录中查找</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>手动分区：加载数据时，手动指定文件的分区</p>\n<p>分区字段为查询的语句的最后一个字段 </p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">insert</span> overwrite <span class=\"keyword\">table</span> tb_emp_part <span class=\"keyword\">partition</span> (deptno)</span><br><span class=\"line\">  <span class=\"keyword\">select</span> empno</span><br><span class=\"line\">  ename,</span><br><span class=\"line\">  job,</span><br><span class=\"line\">  manager,</span><br><span class=\"line\">  inday,</span><br><span class=\"line\">  salary,</span><br><span class=\"line\">  jiangjin,</span><br><span class=\"line\">  deptno</span><br><span class=\"line\"><span class=\"keyword\">from</span> tb_emp_normal;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>应用场景：将普通表的数据转换成一个分区表</p>\n<pre><code>       原始表【tb1】中的数据没有做分区\n         希望将原始表中的数据按照分区存放到新的分区表[tb2]</code></pre>\n</li>\n<li><p>自动分区：默认按照原始表的最后一列进行分区</p>\n</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">set</span> hive.exec.dynamic.partition.mode=nonstrict;</span><br><span class=\"line\">配置自动分区</span><br><span class=\"line\"><span class=\"keyword\">show</span> <span class=\"keyword\">partitions</span> tb_name;</span><br><span class=\"line\">查看当前所有分区</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>数据加载问题：<br>1-如果手动将数据文件放入一张普通表的目录下？表能不能读到数据？</p>\n<p>​    可以，元数据查询时直接将表的目录作为查询目录<br>2-如果手动将数据文件放入一张分区表的分区目录下？表能不能读到数据？表的分区能不能读到数据？<br>​    可以的，因为元数据查询时直接将分区的目录作为查询目录<br>3-如果手动在HDFS上创建一个分区的目录，将数据放入分区目录下，表能不能读到数据？<br>​    不能，因为Hive中没有该分区的元数据</p>\n<p>方案一：修复表的元数据（资源占用多）</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">msck <span class=\"keyword\">repair</span> <span class=\"keyword\">table</span> tb_emp;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>方案二：手动向表中添加一个分区</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">table</span> tb_name <span class=\"keyword\">add</span> [<span class=\"keyword\">if</span> <span class=\"keyword\">exists</span>] <span class=\"keyword\">partition</span> (dt=<span class=\"string\">&#x27;20&#x27;</span>) location <span class=\"string\">&#x27;/user/hadoop/dt=20&#x27;</span>;</span><br><span class=\"line\"><span class=\"comment\">--要求建立的目录必须与分区自动创建的目录格式一样</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>删除分区</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alter table tb_name drop [<span class=\"keyword\">if</span> exists] partition (dt=<span class=\"string\">&#x27;20&#x27;</span>);</span><br></pre></td></tr></table></figure>\n\n\n</li>\n</ul>\n<h4><span id=\"114-分桶表\">1.1.4  分桶表</span></h4>  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span> tb_emp_bucket(</span><br><span class=\"line\">empno <span class=\"built_in\">int</span> ,</span><br><span class=\"line\">ename <span class=\"keyword\">string</span>,</span><br><span class=\"line\">job <span class=\"keyword\">string</span>,</span><br><span class=\"line\">manager <span class=\"built_in\">int</span>,</span><br><span class=\"line\">inday <span class=\"keyword\">string</span>,</span><br><span class=\"line\">salary <span class=\"keyword\">double</span>,</span><br><span class=\"line\">jiangjin <span class=\"keyword\">double</span>,</span><br><span class=\"line\">deptno <span class=\"built_in\">int</span></span><br><span class=\"line\">) </span><br><span class=\"line\">clustered <span class=\"keyword\">by</span> (deptno) <span class=\"keyword\">into</span> <span class=\"number\">3</span> BUCKETS</span><br><span class=\"line\"><span class=\"keyword\">row</span> <span class=\"keyword\">format</span> <span class=\"keyword\">delimited</span> <span class=\"keyword\">fields</span> <span class=\"keyword\">terminated</span> <span class=\"keyword\">by</span> <span class=\"string\">&#x27;\\t&#x27;</span>;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>  应用场景：大表join大表时</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--开启分桶</span></span><br><span class=\"line\"><span class=\"keyword\">set</span> hive.enforce.bucketing=<span class=\"literal\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">insert</span> overwrite <span class=\"keyword\">table</span> tb_emp_bucket</span><br><span class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> tb_emp_normal cluster <span class=\"keyword\">by</span> (deptno);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>  连个桶表桶的个数必须相同，或者b表桶是a表的倍数</p>\n<h3><span id=\"12-修改表\">1.2 修改表</span></h3><p>  增加分区：</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">table</span> tb_name <span class=\"keyword\">add</span> <span class=\"keyword\">partition</span> (dt=<span class=\"string\">&#x27;20170101&#x27;</span>) location <span class=\"string\">&#x27;/user/hadoop/table_name/dt=20170101&#x27;</span>;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>  删除分区</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">table</span> tb_name <span class=\"keyword\">drop</span> <span class=\"keyword\">if</span> <span class=\"keyword\">exists</span> <span class=\"keyword\">partition</span> (dt=<span class=\"string\">&#x27;20170101&#x27;</span>)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>  修改分区</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">table</span> tb_name <span class=\"keyword\">partition</span> (dt=<span class=\"string\">&#x27;20170101&#x27;</span>) <span class=\"keyword\">rename</span> <span class=\"keyword\">to</span> <span class=\"keyword\">partition</span>(dt=<span class=\"string\">&#x27;20170202&#x27;</span>)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>  添加列</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--添加列</span></span><br><span class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">table</span> tb_name <span class=\"keyword\">add</span>|<span class=\"keyword\">replace</span> <span class=\"keyword\">columns</span> (col_name <span class=\"keyword\">string</span>);</span><br><span class=\"line\"><span class=\"comment\">--修改表名</span></span><br><span class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">table</span> stu_par <span class=\"keyword\">rename</span> <span class=\"keyword\">to</span> stu_par1</span><br><span class=\"line\"><span class=\"comment\">--增加列</span></span><br><span class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">table</span> stu1 <span class=\"keyword\">add</span> <span class=\"keyword\">columns</span>(score <span class=\"keyword\">string</span>);</span><br><span class=\"line\"><span class=\"comment\">--修改列类型</span></span><br><span class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">table</span> stu1 <span class=\"keyword\">change</span> <span class=\"keyword\">column</span> score score <span class=\"keyword\">double</span>;</span><br><span class=\"line\"><span class=\"comment\">--</span></span><br></pre></td></tr></table></figure>\n<h2><span id=\"2dml操作\">2.DML操作</span></h2><h3><span id=\"21-load\">2.1 load</span></h3><p>  在将数据加载到表中时，Hive不会进行任何转换。加载操作是将数据文件移动到与Hive表对应的位置的纯复制/移动操作。</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">load</span> <span class=\"keyword\">data</span> [<span class=\"keyword\">local</span>] inpath <span class=\"string\">&#x27;filepath&#x27;</span> [overwrite] <span class=\"keyword\">into</span> <span class=\"keyword\">table</span> tb_name [<span class=\"keyword\">partition</span>(partcol1=val1,partcol2=val2...)]</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3><span id=\"22-insert\">2.2 insert</span></h3><p>  Hive中insert主要是结合select查询语句使用，将查询结果插入到表中</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--查询结果的列数要和插入数据表格的列数一致</span></span><br><span class=\"line\"><span class=\"keyword\">insert</span> overwrite <span class=\"keyword\">table</span> tb_name <span class=\"keyword\">select</span> <span class=\"keyword\">statement</span></span><br><span class=\"line\"><span class=\"comment\">--将查询语句结果保存至HDFS中</span></span><br><span class=\"line\"><span class=\"keyword\">insert</span> overwrite <span class=\"keyword\">directory</span> <span class=\"string\">&quot;/movie/answer10/&quot;</span> <span class=\"keyword\">select</span> <span class=\"keyword\">statement</span>;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3><span id=\"23-join\">2.3 join</span></h3><p>  inner join: 两张表都有结果才有</p>\n<p>  left join: 左表有，结果就有</p>\n<p>  right join: 右表有，结果就有</p>\n<p>  full join：两边任意一边有，结果就有</p>\n<p>  cross join:笛卡尔积      –一般用于结果的漏斗计算</p>\n<h3><span id=\"24-排序\">2.4 排序</span></h3>  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">set</span> hive.exec.reducers.bytes.per.reducer=&lt;<span class=\"built_in\">number</span>&gt;</span><br><span class=\"line\">\t每个reduce最多处理多少数据量</span><br><span class=\"line\"><span class=\"keyword\">set</span> hive.exec.reducers.max=&lt;<span class=\"built_in\">number</span>&gt;\t</span><br><span class=\"line\">\t最多启动多少个reduce</span><br><span class=\"line\"><span class=\"keyword\">set</span> mapreduce.job.reduces=&lt;<span class=\"built_in\">number</span>&gt;</span><br><span class=\"line\">\t设置reduce的个数</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4><span id=\"order-by\">order by</span></h4><p>  全局排序，对整体进行排序，只有一个reduce的情况下</p>\n<p>  在启用多个reduce的情况下如果使用order by 结果依旧全局有序，但只会启用一个reduce</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span>  empno,ename,salary,deptno <span class=\"keyword\">from</span> tb_emp_normal <span class=\"keyword\">order</span> <span class=\"keyword\">by</span> empno;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4><span id=\"sort-by\">sort by</span></h4><p>  局部排序，多个reduce的 情况下，每个reduce内部有序（分区内有序）</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">set</span> mapreduce.job.reduces=<span class=\"number\">3</span>;</span><br><span class=\"line\">设置reduce个数</span><br><span class=\"line\"><span class=\"keyword\">insert</span> overwrite <span class=\"keyword\">local</span> <span class=\"keyword\">directory</span> <span class=\"string\">&#x27;/export/datas/sort&#x27;</span> </span><br><span class=\"line\"><span class=\"keyword\">row</span> <span class=\"keyword\">format</span> <span class=\"keyword\">delimited</span> <span class=\"keyword\">fields</span> <span class=\"keyword\">terminated</span> <span class=\"keyword\">by</span> <span class=\"string\">&#x27;\\t&#x27;</span> </span><br><span class=\"line\"><span class=\"keyword\">select</span>  empno,ename,salary,deptno <span class=\"keyword\">from</span> tb_emp_normal </span><br><span class=\"line\"><span class=\"keyword\">sort</span> <span class=\"keyword\">by</span> empno;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4><span id=\"distribute-by\">distribute by</span></h4><p>  指定多个reduce情况下，以哪一列作为分区字段。将相同的数据放入同一个结果文件，类似MR中Partition，进行分区，结合sort by使用  </p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">insert</span> overwrite <span class=\"keyword\">local</span> <span class=\"keyword\">directory</span> <span class=\"string\">&#x27;/export/datas/dis&#x27;</span> </span><br><span class=\"line\"><span class=\"keyword\">row</span> <span class=\"keyword\">format</span> <span class=\"keyword\">delimited</span> <span class=\"keyword\">fields</span> <span class=\"keyword\">terminated</span> <span class=\"keyword\">by</span> <span class=\"string\">&#x27;\\t&#x27;</span> </span><br><span class=\"line\"><span class=\"keyword\">select</span>  empno,ename,salary,deptno <span class=\"keyword\">from</span> tb_emp_normal </span><br><span class=\"line\"><span class=\"keyword\">distribute</span> <span class=\"keyword\">by</span> deptno </span><br><span class=\"line\"><span class=\"keyword\">sort</span> <span class=\"keyword\">by</span> empno;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4><span id=\"cluster-by\">cluster by</span></h4><p>  如果sort by与distribute by使用同一个字段可以用此代替，但是排序只能是升序排序，不能指定排序规则为ASC或者DESC。</p>\n<h2><span id=\"3hive参数配置\">3.hive参数配置</span></h2><h3><span id=\"31-hive-shell命令行\">3.1 Hive shell命令行</span></h3><p>针对bin/hive，除了可以当第一代客户端之外。还可以在hive中启动其他用途。</p>\n<p>1、 -i  初始化HQL文件。</p>\n<p>2、 -e从命令行执行指定的HQL </p>\n<p>3、 -f 执行HQL脚本 </p>\n<p>4、 -v 输出执行的HQL语句到控制台 </p>\n<p>5、 -p <port> connect to Hive Server on port number </port></p>\n<p>6、 -hiveconf x=y Use this to set hive/hadoop configuration variables.</p>\n<p>例如：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$HIVE_HOME</span>/bin/hive -e <span class=\"string\">&#x27;select * from table a&#x27;</span>\t</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable\">$HIVE_HOME</span>/bin/hive -f /home/my/hive-script.sql</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable\">$HIVE_HOME</span>/bin/hive -f hdfs://&lt;namenode&gt;:&lt;port&gt;/hive-script.sql</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable\">$HIVE_HOME</span>/bin/hive -i /home/my/hive-init.sql</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n<h3><span id=\"32-hive-参数配置方式\">3.2 Hive 参数配置方式</span></h3><p><em>Hive参数大全：</em></p>\n<p>[<em><a href=\"https://cwiki.apache.org/confluence/display/Hive/Configuration+Properties\">https://cwiki.apache.org/confluence/display/Hive/Configuration+Properties</a></em></p>\n<p> 开发Hive应用时，不可避免地需要设定Hive的参数。设定Hive的参数可以调优HQL代码的执行效率，或帮助定位问题。然而实践中经常遇到的一个问题是，为什么设定的参数没有起作用？这通常是错误的设定方式导致的。</p>\n<p>对于一般参数，有以下三种设定方式：</p>\n<p>配置文件   （全局有效）</p>\n<p>命令行参数   （对hive启动实例有效）</p>\n<p>参数声明   （对hive的连接session有效）</p>\n<p>配置文件 </p>\n<p>用户自定义配置文件：$HIVE_CONF_DIR/hive-site.xml</p>\n<p>默认配置文件：$HIVE_CONF_DIR/hive-default.xml </p>\n<p>用户自定义配置会覆盖默认配置。</p>\n<p>另外，Hive也会读入Hadoop的配置，因为Hive是作为Hadoop的客户端启动的，Hive的配置会覆盖Hadoop的配置。</p>\n<p>配置文件的设定对本机启动的所有Hive进程都有效。</p>\n<p> 命令行参数</p>\n<p>启动Hive（客户端或Server方式）时，可以在命令行添加-hiveconf来设定参数    例如：bin/hive -hiveconf hive.root.logger=INFO,console</p>\n<p>设定对本次启动的Session（对于Server方式启动，则是所有请求的Sessions）有效。</p>\n<p> 参数声明</p>\n<p>可以在HQL中使用SET关键字设定参数，这一设定的作用域也是session级的。</p>\n<p>比如：</p>\n<p>set hive.exec.reducers.bytes.per.reducer=<number>  每个reduce task的平均负载数据量</number></p>\n<p>set hive.exec.reducers.max=<number>   设置reduce task数量的上限</number></p>\n<p>set mapreduce.job.reduces=<number>    指定固定的reduce task数量</number></p>\n<p>但是，这个参数在必要时&lt;业务逻辑决定只能用一个reduce task&gt; hive会忽略</p>\n<p>上述三种设定方式的优先级依次递增。即参数声明覆盖命令行参数，命令行参数覆盖配置文件设定。注意某些系统级的参数，例如log4j相关的设定，必须用前两种方式设定，因为那些参数的读取在Session建立以前已经完成了。</p>\n<h2><span id=\"4hive中复杂数据类型的使用\">4.hive中复杂数据类型的使用</span></h2><h3><span id=\"41-数组类型\">4.1 数组类型</span></h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--数据如下：vim &#x2F;export&#x2F;datas&#x2F;array.txt</span><br><span class=\"line\">zhangsan\tbeijing,shanghai,tianjin,hangzhou</span><br><span class=\"line\">wangwu\tshanghai,chengdu,wuhan,haerbin</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--创建表</span></span><br><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span> complex_array(</span><br><span class=\"line\"><span class=\"keyword\">name</span> <span class=\"keyword\">string</span>,</span><br><span class=\"line\">work_locations <span class=\"built_in\">array</span>&lt;<span class=\"keyword\">string</span>&gt;</span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"keyword\">row</span> <span class=\"keyword\">format</span> <span class=\"keyword\">delimited</span> <span class=\"keyword\">fields</span> <span class=\"keyword\">terminated</span> <span class=\"keyword\">by</span> <span class=\"string\">&#x27;\\t&#x27;</span> <span class=\"comment\">--指定列的分隔符</span></span><br><span class=\"line\">collection items <span class=\"keyword\">terminated</span> <span class=\"keyword\">by</span> <span class=\"string\">&#x27;,&#x27;</span>;<span class=\"comment\">--指定数组中元素的分隔符</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--加载数据</span></span><br><span class=\"line\"><span class=\"keyword\">load</span> <span class=\"keyword\">data</span> <span class=\"keyword\">local</span> inpath <span class=\"string\">&#x27;/export/datas/array.txt&#x27;</span> <span class=\"keyword\">into</span> <span class=\"keyword\">table</span> complex_array;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--查询</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> complex_array;</span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"keyword\">size</span>(work_locations) <span class=\"keyword\">from</span> complex_array;</span><br><span class=\"line\"><span class=\"keyword\">select</span> work_locations[<span class=\"number\">0</span>],work_locations[<span class=\"number\">1</span>] <span class=\"keyword\">from</span> complex_array;</span><br></pre></td></tr></table></figure>\n<h3><span id=\"42-map类型\">4.2 map类型</span></h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--数据如下：vim &#x2F;export&#x2F;datas&#x2F;map.txt</span><br><span class=\"line\">1,zhangsan,唱歌:非常喜欢-跳舞:喜欢-游泳:一般般</span><br><span class=\"line\">2,lisi,打游戏:非常喜欢-篮球:不喜欢</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--创建表</span></span><br><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span> complex_map(</span><br><span class=\"line\"><span class=\"keyword\">id</span> <span class=\"built_in\">int</span>,</span><br><span class=\"line\"><span class=\"keyword\">name</span> <span class=\"keyword\">string</span>,</span><br><span class=\"line\">hobby <span class=\"keyword\">map</span>&lt;<span class=\"keyword\">string</span>,<span class=\"keyword\">string</span>&gt;)</span><br><span class=\"line\"><span class=\"keyword\">row</span> <span class=\"keyword\">format</span> <span class=\"keyword\">delimited</span> <span class=\"keyword\">fields</span> <span class=\"keyword\">terminated</span> <span class=\"keyword\">by</span> <span class=\"string\">&#x27;,&#x27;</span> <span class=\"comment\">--指定列的分隔符</span></span><br><span class=\"line\">collection items <span class=\"keyword\">terminated</span> <span class=\"keyword\">by</span> <span class=\"string\">&#x27;-&#x27;</span> <span class=\"keyword\">map</span> <span class=\"keyword\">keys</span> <span class=\"keyword\">terminated</span> <span class=\"keyword\">by</span> <span class=\"string\">&#x27;:&#x27;</span> ;<span class=\"comment\">--指定keyvalue的分割</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--加载数据</span></span><br><span class=\"line\"><span class=\"keyword\">load</span> <span class=\"keyword\">data</span> <span class=\"keyword\">local</span> inpath <span class=\"string\">&#x27;/export/datas/map.txt&#x27;</span> <span class=\"keyword\">into</span> <span class=\"keyword\">table</span> complex_map;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--查询</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> complex_map;</span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"keyword\">size</span>(hobby) <span class=\"keyword\">from</span> complex_map;</span><br><span class=\"line\"><span class=\"keyword\">select</span> hobby[<span class=\"string\">&quot;唱歌&quot;</span>] <span class=\"keyword\">from</span> complex_map;</span><br></pre></td></tr></table></figure>\n<h3><span id=\"43-正则类型\">4.3 正则类型</span></h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--数据如下:vim /export/datas/regex.txt</span></span><br><span class=\"line\">tom 男 23 上海</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--使用正则加载数据</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> user_regex(</span><br><span class=\"line\"><span class=\"keyword\">name</span> <span class=\"keyword\">string</span>,</span><br><span class=\"line\">sex <span class=\"keyword\">string</span>,</span><br><span class=\"line\">age <span class=\"built_in\">int</span>,</span><br><span class=\"line\">city <span class=\"keyword\">string</span></span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"keyword\">ROW</span> <span class=\"keyword\">FORMAT</span> SERDE <span class=\"string\">&#x27;org.apache.hadoop.hive.serde2.RegexSerDe&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">WITH</span> SERDEPROPERTIES (</span><br><span class=\"line\">  <span class=\"string\">&quot;input.regex&quot;</span> = <span class=\"string\">&quot;([^ ]+) ([^ ]+) ([0-9]+) (.+)&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"keyword\">STORED</span> <span class=\"keyword\">AS</span> TEXTFILE;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">load</span> <span class=\"keyword\">data</span> <span class=\"keyword\">local</span> inpath <span class=\"string\">&#x27;/root/regex.txt&#x27;</span> <span class=\"keyword\">into</span> <span class=\"keyword\">table</span> user_regex;</span><br></pre></td></tr></table></figure>\n<h3><span id=\"44-json类型\">4.4 json类型</span></h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--通过专门的解析类直接加载一个json格式的数据到Hive中</span></span><br><span class=\"line\"><span class=\"comment\">--数据如下:vim /export/datas/hivedata.json</span></span><br><span class=\"line\">&#123;&quot;id&quot;: 1701439105,&quot;ids&quot;: [2154137571,3889177061],&quot;total_number&quot;: 493&#125;</span><br><span class=\"line\">&#123;&quot;id&quot;: 1701439106,&quot;ids&quot;: [2154137571,3889177061],&quot;total_number&quot;: 494&#125;</span><br><span class=\"line\"><span class=\"comment\">--添加jar包</span></span><br><span class=\"line\">add jar /export/datas/json-serde-1.3.7-jar-<span class=\"keyword\">with</span>-dependencies.jar;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--创建表：</span></span><br><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span> tb_json_test2 (</span><br><span class=\"line\"><span class=\"keyword\">id</span> <span class=\"keyword\">string</span>,</span><br><span class=\"line\">ids <span class=\"built_in\">array</span>&lt;<span class=\"keyword\">string</span>&gt;,</span><br><span class=\"line\">total_number <span class=\"built_in\">int</span>)</span><br><span class=\"line\"><span class=\"keyword\">ROW</span> <span class=\"keyword\">FORMAT</span> SERDE <span class=\"string\">&#x27;org.openx.data.jsonserde.JsonSerDe&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">STORED</span> <span class=\"keyword\">AS</span> TEXTFILE;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--加载数据</span></span><br><span class=\"line\"><span class=\"keyword\">load</span> <span class=\"keyword\">data</span> <span class=\"keyword\">local</span> inpath <span class=\"string\">&#x27;/export/datas/hivedata.json&#x27;</span> <span class=\"keyword\">into</span> <span class=\"keyword\">table</span> tb_json_test2;</span><br></pre></td></tr></table></figure>\n<h3><span id=\"45-python类型\">4.5 python类型</span></h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--创建Python脚本实现将原始表的时间转为对应的星期几</span></span><br><span class=\"line\">vim /export/datas/weekday_mapper.py</span><br><span class=\"line\"></span><br><span class=\"line\">import sys</span><br><span class=\"line\">import datetime</span><br><span class=\"line\"></span><br><span class=\"line\">for line in sys.stdin:</span><br><span class=\"line\">  line = line.strip()</span><br><span class=\"line\">  userid, movieid, rating, unixtime = line.split(&#x27;\\t&#x27;)</span><br><span class=\"line\">  weekday = datetime.datetime.fromtimestamp(float(unixtime)).isoweekday()</span><br><span class=\"line\">  print &#x27;\\t&#x27;.join([userid, movieid, rating, str(weekday)])</span><br><span class=\"line\"> </span><br></pre></td></tr></table></figure>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--加载python脚本并将数据写入新表</span></span><br><span class=\"line\">add FILE /export/datas/weekday_mapper.py;</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> OVERWRITE <span class=\"keyword\">TABLE</span> u_data_new</span><br><span class=\"line\"><span class=\"keyword\">SELECT</span></span><br><span class=\"line\">  TRANSFORM (userid, movieid, rating, unixtime)</span><br><span class=\"line\">  <span class=\"keyword\">USING</span> <span class=\"string\">&#x27;python weekday_mapper.py&#x27;</span></span><br><span class=\"line\">  <span class=\"keyword\">AS</span> (userid, movieid, rating, <span class=\"keyword\">weekday</span>)</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> u_data;</span><br></pre></td></tr></table></figure>\n<h2><span id=\"5hive函数\">5.Hive函数</span></h2><h3><span id=\"51自定义函数\">5.1自定义函数</span></h3><h4><span id=\"511-udf\">5.1.1 UDF</span></h4><p>UDF（User-Defined-Function）普通函数 一进一出</p>\n<p>1、自定义一个类，继承UDF,实现一个或重载多个evaluate方法，打包上传jar包到linux环境</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">     <span class=\"comment\">&lt;!-- 指定该项目可以从哪些地方下载依赖包 --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">repository</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>aliyun<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public/<span class=\"tag\">&lt;/<span class=\"name\">url</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">repository</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">repository</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>cloudera<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">url</span>&gt;</span>https://repository.cloudera.com/artifactory/cloudera-repos/<span class=\"tag\">&lt;/<span class=\"name\">url</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">repository</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">repository</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>jboss<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">url</span>&gt;</span>http://repository.jboss.org/nexus/content/groups/public<span class=\"tag\">&lt;/<span class=\"name\">url</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">repository</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">repositories</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--指定字符编码--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class=\"tag\">&lt;/<span class=\"name\">project.build.sourceEncoding</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--指定依赖--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.hadoop<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>hadoop-common<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.6.0-cdh5.14.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.hadoop<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>hadoop-hdfs<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.6.0-cdh5.14.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.hadoop<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>hadoop-client<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.6.0-cdh5.14.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.hive<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>hive-exec<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.1.0-cdh5.14.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.hive<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>hive-common<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.1.0-cdh5.14.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.hive<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>hive-cli<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.1.0-cdh5.14.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.hive<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>hive-jdbc<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.1.0-cdh5.14.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> org.apache.hadoop.hive.ql.exec.UDF;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.hadoop.io.Text;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserUDF</span> <span class=\"keyword\">extends</span> <span class=\"title\">UDF</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Text <span class=\"title\">evaluate</span><span class=\"params\">(Text s)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(s==<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Text(s.toString().toLowerCase());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<p>2、将jar包添加到hive环境中</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">add jar &#x2F;export&#x2F;datas&#x2F;udf.jar;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>3、在hive中创建一个函数</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">create temporary function fc_name as &#39;com.neusoft.data.UserUDF&#39;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>4、使用函数</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select fc_name(age),name from tb_name;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4><span id=\"512自定义udfudtfudaf开发\">5.1.2自定义udf,udtf,udaf开发</span></h4><p>UDF：<br>1-开发udf程序：继承UDF类，实现一个或者多个evaluate方法<br>2-打成jar包<br>3-上传jar包到集群中，并添加到hive的环境变量中，在hive中执行<br>    add jar /export/datas/udf.jar;<br>4-创建临时函数：<br>    create temporary function  transDate as ‘cn.itcast.bigdata.hive.TransDate’;<br>5-测试函数：<br>    select transDate(“18/Aug/2019:12:30:05”);<br>6-删除临时函数<br>    DROP TEMPORARY FUNCTION transDate;</p>\n<p>UDTF<br>1-开发udtf程序：继承UDTF类，重写process方法<br>2-打成jar包<br>3-上传jar包到集群中，并添加到hive的环境变量中，在hive中执行<br>    add jar /export/datas/udtf.jar;<br>4-创建临时函数：<br>    create temporary function  transMap as ‘cn.itcast.bigdata.hive.UserUDTF’;<br>5-测试函数：<br>    第一种用法：直接调用<br>        select transMap(“uuid=root&amp;url=<a href=\"http://www.taobao.com&quot;/\">www.taobao.com&quot;</a>) as (userCol1,userCol2);<br>    第二种用法：和侧视图一起使用<br>        select deptno,deptname,a.* from tb_dept lateral view transMap(“uuid=root&amp;url=<a href=\"http://www.taobao.com&quot;/\">www.taobao.com&quot;</a>) a as col1,col2;<br>    注意：<br>        1-udtf只能直接select中使用<br>        2-不可以添加其他字段使用<br>        3-不可以嵌套调用<br>        4-不可以和group by/cluster by/distribute by/sort by一起使用</p>\n<p>UDAF<br>1-开发udaf程序：继承UDAF类，重写iterate方法<br>2-打成jar包<br>3-上传jar包到集群中，并添加到hive的环境变量中，在hive中执行<br>    add jar /export/datas/udaf.jar;<br>4-创建临时函数：<br>    create temporary function  userMax as ‘cn.itcast.bigdata.hive.UserUDAF’;<br>5-测试函数：<br>    select userMax(deptno) from tb_dept;</p>\n<h3><span id=\"52udaf\">5.2UDAF</span></h3><p>UDAF（User-Defined Aggregation Function）聚合函数，多进一出</p>\n<h4><span id=\"窗口函数sum-avg-count-max-min\">窗口函数：SUM、AVG、COUNT、MAX、MIN</span></h4><p>功能：用于实现数据分区后的聚合<br>    -》语法：fun_name(col1) over (partition by col2 order by col3)<br>                实现功能    over  按照什么分区，分区内部按照什么排序<br>    -》示例：实现分区内的累加，其他的原理类似</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cookie1,2018-04-10,1</span><br><span class=\"line\">cookie1,2018-04-11,5</span><br><span class=\"line\">cookie1,2018-04-12,7</span><br><span class=\"line\">cookie1,2018-04-13,3</span><br><span class=\"line\">cookie2,2018-04-13,3</span><br><span class=\"line\">cookie2,2018-04-14,2</span><br><span class=\"line\">cookie2,2018-04-15,4</span><br><span class=\"line\">cookie1,2018-04-14,2</span><br><span class=\"line\">cookie1,2018-04-15,4</span><br><span class=\"line\">cookie1,2018-04-16,4</span><br><span class=\"line\">cookie2,2018-04-10,1</span><br><span class=\"line\">cookie2,2018-04-11,5</span><br><span class=\"line\">cookie2,2018-04-12,7</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--创建表</span></span><br><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">database</span> db_function;</span><br><span class=\"line\"><span class=\"keyword\">use</span> db_function;</span><br><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span> user_f1(</span><br><span class=\"line\">cookieid <span class=\"keyword\">string</span>,</span><br><span class=\"line\">daystr <span class=\"keyword\">string</span>,</span><br><span class=\"line\">pv <span class=\"built_in\">int</span></span><br><span class=\"line\">) <span class=\"keyword\">row</span> <span class=\"keyword\">format</span> <span class=\"keyword\">delimited</span> <span class=\"keyword\">fields</span> <span class=\"keyword\">terminated</span> <span class=\"keyword\">by</span> <span class=\"string\">&#x27;,&#x27;</span>;</span><br><span class=\"line\"><span class=\"comment\">--加载数据</span></span><br><span class=\"line\"><span class=\"keyword\">load</span> <span class=\"keyword\">data</span> <span class=\"keyword\">local</span> inpath <span class=\"string\">&#x27;/export/datas/window.txt&#x27;</span> <span class=\"keyword\">into</span> <span class=\"keyword\">table</span> user_f1;</span><br><span class=\"line\"><span class=\"keyword\">set</span> hive.exec.mode.local.auto=<span class=\"literal\">true</span>;</span><br><span class=\"line\"><span class=\"comment\">--实现分区内起始到当前行的pv累加，默认窗口：取第一行开始到当前行的和</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> </span><br><span class=\"line\">  cookieid,</span><br><span class=\"line\">  daystr,</span><br><span class=\"line\">  pv,</span><br><span class=\"line\">  <span class=\"keyword\">sum</span>(pv) <span class=\"keyword\">over</span>(<span class=\"keyword\">partition</span> <span class=\"keyword\">by</span> cookieid <span class=\"keyword\">order</span> <span class=\"keyword\">by</span> daystr) <span class=\"keyword\">as</span> pv1 </span><br><span class=\"line\"><span class=\"keyword\">from</span> </span><br><span class=\"line\">  user_f1;</span><br><span class=\"line\">   </span><br><span class=\"line\"><span class=\"comment\">--实现分区内所有pv的累加，不指定排序默认窗口：从第一行到最后一行</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> </span><br><span class=\"line\">  cookieid,</span><br><span class=\"line\">  daystr,</span><br><span class=\"line\">  pv,</span><br><span class=\"line\">  <span class=\"keyword\">sum</span>(pv) <span class=\"keyword\">over</span>(<span class=\"keyword\">partition</span> <span class=\"keyword\">by</span> cookieid ) <span class=\"keyword\">as</span> pv2</span><br><span class=\"line\"><span class=\"keyword\">from</span> </span><br><span class=\"line\">  user_f1;</span><br><span class=\"line\">  </span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"comment\">--手动指定窗口的大小：分区</span></span><br><span class=\"line\">rows between 起始位置 and 结束位置</span><br><span class=\"line\">rows between unbounded preceding and current row</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--实现分区内起始到当前行的pv累加</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> </span><br><span class=\"line\">  cookieid,</span><br><span class=\"line\">  daystr,</span><br><span class=\"line\">  pv,</span><br><span class=\"line\">  <span class=\"keyword\">sum</span>(pv) <span class=\"keyword\">over</span>(<span class=\"keyword\">partition</span> <span class=\"keyword\">by</span> cookieid <span class=\"keyword\">order</span> <span class=\"keyword\">by</span> daystr <span class=\"keyword\">rows</span> <span class=\"keyword\">between</span> <span class=\"keyword\">unbounded</span> <span class=\"keyword\">preceding</span> <span class=\"keyword\">and</span> <span class=\"keyword\">current</span> <span class=\"keyword\">row</span>) <span class=\"keyword\">as</span> pv3</span><br><span class=\"line\"><span class=\"keyword\">from</span> </span><br><span class=\"line\">  user_f1;</span><br><span class=\"line\"><span class=\"comment\">--实现分区内指定前N行到当前行的pv累加</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> </span><br><span class=\"line\">  cookieid,</span><br><span class=\"line\">  daystr,</span><br><span class=\"line\">  pv,</span><br><span class=\"line\">  <span class=\"keyword\">sum</span>(pv) <span class=\"keyword\">over</span>(<span class=\"keyword\">partition</span> <span class=\"keyword\">by</span> cookieid <span class=\"keyword\">order</span> <span class=\"keyword\">by</span> daystr <span class=\"keyword\">rows</span> <span class=\"keyword\">between</span> <span class=\"number\">3</span> <span class=\"keyword\">preceding</span> <span class=\"keyword\">and</span> <span class=\"keyword\">current</span> <span class=\"keyword\">row</span>) <span class=\"keyword\">as</span> pv4</span><br><span class=\"line\"><span class=\"keyword\">from</span> </span><br><span class=\"line\">  user_f1;</span><br><span class=\"line\"><span class=\"comment\">--实现分区内指定前N行到后N行的pv累加 </span></span><br><span class=\"line\"><span class=\"keyword\">select</span> </span><br><span class=\"line\">  cookieid,</span><br><span class=\"line\">  daystr,</span><br><span class=\"line\">  pv,</span><br><span class=\"line\">  <span class=\"keyword\">sum</span>(pv) <span class=\"keyword\">over</span>(<span class=\"keyword\">partition</span> <span class=\"keyword\">by</span> cookieid <span class=\"keyword\">order</span> <span class=\"keyword\">by</span> daystr <span class=\"keyword\">rows</span> <span class=\"keyword\">between</span> <span class=\"number\">3</span> <span class=\"keyword\">preceding</span> <span class=\"keyword\">and</span> <span class=\"number\">1</span> <span class=\"keyword\">following</span>) <span class=\"keyword\">as</span> pv5</span><br><span class=\"line\"><span class=\"keyword\">from</span> </span><br><span class=\"line\">  user_f1;</span><br><span class=\"line\"><span class=\"comment\">--实现分区内指定当前行到后N行的pv累加   </span></span><br><span class=\"line\"><span class=\"keyword\">select</span> </span><br><span class=\"line\">  cookieid,</span><br><span class=\"line\">  daystr,</span><br><span class=\"line\">  pv,</span><br><span class=\"line\">  <span class=\"keyword\">sum</span>(pv) <span class=\"keyword\">over</span>(<span class=\"keyword\">partition</span> <span class=\"keyword\">by</span> cookieid <span class=\"keyword\">order</span> <span class=\"keyword\">by</span> daystr <span class=\"keyword\">rows</span> <span class=\"keyword\">between</span> <span class=\"keyword\">current</span> <span class=\"keyword\">row</span> <span class=\"keyword\">and</span> <span class=\"keyword\">unbounded</span> <span class=\"keyword\">following</span>) <span class=\"keyword\">as</span> pv6</span><br><span class=\"line\"><span class=\"keyword\">from</span> </span><br><span class=\"line\">  user_f1;</span><br><span class=\"line\">  </span><br><span class=\"line\">  </span><br><span class=\"line\">- preceding：往前</span><br><span class=\"line\">- following：往后</span><br><span class=\"line\">- current row：当前行</span><br><span class=\"line\">- unbounded：起点</span><br><span class=\"line\">- unbounded preceding 表示从前面的起点</span><br><span class=\"line\">- unbounded following：表示到后面的终点</span><br></pre></td></tr></table></figure>\n<h4><span id=\"窗口函数lag-lead-first_value-last_value\">窗口函数：LAG、LEAD、FIRST_VALUE、LAST_VALUE</span></h4><p>FIRST_VALUE<br>    功能：取每个分区内某列的第一个值<br>    语法：FIRST_VALUE(col) over (partition by col1 order by col2)</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--取每个部门薪资最高的员工编号</span></span><br><span class=\"line\"><span class=\"keyword\">select</span></span><br><span class=\"line\">  empno,</span><br><span class=\"line\">  ename,</span><br><span class=\"line\">  salary,</span><br><span class=\"line\">  deptno,</span><br><span class=\"line\">  <span class=\"keyword\">FIRST_VALUE</span>(ename) <span class=\"keyword\">over</span> (<span class=\"keyword\">partition</span> <span class=\"keyword\">by</span> deptno <span class=\"keyword\">order</span> <span class=\"keyword\">by</span> salary <span class=\"keyword\">desc</span>) <span class=\"keyword\">as</span> <span class=\"keyword\">first</span></span><br><span class=\"line\"><span class=\"keyword\">from</span></span><br><span class=\"line\">  db_emp.tb_emp_normal;</span><br></pre></td></tr></table></figure>\n<p>LAST_VALUE<br>    功能：取每个分区内某列的最后一个值<br>    语法：LAST_VALUE() over (partition by col1 order by col2)<br>    注意：默认窗口是从第一条到当前条</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--取每个部门薪资最低的员工编号</span></span><br><span class=\"line\"><span class=\"keyword\">select</span></span><br><span class=\"line\">  empno,</span><br><span class=\"line\">  ename,</span><br><span class=\"line\">  salary,</span><br><span class=\"line\">  deptno,</span><br><span class=\"line\">  <span class=\"keyword\">LAST_VALUE</span>(empno) <span class=\"keyword\">over</span> (<span class=\"keyword\">partition</span> <span class=\"keyword\">by</span> deptno <span class=\"keyword\">order</span> <span class=\"keyword\">by</span> salary <span class=\"keyword\">desc</span>) <span class=\"keyword\">as</span> <span class=\"keyword\">last</span></span><br><span class=\"line\"><span class=\"keyword\">from</span></span><br><span class=\"line\">  db_emp.tb_emp_normal; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">select</span></span><br><span class=\"line\">  empno,</span><br><span class=\"line\">  ename,</span><br><span class=\"line\">  salary,</span><br><span class=\"line\">  deptno,</span><br><span class=\"line\">  <span class=\"keyword\">LAST_VALUE</span>(empno) <span class=\"keyword\">over</span> (<span class=\"keyword\">partition</span> <span class=\"keyword\">by</span> deptno <span class=\"keyword\">order</span> <span class=\"keyword\">by</span> salary <span class=\"keyword\">desc</span> <span class=\"keyword\">rows</span> <span class=\"keyword\">between</span> <span class=\"keyword\">unbounded</span> <span class=\"keyword\">preceding</span> <span class=\"keyword\">and</span> <span class=\"keyword\">unbounded</span> <span class=\"keyword\">following</span>) <span class=\"keyword\">as</span> <span class=\"keyword\">last</span></span><br><span class=\"line\"><span class=\"keyword\">from</span></span><br><span class=\"line\">  db_emp.tb_emp_normal;</span><br></pre></td></tr></table></figure>\n<p>LAG<br>    功能：取每个分区内某列的前N个值<br>    语法：LAG(col,N,defaultValue) over (partition by col1 order by col2)</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span></span><br><span class=\"line\">  empno,</span><br><span class=\"line\">  ename,</span><br><span class=\"line\">  salary,</span><br><span class=\"line\">  deptno,</span><br><span class=\"line\">  LAG(salary,<span class=\"number\">1</span>,<span class=\"number\">0</span>) <span class=\"keyword\">over</span> (<span class=\"keyword\">partition</span> <span class=\"keyword\">by</span> deptno <span class=\"keyword\">order</span> <span class=\"keyword\">by</span> salary) <span class=\"keyword\">as</span> deptno2</span><br><span class=\"line\"><span class=\"keyword\">from</span></span><br><span class=\"line\">  db_emp.tb_emp_normal;</span><br></pre></td></tr></table></figure>\n<p>LEAD<br>    功能：向后取每个分区内某列的前N个值<br>    语法：LEAD(col,N,defaultValue) over (partition by col1 order by col2)</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span></span><br><span class=\"line\">  empno,</span><br><span class=\"line\">  ename,</span><br><span class=\"line\">  salary,</span><br><span class=\"line\">  deptno,</span><br><span class=\"line\">  <span class=\"keyword\">LEAD</span>(salary,<span class=\"number\">1</span>,<span class=\"number\">0</span>) <span class=\"keyword\">over</span> (<span class=\"keyword\">partition</span> <span class=\"keyword\">by</span> deptno <span class=\"keyword\">order</span> <span class=\"keyword\">by</span> salary) <span class=\"keyword\">as</span> deptno2</span><br><span class=\"line\"><span class=\"keyword\">from</span></span><br><span class=\"line\">  db_emp.tb_emp_normal;</span><br></pre></td></tr></table></figure>\n\n\n\n\n<h4><span id=\"分析函数row_number-rank-dense_rank-ntile\">分析函数：ROW_NUMBER、RANK、DENSE_RANK、NTILE</span></h4><p>==ROW_NUMBER==<br>    功能：用于实现分区内记录编号<br>    语法：row_number() over (partition by col1 order by col2)</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--统计每个部门薪资最高的前两名</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> </span><br><span class=\"line\">(<span class=\"keyword\">select</span></span><br><span class=\"line\">  empno,</span><br><span class=\"line\">  ename,</span><br><span class=\"line\">  salary,</span><br><span class=\"line\">  deptno,</span><br><span class=\"line\">  row_number() <span class=\"keyword\">over</span> (<span class=\"keyword\">partition</span> <span class=\"keyword\">by</span> deptno <span class=\"keyword\">order</span> <span class=\"keyword\">by</span> salary <span class=\"keyword\">desc</span>) <span class=\"keyword\">as</span> <span class=\"keyword\">numb</span></span><br><span class=\"line\"><span class=\"keyword\">from</span></span><br><span class=\"line\">  db_emp.tb_emp_normal) t <span class=\"keyword\">where</span> t.numb &lt; <span class=\"number\">3</span>;</span><br></pre></td></tr></table></figure>\n<p>RANK<br>    功能：用于实现分区内排名编号[会留空位]<br>        与row_number的区别：<br>            row_number：如果排序时数值相同，继续编号<br>            rank：如果排序时数值相同，编号不变，但留下空位<br>    语法：rank() over (partition by col1 order by col2)</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--统计每个部门薪资排名</span></span><br><span class=\"line\"><span class=\"keyword\">select</span></span><br><span class=\"line\">  empno,</span><br><span class=\"line\">  ename,</span><br><span class=\"line\">  salary,</span><br><span class=\"line\">  deptno,</span><br><span class=\"line\">  <span class=\"keyword\">rank</span>() <span class=\"keyword\">over</span> (<span class=\"keyword\">partition</span> <span class=\"keyword\">by</span> deptno <span class=\"keyword\">order</span> <span class=\"keyword\">by</span> salary <span class=\"keyword\">desc</span>) <span class=\"keyword\">as</span> <span class=\"keyword\">numb</span></span><br><span class=\"line\"><span class=\"keyword\">from</span></span><br><span class=\"line\">  db_emp.tb_emp_normal;</span><br></pre></td></tr></table></figure>\n<p>DENSE_RANK<br>    功能：用于实现分区内排名编号[不留空位]<br>        与rank的区别：<br>            ==row_number：如果排序时数值相同，编号不变，并留下排名空位==<br>            ==dense_rank：如果排序时数值相同，编号不变，不留空位==<br>            ==rank：如果排序时数值相同，编号不变，但留下空位==<br>    语法：dense_rank() over (partition by col1 order by col2)</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--统计每个部门薪资排名</span></span><br><span class=\"line\"><span class=\"keyword\">select</span></span><br><span class=\"line\">  empno,</span><br><span class=\"line\">  ename,</span><br><span class=\"line\">  salary,</span><br><span class=\"line\">  deptno,</span><br><span class=\"line\">  <span class=\"keyword\">dense_rank</span>() <span class=\"keyword\">over</span> (<span class=\"keyword\">partition</span> <span class=\"keyword\">by</span> deptno <span class=\"keyword\">order</span> <span class=\"keyword\">by</span> salary <span class=\"keyword\">desc</span>) <span class=\"keyword\">as</span> <span class=\"keyword\">numb</span></span><br><span class=\"line\"><span class=\"keyword\">from</span></span><br><span class=\"line\">  db_emp.tb_emp_normal;</span><br></pre></td></tr></table></figure>\n<p>NTILE<br>    功能：将每个分区内排序后的结果均分成N份【如果不能均分，优先分配编号小的】<br>        本质：将每个分区拆分成更小的分区<br>    语法：NTILE(N) over (partition by col1 order by col2)</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--统计每个部门薪资排名，将每个部门的薪资分为两个部分，区分高薪和低薪</span></span><br><span class=\"line\"><span class=\"keyword\">select</span></span><br><span class=\"line\">  empno,</span><br><span class=\"line\">  ename,</span><br><span class=\"line\">  salary,</span><br><span class=\"line\">  deptno,</span><br><span class=\"line\">  NTILE(<span class=\"number\">2</span>) <span class=\"keyword\">over</span> (<span class=\"keyword\">partition</span> <span class=\"keyword\">by</span> deptno <span class=\"keyword\">order</span> <span class=\"keyword\">by</span> salary <span class=\"keyword\">desc</span>) <span class=\"keyword\">as</span> <span class=\"keyword\">numb</span></span><br><span class=\"line\"><span class=\"keyword\">from</span></span><br><span class=\"line\">  db_emp.tb_emp_normal;</span><br></pre></td></tr></table></figure>\n\n\n<h3><span id=\"53udtf\">5.3UDTF</span></h3><p>UDTF（User-Defined Table-Generating Functions）表生成函数 一进多出</p>\n<h4><span id=\"lateral-view\">lateral view</span></h4><p>分类：视图<br>功能：配合UDTF来使用,把某一行数据拆分成多行数据<br>    与UDTF直接使用的区别：<br>        ==很多的UDTF不能将结果与源表进行关联，使用lateral view==<br>        可以将UDTF拆分的单个字段数据与原始表数据关联上==<br>使用方式：<br>    tabel A lateral view UDTF(xxx) 视图名 as a,b,c</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--准备数据:vim /export/datas/lateral.txt</span></span><br><span class=\"line\">1\thttp://facebook.com/path/p1.php?query=1</span><br><span class=\"line\">2\thttp://www.baidu.com/news/index.jsp?uuid=frank</span><br><span class=\"line\">3\thttp://www.jd.com/index?source=baidu</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--创建表</span></span><br><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span> tb_url(</span><br><span class=\"line\"><span class=\"keyword\">id</span> <span class=\"built_in\">int</span>,</span><br><span class=\"line\"><span class=\"keyword\">url</span> <span class=\"keyword\">string</span></span><br><span class=\"line\">) <span class=\"keyword\">row</span> <span class=\"keyword\">format</span> <span class=\"keyword\">delimited</span> <span class=\"keyword\">fields</span> <span class=\"keyword\">terminated</span> <span class=\"keyword\">by</span> <span class=\"string\">&#x27;\\t&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--加载数据</span></span><br><span class=\"line\"><span class=\"keyword\">load</span> <span class=\"keyword\">data</span> <span class=\"keyword\">local</span> inpath <span class=\"string\">&#x27;/export/datas/lateral.txt&#x27;</span> <span class=\"keyword\">into</span> <span class=\"keyword\">table</span> tb_url;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--使用UDTF解析</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> parse_url_tuple(<span class=\"keyword\">url</span>, <span class=\"string\">&#x27;HOST&#x27;</span>) <span class=\"keyword\">from</span> tb_url;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--使用UDTF+lateral view</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> a.id,b.* <span class=\"keyword\">from</span> tb_url a <span class=\"keyword\">lateral</span> <span class=\"keyword\">view</span> parse_url_tuple(<span class=\"keyword\">url</span>, <span class=\"string\">&#x27;HOST&#x27;</span>) b <span class=\"keyword\">as</span> host;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--对比</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">id</span>,parse_url_tuple(<span class=\"keyword\">url</span>, <span class=\"string\">&#x27;HOST&#x27;</span>) <span class=\"keyword\">from</span> tb_url;<span class=\"comment\">--失败，UDTF函数不能与字段连用</span></span><br></pre></td></tr></table></figure>\n\n\n<h4><span id=\"explode\">explode</span></h4><p>功能：函数可以将一个array或者map展开<br>    explode(array)：<br>        将array列表里的每个元素生成一行<br>    explode(map)：<br>        每一对元素作为一行，key为一列，value为一列<br>使用方式：<br>    1-直接使用<br>    2-与lateral view连用</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--实现wordcount【explode(array)】</span></span><br><span class=\"line\">\t<span class=\"keyword\">select</span> <span class=\"keyword\">explode</span>(<span class=\"keyword\">split</span>(word,<span class=\"string\">&quot; &quot;</span>)) <span class=\"keyword\">from</span> wc1;</span><br><span class=\"line\"><span class=\"comment\">--将兴趣爱好展开【explode(map)】</span></span><br><span class=\"line\">\t<span class=\"keyword\">select</span> <span class=\"keyword\">explode</span>(hobby) <span class=\"keyword\">from</span> complex_map;</span><br><span class=\"line\"><span class=\"comment\">--与侧视图连用</span></span><br><span class=\"line\">\t<span class=\"keyword\">select</span> a.name,b.* <span class=\"keyword\">from</span> complex_map a <span class=\"keyword\">lateral</span> <span class=\"keyword\">view</span> <span class=\"keyword\">explode</span>(hobby) b <span class=\"keyword\">as</span> hobby,deep;</span><br></pre></td></tr></table></figure>\n<h4><span id=\"reflect\">reflect</span></h4><p>功能：用于在Hive中直接调用Java中静态类的方法<br>    用法：reflect(classname,method,args)</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> reflect(<span class=\"string\">&quot;java.util.UUID&quot;</span>, <span class=\"string\">&quot;randomUUID&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">select</span> reflect(<span class=\"string\">&quot;java.lang.Math&quot;</span>,<span class=\"string\">&quot;max&quot;</span>,<span class=\"number\">20</span>,<span class=\"number\">30</span>);</span><br><span class=\"line\"><span class=\"keyword\">select</span> reflect(<span class=\"string\">&quot;org.apache.commons.lang.math.NumberUtils&quot;</span>,<span class=\"string\">&quot;isNumber&quot;</span>,<span class=\"string\">&quot;123&quot;</span>);</span><br></pre></td></tr></table></figure>\n<h4><span id=\"get_json_object\">get_json_object</span></h4><p>处理json格式数据</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--创建数据：vim /export/datas/hivedata.json</span></span><br><span class=\"line\">&#123;&quot;id&quot;: 1701439105,&quot;ids&quot;: [2154137571,3889177061],&quot;total_number&quot;: 493&#125;</span><br><span class=\"line\">&#123;&quot;id&quot;: 1701439106,&quot;ids&quot;: [2154137571,3889177061],&quot;total_number&quot;: 494&#125;</span><br><span class=\"line\"><span class=\"comment\">--创建表：</span></span><br><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span> tb_json_test1 (</span><br><span class=\"line\"><span class=\"keyword\">json</span> <span class=\"keyword\">string</span></span><br><span class=\"line\">);</span><br><span class=\"line\"><span class=\"comment\">--加载数据</span></span><br><span class=\"line\"><span class=\"keyword\">load</span> <span class=\"keyword\">data</span> <span class=\"keyword\">local</span> inpath <span class=\"string\">&#x27;/export/datas/hivedata.json&#x27;</span> <span class=\"keyword\">into</span> <span class=\"keyword\">table</span> tb_json_test1;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--处理读取</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> </span><br><span class=\"line\">  get_json_object(t.json,<span class=\"string\">&#x27;$.id&#x27;</span>), </span><br><span class=\"line\">  get_json_object(t.json,<span class=\"string\">&#x27;$.total_number&#x27;</span>) </span><br><span class=\"line\"><span class=\"keyword\">from</span> </span><br><span class=\"line\">  tb_json_test1 t ;</span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"keyword\">select</span> </span><br><span class=\"line\">  t2.* </span><br><span class=\"line\"><span class=\"keyword\">from</span> </span><br><span class=\"line\">  tb_json_test1 t1 </span><br><span class=\"line\"><span class=\"keyword\">lateral</span> <span class=\"keyword\">view</span> </span><br><span class=\"line\">  json_tuple(t1.json, <span class=\"string\">&#x27;id&#x27;</span>, <span class=\"string\">&#x27;total_number&#x27;</span>) t2 <span class=\"keyword\">as</span> c1,c2;</span><br></pre></td></tr></table></figure>\n\n\n<h4><span id=\"coalesce\">COALESCE</span></h4><p>COALESCE(col,0)</p>\n<p>如果单列值为null，替换为默认值0</p>\n<p>concat</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">concat( &#x27;liubei&#x27;,&#x27;xihuan&#x27;,&#x27;xiaoqiao&#x27; )</span><br><span class=\"line\">liubeixihuanxiaoqiao</span><br></pre></td></tr></table></figure>\n\n\n<h4><span id=\"concat_wsampcollect_set\">concat_ws&amp;collect_set</span></h4><p>concat_ws(‘|’, collect_set(c_id))</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">id    name</span><br><span class=\"line\">1001    A</span><br><span class=\"line\">1001    B</span><br><span class=\"line\">1001    C</span><br><span class=\"line\"><span class=\"comment\">-------------------------</span></span><br><span class=\"line\">id      name</span><br><span class=\"line\">1001    A,B,C</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"keyword\">id</span>,collect_list(<span class=\"keyword\">name</span>) <span class=\"keyword\">from</span> tb_ss <span class=\"keyword\">group</span> <span class=\"keyword\">by</span> <span class=\"keyword\">id</span></span><br><span class=\"line\"></span><br><span class=\"line\">如果需要去重课可以使用collect_set,返回的是数组</span><br><span class=\"line\"><span class=\"keyword\">concat_ws</span>(<span class=\"string\">&#x27;|&#x27;</span>,collect_set(c_id))可以将数组内容按|拼接</span><br><span class=\"line\"></span><br><span class=\"line\">如果该列不是<span class=\"keyword\">string</span>，先用<span class=\"keyword\">cast</span>(<span class=\"keyword\">col</span>) <span class=\"keyword\">as</span> <span class=\"keyword\">string</span> 转换为<span class=\"keyword\">string</span>类型</span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"keyword\">id</span>,<span class=\"keyword\">concat_ws</span>(<span class=\"string\">&#x27;,&#x27;</span>,collect_list(<span class=\"keyword\">cast</span> (<span class=\"keyword\">name</span> <span class=\"keyword\">as</span> <span class=\"keyword\">string</span>))) <span class=\"keyword\">from</span> tb_ss <span class=\"keyword\">group</span> <span class=\"keyword\">by</span> <span class=\"keyword\">id</span></span><br></pre></td></tr></table></figure>\n\n\n<h4><span id=\"instr\">instr</span></h4><p>查找字符串str中子字符串substr的位置， 如果查找失败将返回0，如果任一参数为Null将返回null，注意位置为从1开始的 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">instr(string str, string substr)</span><br></pre></td></tr></table></figure>\n\n\n<h4><span id=\"substring\">substring</span></h4><p>截取字符串</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hello</span><br><span class=\"line\">substring(col,1,2) -&gt; &#39;he&#39;</span><br><span class=\"line\">substring(col,-2,2) -&gt; &#39;lo&#39;</span><br></pre></td></tr></table></figure>\n\n\n<h3><span id=\"54常见自带的hive函数\">5.4常见自带的hive函数</span></h3><p>show functions;</p>\n<p>使用desc function  extended 函数名查看帮助</p>\n<p>•UNIX时间戳转日期函数: from_unixtime</p>\n<p>• 获取当前UNIX时间戳函数: unix_timestamp</p>\n<p>•日期转UNIX时间戳函数: unix_timestamp</p>\n<p>• 指定格式日期转UNIX时间戳函数: unix_timestamp</p>\n<p>•日期时间转日期函数: to_date</p>\n<p>•日期转年函数: year</p>\n<p>• 日期转月函数: month</p>\n<p>• 日期转天函数: day</p>\n<p>• 日期转小时函数: hour</p>\n<p>• 日期转分钟函数: minute</p>\n<p>• 日期转秒函数: second</p>\n<p>• 日期转周函数: weekofyear</p>\n<p>• 两个日期之间有多少个月:months_between(‘2020-01-10’, u.birthday)(多用户得出用户年龄)</p>\n<p>• 日期比较函数: datediff</p>\n<p>• 日期增加函数: date_add</p>\n<p>• 日期减少函数: date_sub</p>\n<p>• 取当前天的下一周的周几：next_day(“xxxx-xx-xx”,”Mo”)</p>\n<p>• 取当前月的最后一天：last_day(“xxxx-xx-xx”)</p>\n<p>•If函数: if</p>\n<p>•非空查找函数: COALESCE</p>\n<p>•条件判断函数：CASE</p>\n<p>•字符串长度函数：length</p>\n<p>•字符串反转函数：reverse</p>\n<p>•字符串连接函数：concat</p>\n<p>• 带分隔符字符串连接函数：concat_ws</p>\n<p>• 字符串截取函数：substr,substring</p>\n<p>•正则表达式替换函数：regexp_replace</p>\n<p>•正则表达式解析函数：regexp_extract</p>\n<p>•URL解析函数：parse_url</p>\n<p>​                            parse_url_tuple</p>\n<p>•json解析函数：get_json_object</p>\n<p>​                            json_tuple</p>\n<p>•分割字符串函数: split</p>\n<p>•集合查找函数: find_in_set</p>\n<h3><span id=\"55关于union和union-all\">5.5关于union和union all</span></h3><p>总结分析</p>\n<ol>\n<li><p>子查询相当于表名，使用 from 关键字需要指定真实表名或表别名。</p>\n</li>\n<li><p>hive 不支持union ，只支持union all </p>\n</li>\n<li><p>子查询中使用union all 时，在子查询里不能使用count、sum 等 聚合函数 </p>\n</li>\n<li><p>两表直接进行union all 可以使用count、sum 等聚合函数 </p>\n</li>\n<li><p>两张表进行union all 取相同的字段名称，可正常输出指定数据内容，且结果为两张表的结果集</p>\n</li>\n</ol>\n<h2><span id=\"6hive语法要点\">6.hive语法要点</span></h2><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(1).Hive不支持join的非等值连接,不支持or</span><br><span class=\"line\">分别举例如下及实现解决办法。</span><br><span class=\"line\">  不支持不等值连接</span><br><span class=\"line\">       错误:<span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> a <span class=\"keyword\">inner</span> <span class=\"keyword\">join</span> b <span class=\"keyword\">on</span> a.id&lt;&gt;b.id</span><br><span class=\"line\">       替代方法:<span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> a <span class=\"keyword\">inner</span> <span class=\"keyword\">join</span> b <span class=\"keyword\">on</span> a.id=b.id <span class=\"keyword\">and</span> a.id <span class=\"keyword\">is</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\"> 不支持or</span><br><span class=\"line\">       错误:<span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> a <span class=\"keyword\">inner</span> <span class=\"keyword\">join</span> b <span class=\"keyword\">on</span> a.id=b.id <span class=\"keyword\">or</span> a.name=b.name</span><br><span class=\"line\">       替代方法:<span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> a <span class=\"keyword\">inner</span> <span class=\"keyword\">join</span> b <span class=\"keyword\">on</span> a.id=b.id</span><br><span class=\"line\">                <span class=\"keyword\">union</span> <span class=\"keyword\">all</span></span><br><span class=\"line\">                <span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> a <span class=\"keyword\">inner</span> <span class=\"keyword\">join</span> b <span class=\"keyword\">on</span> a.name=b.name</span><br><span class=\"line\">  两个<span class=\"keyword\">sql</span> <span class=\"keyword\">union</span> <span class=\"keyword\">all</span>的字段名必须一样或者列别名要一样。</span><br><span class=\"line\">        </span><br><span class=\"line\">(<span class=\"number\">2</span>).分号字符:不能智能识别<span class=\"keyword\">concat</span>(‘;’,key)，只会将‘；’当做SQL结束符号。</span><br><span class=\"line\">    •分号是SQL语句结束标记，在HiveQL中也是，但是在HiveQL中，对分号的识别没有那么智慧，例如：</span><br><span class=\"line\">        •<span class=\"keyword\">select</span> <span class=\"keyword\">concat</span>(<span class=\"keyword\">key</span>,<span class=\"keyword\">concat</span>(<span class=\"string\">&#x27;;&#x27;</span>,<span class=\"keyword\">key</span>)) <span class=\"keyword\">from</span> dual;</span><br><span class=\"line\">    •但HiveQL在解析语句时提示：</span><br><span class=\"line\">        FAILED: Parse Error: line 0:-1 mismatched input &#x27;&lt;EOF&gt;&#x27; expecting ) in function specification</span><br><span class=\"line\">    •解决的办法是，使用分号的八进制的ASCII码进行转义，那么上述语句应写成：</span><br><span class=\"line\">        •<span class=\"keyword\">select</span> <span class=\"keyword\">concat</span>(<span class=\"keyword\">key</span>,<span class=\"keyword\">concat</span>(<span class=\"string\">&#x27;\\073&#x27;</span>,<span class=\"keyword\">key</span>)) <span class=\"keyword\">from</span> dual;</span><br><span class=\"line\"></span><br><span class=\"line\">(3).不支持<span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> 表 <span class=\"keyword\">Values</span>（）, <span class=\"keyword\">UPDATE</span>, <span class=\"keyword\">DELETE</span>等操作.这样的话，就不要很复杂的锁机制来读写数据。</span><br><span class=\"line\">    <span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> syntax <span class=\"keyword\">is</span> <span class=\"keyword\">only</span> available <span class=\"keyword\">starting</span> <span class=\"keyword\">in</span> <span class=\"keyword\">version</span> <span class=\"number\">0.8</span>。<span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span>就是在表或分区中追加数据。</span><br><span class=\"line\"></span><br><span class=\"line\">(<span class=\"number\">4</span>).HiveQL中<span class=\"keyword\">String</span>类型的字段若是空(<span class=\"keyword\">empty</span>)字符串, 即长度为<span class=\"number\">0</span>, 那么对它进行<span class=\"keyword\">IS</span> <span class=\"literal\">NULL</span>的判断结果是<span class=\"literal\">False</span>，使用<span class=\"keyword\">left</span> <span class=\"keyword\">join</span>可以进行筛选行。</span><br><span class=\"line\"></span><br><span class=\"line\">(<span class=\"number\">5</span>).不支持 ‘&lt; dt &lt;’这种格式的范围查找，可以用dt <span class=\"keyword\">in</span>(”,”)或者<span class=\"keyword\">between</span>替代。</span><br><span class=\"line\"></span><br><span class=\"line\">(<span class=\"number\">6</span>).Hive不支持将数据插入现有的表或分区中，仅支持覆盖重写整个表，示例如下：</span><br><span class=\"line\">    <span class=\"keyword\">INSERT</span> OVERWRITE <span class=\"keyword\">TABLE</span> t1 <span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> t2;</span><br><span class=\"line\">    </span><br><span class=\"line\">(7).group by的字段,必须是<span class=\"keyword\">select</span>后面的字段，<span class=\"keyword\">select</span>后面的字段不能比<span class=\"keyword\">group</span> <span class=\"keyword\">by</span>的字段多.</span><br><span class=\"line\">    如果<span class=\"keyword\">select</span>后面有聚合函数,则该<span class=\"keyword\">select</span>语句中必须有<span class=\"keyword\">group</span> <span class=\"keyword\">by</span>语句</span><br><span class=\"line\">    而且<span class=\"keyword\">group</span> <span class=\"keyword\">by</span>后面不能使用别名</span><br><span class=\"line\">    </span><br><span class=\"line\">(<span class=\"number\">8</span>).hive的<span class=\"number\">0.13</span>版之前<span class=\"keyword\">select</span> , <span class=\"keyword\">where</span> 及 <span class=\"keyword\">having</span> 之后不能跟子查询语句(一般使用<span class=\"keyword\">left</span> <span class=\"keyword\">join</span>、<span class=\"keyword\">right</span> <span class=\"keyword\">join</span> 或者<span class=\"keyword\">inner</span> <span class=\"keyword\">join</span>替代)</span><br><span class=\"line\"></span><br><span class=\"line\">(<span class=\"number\">9</span>).先<span class=\"keyword\">join</span>(及<span class=\"keyword\">inner</span> <span class=\"keyword\">join</span>) 然后<span class=\"keyword\">left</span> <span class=\"keyword\">join</span>或<span class=\"keyword\">right</span> <span class=\"keyword\">join</span></span><br><span class=\"line\"></span><br><span class=\"line\">(<span class=\"number\">10</span>).hive不支持<span class=\"keyword\">group_concat</span>方法,可用 <span class=\"keyword\">concat_ws</span>(<span class=\"string\">&#x27;|&#x27;</span>, collect_set(<span class=\"keyword\">str</span>)) 实现</span><br><span class=\"line\"></span><br><span class=\"line\">(<span class=\"number\">11</span>).not <span class=\"keyword\">in</span> 后不能包含查询语句,可用<span class=\"keyword\">left</span> <span class=\"keyword\">join</span> tmp <span class=\"keyword\">on</span> tableName.id = tmp.id <span class=\"keyword\">where</span> tmp.id <span class=\"keyword\">is</span> <span class=\"literal\">null</span> 替代实现</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">1.</span><span class=\"keyword\">case</span> <span class=\"keyword\">when</span> ... <span class=\"keyword\">then</span> ... <span class=\"keyword\">else</span> ... <span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">2.</span><span class=\"keyword\">length</span>(<span class=\"keyword\">string</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">3.</span><span class=\"keyword\">cast</span>(<span class=\"keyword\">string</span> <span class=\"keyword\">as</span> <span class=\"built_in\">bigint</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">4.</span><span class=\"keyword\">rand</span>()       返回一个<span class=\"number\">0</span>到<span class=\"number\">1</span>范围内的随机数</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">5.</span><span class=\"keyword\">ceiling</span>(<span class=\"keyword\">double</span>)    向上取整</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">6.</span><span class=\"keyword\">substr</span>(<span class=\"keyword\">string</span> A, <span class=\"built_in\">int</span> <span class=\"keyword\">start</span>, <span class=\"built_in\">int</span> <span class=\"keyword\">len</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">7.</span>collect_set(<span class=\"keyword\">col</span>)函数只接受基本数据类型，它的主要作用是将某字段的值进行去重汇总，产生<span class=\"built_in\">array</span>类型字段</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">8.</span><span class=\"keyword\">concat</span>()函数</span><br><span class=\"line\">    <span class=\"number\">1</span>、功能：将多个字符串连接成一个字符串。</span><br><span class=\"line\">    <span class=\"number\">2</span>、语法：<span class=\"keyword\">concat</span>(str1, str2,...)</span><br><span class=\"line\">    返回结果为连接参数产生的字符串，如果有任何一个参数为<span class=\"literal\">null</span>，则返回值为<span class=\"literal\">null</span>。</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"number\">9.</span><span class=\"keyword\">concat_ws</span>()函数</span><br><span class=\"line\">    <span class=\"number\">1</span>、功能：和<span class=\"keyword\">concat</span>()一样，将多个字符串连接成一个字符串，但是可以一次性指定分隔符～（<span class=\"keyword\">concat_ws</span>就是<span class=\"keyword\">concat</span> <span class=\"keyword\">with</span> separator）</span><br><span class=\"line\">    <span class=\"number\">2</span>、语法：<span class=\"keyword\">concat_ws</span>(separator, str1, str2, ...)</span><br><span class=\"line\">    说明：第一个参数指定分隔符。需要注意的是分隔符不能为<span class=\"literal\">null</span>，如果为<span class=\"literal\">null</span>，则返回结果为<span class=\"literal\">null</span>。</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"number\">10.</span>nvl(expr1, expr2)：空值转换函数  nvl(x,y)    <span class=\"keyword\">Returns</span> y <span class=\"keyword\">if</span> x <span class=\"keyword\">is</span> <span class=\"literal\">null</span> <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> x</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">11.</span><span class=\"keyword\">if</span>(<span class=\"built_in\">boolean</span> testCondition, T valueTrue, T valueFalse)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">12.</span>row_number()<span class=\"keyword\">over</span>()分组排序功能,<span class=\"keyword\">over</span>()里头的分组以及排序的执行晚于 <span class=\"keyword\">where</span> <span class=\"keyword\">group</span> <span class=\"keyword\">by</span>  <span class=\"keyword\">order</span> <span class=\"keyword\">by</span> 的执行。</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">13.</span>获取年、月、日、小时、分钟、秒、当年第几周</span><br><span class=\"line\">    <span class=\"keyword\">select</span> </span><br><span class=\"line\">        <span class=\"keyword\">year</span>(<span class=\"string\">&#x27;2018-02-27 10:00:00&#x27;</span>)       <span class=\"keyword\">as</span> <span class=\"keyword\">year</span></span><br><span class=\"line\">        ,<span class=\"keyword\">month</span>(<span class=\"string\">&#x27;2018-02-27 10:00:00&#x27;</span>)      <span class=\"keyword\">as</span> <span class=\"keyword\">month</span></span><br><span class=\"line\">        ,<span class=\"keyword\">day</span>(<span class=\"string\">&#x27;2018-02-27 10:00:00&#x27;</span>)        <span class=\"keyword\">as</span> <span class=\"keyword\">day</span></span><br><span class=\"line\">        ,<span class=\"keyword\">hour</span>(<span class=\"string\">&#x27;2018-02-27 10:00:00&#x27;</span>)       <span class=\"keyword\">as</span> <span class=\"keyword\">hour</span></span><br><span class=\"line\">        ,<span class=\"keyword\">minute</span>(<span class=\"string\">&#x27;2018-02-27 10:00:00&#x27;</span>)     <span class=\"keyword\">as</span> <span class=\"keyword\">minute</span></span><br><span class=\"line\">        ,<span class=\"keyword\">second</span>(<span class=\"string\">&#x27;2018-02-27 10:00:00&#x27;</span>)     <span class=\"keyword\">as</span> <span class=\"keyword\">second</span></span><br><span class=\"line\">        ,<span class=\"keyword\">weekofyear</span>(<span class=\"string\">&#x27;2018-02-27 10:00:00&#x27;</span>) <span class=\"keyword\">as</span> <span class=\"keyword\">weekofyear</span></span><br><span class=\"line\">  获取当前时间:</span><br><span class=\"line\">        <span class=\"number\">1</span>).current_timestamp</span><br><span class=\"line\">        <span class=\"number\">2</span>).unix_timestamp()</span><br><span class=\"line\">        <span class=\"number\">3</span>).from_unixtime(<span class=\"keyword\">unix_timestamp</span>())</span><br><span class=\"line\">        <span class=\"number\">4</span>).CURRENT_DATE</span><br></pre></td></tr></table></figure>\n\n\n<h2><span id=\"7hive优化\">7.hive优化</span></h2><h3><span id=\"71大表join大表优化\">7.1大表join大表优化</span></h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br><span class=\"line\">320</span><br><span class=\"line\">321</span><br><span class=\"line\">322</span><br><span class=\"line\">323</span><br><span class=\"line\">324</span><br><span class=\"line\">325</span><br><span class=\"line\">326</span><br><span class=\"line\">327</span><br><span class=\"line\">328</span><br><span class=\"line\">329</span><br><span class=\"line\">330</span><br><span class=\"line\">331</span><br><span class=\"line\">332</span><br><span class=\"line\">333</span><br><span class=\"line\">334</span><br><span class=\"line\">335</span><br><span class=\"line\">336</span><br><span class=\"line\">337</span><br><span class=\"line\">338</span><br><span class=\"line\">339</span><br><span class=\"line\">340</span><br><span class=\"line\">341</span><br><span class=\"line\">342</span><br><span class=\"line\">343</span><br><span class=\"line\">344</span><br><span class=\"line\">345</span><br><span class=\"line\">346</span><br><span class=\"line\">347</span><br><span class=\"line\">348</span><br><span class=\"line\">349</span><br><span class=\"line\">350</span><br><span class=\"line\">351</span><br><span class=\"line\">352</span><br><span class=\"line\">353</span><br><span class=\"line\">354</span><br><span class=\"line\">355</span><br><span class=\"line\">356</span><br><span class=\"line\">357</span><br><span class=\"line\">358</span><br><span class=\"line\">359</span><br><span class=\"line\">360</span><br><span class=\"line\">361</span><br><span class=\"line\">362</span><br><span class=\"line\">363</span><br><span class=\"line\">364</span><br><span class=\"line\">365</span><br><span class=\"line\">366</span><br><span class=\"line\">367</span><br><span class=\"line\">368</span><br><span class=\"line\">369</span><br><span class=\"line\">370</span><br><span class=\"line\">371</span><br><span class=\"line\">372</span><br><span class=\"line\">373</span><br><span class=\"line\">374</span><br><span class=\"line\">375</span><br><span class=\"line\">376</span><br><span class=\"line\">377</span><br><span class=\"line\">378</span><br><span class=\"line\">379</span><br><span class=\"line\">380</span><br><span class=\"line\">381</span><br><span class=\"line\">382</span><br><span class=\"line\">383</span><br><span class=\"line\">384</span><br><span class=\"line\">385</span><br><span class=\"line\">386</span><br><span class=\"line\">387</span><br><span class=\"line\">388</span><br><span class=\"line\">389</span><br><span class=\"line\">390</span><br><span class=\"line\">391</span><br><span class=\"line\">392</span><br><span class=\"line\">393</span><br><span class=\"line\">394</span><br><span class=\"line\">395</span><br><span class=\"line\">396</span><br><span class=\"line\">397</span><br><span class=\"line\">398</span><br><span class=\"line\">399</span><br><span class=\"line\">400</span><br><span class=\"line\">401</span><br><span class=\"line\">402</span><br><span class=\"line\">403</span><br><span class=\"line\">404</span><br><span class=\"line\">405</span><br><span class=\"line\">406</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">如果Hive优化实战2中mapjoin中小表dim_seller很大呢？比如超过了1GB大小？这种就是大表join大表的问题。首先引入一个具体的问题场景，然后基于此介绍各自优化方案。</span><br><span class=\"line\"></span><br><span class=\"line\">1、问题场景</span><br><span class=\"line\">问题场景如下：</span><br><span class=\"line\"></span><br><span class=\"line\">A表为一个汇总表，汇总的是卖家买家最近N天交易汇总信息，即对于每个卖家最近N天，其每个买家共成交了多少单，总金额是多少，假设N取90天，汇总值仅取成交单数。</span><br><span class=\"line\"></span><br><span class=\"line\">A表的字段有：buyer_id、seller_id、pay_cnt_90day。</span><br><span class=\"line\"></span><br><span class=\"line\">B表为卖家基本信息表，其字段有seller_id、sale_level，其中sale_levels是卖家的一个分层评级信息，比如吧卖家分为6个级别：S0、S1、S2、S3、S4和S5。</span><br><span class=\"line\"></span><br><span class=\"line\">要获得的结果是每个买家在各个级别的卖家的成交比例信息，比如：</span><br><span class=\"line\"></span><br><span class=\"line\">某买家：S0:10%；S1:20%；S2:20%；S3:10%；S4:20%；S5:10%。</span><br><span class=\"line\"></span><br><span class=\"line\">正如mapjoin中的例子一样，第一反应是直接join两表并统计：</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">select</span></span><br><span class=\"line\"></span><br><span class=\"line\">m.buyer_id,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">sum</span>(pay_cnt_90day)  <span class=\"keyword\">as</span> pay_cnt_90day,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">sum</span>(<span class=\"keyword\">case</span> <span class=\"keyword\">when</span> m.sale_level = <span class=\"number\">0</span>  <span class=\"keyword\">then</span> pay_cnt_90day  <span class=\"keyword\">end</span>)  <span class=\"keyword\">as</span> pay_cnt_90day_s0,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">sum</span>(<span class=\"keyword\">case</span> <span class=\"keyword\">when</span> m.sale_level = <span class=\"number\">1</span>  <span class=\"keyword\">then</span> pay_cnt_90day  <span class=\"keyword\">end</span>)  <span class=\"keyword\">as</span> pay_cnt_90day_s1,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">sum</span>(<span class=\"keyword\">case</span> <span class=\"keyword\">when</span> m.sale_level = <span class=\"number\">2</span>  <span class=\"keyword\">then</span> pay_cnt_90day  <span class=\"keyword\">end</span>)  <span class=\"keyword\">as</span> pay_cnt_90day_s2,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">sum</span>(<span class=\"keyword\">case</span> <span class=\"keyword\">when</span> m.sale_level = <span class=\"number\">3</span>  <span class=\"keyword\">then</span> pay_cnt_90day  <span class=\"keyword\">end</span>)  <span class=\"keyword\">as</span> pay_cnt_90day_s3,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">sum</span>(<span class=\"keyword\">case</span> <span class=\"keyword\">when</span> m.sale_level = <span class=\"number\">4</span>  <span class=\"keyword\">then</span> pay_cnt_90day  <span class=\"keyword\">end</span>)  <span class=\"keyword\">as</span> pay_cnt_90day_s4,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">sum</span>(<span class=\"keyword\">case</span> <span class=\"keyword\">when</span> m.sale_level = <span class=\"number\">5</span>  <span class=\"keyword\">then</span> pay_cnt_90day  <span class=\"keyword\">end</span>)  <span class=\"keyword\">as</span> pay_cnt_90day_s5</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> (</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">select</span>  a.buer_id,  a.seller_id,  b.sale_level, a.pay_cnt_90day</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> (  <span class=\"keyword\">select</span> buyer_id,  seller_id,  pay_cnt_90day   <span class=\"keyword\">from</span> table_A)  a</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">join</span></span><br><span class=\"line\"></span><br><span class=\"line\">(<span class=\"keyword\">select</span> seller_id,  sale_level  <span class=\"keyword\">from</span> table_B)  b</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">on</span>  a.seller_id  = b.seller_id</span><br><span class=\"line\"></span><br><span class=\"line\">)  m</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">group</span> <span class=\"keyword\">by</span> m.buyer_id</span><br><span class=\"line\"></span><br><span class=\"line\">但是此<span class=\"keyword\">SQL</span>会引起数据倾斜，原因在于卖家的二八准则，某些卖家<span class=\"number\">90</span>天内会有几百万甚至上千万的买家，但是大部分的卖家<span class=\"number\">90</span>天内买家的数目并不多，<span class=\"keyword\">join</span> table_A和table_B的时候，</span><br><span class=\"line\"></span><br><span class=\"line\">ODPS会按照seller_id进行分发，table_A的大卖家引起了数据倾斜。</span><br><span class=\"line\"></span><br><span class=\"line\">但是数据本身无法用mapjoin table_B解决，因为卖家超过千万条，文件大小有几个GB，超过了<span class=\"number\">1</span>GB的限制。</span><br><span class=\"line\"></span><br><span class=\"line\">优化方案<span class=\"number\">1</span>：转为mapjoin</span><br><span class=\"line\">一个很正常的想法是，尽管B表无法直接mapjoin, 但是是否可以间接mapjoin它呢？</span><br><span class=\"line\"></span><br><span class=\"line\">实际上此思路有两种途径：限制行和限制列。</span><br><span class=\"line\"></span><br><span class=\"line\">限制行的思路是不需要<span class=\"keyword\">join</span> B全表，而只需要<span class=\"keyword\">join</span>其在A表中存在的，对于本问题场景，就是过滤掉<span class=\"number\">90</span>天内没有成交的卖家。</span><br><span class=\"line\"></span><br><span class=\"line\">限制列的思路是只取需要的字段。</span><br><span class=\"line\"></span><br><span class=\"line\">加上如上的限制后，检查过滤后的B表是否满足了Hive  mapjoin的条件，如果能满足，那么添加过滤条件生成一个临时B表，然后mapjoin该表即可。采用此思路的语句如下：</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">select</span></span><br><span class=\"line\"></span><br><span class=\"line\">m.buyer_id,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">sum</span>(pay_cnt_90day)  <span class=\"keyword\">as</span> pay_cnt_90day,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">sum</span>(<span class=\"keyword\">case</span> <span class=\"keyword\">when</span> m.sale_level = <span class=\"number\">0</span>  <span class=\"keyword\">then</span> pay_cnt_90day  <span class=\"keyword\">end</span>)  <span class=\"keyword\">as</span> pay_cnt_90day_s0,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">sum</span>(<span class=\"keyword\">case</span> <span class=\"keyword\">when</span> m.sale_level = <span class=\"number\">1</span>  <span class=\"keyword\">then</span> pay_cnt_90day  <span class=\"keyword\">end</span>)  <span class=\"keyword\">as</span> pay_cnt_90day_s1,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">sum</span>(<span class=\"keyword\">case</span> <span class=\"keyword\">when</span> m.sale_level = <span class=\"number\">2</span>  <span class=\"keyword\">then</span> pay_cnt_90day  <span class=\"keyword\">end</span>)  <span class=\"keyword\">as</span> pay_cnt_90day_s2,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">sum</span>(<span class=\"keyword\">case</span> <span class=\"keyword\">when</span> m.sale_level = <span class=\"number\">3</span>  <span class=\"keyword\">then</span> pay_cnt_90day  <span class=\"keyword\">end</span>)  <span class=\"keyword\">as</span> pay_cnt_90day_s3,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">sum</span>(<span class=\"keyword\">case</span> <span class=\"keyword\">when</span> m.sale_level = <span class=\"number\">4</span>  <span class=\"keyword\">then</span> pay_cnt_90day  <span class=\"keyword\">end</span>)  <span class=\"keyword\">as</span> pay_cnt_90day_s4,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">sum</span>(<span class=\"keyword\">case</span> <span class=\"keyword\">when</span> m.sale_level = <span class=\"number\">5</span>  <span class=\"keyword\">then</span> pay_cnt_90day  <span class=\"keyword\">end</span>)  <span class=\"keyword\">as</span> pay_cnt_90day_s5</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> ( </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">select</span>  <span class=\"comment\">/*+mapjoin(b)*/</span></span><br><span class=\"line\"></span><br><span class=\"line\">a.buer_id,  a.seller_id,  b.sale_level, a.pay_cnt_90day</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> (  <span class=\"keyword\">select</span> buyer_id,  seller_id,  pay_cnt_90day   <span class=\"keyword\">from</span> table_A)  a</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">join</span></span><br><span class=\"line\"></span><br><span class=\"line\">(</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">select</span> seller_id,  sale_level  <span class=\"keyword\">from</span> table_B b0</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">join</span> </span><br><span class=\"line\"></span><br><span class=\"line\">(<span class=\"keyword\">select</span> seller_id <span class=\"keyword\">from</span> table_A <span class=\"keyword\">group</span> <span class=\"keyword\">by</span> seller_id) a0</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">on</span> b0.seller_id = a0.selller_id</span><br><span class=\"line\"></span><br><span class=\"line\">)  b</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">on</span>  a.seller_id  = b.seller_id</span><br><span class=\"line\"></span><br><span class=\"line\">)  m</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">group</span> <span class=\"keyword\">by</span> m.buyer_id</span><br><span class=\"line\"></span><br><span class=\"line\">此方案在一些情况可以起作用，但是很多时候还是无法解决上述问题，因为大部分卖家尽管<span class=\"number\">90</span>天内买家不多，但还是有一些的，过滤后的B表仍然很多。</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">优化方案<span class=\"number\">2</span>：<span class=\"keyword\">join</span>时用<span class=\"keyword\">case</span> <span class=\"keyword\">when</span>语句</span><br><span class=\"line\">此种解决方案应用场景是：倾斜的值是明确的而且数量很少，比如<span class=\"literal\">null</span>值引起的倾斜。其核心是将这些引起倾斜的值随机分发到Reduce,其主要核心逻辑在于<span class=\"keyword\">join</span>时对这些特殊值<span class=\"keyword\">concat</span>随机数，</span><br><span class=\"line\"></span><br><span class=\"line\">从而达到随机分发的目的。此方案的核心逻辑如下：</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">select</span> a.user_id, a.order_id, b.user_id</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> table_a a <span class=\"keyword\">join</span> table_b b</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">on</span> (<span class=\"keyword\">case</span> <span class=\"keyword\">when</span> a.user_is <span class=\"keyword\">is</span> <span class=\"literal\">null</span> <span class=\"keyword\">then</span> <span class=\"keyword\">concat</span>(<span class=\"string\">&#x27;hive&#x27;</span>, <span class=\"keyword\">rand</span>()) <span class=\"keyword\">else</span> a.user_id <span class=\"keyword\">end</span>) = b.user_id</span><br><span class=\"line\"></span><br><span class=\"line\">Hive 已对此进行了优化，只需要设置参数skewinfo和skewjoin参数，不修改<span class=\"keyword\">SQL</span>代码，例如，由于table_B的值“<span class=\"number\">0</span>” 和“<span class=\"number\">1</span>”引起了倾斜，值需要做如下设置：</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">set</span> hive.optimize.skewinfo=table_B:(selleer_id) [ ( <span class=\"string\">&quot;0&quot;</span>) (<span class=\"string\">&quot;1&quot;</span>) ) ] </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">set</span> hive.optimize.skewjoin = <span class=\"literal\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">但是方案2因为无法解决本问题场景的倾斜问题，因为倾斜的卖家大量存在而且动态变化。</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">优化方案3：倍数B表，再取模join</span><br><span class=\"line\">1、通用方案</span><br><span class=\"line\">此方案的思路是建立一个numbers表，其值只有一列int 行，比如从1到10（具体值可根据倾斜程度确定），然后放大B表10倍，再取模join。代码如下：</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">select</span></span><br><span class=\"line\"></span><br><span class=\"line\">m.buyer_id,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">sum</span>(pay_cnt_90day)  <span class=\"keyword\">as</span> pay_cnt_90day,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">sum</span>(<span class=\"keyword\">case</span> <span class=\"keyword\">when</span> m.sale_level = <span class=\"number\">0</span>  <span class=\"keyword\">then</span> pay_cnt_90day  <span class=\"keyword\">end</span>)  <span class=\"keyword\">as</span> pay_cnt_90day_s0,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">sum</span>(<span class=\"keyword\">case</span> <span class=\"keyword\">when</span> m.sale_level = <span class=\"number\">1</span>  <span class=\"keyword\">then</span> pay_cnt_90day  <span class=\"keyword\">end</span>)  <span class=\"keyword\">as</span> pay_cnt_90day_s1,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">sum</span>(<span class=\"keyword\">case</span> <span class=\"keyword\">when</span> m.sale_level = <span class=\"number\">2</span>  <span class=\"keyword\">then</span> pay_cnt_90day  <span class=\"keyword\">end</span>)  <span class=\"keyword\">as</span> pay_cnt_90day_s2,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">sum</span>(<span class=\"keyword\">case</span> <span class=\"keyword\">when</span> m.sale_level = <span class=\"number\">3</span>  <span class=\"keyword\">then</span> pay_cnt_90day  <span class=\"keyword\">end</span>)  <span class=\"keyword\">as</span> pay_cnt_90day_s3,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">sum</span>(<span class=\"keyword\">case</span> <span class=\"keyword\">when</span> m.sale_level = <span class=\"number\">4</span>  <span class=\"keyword\">then</span> pay_cnt_90day  <span class=\"keyword\">end</span>)  <span class=\"keyword\">as</span> pay_cnt_90day_s4,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">sum</span>(<span class=\"keyword\">case</span> <span class=\"keyword\">when</span> m.sale_level = <span class=\"number\">5</span>  <span class=\"keyword\">then</span> pay_cnt_90day  <span class=\"keyword\">end</span>)  <span class=\"keyword\">as</span> pay_cnt_90day_s5</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> (</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">select</span>  a.buer_id,  a.seller_id,  b.sale_level, a.pay_cnt_90day</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> (  <span class=\"keyword\">select</span> buyer_id,  seller_id,  pay_cnt_90day   <span class=\"keyword\">from</span> table_A)  a</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">join</span></span><br><span class=\"line\"></span><br><span class=\"line\">(</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">select</span>  <span class=\"comment\">/*+mapjoin(members)*/</span></span><br><span class=\"line\"></span><br><span class=\"line\">seller_id,  sale_level ,<span class=\"keyword\">member</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> table_B</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">join</span> members</span><br><span class=\"line\"></span><br><span class=\"line\">)  b</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">on</span>  a.seller_id  = b.seller_id</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">and</span> <span class=\"keyword\">mod</span>(a.pay_cnt_90day,<span class=\"number\">10</span>)+<span class=\"number\">1</span> = b.number </span><br><span class=\"line\"></span><br><span class=\"line\">)  m</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">group</span> <span class=\"keyword\">by</span> m.buyer_id</span><br><span class=\"line\"></span><br><span class=\"line\">此思路的核心在于，既然按照seller_id分发会倾斜，那么再人工增加一列进行分发，这样之前倾斜的值的倾斜程度会减少到原来的<span class=\"number\">1</span>/<span class=\"number\">10</span>，可以通过配置numbers表改放大倍数来降低倾斜程度，</span><br><span class=\"line\"></span><br><span class=\"line\">但这样做的一个弊端是B表也会膨胀N倍。</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">2</span>、专用方案</span><br><span class=\"line\">通用方案的思路把B表的每条数据都放大了相同的倍数，实际上这是不需要的，只需要把大卖家放大倍数即可：需要首先知道大卖家的名单，即先建立一个临时表动态存放每天最新的大卖家（</span><br><span class=\"line\"></span><br><span class=\"line\">比如dim_big_seller）,同时此表的大卖家要膨胀预先设定的倍数（<span class=\"number\">1000</span>倍）。</span><br><span class=\"line\"></span><br><span class=\"line\">在A表和B表分别新建一个<span class=\"keyword\">join</span>列，其逻辑为：如果是大卖家，那么<span class=\"keyword\">concat</span>一个随机分配正整数（<span class=\"number\">0</span>到预定义的倍数之间，本例为<span class=\"number\">0</span>~<span class=\"number\">1000</span>）；如果不是，保持不变。具体代码如下：</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">select</span></span><br><span class=\"line\"></span><br><span class=\"line\">m.buyer_id,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">sum</span>(pay_cnt_90day)  <span class=\"keyword\">as</span> pay_cnt_90day,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">sum</span>(<span class=\"keyword\">case</span> <span class=\"keyword\">when</span> m.sale_level = <span class=\"number\">0</span>  <span class=\"keyword\">then</span> pay_cnt_90day  <span class=\"keyword\">end</span>)  <span class=\"keyword\">as</span> pay_cnt_90day_s0,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">sum</span>(<span class=\"keyword\">case</span> <span class=\"keyword\">when</span> m.sale_level = <span class=\"number\">1</span>  <span class=\"keyword\">then</span> pay_cnt_90day  <span class=\"keyword\">end</span>)  <span class=\"keyword\">as</span> pay_cnt_90day_s1,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">sum</span>(<span class=\"keyword\">case</span> <span class=\"keyword\">when</span> m.sale_level = <span class=\"number\">2</span>  <span class=\"keyword\">then</span> pay_cnt_90day  <span class=\"keyword\">end</span>)  <span class=\"keyword\">as</span> pay_cnt_90day_s2,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">sum</span>(<span class=\"keyword\">case</span> <span class=\"keyword\">when</span> m.sale_level = <span class=\"number\">3</span>  <span class=\"keyword\">then</span> pay_cnt_90day  <span class=\"keyword\">end</span>)  <span class=\"keyword\">as</span> pay_cnt_90day_s3,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">sum</span>(<span class=\"keyword\">case</span> <span class=\"keyword\">when</span> m.sale_level = <span class=\"number\">4</span>  <span class=\"keyword\">then</span> pay_cnt_90day  <span class=\"keyword\">end</span>)  <span class=\"keyword\">as</span> pay_cnt_90day_s4,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">sum</span>(<span class=\"keyword\">case</span> <span class=\"keyword\">when</span> m.sale_level = <span class=\"number\">5</span>  <span class=\"keyword\">then</span> pay_cnt_90day  <span class=\"keyword\">end</span>)  <span class=\"keyword\">as</span> pay_cnt_90day_s5</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> (</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">select</span>  a.buer_id,  a.seller_id,  b.sale_level, a.pay_cnt_90day</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> (  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">select</span>  <span class=\"comment\">/*+mapjoin(big)*/</span></span><br><span class=\"line\"></span><br><span class=\"line\">buyer_id,  seller_id,  pay_cnt_90day,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span>(big.seller_id <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">null</span>, <span class=\"keyword\">concat</span>(  table_A.seller_id,  <span class=\"string\">&#x27;rnd&#x27;</span>,  <span class=\"keyword\">cast</span>(  <span class=\"keyword\">rand</span>() * <span class=\"number\">1000</span> <span class=\"keyword\">as</span> <span class=\"built_in\">bigint</span> ), table_A.seller_id)  <span class=\"keyword\">as</span> seller_id_joinkey</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> table_A</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">left</span> <span class=\"keyword\">outer</span> <span class=\"keyword\">join</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--big表seller_id有重复，请注意一定要group by 后再join,保证table_A的行数保持不变</span></span><br><span class=\"line\"></span><br><span class=\"line\">（<span class=\"keyword\">select</span> seller_id  <span class=\"keyword\">from</span> dim_big_seller  <span class=\"keyword\">group</span> <span class=\"keyword\">by</span> seller_id）<span class=\"keyword\">big</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">on</span> table_A.seller_id = big.seller_id</span><br><span class=\"line\"></span><br><span class=\"line\">)  a</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">join</span></span><br><span class=\"line\"></span><br><span class=\"line\">(</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">select</span>  <span class=\"comment\">/*+mapjoin(big)*/</span></span><br><span class=\"line\"></span><br><span class=\"line\">seller_id,  sale_level ,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--big表的seller_id_joinkey生成逻辑和上面的生成逻辑一样</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">coalesce</span>(seller_id_joinkey,table_B.seller_id) <span class=\"keyword\">as</span> seller_id_joinkey</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> table_B</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">left</span> <span class=\"keyword\">out</span> <span class=\"keyword\">join</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--table_B表join大卖家表后大卖家行数扩大1000倍，其它卖家行数保持不变</span></span><br><span class=\"line\"></span><br><span class=\"line\">(<span class=\"keyword\">select</span> seller_id, seller_id_joinkey <span class=\"keyword\">from</span> dim_big_seller) <span class=\"keyword\">big</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">on</span> table_B.seller_id= big.seller_id</span><br><span class=\"line\"></span><br><span class=\"line\">)  b</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">on</span>  a.seller_id_joinkey= b.seller_id_joinkey</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">and</span> <span class=\"keyword\">mod</span>(a.pay_cnt_90day,<span class=\"number\">10</span>)+<span class=\"number\">1</span> = b.number </span><br><span class=\"line\"></span><br><span class=\"line\">)  m</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">group</span> <span class=\"keyword\">by</span> m.buyer_id</span><br><span class=\"line\"></span><br><span class=\"line\">相比通用方案，专用方案的运行效率明细好了许多，因为只是将B表中大卖家的行数放大了<span class=\"number\">1000</span>倍，其它卖家的行数保持不变，但同时代码复杂了很多，而且必须首先建立大数据表。</span><br><span class=\"line\"></span><br><span class=\"line\">方案<span class=\"number\">4</span>：动态一分为二</span><br><span class=\"line\">实际上方案<span class=\"number\">2</span>和<span class=\"number\">3</span>都用了一分为二的思想，但是都不彻底，对于mapjoin不能解决的问题，终极解决方案是动态一分为二，即对倾斜的键值和不倾斜的键值分开处理，不倾斜的正常<span class=\"keyword\">join</span>即可，倾斜的把他们找出来做mapjoin，最后<span class=\"keyword\">union</span> <span class=\"keyword\">all</span>其结果即可。</span><br><span class=\"line\"></span><br><span class=\"line\">但是此种解决方案比较麻烦，代码复杂而且需要一个临时表存放倾斜的键值。代码如下：</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--由于数据倾斜，先找出90天买家超过10000的卖家</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">insert</span> overwrite <span class=\"keyword\">table</span>  temp_table_B</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">select</span> </span><br><span class=\"line\"></span><br><span class=\"line\">m.seller_id,  n.sale_level</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> (</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">select</span>   seller_id</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> (</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">select</span> seller_id,<span class=\"keyword\">count</span>(buyer_id) <span class=\"keyword\">as</span> byr_cnt</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> table_A</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">group</span> <span class=\"keyword\">by</span> seller_id</span><br><span class=\"line\"></span><br><span class=\"line\">) a</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">where</span> a.byr_cnt &gt;<span class=\"number\">10000</span></span><br><span class=\"line\"></span><br><span class=\"line\">) m</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">left</span> <span class=\"keyword\">join</span> </span><br><span class=\"line\"></span><br><span class=\"line\">(</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">select</span> seller_id, sale_level  <span class=\"keyword\">from</span> table_B</span><br><span class=\"line\"></span><br><span class=\"line\">) n</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">on</span> m.seller_id = n.seller_id;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--对于90天买家超过10000的卖家直接mapjoin,对其它卖家直接正常join即可。</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">select</span></span><br><span class=\"line\"></span><br><span class=\"line\">m.buyer_id,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">sum</span>(pay_cnt_90day)  <span class=\"keyword\">as</span> pay_cnt_90day,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">sum</span>(<span class=\"keyword\">case</span> <span class=\"keyword\">when</span> m.sale_level = <span class=\"number\">0</span>  <span class=\"keyword\">then</span> pay_cnt_90day  <span class=\"keyword\">end</span>)  <span class=\"keyword\">as</span> pay_cnt_90day_s0,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">sum</span>(<span class=\"keyword\">case</span> <span class=\"keyword\">when</span> m.sale_level = <span class=\"number\">1</span>  <span class=\"keyword\">then</span> pay_cnt_90day  <span class=\"keyword\">end</span>)  <span class=\"keyword\">as</span> pay_cnt_90day_s1,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">sum</span>(<span class=\"keyword\">case</span> <span class=\"keyword\">when</span> m.sale_level = <span class=\"number\">2</span>  <span class=\"keyword\">then</span> pay_cnt_90day  <span class=\"keyword\">end</span>)  <span class=\"keyword\">as</span> pay_cnt_90day_s2,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">sum</span>(<span class=\"keyword\">case</span> <span class=\"keyword\">when</span> m.sale_level = <span class=\"number\">3</span>  <span class=\"keyword\">then</span> pay_cnt_90day  <span class=\"keyword\">end</span>)  <span class=\"keyword\">as</span> pay_cnt_90day_s3,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">sum</span>(<span class=\"keyword\">case</span> <span class=\"keyword\">when</span> m.sale_level = <span class=\"number\">4</span>  <span class=\"keyword\">then</span> pay_cnt_90day  <span class=\"keyword\">end</span>)  <span class=\"keyword\">as</span> pay_cnt_90day_s4,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">sum</span>(<span class=\"keyword\">case</span> <span class=\"keyword\">when</span> m.sale_level = <span class=\"number\">5</span>  <span class=\"keyword\">then</span> pay_cnt_90day  <span class=\"keyword\">end</span>)  <span class=\"keyword\">as</span> pay_cnt_90day_s5</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> (</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">select</span>  a.buer_id,  a.seller_id,  b.sale_level, a.pay_cnt_90day</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> (  <span class=\"keyword\">select</span> buyer_id,  seller_id,  pay_cnt_90day   <span class=\"keyword\">from</span> table_A)  a</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">join</span></span><br><span class=\"line\"></span><br><span class=\"line\">(</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">select</span> seller_id,  a.sale_level </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> table_A  a</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">left</span> <span class=\"keyword\">join</span> temp_table_B b</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">on</span> a.seller_id = b.seller_id</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">where</span> b.seller_id <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">null</span></span><br><span class=\"line\"></span><br><span class=\"line\">)  b</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">on</span>  a.seller_id  = b.seller_id</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">union</span> <span class=\"keyword\">all</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">select</span>  <span class=\"comment\">/*+mapjoin(b)*/</span></span><br><span class=\"line\"></span><br><span class=\"line\">a.buer_id,  a.seller_id,  b.sale_level, a.pay_cnt_90day</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> ( </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">select</span> buyer_id,  seller_id,  pay_cnt_90day   </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> table_A</span><br><span class=\"line\"></span><br><span class=\"line\">)  a</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">join</span></span><br><span class=\"line\"></span><br><span class=\"line\">(</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">select</span> seller_id,  sale_level  <span class=\"keyword\">from</span> table_B </span><br><span class=\"line\"></span><br><span class=\"line\">)  b</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">on</span>  a.seller_id  = b.seller_id</span><br><span class=\"line\"></span><br><span class=\"line\">)  m  <span class=\"keyword\">group</span> <span class=\"keyword\">by</span> m.buyer_id</span><br><span class=\"line\"></span><br><span class=\"line\">) m</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">group</span> <span class=\"keyword\">by</span> m.buyer_id</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">总结：方案<span class=\"number\">1</span>、<span class=\"number\">2</span>以及方案<span class=\"number\">3</span>中的同用方案不能保证解决大表<span class=\"keyword\">join</span>大表问题，因为它们都存在种种不同的限制和特定使用场景。</span><br><span class=\"line\"></span><br><span class=\"line\">而方案<span class=\"number\">3</span>的专用方案和方案<span class=\"number\">4</span>是推荐的优化方案，但是它们都需要新建一个临时表来存储每日动态变化的大卖家。相对方案<span class=\"number\">4</span>来说，方案<span class=\"number\">3</span>的专用方案不需要对代码框架进行修改，但是B表会被放大，所以一定要是是维度表，不然统计结果会是错误的。方案<span class=\"number\">4</span>最通用，自由度最高，但是对代码的更改也最大，甚至修改更难代码框架，可以作为终极方案使用。</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<h1 id=\"Hive\"><a href=\"#Hive\" class=\"headerlink\" title=\"Hive\"></a>Hive</h1><!-- toc -->\n\n<ul>\n<li><a href=\"#%E6%A6%82%E8%BF%B0\">概述</a></li>\n<li><a href=\"#1ddl%E6%93%8D%E4%BD%9C\">1.DDL操作</a><ul>\n<li><a href=\"#11-%E5%88%9B%E5%BB%BA%E8%A1%A8\">1.1 创建表</a></li>\n<li><a href=\"#12-%E4%BF%AE%E6%94%B9%E8%A1%A8\">1.2 修改表</a></li>\n</ul>\n</li>\n<li><a href=\"#2dml%E6%93%8D%E4%BD%9C\">2.DML操作</a><ul>\n<li><a href=\"#21-load\">2.1 load</a></li>\n<li><a href=\"#22-insert\">2.2 insert</a></li>\n<li><a href=\"#23-join\">2.3 join</a></li>\n<li><a href=\"#24-%E6%8E%92%E5%BA%8F\">2.4 排序</a></li>\n</ul>\n</li>\n<li><a href=\"#3hive%E5%8F%82%E6%95%B0%E9%85%8D%E7%BD%AE\">3.hive参数配置</a><ul>\n<li><a href=\"#31-hive-shell%E5%91%BD%E4%BB%A4%E8%A1%8C\">3.1 Hive shell命令行</a></li>\n<li><a href=\"#32-hive-%E5%8F%82%E6%95%B0%E9%85%8D%E7%BD%AE%E6%96%B9%E5%BC%8F\">3.2 Hive 参数配置方式</a></li>\n</ul>\n</li>\n<li><a href=\"#4hive%E4%B8%AD%E5%A4%8D%E6%9D%82%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E7%9A%84%E4%BD%BF%E7%94%A8\">4.hive中复杂数据类型的使用</a><ul>\n<li><a href=\"#41-%E6%95%B0%E7%BB%84%E7%B1%BB%E5%9E%8B\">4.1 数组类型</a></li>\n<li><a href=\"#42-map%E7%B1%BB%E5%9E%8B\">4.2 map类型</a></li>\n<li><a href=\"#43-%E6%AD%A3%E5%88%99%E7%B1%BB%E5%9E%8B\">4.3 正则类型</a></li>\n<li><a href=\"#44-json%E7%B1%BB%E5%9E%8B\">4.4 json类型</a></li>\n<li><a href=\"#45-python%E7%B1%BB%E5%9E%8B\">4.5 python类型</a></li>\n</ul>\n</li>\n<li><a href=\"#5hive%E5%87%BD%E6%95%B0\">5.Hive函数</a><ul>\n<li><a href=\"#51%E8%87%AA%E5%AE%9A%E4%B9%89%E5%87%BD%E6%95%B0\">5.1自定义函数</a></li>\n<li><a href=\"#52udaf\">5.2UDAF</a></li>\n<li><a href=\"#53udtf\">5.3UDTF</a></li>\n<li><a href=\"#54%E5%B8%B8%E8%A7%81%E8%87%AA%E5%B8%A6%E7%9A%84hive%E5%87%BD%E6%95%B0\">5.4常见自带的hive函数</a></li>\n<li><a href=\"#55%E5%85%B3%E4%BA%8Eunion%E5%92%8Cunion-all\">5.5关于union和union all</a></li>\n</ul>\n</li>\n<li><a href=\"#6hive%E8%AF%AD%E6%B3%95%E8%A6%81%E7%82%B9\">6.hive语法要点</a></li>\n<li><a href=\"#7hive%E4%BC%98%E5%8C%96\">7.hive优化</a><ul>\n<li><a href=\"#71%E5%A4%A7%E8%A1%A8join%E5%A4%A7%E8%A1%A8%E4%BC%98%E5%8C%96\">7.1大表join大表优化</a></li>\n</ul>\n</li>\n</ul>\n<!-- tocstop -->\n\n<p>[TOC]</p>\n<h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p>Hive是基于Hadoop的一个数据仓库工具，可以将结构化的数据文件映射为一张数据库表，并提供类SQL查询功能。</p>\n<p>本质是将SQL转换为MapReduce程序</p>\n<p>主要用途：用来做离线数据分析，比直接用MapReduce开发效率更高</p>","more":"<p><img src=\"/2020/12/29/hive%E7%9F%A5%E8%AF%86%E6%95%B4%E7%90%86/timg-1568381886490.jpg\" alt=\"img\"> </p>\n<p>数据仓库和数据库的区别</p>\n<ul>\n<li><p>数据库是面向事务的设计，数据仓库是面向主题设计的。</p>\n</li>\n<li><p>数据库一般存储业务数据，数据仓库存储的一般是历史数据。</p>\n</li>\n<li><p>数据库设计是尽量避免冗余，一般针对某一业务应用进行设计，比如一张简单的User表，记录用户名、密码等简单数据即可，符合业务应用，但是不符合分析。数据仓库在设计是有意引入冗余，依照分析需求，分析维度、分析指标进行设计。</p>\n</li>\n<li><p>数据库是为捕获数据而设计，数据仓库是为分析数据而设计。</p>\n</li>\n</ul>\n<p>数据仓库分层架构</p>\n<p>==源数据层（ODS）==：此层数据无任何更改，直接沿用外围系统数据结构和数据，不对外开放；为临时存储层，是接口数据的临时存储区域，为后一步的数据处理做准备。</p>\n<p>==数据仓库层（DW）==：也称为细节层，DW层的数据应该是一致的、准确的、干净的数据，即对源系统数据进行了清洗（去除了杂质）后的数据。</p>\n<p>==数据应用层（DA或APP）==：前端应用直接读取的数据源；根据报表、专题分析需求而计算生成的数据。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">先启动metastore服务再启动hiveserver2服务</span><br><span class=\"line\">/<span class=\"built_in\">export</span>/servers/hive/bin/beeline</span><br><span class=\"line\">beeline&gt; ! connect jdbc:hive2://hdp3:10000</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n<p>hive SQL语句中 select from where group by having order by 的==执行顺序==？</p>\n<p>1.from–where–group by–having–select–order by， </p>\n<p>2.from：需要从哪个数据表检索数据 </p>\n<p>3.where：过滤表中数据的条件 </p>\n<p>4.group by：如何将上面过滤出的数据分组 </p>\n<p>5.having：对上面已经分组的数据进行过滤的条件 </p>\n<p>6.select：查看结果集中的哪个列，或列的计算结果 </p>\n<p>7.order by ：按照什么样的顺序来查看返回的数据</p>\n<h2 id=\"1-DDL操作\"><a href=\"#1-DDL操作\" class=\"headerlink\" title=\"1.DDL操作\"></a>1.DDL操作</h2><p>设置hive程序本地运行模式：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">set</span> hive.exec.mode.local.auto=<span class=\"literal\">true</span>;</span><br></pre></td></tr></table></figure>\n<h3 id=\"1-1-创建表\"><a href=\"#1-1-创建表\" class=\"headerlink\" title=\"1.1  创建表\"></a>1.1  创建表</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create</span> [<span class=\"keyword\">external</span>] <span class=\"keyword\">table</span> [<span class=\"keyword\">if</span> <span class=\"keyword\">not</span> <span class=\"keyword\">exists</span>] tb_name (...) [<span class=\"keyword\">like</span>] existing_table;</span><br><span class=\"line\">[row format delimited fields terminated by char</span><br><span class=\"line\">\t\t\t\t\tcollection items terminated by char</span><br><span class=\"line\">\t\t\t\t\tmap keys terminated by char</span><br><span class=\"line\">\t\t\t\t\tlines terminated by char</span><br><span class=\"line\">\t\t\t\t\t...]</span><br><span class=\"line\">[partitioned by ]</span><br><span class=\"line\">[stored as file_format]</span><br><span class=\"line\">[CLUSTERED BY (col_name, col_name, ...) [SORTED BY (col_name [ASC|DESC], ...)] INTO num_buckets BUCKETS]</span><br><span class=\"line\">[LOCATION hdfs_path]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>1.create table 创建一个指定名字的表，如果表以存在可以用[if not exists]跳过异常</p>\n<p>2.[external] 关键字可以让给用户创建一个外部表。</p>\n<p>创建内部表时会将数据移动到数据仓库指向的路径，删除表时元数据和数据都被删除。</p>\n<p>外部表仅记录数据所在的路径，删除时只删除元数据，不删除数据。</p>\n<p>3.[like] 允许用户复制现有的表结构，但是不复制数据</p>\n<p>4.[row format delimited] 指定表列与列的分隔符。hive建表的时候默认分隔符是‘\\001’,</p>\n<p>5.[partitioned by] 分区命令。每个表可以有多个分区，每个分区以文件夹的形式单独存在表文件夹目录下。分区是以字段的形式在表结构中存在。</p>\n<p>6.[stored as sequencedile|textfile|refile]   如果文件数据是纯文本，可以使用textfile,如果数据需要压缩，使用sequencedile。</p>\n<p>textfile是默认的文件格式，使用delimited子句来读取分隔文件</p>\n<p>7.[clustered by (col_name,col_name,….)]   分桶</p>\n<p>8.[LOCATION hdfs_path]  指定这张表所在的hdfs上的目录，如果不指定，默认在数据库的目录下面</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span> tb_name <span class=\"keyword\">as</span> <span class=\"keyword\">select</span> <span class=\"keyword\">statement</span>;将sql语句的结果进行保存</span><br><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span> tb_new <span class=\"keyword\">like</span> tb_old;创建一张结构与tb_old一样的表</span><br><span class=\"line\"><span class=\"keyword\">drop</span> <span class=\"keyword\">table</span> [<span class=\"keyword\">if</span> <span class=\"keyword\">exists</span>] tb_name;删除表</span><br><span class=\"line\"><span class=\"keyword\">truncate</span> <span class=\"keyword\">table</span> tb_name;清空表</span><br><span class=\"line\"><span class=\"keyword\">show</span> functions;查看所有的函数</span><br><span class=\"line\"><span class=\"keyword\">show</span> <span class=\"keyword\">partitions</span> tb_name;查看所有分区</span><br><span class=\"line\">desc formatted tb_name；查看表信息</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4 id=\"1-1-1-管理表\"><a href=\"#1-1-1-管理表\" class=\"headerlink\" title=\"1.1.1 管理表\"></a>1.1.1 管理表</h4><p>最普通的表，默认表的类型就是管理表</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span> tb_name();</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4 id=\"1-1-2-外部表\"><a href=\"#1-1-2-外部表\" class=\"headerlink\" title=\"1.1.2 外部表\"></a>1.1.2 外部表</h4><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">external</span> <span class=\"keyword\">table</span> tb_name();</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>特点：在删除时，不会删除表数据</p>\n<p>应用场景：1-如果需要多张表共用同一份数据，都建立外部表，使用完以后，删除表互不影响。2-如果数据需要进行额外的使用：存档等等</p>\n<h4 id=\"1-1-3-分区表\"><a href=\"#1-1-3-分区表\" class=\"headerlink\" title=\"1.1.3 分区表\"></a>1.1.3 分区表</h4><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">external</span> <span class=\"keyword\">table</span> tb_part(</span><br><span class=\"line\"><span class=\"keyword\">id</span> <span class=\"keyword\">string</span></span><br><span class=\"line\"> <span class=\"keyword\">name</span> <span class=\"keyword\">string</span></span><br><span class=\"line\">)</span><br><span class=\"line\">partitioned <span class=\"keyword\">by</span> (<span class=\"keyword\">day</span> <span class=\"keyword\">string</span>)</span><br><span class=\"line\"><span class=\"keyword\">row</span> <span class=\"keyword\">format</span> <span class=\"keyword\">delimited</span> <span class=\"keyword\">fields</span> <span class=\"keyword\">terminated</span> <span class=\"keyword\">by</span> <span class=\"string\">&#x27;\\t&#x27;</span>;</span><br><span class=\"line\"><span class=\"comment\">--创建分区表，指定分区字段day</span></span><br><span class=\"line\"><span class=\"keyword\">load</span> <span class=\"keyword\">data</span> <span class=\"keyword\">local</span> inpath <span class=\"string\">&#x27;/export/datas/20180718&#x27;</span> <span class=\"keyword\">into</span> <span class=\"keyword\">table</span> tb_name <span class=\"keyword\">partition</span>(<span class=\"keyword\">day</span>=<span class=\"string\">&#x27;18&#x27;</span>);</span><br><span class=\"line\"><span class=\"comment\">--加载文件数据，创建分区字段day=18</span></span><br><span class=\"line\"><span class=\"keyword\">load</span> <span class=\"keyword\">data</span> <span class=\"keyword\">local</span> inpath <span class=\"string\">&#x27;/export/datas/20180719&#x27;</span> <span class=\"keyword\">into</span> <span class=\"keyword\">table</span> tb_name <span class=\"keyword\">partition</span>(<span class=\"keyword\">day</span>=<span class=\"string\">&#x27;19&#x27;</span>);</span><br><span class=\"line\"><span class=\"comment\">--加载文件数据，创建分区字段day=19</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> tb_part <span class=\"keyword\">where</span> <span class=\"keyword\">day</span> = <span class=\"number\">19</span>;</span><br><span class=\"line\"><span class=\"comment\">--过滤条件需是分区的字段，如果不是分区字段就会从整个分区目录中查找</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>手动分区：加载数据时，手动指定文件的分区</p>\n<p>分区字段为查询的语句的最后一个字段 </p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">insert</span> overwrite <span class=\"keyword\">table</span> tb_emp_part <span class=\"keyword\">partition</span> (deptno)</span><br><span class=\"line\">  <span class=\"keyword\">select</span> empno</span><br><span class=\"line\">  ename,</span><br><span class=\"line\">  job,</span><br><span class=\"line\">  manager,</span><br><span class=\"line\">  inday,</span><br><span class=\"line\">  salary,</span><br><span class=\"line\">  jiangjin,</span><br><span class=\"line\">  deptno</span><br><span class=\"line\"><span class=\"keyword\">from</span> tb_emp_normal;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>应用场景：将普通表的数据转换成一个分区表</p>\n<pre><code>       原始表【tb1】中的数据没有做分区\n         希望将原始表中的数据按照分区存放到新的分区表[tb2]</code></pre>\n</li>\n<li><p>自动分区：默认按照原始表的最后一列进行分区</p>\n</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">set</span> hive.exec.dynamic.partition.mode=nonstrict;</span><br><span class=\"line\">配置自动分区</span><br><span class=\"line\"><span class=\"keyword\">show</span> <span class=\"keyword\">partitions</span> tb_name;</span><br><span class=\"line\">查看当前所有分区</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>数据加载问题：<br>1-如果手动将数据文件放入一张普通表的目录下？表能不能读到数据？</p>\n<p>​    可以，元数据查询时直接将表的目录作为查询目录<br>2-如果手动将数据文件放入一张分区表的分区目录下？表能不能读到数据？表的分区能不能读到数据？<br>​    可以的，因为元数据查询时直接将分区的目录作为查询目录<br>3-如果手动在HDFS上创建一个分区的目录，将数据放入分区目录下，表能不能读到数据？<br>​    不能，因为Hive中没有该分区的元数据</p>\n<p>方案一：修复表的元数据（资源占用多）</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">msck <span class=\"keyword\">repair</span> <span class=\"keyword\">table</span> tb_emp;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>方案二：手动向表中添加一个分区</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">table</span> tb_name <span class=\"keyword\">add</span> [<span class=\"keyword\">if</span> <span class=\"keyword\">exists</span>] <span class=\"keyword\">partition</span> (dt=<span class=\"string\">&#x27;20&#x27;</span>) location <span class=\"string\">&#x27;/user/hadoop/dt=20&#x27;</span>;</span><br><span class=\"line\"><span class=\"comment\">--要求建立的目录必须与分区自动创建的目录格式一样</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>删除分区</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alter table tb_name drop [<span class=\"keyword\">if</span> exists] partition (dt=<span class=\"string\">&#x27;20&#x27;</span>);</span><br></pre></td></tr></table></figure>\n\n\n</li>\n</ul>\n<h4 id=\"1-1-4-分桶表\"><a href=\"#1-1-4-分桶表\" class=\"headerlink\" title=\"1.1.4  分桶表\"></a>1.1.4  分桶表</h4>  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span> tb_emp_bucket(</span><br><span class=\"line\">empno <span class=\"built_in\">int</span> ,</span><br><span class=\"line\">ename <span class=\"keyword\">string</span>,</span><br><span class=\"line\">job <span class=\"keyword\">string</span>,</span><br><span class=\"line\">manager <span class=\"built_in\">int</span>,</span><br><span class=\"line\">inday <span class=\"keyword\">string</span>,</span><br><span class=\"line\">salary <span class=\"keyword\">double</span>,</span><br><span class=\"line\">jiangjin <span class=\"keyword\">double</span>,</span><br><span class=\"line\">deptno <span class=\"built_in\">int</span></span><br><span class=\"line\">) </span><br><span class=\"line\">clustered <span class=\"keyword\">by</span> (deptno) <span class=\"keyword\">into</span> <span class=\"number\">3</span> BUCKETS</span><br><span class=\"line\"><span class=\"keyword\">row</span> <span class=\"keyword\">format</span> <span class=\"keyword\">delimited</span> <span class=\"keyword\">fields</span> <span class=\"keyword\">terminated</span> <span class=\"keyword\">by</span> <span class=\"string\">&#x27;\\t&#x27;</span>;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>  应用场景：大表join大表时</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--开启分桶</span></span><br><span class=\"line\"><span class=\"keyword\">set</span> hive.enforce.bucketing=<span class=\"literal\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">insert</span> overwrite <span class=\"keyword\">table</span> tb_emp_bucket</span><br><span class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> tb_emp_normal cluster <span class=\"keyword\">by</span> (deptno);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>  连个桶表桶的个数必须相同，或者b表桶是a表的倍数</p>\n<h3 id=\"1-2-修改表\"><a href=\"#1-2-修改表\" class=\"headerlink\" title=\"1.2 修改表\"></a>1.2 修改表</h3><p>  增加分区：</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">table</span> tb_name <span class=\"keyword\">add</span> <span class=\"keyword\">partition</span> (dt=<span class=\"string\">&#x27;20170101&#x27;</span>) location <span class=\"string\">&#x27;/user/hadoop/table_name/dt=20170101&#x27;</span>;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>  删除分区</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">table</span> tb_name <span class=\"keyword\">drop</span> <span class=\"keyword\">if</span> <span class=\"keyword\">exists</span> <span class=\"keyword\">partition</span> (dt=<span class=\"string\">&#x27;20170101&#x27;</span>)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>  修改分区</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">table</span> tb_name <span class=\"keyword\">partition</span> (dt=<span class=\"string\">&#x27;20170101&#x27;</span>) <span class=\"keyword\">rename</span> <span class=\"keyword\">to</span> <span class=\"keyword\">partition</span>(dt=<span class=\"string\">&#x27;20170202&#x27;</span>)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>  添加列</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--添加列</span></span><br><span class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">table</span> tb_name <span class=\"keyword\">add</span>|<span class=\"keyword\">replace</span> <span class=\"keyword\">columns</span> (col_name <span class=\"keyword\">string</span>);</span><br><span class=\"line\"><span class=\"comment\">--修改表名</span></span><br><span class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">table</span> stu_par <span class=\"keyword\">rename</span> <span class=\"keyword\">to</span> stu_par1</span><br><span class=\"line\"><span class=\"comment\">--增加列</span></span><br><span class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">table</span> stu1 <span class=\"keyword\">add</span> <span class=\"keyword\">columns</span>(score <span class=\"keyword\">string</span>);</span><br><span class=\"line\"><span class=\"comment\">--修改列类型</span></span><br><span class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">table</span> stu1 <span class=\"keyword\">change</span> <span class=\"keyword\">column</span> score score <span class=\"keyword\">double</span>;</span><br><span class=\"line\"><span class=\"comment\">--</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"2-DML操作\"><a href=\"#2-DML操作\" class=\"headerlink\" title=\"2.DML操作\"></a>2.DML操作</h2><h3 id=\"2-1-load\"><a href=\"#2-1-load\" class=\"headerlink\" title=\"2.1 load\"></a>2.1 load</h3><p>  在将数据加载到表中时，Hive不会进行任何转换。加载操作是将数据文件移动到与Hive表对应的位置的纯复制/移动操作。</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">load</span> <span class=\"keyword\">data</span> [<span class=\"keyword\">local</span>] inpath <span class=\"string\">&#x27;filepath&#x27;</span> [overwrite] <span class=\"keyword\">into</span> <span class=\"keyword\">table</span> tb_name [<span class=\"keyword\">partition</span>(partcol1=val1,partcol2=val2...)]</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"2-2-insert\"><a href=\"#2-2-insert\" class=\"headerlink\" title=\"2.2 insert\"></a>2.2 insert</h3><p>  Hive中insert主要是结合select查询语句使用，将查询结果插入到表中</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--查询结果的列数要和插入数据表格的列数一致</span></span><br><span class=\"line\"><span class=\"keyword\">insert</span> overwrite <span class=\"keyword\">table</span> tb_name <span class=\"keyword\">select</span> <span class=\"keyword\">statement</span></span><br><span class=\"line\"><span class=\"comment\">--将查询语句结果保存至HDFS中</span></span><br><span class=\"line\"><span class=\"keyword\">insert</span> overwrite <span class=\"keyword\">directory</span> <span class=\"string\">&quot;/movie/answer10/&quot;</span> <span class=\"keyword\">select</span> <span class=\"keyword\">statement</span>;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"2-3-join\"><a href=\"#2-3-join\" class=\"headerlink\" title=\"2.3 join\"></a>2.3 join</h3><p>  inner join: 两张表都有结果才有</p>\n<p>  left join: 左表有，结果就有</p>\n<p>  right join: 右表有，结果就有</p>\n<p>  full join：两边任意一边有，结果就有</p>\n<p>  cross join:笛卡尔积      –一般用于结果的漏斗计算</p>\n<h3 id=\"2-4-排序\"><a href=\"#2-4-排序\" class=\"headerlink\" title=\"2.4 排序\"></a>2.4 排序</h3>  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">set</span> hive.exec.reducers.bytes.per.reducer=&lt;<span class=\"built_in\">number</span>&gt;</span><br><span class=\"line\">\t每个reduce最多处理多少数据量</span><br><span class=\"line\"><span class=\"keyword\">set</span> hive.exec.reducers.max=&lt;<span class=\"built_in\">number</span>&gt;\t</span><br><span class=\"line\">\t最多启动多少个reduce</span><br><span class=\"line\"><span class=\"keyword\">set</span> mapreduce.job.reduces=&lt;<span class=\"built_in\">number</span>&gt;</span><br><span class=\"line\">\t设置reduce的个数</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4 id=\"order-by\"><a href=\"#order-by\" class=\"headerlink\" title=\"order by\"></a>order by</h4><p>  全局排序，对整体进行排序，只有一个reduce的情况下</p>\n<p>  在启用多个reduce的情况下如果使用order by 结果依旧全局有序，但只会启用一个reduce</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span>  empno,ename,salary,deptno <span class=\"keyword\">from</span> tb_emp_normal <span class=\"keyword\">order</span> <span class=\"keyword\">by</span> empno;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4 id=\"sort-by\"><a href=\"#sort-by\" class=\"headerlink\" title=\"sort by\"></a>sort by</h4><p>  局部排序，多个reduce的 情况下，每个reduce内部有序（分区内有序）</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">set</span> mapreduce.job.reduces=<span class=\"number\">3</span>;</span><br><span class=\"line\">设置reduce个数</span><br><span class=\"line\"><span class=\"keyword\">insert</span> overwrite <span class=\"keyword\">local</span> <span class=\"keyword\">directory</span> <span class=\"string\">&#x27;/export/datas/sort&#x27;</span> </span><br><span class=\"line\"><span class=\"keyword\">row</span> <span class=\"keyword\">format</span> <span class=\"keyword\">delimited</span> <span class=\"keyword\">fields</span> <span class=\"keyword\">terminated</span> <span class=\"keyword\">by</span> <span class=\"string\">&#x27;\\t&#x27;</span> </span><br><span class=\"line\"><span class=\"keyword\">select</span>  empno,ename,salary,deptno <span class=\"keyword\">from</span> tb_emp_normal </span><br><span class=\"line\"><span class=\"keyword\">sort</span> <span class=\"keyword\">by</span> empno;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4 id=\"distribute-by\"><a href=\"#distribute-by\" class=\"headerlink\" title=\"distribute by\"></a>distribute by</h4><p>  指定多个reduce情况下，以哪一列作为分区字段。将相同的数据放入同一个结果文件，类似MR中Partition，进行分区，结合sort by使用  </p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">insert</span> overwrite <span class=\"keyword\">local</span> <span class=\"keyword\">directory</span> <span class=\"string\">&#x27;/export/datas/dis&#x27;</span> </span><br><span class=\"line\"><span class=\"keyword\">row</span> <span class=\"keyword\">format</span> <span class=\"keyword\">delimited</span> <span class=\"keyword\">fields</span> <span class=\"keyword\">terminated</span> <span class=\"keyword\">by</span> <span class=\"string\">&#x27;\\t&#x27;</span> </span><br><span class=\"line\"><span class=\"keyword\">select</span>  empno,ename,salary,deptno <span class=\"keyword\">from</span> tb_emp_normal </span><br><span class=\"line\"><span class=\"keyword\">distribute</span> <span class=\"keyword\">by</span> deptno </span><br><span class=\"line\"><span class=\"keyword\">sort</span> <span class=\"keyword\">by</span> empno;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4 id=\"cluster-by\"><a href=\"#cluster-by\" class=\"headerlink\" title=\"cluster by\"></a>cluster by</h4><p>  如果sort by与distribute by使用同一个字段可以用此代替，但是排序只能是升序排序，不能指定排序规则为ASC或者DESC。</p>\n<h2 id=\"3-hive参数配置\"><a href=\"#3-hive参数配置\" class=\"headerlink\" title=\"3.hive参数配置\"></a>3.hive参数配置</h2><h3 id=\"3-1-Hive-shell命令行\"><a href=\"#3-1-Hive-shell命令行\" class=\"headerlink\" title=\"3.1 Hive shell命令行\"></a>3.1 Hive shell命令行</h3><p>针对bin/hive，除了可以当第一代客户端之外。还可以在hive中启动其他用途。</p>\n<p>1、 -i  初始化HQL文件。</p>\n<p>2、 -e从命令行执行指定的HQL </p>\n<p>3、 -f 执行HQL脚本 </p>\n<p>4、 -v 输出执行的HQL语句到控制台 </p>\n<p>5、 -p <port> connect to Hive Server on port number </port></p>\n<p>6、 -hiveconf x=y Use this to set hive/hadoop configuration variables.</p>\n<p>例如：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$HIVE_HOME</span>/bin/hive -e <span class=\"string\">&#x27;select * from table a&#x27;</span>\t</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable\">$HIVE_HOME</span>/bin/hive -f /home/my/hive-script.sql</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable\">$HIVE_HOME</span>/bin/hive -f hdfs://&lt;namenode&gt;:&lt;port&gt;/hive-script.sql</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable\">$HIVE_HOME</span>/bin/hive -i /home/my/hive-init.sql</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"3-2-Hive-参数配置方式\"><a href=\"#3-2-Hive-参数配置方式\" class=\"headerlink\" title=\"3.2 Hive 参数配置方式\"></a>3.2 Hive 参数配置方式</h3><p><em>Hive参数大全：</em></p>\n<p>[<em><a href=\"https://cwiki.apache.org/confluence/display/Hive/Configuration+Properties\">https://cwiki.apache.org/confluence/display/Hive/Configuration+Properties</a></em></p>\n<p> 开发Hive应用时，不可避免地需要设定Hive的参数。设定Hive的参数可以调优HQL代码的执行效率，或帮助定位问题。然而实践中经常遇到的一个问题是，为什么设定的参数没有起作用？这通常是错误的设定方式导致的。</p>\n<p>对于一般参数，有以下三种设定方式：</p>\n<p>配置文件   （全局有效）</p>\n<p>命令行参数   （对hive启动实例有效）</p>\n<p>参数声明   （对hive的连接session有效）</p>\n<p>配置文件 </p>\n<p>用户自定义配置文件：$HIVE_CONF_DIR/hive-site.xml</p>\n<p>默认配置文件：$HIVE_CONF_DIR/hive-default.xml </p>\n<p>用户自定义配置会覆盖默认配置。</p>\n<p>另外，Hive也会读入Hadoop的配置，因为Hive是作为Hadoop的客户端启动的，Hive的配置会覆盖Hadoop的配置。</p>\n<p>配置文件的设定对本机启动的所有Hive进程都有效。</p>\n<p> 命令行参数</p>\n<p>启动Hive（客户端或Server方式）时，可以在命令行添加-hiveconf来设定参数    例如：bin/hive -hiveconf hive.root.logger=INFO,console</p>\n<p>设定对本次启动的Session（对于Server方式启动，则是所有请求的Sessions）有效。</p>\n<p> 参数声明</p>\n<p>可以在HQL中使用SET关键字设定参数，这一设定的作用域也是session级的。</p>\n<p>比如：</p>\n<p>set hive.exec.reducers.bytes.per.reducer=<number>  每个reduce task的平均负载数据量</number></p>\n<p>set hive.exec.reducers.max=<number>   设置reduce task数量的上限</number></p>\n<p>set mapreduce.job.reduces=<number>    指定固定的reduce task数量</number></p>\n<p>但是，这个参数在必要时&lt;业务逻辑决定只能用一个reduce task&gt; hive会忽略</p>\n<p>上述三种设定方式的优先级依次递增。即参数声明覆盖命令行参数，命令行参数覆盖配置文件设定。注意某些系统级的参数，例如log4j相关的设定，必须用前两种方式设定，因为那些参数的读取在Session建立以前已经完成了。</p>\n<h2 id=\"4-hive中复杂数据类型的使用\"><a href=\"#4-hive中复杂数据类型的使用\" class=\"headerlink\" title=\"4.hive中复杂数据类型的使用\"></a>4.hive中复杂数据类型的使用</h2><h3 id=\"4-1-数组类型\"><a href=\"#4-1-数组类型\" class=\"headerlink\" title=\"4.1 数组类型\"></a>4.1 数组类型</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--数据如下：vim &#x2F;export&#x2F;datas&#x2F;array.txt</span><br><span class=\"line\">zhangsan\tbeijing,shanghai,tianjin,hangzhou</span><br><span class=\"line\">wangwu\tshanghai,chengdu,wuhan,haerbin</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--创建表</span></span><br><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span> complex_array(</span><br><span class=\"line\"><span class=\"keyword\">name</span> <span class=\"keyword\">string</span>,</span><br><span class=\"line\">work_locations <span class=\"built_in\">array</span>&lt;<span class=\"keyword\">string</span>&gt;</span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"keyword\">row</span> <span class=\"keyword\">format</span> <span class=\"keyword\">delimited</span> <span class=\"keyword\">fields</span> <span class=\"keyword\">terminated</span> <span class=\"keyword\">by</span> <span class=\"string\">&#x27;\\t&#x27;</span> <span class=\"comment\">--指定列的分隔符</span></span><br><span class=\"line\">collection items <span class=\"keyword\">terminated</span> <span class=\"keyword\">by</span> <span class=\"string\">&#x27;,&#x27;</span>;<span class=\"comment\">--指定数组中元素的分隔符</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--加载数据</span></span><br><span class=\"line\"><span class=\"keyword\">load</span> <span class=\"keyword\">data</span> <span class=\"keyword\">local</span> inpath <span class=\"string\">&#x27;/export/datas/array.txt&#x27;</span> <span class=\"keyword\">into</span> <span class=\"keyword\">table</span> complex_array;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--查询</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> complex_array;</span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"keyword\">size</span>(work_locations) <span class=\"keyword\">from</span> complex_array;</span><br><span class=\"line\"><span class=\"keyword\">select</span> work_locations[<span class=\"number\">0</span>],work_locations[<span class=\"number\">1</span>] <span class=\"keyword\">from</span> complex_array;</span><br></pre></td></tr></table></figure>\n<h3 id=\"4-2-map类型\"><a href=\"#4-2-map类型\" class=\"headerlink\" title=\"4.2 map类型\"></a>4.2 map类型</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--数据如下：vim &#x2F;export&#x2F;datas&#x2F;map.txt</span><br><span class=\"line\">1,zhangsan,唱歌:非常喜欢-跳舞:喜欢-游泳:一般般</span><br><span class=\"line\">2,lisi,打游戏:非常喜欢-篮球:不喜欢</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--创建表</span></span><br><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span> complex_map(</span><br><span class=\"line\"><span class=\"keyword\">id</span> <span class=\"built_in\">int</span>,</span><br><span class=\"line\"><span class=\"keyword\">name</span> <span class=\"keyword\">string</span>,</span><br><span class=\"line\">hobby <span class=\"keyword\">map</span>&lt;<span class=\"keyword\">string</span>,<span class=\"keyword\">string</span>&gt;)</span><br><span class=\"line\"><span class=\"keyword\">row</span> <span class=\"keyword\">format</span> <span class=\"keyword\">delimited</span> <span class=\"keyword\">fields</span> <span class=\"keyword\">terminated</span> <span class=\"keyword\">by</span> <span class=\"string\">&#x27;,&#x27;</span> <span class=\"comment\">--指定列的分隔符</span></span><br><span class=\"line\">collection items <span class=\"keyword\">terminated</span> <span class=\"keyword\">by</span> <span class=\"string\">&#x27;-&#x27;</span> <span class=\"keyword\">map</span> <span class=\"keyword\">keys</span> <span class=\"keyword\">terminated</span> <span class=\"keyword\">by</span> <span class=\"string\">&#x27;:&#x27;</span> ;<span class=\"comment\">--指定keyvalue的分割</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--加载数据</span></span><br><span class=\"line\"><span class=\"keyword\">load</span> <span class=\"keyword\">data</span> <span class=\"keyword\">local</span> inpath <span class=\"string\">&#x27;/export/datas/map.txt&#x27;</span> <span class=\"keyword\">into</span> <span class=\"keyword\">table</span> complex_map;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--查询</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> complex_map;</span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"keyword\">size</span>(hobby) <span class=\"keyword\">from</span> complex_map;</span><br><span class=\"line\"><span class=\"keyword\">select</span> hobby[<span class=\"string\">&quot;唱歌&quot;</span>] <span class=\"keyword\">from</span> complex_map;</span><br></pre></td></tr></table></figure>\n<h3 id=\"4-3-正则类型\"><a href=\"#4-3-正则类型\" class=\"headerlink\" title=\"4.3 正则类型\"></a>4.3 正则类型</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--数据如下:vim /export/datas/regex.txt</span></span><br><span class=\"line\">tom 男 23 上海</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--使用正则加载数据</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> user_regex(</span><br><span class=\"line\"><span class=\"keyword\">name</span> <span class=\"keyword\">string</span>,</span><br><span class=\"line\">sex <span class=\"keyword\">string</span>,</span><br><span class=\"line\">age <span class=\"built_in\">int</span>,</span><br><span class=\"line\">city <span class=\"keyword\">string</span></span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"keyword\">ROW</span> <span class=\"keyword\">FORMAT</span> SERDE <span class=\"string\">&#x27;org.apache.hadoop.hive.serde2.RegexSerDe&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">WITH</span> SERDEPROPERTIES (</span><br><span class=\"line\">  <span class=\"string\">&quot;input.regex&quot;</span> = <span class=\"string\">&quot;([^ ]+) ([^ ]+) ([0-9]+) (.+)&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"keyword\">STORED</span> <span class=\"keyword\">AS</span> TEXTFILE;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">load</span> <span class=\"keyword\">data</span> <span class=\"keyword\">local</span> inpath <span class=\"string\">&#x27;/root/regex.txt&#x27;</span> <span class=\"keyword\">into</span> <span class=\"keyword\">table</span> user_regex;</span><br></pre></td></tr></table></figure>\n<h3 id=\"4-4-json类型\"><a href=\"#4-4-json类型\" class=\"headerlink\" title=\"4.4 json类型\"></a>4.4 json类型</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--通过专门的解析类直接加载一个json格式的数据到Hive中</span></span><br><span class=\"line\"><span class=\"comment\">--数据如下:vim /export/datas/hivedata.json</span></span><br><span class=\"line\">&#123;&quot;id&quot;: 1701439105,&quot;ids&quot;: [2154137571,3889177061],&quot;total_number&quot;: 493&#125;</span><br><span class=\"line\">&#123;&quot;id&quot;: 1701439106,&quot;ids&quot;: [2154137571,3889177061],&quot;total_number&quot;: 494&#125;</span><br><span class=\"line\"><span class=\"comment\">--添加jar包</span></span><br><span class=\"line\">add jar /export/datas/json-serde-1.3.7-jar-<span class=\"keyword\">with</span>-dependencies.jar;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--创建表：</span></span><br><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span> tb_json_test2 (</span><br><span class=\"line\"><span class=\"keyword\">id</span> <span class=\"keyword\">string</span>,</span><br><span class=\"line\">ids <span class=\"built_in\">array</span>&lt;<span class=\"keyword\">string</span>&gt;,</span><br><span class=\"line\">total_number <span class=\"built_in\">int</span>)</span><br><span class=\"line\"><span class=\"keyword\">ROW</span> <span class=\"keyword\">FORMAT</span> SERDE <span class=\"string\">&#x27;org.openx.data.jsonserde.JsonSerDe&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">STORED</span> <span class=\"keyword\">AS</span> TEXTFILE;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--加载数据</span></span><br><span class=\"line\"><span class=\"keyword\">load</span> <span class=\"keyword\">data</span> <span class=\"keyword\">local</span> inpath <span class=\"string\">&#x27;/export/datas/hivedata.json&#x27;</span> <span class=\"keyword\">into</span> <span class=\"keyword\">table</span> tb_json_test2;</span><br></pre></td></tr></table></figure>\n<h3 id=\"4-5-python类型\"><a href=\"#4-5-python类型\" class=\"headerlink\" title=\"4.5 python类型\"></a>4.5 python类型</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--创建Python脚本实现将原始表的时间转为对应的星期几</span></span><br><span class=\"line\">vim /export/datas/weekday_mapper.py</span><br><span class=\"line\"></span><br><span class=\"line\">import sys</span><br><span class=\"line\">import datetime</span><br><span class=\"line\"></span><br><span class=\"line\">for line in sys.stdin:</span><br><span class=\"line\">  line = line.strip()</span><br><span class=\"line\">  userid, movieid, rating, unixtime = line.split(&#x27;\\t&#x27;)</span><br><span class=\"line\">  weekday = datetime.datetime.fromtimestamp(float(unixtime)).isoweekday()</span><br><span class=\"line\">  print &#x27;\\t&#x27;.join([userid, movieid, rating, str(weekday)])</span><br><span class=\"line\"> </span><br></pre></td></tr></table></figure>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--加载python脚本并将数据写入新表</span></span><br><span class=\"line\">add FILE /export/datas/weekday_mapper.py;</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> OVERWRITE <span class=\"keyword\">TABLE</span> u_data_new</span><br><span class=\"line\"><span class=\"keyword\">SELECT</span></span><br><span class=\"line\">  TRANSFORM (userid, movieid, rating, unixtime)</span><br><span class=\"line\">  <span class=\"keyword\">USING</span> <span class=\"string\">&#x27;python weekday_mapper.py&#x27;</span></span><br><span class=\"line\">  <span class=\"keyword\">AS</span> (userid, movieid, rating, <span class=\"keyword\">weekday</span>)</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> u_data;</span><br></pre></td></tr></table></figure>\n<h2 id=\"5-Hive函数\"><a href=\"#5-Hive函数\" class=\"headerlink\" title=\"5.Hive函数\"></a>5.Hive函数</h2><h3 id=\"5-1自定义函数\"><a href=\"#5-1自定义函数\" class=\"headerlink\" title=\"5.1自定义函数\"></a>5.1自定义函数</h3><h4 id=\"5-1-1-UDF\"><a href=\"#5-1-1-UDF\" class=\"headerlink\" title=\"5.1.1 UDF\"></a>5.1.1 UDF</h4><p>UDF（User-Defined-Function）普通函数 一进一出</p>\n<p>1、自定义一个类，继承UDF,实现一个或重载多个evaluate方法，打包上传jar包到linux环境</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">     <span class=\"comment\">&lt;!-- 指定该项目可以从哪些地方下载依赖包 --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">repository</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>aliyun<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public/<span class=\"tag\">&lt;/<span class=\"name\">url</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">repository</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">repository</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>cloudera<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">url</span>&gt;</span>https://repository.cloudera.com/artifactory/cloudera-repos/<span class=\"tag\">&lt;/<span class=\"name\">url</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">repository</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">repository</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>jboss<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">url</span>&gt;</span>http://repository.jboss.org/nexus/content/groups/public<span class=\"tag\">&lt;/<span class=\"name\">url</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">repository</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">repositories</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--指定字符编码--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class=\"tag\">&lt;/<span class=\"name\">project.build.sourceEncoding</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--指定依赖--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.hadoop<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>hadoop-common<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.6.0-cdh5.14.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.hadoop<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>hadoop-hdfs<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.6.0-cdh5.14.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.hadoop<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>hadoop-client<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.6.0-cdh5.14.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.hive<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>hive-exec<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.1.0-cdh5.14.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.hive<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>hive-common<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.1.0-cdh5.14.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.hive<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>hive-cli<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.1.0-cdh5.14.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.hive<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>hive-jdbc<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.1.0-cdh5.14.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> org.apache.hadoop.hive.ql.exec.UDF;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.hadoop.io.Text;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserUDF</span> <span class=\"keyword\">extends</span> <span class=\"title\">UDF</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Text <span class=\"title\">evaluate</span><span class=\"params\">(Text s)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(s==<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Text(s.toString().toLowerCase());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<p>2、将jar包添加到hive环境中</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">add jar &#x2F;export&#x2F;datas&#x2F;udf.jar;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>3、在hive中创建一个函数</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">create temporary function fc_name as &#39;com.neusoft.data.UserUDF&#39;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>4、使用函数</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select fc_name(age),name from tb_name;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4 id=\"5-1-2自定义udf-udtf-udaf开发\"><a href=\"#5-1-2自定义udf-udtf-udaf开发\" class=\"headerlink\" title=\"5.1.2自定义udf,udtf,udaf开发\"></a>5.1.2自定义udf,udtf,udaf开发</h4><p>UDF：<br>1-开发udf程序：继承UDF类，实现一个或者多个evaluate方法<br>2-打成jar包<br>3-上传jar包到集群中，并添加到hive的环境变量中，在hive中执行<br>    add jar /export/datas/udf.jar;<br>4-创建临时函数：<br>    create temporary function  transDate as ‘cn.itcast.bigdata.hive.TransDate’;<br>5-测试函数：<br>    select transDate(“18/Aug/2019:12:30:05”);<br>6-删除临时函数<br>    DROP TEMPORARY FUNCTION transDate;</p>\n<p>UDTF<br>1-开发udtf程序：继承UDTF类，重写process方法<br>2-打成jar包<br>3-上传jar包到集群中，并添加到hive的环境变量中，在hive中执行<br>    add jar /export/datas/udtf.jar;<br>4-创建临时函数：<br>    create temporary function  transMap as ‘cn.itcast.bigdata.hive.UserUDTF’;<br>5-测试函数：<br>    第一种用法：直接调用<br>        select transMap(“uuid=root&amp;url=<a href=\"http://www.taobao.com&quot;/\">www.taobao.com&quot;</a>) as (userCol1,userCol2);<br>    第二种用法：和侧视图一起使用<br>        select deptno,deptname,a.* from tb_dept lateral view transMap(“uuid=root&amp;url=<a href=\"http://www.taobao.com&quot;/\">www.taobao.com&quot;</a>) a as col1,col2;<br>    注意：<br>        1-udtf只能直接select中使用<br>        2-不可以添加其他字段使用<br>        3-不可以嵌套调用<br>        4-不可以和group by/cluster by/distribute by/sort by一起使用</p>\n<p>UDAF<br>1-开发udaf程序：继承UDAF类，重写iterate方法<br>2-打成jar包<br>3-上传jar包到集群中，并添加到hive的环境变量中，在hive中执行<br>    add jar /export/datas/udaf.jar;<br>4-创建临时函数：<br>    create temporary function  userMax as ‘cn.itcast.bigdata.hive.UserUDAF’;<br>5-测试函数：<br>    select userMax(deptno) from tb_dept;</p>\n<h3 id=\"5-2UDAF\"><a href=\"#5-2UDAF\" class=\"headerlink\" title=\"5.2UDAF\"></a>5.2UDAF</h3><p>UDAF（User-Defined Aggregation Function）聚合函数，多进一出</p>\n<h4 id=\"窗口函数：SUM、AVG、COUNT、MAX、MIN\"><a href=\"#窗口函数：SUM、AVG、COUNT、MAX、MIN\" class=\"headerlink\" title=\"窗口函数：SUM、AVG、COUNT、MAX、MIN\"></a>窗口函数：SUM、AVG、COUNT、MAX、MIN</h4><p>功能：用于实现数据分区后的聚合<br>    -》语法：fun_name(col1) over (partition by col2 order by col3)<br>                实现功能    over  按照什么分区，分区内部按照什么排序<br>    -》示例：实现分区内的累加，其他的原理类似</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cookie1,2018-04-10,1</span><br><span class=\"line\">cookie1,2018-04-11,5</span><br><span class=\"line\">cookie1,2018-04-12,7</span><br><span class=\"line\">cookie1,2018-04-13,3</span><br><span class=\"line\">cookie2,2018-04-13,3</span><br><span class=\"line\">cookie2,2018-04-14,2</span><br><span class=\"line\">cookie2,2018-04-15,4</span><br><span class=\"line\">cookie1,2018-04-14,2</span><br><span class=\"line\">cookie1,2018-04-15,4</span><br><span class=\"line\">cookie1,2018-04-16,4</span><br><span class=\"line\">cookie2,2018-04-10,1</span><br><span class=\"line\">cookie2,2018-04-11,5</span><br><span class=\"line\">cookie2,2018-04-12,7</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--创建表</span></span><br><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">database</span> db_function;</span><br><span class=\"line\"><span class=\"keyword\">use</span> db_function;</span><br><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span> user_f1(</span><br><span class=\"line\">cookieid <span class=\"keyword\">string</span>,</span><br><span class=\"line\">daystr <span class=\"keyword\">string</span>,</span><br><span class=\"line\">pv <span class=\"built_in\">int</span></span><br><span class=\"line\">) <span class=\"keyword\">row</span> <span class=\"keyword\">format</span> <span class=\"keyword\">delimited</span> <span class=\"keyword\">fields</span> <span class=\"keyword\">terminated</span> <span class=\"keyword\">by</span> <span class=\"string\">&#x27;,&#x27;</span>;</span><br><span class=\"line\"><span class=\"comment\">--加载数据</span></span><br><span class=\"line\"><span class=\"keyword\">load</span> <span class=\"keyword\">data</span> <span class=\"keyword\">local</span> inpath <span class=\"string\">&#x27;/export/datas/window.txt&#x27;</span> <span class=\"keyword\">into</span> <span class=\"keyword\">table</span> user_f1;</span><br><span class=\"line\"><span class=\"keyword\">set</span> hive.exec.mode.local.auto=<span class=\"literal\">true</span>;</span><br><span class=\"line\"><span class=\"comment\">--实现分区内起始到当前行的pv累加，默认窗口：取第一行开始到当前行的和</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> </span><br><span class=\"line\">  cookieid,</span><br><span class=\"line\">  daystr,</span><br><span class=\"line\">  pv,</span><br><span class=\"line\">  <span class=\"keyword\">sum</span>(pv) <span class=\"keyword\">over</span>(<span class=\"keyword\">partition</span> <span class=\"keyword\">by</span> cookieid <span class=\"keyword\">order</span> <span class=\"keyword\">by</span> daystr) <span class=\"keyword\">as</span> pv1 </span><br><span class=\"line\"><span class=\"keyword\">from</span> </span><br><span class=\"line\">  user_f1;</span><br><span class=\"line\">   </span><br><span class=\"line\"><span class=\"comment\">--实现分区内所有pv的累加，不指定排序默认窗口：从第一行到最后一行</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> </span><br><span class=\"line\">  cookieid,</span><br><span class=\"line\">  daystr,</span><br><span class=\"line\">  pv,</span><br><span class=\"line\">  <span class=\"keyword\">sum</span>(pv) <span class=\"keyword\">over</span>(<span class=\"keyword\">partition</span> <span class=\"keyword\">by</span> cookieid ) <span class=\"keyword\">as</span> pv2</span><br><span class=\"line\"><span class=\"keyword\">from</span> </span><br><span class=\"line\">  user_f1;</span><br><span class=\"line\">  </span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"comment\">--手动指定窗口的大小：分区</span></span><br><span class=\"line\">rows between 起始位置 and 结束位置</span><br><span class=\"line\">rows between unbounded preceding and current row</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--实现分区内起始到当前行的pv累加</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> </span><br><span class=\"line\">  cookieid,</span><br><span class=\"line\">  daystr,</span><br><span class=\"line\">  pv,</span><br><span class=\"line\">  <span class=\"keyword\">sum</span>(pv) <span class=\"keyword\">over</span>(<span class=\"keyword\">partition</span> <span class=\"keyword\">by</span> cookieid <span class=\"keyword\">order</span> <span class=\"keyword\">by</span> daystr <span class=\"keyword\">rows</span> <span class=\"keyword\">between</span> <span class=\"keyword\">unbounded</span> <span class=\"keyword\">preceding</span> <span class=\"keyword\">and</span> <span class=\"keyword\">current</span> <span class=\"keyword\">row</span>) <span class=\"keyword\">as</span> pv3</span><br><span class=\"line\"><span class=\"keyword\">from</span> </span><br><span class=\"line\">  user_f1;</span><br><span class=\"line\"><span class=\"comment\">--实现分区内指定前N行到当前行的pv累加</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> </span><br><span class=\"line\">  cookieid,</span><br><span class=\"line\">  daystr,</span><br><span class=\"line\">  pv,</span><br><span class=\"line\">  <span class=\"keyword\">sum</span>(pv) <span class=\"keyword\">over</span>(<span class=\"keyword\">partition</span> <span class=\"keyword\">by</span> cookieid <span class=\"keyword\">order</span> <span class=\"keyword\">by</span> daystr <span class=\"keyword\">rows</span> <span class=\"keyword\">between</span> <span class=\"number\">3</span> <span class=\"keyword\">preceding</span> <span class=\"keyword\">and</span> <span class=\"keyword\">current</span> <span class=\"keyword\">row</span>) <span class=\"keyword\">as</span> pv4</span><br><span class=\"line\"><span class=\"keyword\">from</span> </span><br><span class=\"line\">  user_f1;</span><br><span class=\"line\"><span class=\"comment\">--实现分区内指定前N行到后N行的pv累加 </span></span><br><span class=\"line\"><span class=\"keyword\">select</span> </span><br><span class=\"line\">  cookieid,</span><br><span class=\"line\">  daystr,</span><br><span class=\"line\">  pv,</span><br><span class=\"line\">  <span class=\"keyword\">sum</span>(pv) <span class=\"keyword\">over</span>(<span class=\"keyword\">partition</span> <span class=\"keyword\">by</span> cookieid <span class=\"keyword\">order</span> <span class=\"keyword\">by</span> daystr <span class=\"keyword\">rows</span> <span class=\"keyword\">between</span> <span class=\"number\">3</span> <span class=\"keyword\">preceding</span> <span class=\"keyword\">and</span> <span class=\"number\">1</span> <span class=\"keyword\">following</span>) <span class=\"keyword\">as</span> pv5</span><br><span class=\"line\"><span class=\"keyword\">from</span> </span><br><span class=\"line\">  user_f1;</span><br><span class=\"line\"><span class=\"comment\">--实现分区内指定当前行到后N行的pv累加   </span></span><br><span class=\"line\"><span class=\"keyword\">select</span> </span><br><span class=\"line\">  cookieid,</span><br><span class=\"line\">  daystr,</span><br><span class=\"line\">  pv,</span><br><span class=\"line\">  <span class=\"keyword\">sum</span>(pv) <span class=\"keyword\">over</span>(<span class=\"keyword\">partition</span> <span class=\"keyword\">by</span> cookieid <span class=\"keyword\">order</span> <span class=\"keyword\">by</span> daystr <span class=\"keyword\">rows</span> <span class=\"keyword\">between</span> <span class=\"keyword\">current</span> <span class=\"keyword\">row</span> <span class=\"keyword\">and</span> <span class=\"keyword\">unbounded</span> <span class=\"keyword\">following</span>) <span class=\"keyword\">as</span> pv6</span><br><span class=\"line\"><span class=\"keyword\">from</span> </span><br><span class=\"line\">  user_f1;</span><br><span class=\"line\">  </span><br><span class=\"line\">  </span><br><span class=\"line\">- preceding：往前</span><br><span class=\"line\">- following：往后</span><br><span class=\"line\">- current row：当前行</span><br><span class=\"line\">- unbounded：起点</span><br><span class=\"line\">- unbounded preceding 表示从前面的起点</span><br><span class=\"line\">- unbounded following：表示到后面的终点</span><br></pre></td></tr></table></figure>\n<h4 id=\"窗口函数：LAG、LEAD、FIRST-VALUE、LAST-VALUE\"><a href=\"#窗口函数：LAG、LEAD、FIRST-VALUE、LAST-VALUE\" class=\"headerlink\" title=\"窗口函数：LAG、LEAD、FIRST_VALUE、LAST_VALUE\"></a>窗口函数：LAG、LEAD、FIRST_VALUE、LAST_VALUE</h4><p>FIRST_VALUE<br>    功能：取每个分区内某列的第一个值<br>    语法：FIRST_VALUE(col) over (partition by col1 order by col2)</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--取每个部门薪资最高的员工编号</span></span><br><span class=\"line\"><span class=\"keyword\">select</span></span><br><span class=\"line\">  empno,</span><br><span class=\"line\">  ename,</span><br><span class=\"line\">  salary,</span><br><span class=\"line\">  deptno,</span><br><span class=\"line\">  <span class=\"keyword\">FIRST_VALUE</span>(ename) <span class=\"keyword\">over</span> (<span class=\"keyword\">partition</span> <span class=\"keyword\">by</span> deptno <span class=\"keyword\">order</span> <span class=\"keyword\">by</span> salary <span class=\"keyword\">desc</span>) <span class=\"keyword\">as</span> <span class=\"keyword\">first</span></span><br><span class=\"line\"><span class=\"keyword\">from</span></span><br><span class=\"line\">  db_emp.tb_emp_normal;</span><br></pre></td></tr></table></figure>\n<p>LAST_VALUE<br>    功能：取每个分区内某列的最后一个值<br>    语法：LAST_VALUE() over (partition by col1 order by col2)<br>    注意：默认窗口是从第一条到当前条</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--取每个部门薪资最低的员工编号</span></span><br><span class=\"line\"><span class=\"keyword\">select</span></span><br><span class=\"line\">  empno,</span><br><span class=\"line\">  ename,</span><br><span class=\"line\">  salary,</span><br><span class=\"line\">  deptno,</span><br><span class=\"line\">  <span class=\"keyword\">LAST_VALUE</span>(empno) <span class=\"keyword\">over</span> (<span class=\"keyword\">partition</span> <span class=\"keyword\">by</span> deptno <span class=\"keyword\">order</span> <span class=\"keyword\">by</span> salary <span class=\"keyword\">desc</span>) <span class=\"keyword\">as</span> <span class=\"keyword\">last</span></span><br><span class=\"line\"><span class=\"keyword\">from</span></span><br><span class=\"line\">  db_emp.tb_emp_normal; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">select</span></span><br><span class=\"line\">  empno,</span><br><span class=\"line\">  ename,</span><br><span class=\"line\">  salary,</span><br><span class=\"line\">  deptno,</span><br><span class=\"line\">  <span class=\"keyword\">LAST_VALUE</span>(empno) <span class=\"keyword\">over</span> (<span class=\"keyword\">partition</span> <span class=\"keyword\">by</span> deptno <span class=\"keyword\">order</span> <span class=\"keyword\">by</span> salary <span class=\"keyword\">desc</span> <span class=\"keyword\">rows</span> <span class=\"keyword\">between</span> <span class=\"keyword\">unbounded</span> <span class=\"keyword\">preceding</span> <span class=\"keyword\">and</span> <span class=\"keyword\">unbounded</span> <span class=\"keyword\">following</span>) <span class=\"keyword\">as</span> <span class=\"keyword\">last</span></span><br><span class=\"line\"><span class=\"keyword\">from</span></span><br><span class=\"line\">  db_emp.tb_emp_normal;</span><br></pre></td></tr></table></figure>\n<p>LAG<br>    功能：取每个分区内某列的前N个值<br>    语法：LAG(col,N,defaultValue) over (partition by col1 order by col2)</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span></span><br><span class=\"line\">  empno,</span><br><span class=\"line\">  ename,</span><br><span class=\"line\">  salary,</span><br><span class=\"line\">  deptno,</span><br><span class=\"line\">  LAG(salary,<span class=\"number\">1</span>,<span class=\"number\">0</span>) <span class=\"keyword\">over</span> (<span class=\"keyword\">partition</span> <span class=\"keyword\">by</span> deptno <span class=\"keyword\">order</span> <span class=\"keyword\">by</span> salary) <span class=\"keyword\">as</span> deptno2</span><br><span class=\"line\"><span class=\"keyword\">from</span></span><br><span class=\"line\">  db_emp.tb_emp_normal;</span><br></pre></td></tr></table></figure>\n<p>LEAD<br>    功能：向后取每个分区内某列的前N个值<br>    语法：LEAD(col,N,defaultValue) over (partition by col1 order by col2)</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span></span><br><span class=\"line\">  empno,</span><br><span class=\"line\">  ename,</span><br><span class=\"line\">  salary,</span><br><span class=\"line\">  deptno,</span><br><span class=\"line\">  <span class=\"keyword\">LEAD</span>(salary,<span class=\"number\">1</span>,<span class=\"number\">0</span>) <span class=\"keyword\">over</span> (<span class=\"keyword\">partition</span> <span class=\"keyword\">by</span> deptno <span class=\"keyword\">order</span> <span class=\"keyword\">by</span> salary) <span class=\"keyword\">as</span> deptno2</span><br><span class=\"line\"><span class=\"keyword\">from</span></span><br><span class=\"line\">  db_emp.tb_emp_normal;</span><br></pre></td></tr></table></figure>\n\n\n\n\n<h4 id=\"分析函数：ROW-NUMBER、RANK、DENSE-RANK、NTILE\"><a href=\"#分析函数：ROW-NUMBER、RANK、DENSE-RANK、NTILE\" class=\"headerlink\" title=\"分析函数：ROW_NUMBER、RANK、DENSE_RANK、NTILE\"></a>分析函数：ROW_NUMBER、RANK、DENSE_RANK、NTILE</h4><p>==ROW_NUMBER==<br>    功能：用于实现分区内记录编号<br>    语法：row_number() over (partition by col1 order by col2)</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--统计每个部门薪资最高的前两名</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> </span><br><span class=\"line\">(<span class=\"keyword\">select</span></span><br><span class=\"line\">  empno,</span><br><span class=\"line\">  ename,</span><br><span class=\"line\">  salary,</span><br><span class=\"line\">  deptno,</span><br><span class=\"line\">  row_number() <span class=\"keyword\">over</span> (<span class=\"keyword\">partition</span> <span class=\"keyword\">by</span> deptno <span class=\"keyword\">order</span> <span class=\"keyword\">by</span> salary <span class=\"keyword\">desc</span>) <span class=\"keyword\">as</span> <span class=\"keyword\">numb</span></span><br><span class=\"line\"><span class=\"keyword\">from</span></span><br><span class=\"line\">  db_emp.tb_emp_normal) t <span class=\"keyword\">where</span> t.numb &lt; <span class=\"number\">3</span>;</span><br></pre></td></tr></table></figure>\n<p>RANK<br>    功能：用于实现分区内排名编号[会留空位]<br>        与row_number的区别：<br>            row_number：如果排序时数值相同，继续编号<br>            rank：如果排序时数值相同，编号不变，但留下空位<br>    语法：rank() over (partition by col1 order by col2)</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--统计每个部门薪资排名</span></span><br><span class=\"line\"><span class=\"keyword\">select</span></span><br><span class=\"line\">  empno,</span><br><span class=\"line\">  ename,</span><br><span class=\"line\">  salary,</span><br><span class=\"line\">  deptno,</span><br><span class=\"line\">  <span class=\"keyword\">rank</span>() <span class=\"keyword\">over</span> (<span class=\"keyword\">partition</span> <span class=\"keyword\">by</span> deptno <span class=\"keyword\">order</span> <span class=\"keyword\">by</span> salary <span class=\"keyword\">desc</span>) <span class=\"keyword\">as</span> <span class=\"keyword\">numb</span></span><br><span class=\"line\"><span class=\"keyword\">from</span></span><br><span class=\"line\">  db_emp.tb_emp_normal;</span><br></pre></td></tr></table></figure>\n<p>DENSE_RANK<br>    功能：用于实现分区内排名编号[不留空位]<br>        与rank的区别：<br>            ==row_number：如果排序时数值相同，编号不变，并留下排名空位==<br>            ==dense_rank：如果排序时数值相同，编号不变，不留空位==<br>            ==rank：如果排序时数值相同，编号不变，但留下空位==<br>    语法：dense_rank() over (partition by col1 order by col2)</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--统计每个部门薪资排名</span></span><br><span class=\"line\"><span class=\"keyword\">select</span></span><br><span class=\"line\">  empno,</span><br><span class=\"line\">  ename,</span><br><span class=\"line\">  salary,</span><br><span class=\"line\">  deptno,</span><br><span class=\"line\">  <span class=\"keyword\">dense_rank</span>() <span class=\"keyword\">over</span> (<span class=\"keyword\">partition</span> <span class=\"keyword\">by</span> deptno <span class=\"keyword\">order</span> <span class=\"keyword\">by</span> salary <span class=\"keyword\">desc</span>) <span class=\"keyword\">as</span> <span class=\"keyword\">numb</span></span><br><span class=\"line\"><span class=\"keyword\">from</span></span><br><span class=\"line\">  db_emp.tb_emp_normal;</span><br></pre></td></tr></table></figure>\n<p>NTILE<br>    功能：将每个分区内排序后的结果均分成N份【如果不能均分，优先分配编号小的】<br>        本质：将每个分区拆分成更小的分区<br>    语法：NTILE(N) over (partition by col1 order by col2)</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--统计每个部门薪资排名，将每个部门的薪资分为两个部分，区分高薪和低薪</span></span><br><span class=\"line\"><span class=\"keyword\">select</span></span><br><span class=\"line\">  empno,</span><br><span class=\"line\">  ename,</span><br><span class=\"line\">  salary,</span><br><span class=\"line\">  deptno,</span><br><span class=\"line\">  NTILE(<span class=\"number\">2</span>) <span class=\"keyword\">over</span> (<span class=\"keyword\">partition</span> <span class=\"keyword\">by</span> deptno <span class=\"keyword\">order</span> <span class=\"keyword\">by</span> salary <span class=\"keyword\">desc</span>) <span class=\"keyword\">as</span> <span class=\"keyword\">numb</span></span><br><span class=\"line\"><span class=\"keyword\">from</span></span><br><span class=\"line\">  db_emp.tb_emp_normal;</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"5-3UDTF\"><a href=\"#5-3UDTF\" class=\"headerlink\" title=\"5.3UDTF\"></a>5.3UDTF</h3><p>UDTF（User-Defined Table-Generating Functions）表生成函数 一进多出</p>\n<h4 id=\"lateral-view\"><a href=\"#lateral-view\" class=\"headerlink\" title=\"lateral view\"></a>lateral view</h4><p>分类：视图<br>功能：配合UDTF来使用,把某一行数据拆分成多行数据<br>    与UDTF直接使用的区别：<br>        ==很多的UDTF不能将结果与源表进行关联，使用lateral view==<br>        可以将UDTF拆分的单个字段数据与原始表数据关联上==<br>使用方式：<br>    tabel A lateral view UDTF(xxx) 视图名 as a,b,c</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--准备数据:vim /export/datas/lateral.txt</span></span><br><span class=\"line\">1\thttp://facebook.com/path/p1.php?query=1</span><br><span class=\"line\">2\thttp://www.baidu.com/news/index.jsp?uuid=frank</span><br><span class=\"line\">3\thttp://www.jd.com/index?source=baidu</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--创建表</span></span><br><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span> tb_url(</span><br><span class=\"line\"><span class=\"keyword\">id</span> <span class=\"built_in\">int</span>,</span><br><span class=\"line\"><span class=\"keyword\">url</span> <span class=\"keyword\">string</span></span><br><span class=\"line\">) <span class=\"keyword\">row</span> <span class=\"keyword\">format</span> <span class=\"keyword\">delimited</span> <span class=\"keyword\">fields</span> <span class=\"keyword\">terminated</span> <span class=\"keyword\">by</span> <span class=\"string\">&#x27;\\t&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--加载数据</span></span><br><span class=\"line\"><span class=\"keyword\">load</span> <span class=\"keyword\">data</span> <span class=\"keyword\">local</span> inpath <span class=\"string\">&#x27;/export/datas/lateral.txt&#x27;</span> <span class=\"keyword\">into</span> <span class=\"keyword\">table</span> tb_url;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--使用UDTF解析</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> parse_url_tuple(<span class=\"keyword\">url</span>, <span class=\"string\">&#x27;HOST&#x27;</span>) <span class=\"keyword\">from</span> tb_url;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--使用UDTF+lateral view</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> a.id,b.* <span class=\"keyword\">from</span> tb_url a <span class=\"keyword\">lateral</span> <span class=\"keyword\">view</span> parse_url_tuple(<span class=\"keyword\">url</span>, <span class=\"string\">&#x27;HOST&#x27;</span>) b <span class=\"keyword\">as</span> host;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--对比</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">id</span>,parse_url_tuple(<span class=\"keyword\">url</span>, <span class=\"string\">&#x27;HOST&#x27;</span>) <span class=\"keyword\">from</span> tb_url;<span class=\"comment\">--失败，UDTF函数不能与字段连用</span></span><br></pre></td></tr></table></figure>\n\n\n<h4 id=\"explode\"><a href=\"#explode\" class=\"headerlink\" title=\"explode\"></a>explode</h4><p>功能：函数可以将一个array或者map展开<br>    explode(array)：<br>        将array列表里的每个元素生成一行<br>    explode(map)：<br>        每一对元素作为一行，key为一列，value为一列<br>使用方式：<br>    1-直接使用<br>    2-与lateral view连用</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--实现wordcount【explode(array)】</span></span><br><span class=\"line\">\t<span class=\"keyword\">select</span> <span class=\"keyword\">explode</span>(<span class=\"keyword\">split</span>(word,<span class=\"string\">&quot; &quot;</span>)) <span class=\"keyword\">from</span> wc1;</span><br><span class=\"line\"><span class=\"comment\">--将兴趣爱好展开【explode(map)】</span></span><br><span class=\"line\">\t<span class=\"keyword\">select</span> <span class=\"keyword\">explode</span>(hobby) <span class=\"keyword\">from</span> complex_map;</span><br><span class=\"line\"><span class=\"comment\">--与侧视图连用</span></span><br><span class=\"line\">\t<span class=\"keyword\">select</span> a.name,b.* <span class=\"keyword\">from</span> complex_map a <span class=\"keyword\">lateral</span> <span class=\"keyword\">view</span> <span class=\"keyword\">explode</span>(hobby) b <span class=\"keyword\">as</span> hobby,deep;</span><br></pre></td></tr></table></figure>\n<h4 id=\"reflect\"><a href=\"#reflect\" class=\"headerlink\" title=\"reflect\"></a>reflect</h4><p>功能：用于在Hive中直接调用Java中静态类的方法<br>    用法：reflect(classname,method,args)</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> reflect(<span class=\"string\">&quot;java.util.UUID&quot;</span>, <span class=\"string\">&quot;randomUUID&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">select</span> reflect(<span class=\"string\">&quot;java.lang.Math&quot;</span>,<span class=\"string\">&quot;max&quot;</span>,<span class=\"number\">20</span>,<span class=\"number\">30</span>);</span><br><span class=\"line\"><span class=\"keyword\">select</span> reflect(<span class=\"string\">&quot;org.apache.commons.lang.math.NumberUtils&quot;</span>,<span class=\"string\">&quot;isNumber&quot;</span>,<span class=\"string\">&quot;123&quot;</span>);</span><br></pre></td></tr></table></figure>\n<h4 id=\"get-json-object\"><a href=\"#get-json-object\" class=\"headerlink\" title=\"get_json_object\"></a>get_json_object</h4><p>处理json格式数据</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--创建数据：vim /export/datas/hivedata.json</span></span><br><span class=\"line\">&#123;&quot;id&quot;: 1701439105,&quot;ids&quot;: [2154137571,3889177061],&quot;total_number&quot;: 493&#125;</span><br><span class=\"line\">&#123;&quot;id&quot;: 1701439106,&quot;ids&quot;: [2154137571,3889177061],&quot;total_number&quot;: 494&#125;</span><br><span class=\"line\"><span class=\"comment\">--创建表：</span></span><br><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span> tb_json_test1 (</span><br><span class=\"line\"><span class=\"keyword\">json</span> <span class=\"keyword\">string</span></span><br><span class=\"line\">);</span><br><span class=\"line\"><span class=\"comment\">--加载数据</span></span><br><span class=\"line\"><span class=\"keyword\">load</span> <span class=\"keyword\">data</span> <span class=\"keyword\">local</span> inpath <span class=\"string\">&#x27;/export/datas/hivedata.json&#x27;</span> <span class=\"keyword\">into</span> <span class=\"keyword\">table</span> tb_json_test1;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--处理读取</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> </span><br><span class=\"line\">  get_json_object(t.json,<span class=\"string\">&#x27;$.id&#x27;</span>), </span><br><span class=\"line\">  get_json_object(t.json,<span class=\"string\">&#x27;$.total_number&#x27;</span>) </span><br><span class=\"line\"><span class=\"keyword\">from</span> </span><br><span class=\"line\">  tb_json_test1 t ;</span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"keyword\">select</span> </span><br><span class=\"line\">  t2.* </span><br><span class=\"line\"><span class=\"keyword\">from</span> </span><br><span class=\"line\">  tb_json_test1 t1 </span><br><span class=\"line\"><span class=\"keyword\">lateral</span> <span class=\"keyword\">view</span> </span><br><span class=\"line\">  json_tuple(t1.json, <span class=\"string\">&#x27;id&#x27;</span>, <span class=\"string\">&#x27;total_number&#x27;</span>) t2 <span class=\"keyword\">as</span> c1,c2;</span><br></pre></td></tr></table></figure>\n\n\n<h4 id=\"COALESCE\"><a href=\"#COALESCE\" class=\"headerlink\" title=\"COALESCE\"></a>COALESCE</h4><p>COALESCE(col,0)</p>\n<p>如果单列值为null，替换为默认值0</p>\n<p>concat</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">concat( &#x27;liubei&#x27;,&#x27;xihuan&#x27;,&#x27;xiaoqiao&#x27; )</span><br><span class=\"line\">liubeixihuanxiaoqiao</span><br></pre></td></tr></table></figure>\n\n\n<h4 id=\"concat-ws-amp-collect-set\"><a href=\"#concat-ws-amp-collect-set\" class=\"headerlink\" title=\"concat_ws&amp;collect_set\"></a>concat_ws&amp;collect_set</h4><p>concat_ws(‘|’, collect_set(c_id))</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">id    name</span><br><span class=\"line\">1001    A</span><br><span class=\"line\">1001    B</span><br><span class=\"line\">1001    C</span><br><span class=\"line\"><span class=\"comment\">-------------------------</span></span><br><span class=\"line\">id      name</span><br><span class=\"line\">1001    A,B,C</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"keyword\">id</span>,collect_list(<span class=\"keyword\">name</span>) <span class=\"keyword\">from</span> tb_ss <span class=\"keyword\">group</span> <span class=\"keyword\">by</span> <span class=\"keyword\">id</span></span><br><span class=\"line\"></span><br><span class=\"line\">如果需要去重课可以使用collect_set,返回的是数组</span><br><span class=\"line\"><span class=\"keyword\">concat_ws</span>(<span class=\"string\">&#x27;|&#x27;</span>,collect_set(c_id))可以将数组内容按|拼接</span><br><span class=\"line\"></span><br><span class=\"line\">如果该列不是<span class=\"keyword\">string</span>，先用<span class=\"keyword\">cast</span>(<span class=\"keyword\">col</span>) <span class=\"keyword\">as</span> <span class=\"keyword\">string</span> 转换为<span class=\"keyword\">string</span>类型</span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"keyword\">id</span>,<span class=\"keyword\">concat_ws</span>(<span class=\"string\">&#x27;,&#x27;</span>,collect_list(<span class=\"keyword\">cast</span> (<span class=\"keyword\">name</span> <span class=\"keyword\">as</span> <span class=\"keyword\">string</span>))) <span class=\"keyword\">from</span> tb_ss <span class=\"keyword\">group</span> <span class=\"keyword\">by</span> <span class=\"keyword\">id</span></span><br></pre></td></tr></table></figure>\n\n\n<h4 id=\"instr\"><a href=\"#instr\" class=\"headerlink\" title=\"instr\"></a>instr</h4><p>查找字符串str中子字符串substr的位置， 如果查找失败将返回0，如果任一参数为Null将返回null，注意位置为从1开始的 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">instr(string str, string substr)</span><br></pre></td></tr></table></figure>\n\n\n<h4 id=\"substring\"><a href=\"#substring\" class=\"headerlink\" title=\"substring\"></a>substring</h4><p>截取字符串</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hello</span><br><span class=\"line\">substring(col,1,2) -&gt; &#39;he&#39;</span><br><span class=\"line\">substring(col,-2,2) -&gt; &#39;lo&#39;</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"5-4常见自带的hive函数\"><a href=\"#5-4常见自带的hive函数\" class=\"headerlink\" title=\"5.4常见自带的hive函数\"></a>5.4常见自带的hive函数</h3><p>show functions;</p>\n<p>使用desc function  extended 函数名查看帮助</p>\n<p>•UNIX时间戳转日期函数: from_unixtime</p>\n<p>• 获取当前UNIX时间戳函数: unix_timestamp</p>\n<p>•日期转UNIX时间戳函数: unix_timestamp</p>\n<p>• 指定格式日期转UNIX时间戳函数: unix_timestamp</p>\n<p>•日期时间转日期函数: to_date</p>\n<p>•日期转年函数: year</p>\n<p>• 日期转月函数: month</p>\n<p>• 日期转天函数: day</p>\n<p>• 日期转小时函数: hour</p>\n<p>• 日期转分钟函数: minute</p>\n<p>• 日期转秒函数: second</p>\n<p>• 日期转周函数: weekofyear</p>\n<p>• 两个日期之间有多少个月:months_between(‘2020-01-10’, u.birthday)(多用户得出用户年龄)</p>\n<p>• 日期比较函数: datediff</p>\n<p>• 日期增加函数: date_add</p>\n<p>• 日期减少函数: date_sub</p>\n<p>• 取当前天的下一周的周几：next_day(“xxxx-xx-xx”,”Mo”)</p>\n<p>• 取当前月的最后一天：last_day(“xxxx-xx-xx”)</p>\n<p>•If函数: if</p>\n<p>•非空查找函数: COALESCE</p>\n<p>•条件判断函数：CASE</p>\n<p>•字符串长度函数：length</p>\n<p>•字符串反转函数：reverse</p>\n<p>•字符串连接函数：concat</p>\n<p>• 带分隔符字符串连接函数：concat_ws</p>\n<p>• 字符串截取函数：substr,substring</p>\n<p>•正则表达式替换函数：regexp_replace</p>\n<p>•正则表达式解析函数：regexp_extract</p>\n<p>•URL解析函数：parse_url</p>\n<p>​                            parse_url_tuple</p>\n<p>•json解析函数：get_json_object</p>\n<p>​                            json_tuple</p>\n<p>•分割字符串函数: split</p>\n<p>•集合查找函数: find_in_set</p>\n<h3 id=\"5-5关于union和union-all\"><a href=\"#5-5关于union和union-all\" class=\"headerlink\" title=\"5.5关于union和union all\"></a>5.5关于union和union all</h3><p>总结分析</p>\n<ol>\n<li><p>子查询相当于表名，使用 from 关键字需要指定真实表名或表别名。</p>\n</li>\n<li><p>hive 不支持union ，只支持union all </p>\n</li>\n<li><p>子查询中使用union all 时，在子查询里不能使用count、sum 等 聚合函数 </p>\n</li>\n<li><p>两表直接进行union all 可以使用count、sum 等聚合函数 </p>\n</li>\n<li><p>两张表进行union all 取相同的字段名称，可正常输出指定数据内容，且结果为两张表的结果集</p>\n</li>\n</ol>\n<h2 id=\"6-hive语法要点\"><a href=\"#6-hive语法要点\" class=\"headerlink\" title=\"6.hive语法要点\"></a>6.hive语法要点</h2><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(1).Hive不支持join的非等值连接,不支持or</span><br><span class=\"line\">分别举例如下及实现解决办法。</span><br><span class=\"line\">  不支持不等值连接</span><br><span class=\"line\">       错误:<span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> a <span class=\"keyword\">inner</span> <span class=\"keyword\">join</span> b <span class=\"keyword\">on</span> a.id&lt;&gt;b.id</span><br><span class=\"line\">       替代方法:<span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> a <span class=\"keyword\">inner</span> <span class=\"keyword\">join</span> b <span class=\"keyword\">on</span> a.id=b.id <span class=\"keyword\">and</span> a.id <span class=\"keyword\">is</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\"> 不支持or</span><br><span class=\"line\">       错误:<span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> a <span class=\"keyword\">inner</span> <span class=\"keyword\">join</span> b <span class=\"keyword\">on</span> a.id=b.id <span class=\"keyword\">or</span> a.name=b.name</span><br><span class=\"line\">       替代方法:<span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> a <span class=\"keyword\">inner</span> <span class=\"keyword\">join</span> b <span class=\"keyword\">on</span> a.id=b.id</span><br><span class=\"line\">                <span class=\"keyword\">union</span> <span class=\"keyword\">all</span></span><br><span class=\"line\">                <span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> a <span class=\"keyword\">inner</span> <span class=\"keyword\">join</span> b <span class=\"keyword\">on</span> a.name=b.name</span><br><span class=\"line\">  两个<span class=\"keyword\">sql</span> <span class=\"keyword\">union</span> <span class=\"keyword\">all</span>的字段名必须一样或者列别名要一样。</span><br><span class=\"line\">        </span><br><span class=\"line\">(<span class=\"number\">2</span>).分号字符:不能智能识别<span class=\"keyword\">concat</span>(‘;’,key)，只会将‘；’当做SQL结束符号。</span><br><span class=\"line\">    •分号是SQL语句结束标记，在HiveQL中也是，但是在HiveQL中，对分号的识别没有那么智慧，例如：</span><br><span class=\"line\">        •<span class=\"keyword\">select</span> <span class=\"keyword\">concat</span>(<span class=\"keyword\">key</span>,<span class=\"keyword\">concat</span>(<span class=\"string\">&#x27;;&#x27;</span>,<span class=\"keyword\">key</span>)) <span class=\"keyword\">from</span> dual;</span><br><span class=\"line\">    •但HiveQL在解析语句时提示：</span><br><span class=\"line\">        FAILED: Parse Error: line 0:-1 mismatched input &#x27;&lt;EOF&gt;&#x27; expecting ) in function specification</span><br><span class=\"line\">    •解决的办法是，使用分号的八进制的ASCII码进行转义，那么上述语句应写成：</span><br><span class=\"line\">        •<span class=\"keyword\">select</span> <span class=\"keyword\">concat</span>(<span class=\"keyword\">key</span>,<span class=\"keyword\">concat</span>(<span class=\"string\">&#x27;\\073&#x27;</span>,<span class=\"keyword\">key</span>)) <span class=\"keyword\">from</span> dual;</span><br><span class=\"line\"></span><br><span class=\"line\">(3).不支持<span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> 表 <span class=\"keyword\">Values</span>（）, <span class=\"keyword\">UPDATE</span>, <span class=\"keyword\">DELETE</span>等操作.这样的话，就不要很复杂的锁机制来读写数据。</span><br><span class=\"line\">    <span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> syntax <span class=\"keyword\">is</span> <span class=\"keyword\">only</span> available <span class=\"keyword\">starting</span> <span class=\"keyword\">in</span> <span class=\"keyword\">version</span> <span class=\"number\">0.8</span>。<span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span>就是在表或分区中追加数据。</span><br><span class=\"line\"></span><br><span class=\"line\">(<span class=\"number\">4</span>).HiveQL中<span class=\"keyword\">String</span>类型的字段若是空(<span class=\"keyword\">empty</span>)字符串, 即长度为<span class=\"number\">0</span>, 那么对它进行<span class=\"keyword\">IS</span> <span class=\"literal\">NULL</span>的判断结果是<span class=\"literal\">False</span>，使用<span class=\"keyword\">left</span> <span class=\"keyword\">join</span>可以进行筛选行。</span><br><span class=\"line\"></span><br><span class=\"line\">(<span class=\"number\">5</span>).不支持 ‘&lt; dt &lt;’这种格式的范围查找，可以用dt <span class=\"keyword\">in</span>(”,”)或者<span class=\"keyword\">between</span>替代。</span><br><span class=\"line\"></span><br><span class=\"line\">(<span class=\"number\">6</span>).Hive不支持将数据插入现有的表或分区中，仅支持覆盖重写整个表，示例如下：</span><br><span class=\"line\">    <span class=\"keyword\">INSERT</span> OVERWRITE <span class=\"keyword\">TABLE</span> t1 <span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> t2;</span><br><span class=\"line\">    </span><br><span class=\"line\">(7).group by的字段,必须是<span class=\"keyword\">select</span>后面的字段，<span class=\"keyword\">select</span>后面的字段不能比<span class=\"keyword\">group</span> <span class=\"keyword\">by</span>的字段多.</span><br><span class=\"line\">    如果<span class=\"keyword\">select</span>后面有聚合函数,则该<span class=\"keyword\">select</span>语句中必须有<span class=\"keyword\">group</span> <span class=\"keyword\">by</span>语句</span><br><span class=\"line\">    而且<span class=\"keyword\">group</span> <span class=\"keyword\">by</span>后面不能使用别名</span><br><span class=\"line\">    </span><br><span class=\"line\">(<span class=\"number\">8</span>).hive的<span class=\"number\">0.13</span>版之前<span class=\"keyword\">select</span> , <span class=\"keyword\">where</span> 及 <span class=\"keyword\">having</span> 之后不能跟子查询语句(一般使用<span class=\"keyword\">left</span> <span class=\"keyword\">join</span>、<span class=\"keyword\">right</span> <span class=\"keyword\">join</span> 或者<span class=\"keyword\">inner</span> <span class=\"keyword\">join</span>替代)</span><br><span class=\"line\"></span><br><span class=\"line\">(<span class=\"number\">9</span>).先<span class=\"keyword\">join</span>(及<span class=\"keyword\">inner</span> <span class=\"keyword\">join</span>) 然后<span class=\"keyword\">left</span> <span class=\"keyword\">join</span>或<span class=\"keyword\">right</span> <span class=\"keyword\">join</span></span><br><span class=\"line\"></span><br><span class=\"line\">(<span class=\"number\">10</span>).hive不支持<span class=\"keyword\">group_concat</span>方法,可用 <span class=\"keyword\">concat_ws</span>(<span class=\"string\">&#x27;|&#x27;</span>, collect_set(<span class=\"keyword\">str</span>)) 实现</span><br><span class=\"line\"></span><br><span class=\"line\">(<span class=\"number\">11</span>).not <span class=\"keyword\">in</span> 后不能包含查询语句,可用<span class=\"keyword\">left</span> <span class=\"keyword\">join</span> tmp <span class=\"keyword\">on</span> tableName.id = tmp.id <span class=\"keyword\">where</span> tmp.id <span class=\"keyword\">is</span> <span class=\"literal\">null</span> 替代实现</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">1.</span><span class=\"keyword\">case</span> <span class=\"keyword\">when</span> ... <span class=\"keyword\">then</span> ... <span class=\"keyword\">else</span> ... <span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">2.</span><span class=\"keyword\">length</span>(<span class=\"keyword\">string</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">3.</span><span class=\"keyword\">cast</span>(<span class=\"keyword\">string</span> <span class=\"keyword\">as</span> <span class=\"built_in\">bigint</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">4.</span><span class=\"keyword\">rand</span>()       返回一个<span class=\"number\">0</span>到<span class=\"number\">1</span>范围内的随机数</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">5.</span><span class=\"keyword\">ceiling</span>(<span class=\"keyword\">double</span>)    向上取整</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">6.</span><span class=\"keyword\">substr</span>(<span class=\"keyword\">string</span> A, <span class=\"built_in\">int</span> <span class=\"keyword\">start</span>, <span class=\"built_in\">int</span> <span class=\"keyword\">len</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">7.</span>collect_set(<span class=\"keyword\">col</span>)函数只接受基本数据类型，它的主要作用是将某字段的值进行去重汇总，产生<span class=\"built_in\">array</span>类型字段</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">8.</span><span class=\"keyword\">concat</span>()函数</span><br><span class=\"line\">    <span class=\"number\">1</span>、功能：将多个字符串连接成一个字符串。</span><br><span class=\"line\">    <span class=\"number\">2</span>、语法：<span class=\"keyword\">concat</span>(str1, str2,...)</span><br><span class=\"line\">    返回结果为连接参数产生的字符串，如果有任何一个参数为<span class=\"literal\">null</span>，则返回值为<span class=\"literal\">null</span>。</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"number\">9.</span><span class=\"keyword\">concat_ws</span>()函数</span><br><span class=\"line\">    <span class=\"number\">1</span>、功能：和<span class=\"keyword\">concat</span>()一样，将多个字符串连接成一个字符串，但是可以一次性指定分隔符～（<span class=\"keyword\">concat_ws</span>就是<span class=\"keyword\">concat</span> <span class=\"keyword\">with</span> separator）</span><br><span class=\"line\">    <span class=\"number\">2</span>、语法：<span class=\"keyword\">concat_ws</span>(separator, str1, str2, ...)</span><br><span class=\"line\">    说明：第一个参数指定分隔符。需要注意的是分隔符不能为<span class=\"literal\">null</span>，如果为<span class=\"literal\">null</span>，则返回结果为<span class=\"literal\">null</span>。</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"number\">10.</span>nvl(expr1, expr2)：空值转换函数  nvl(x,y)    <span class=\"keyword\">Returns</span> y <span class=\"keyword\">if</span> x <span class=\"keyword\">is</span> <span class=\"literal\">null</span> <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> x</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">11.</span><span class=\"keyword\">if</span>(<span class=\"built_in\">boolean</span> testCondition, T valueTrue, T valueFalse)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">12.</span>row_number()<span class=\"keyword\">over</span>()分组排序功能,<span class=\"keyword\">over</span>()里头的分组以及排序的执行晚于 <span class=\"keyword\">where</span> <span class=\"keyword\">group</span> <span class=\"keyword\">by</span>  <span class=\"keyword\">order</span> <span class=\"keyword\">by</span> 的执行。</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">13.</span>获取年、月、日、小时、分钟、秒、当年第几周</span><br><span class=\"line\">    <span class=\"keyword\">select</span> </span><br><span class=\"line\">        <span class=\"keyword\">year</span>(<span class=\"string\">&#x27;2018-02-27 10:00:00&#x27;</span>)       <span class=\"keyword\">as</span> <span class=\"keyword\">year</span></span><br><span class=\"line\">        ,<span class=\"keyword\">month</span>(<span class=\"string\">&#x27;2018-02-27 10:00:00&#x27;</span>)      <span class=\"keyword\">as</span> <span class=\"keyword\">month</span></span><br><span class=\"line\">        ,<span class=\"keyword\">day</span>(<span class=\"string\">&#x27;2018-02-27 10:00:00&#x27;</span>)        <span class=\"keyword\">as</span> <span class=\"keyword\">day</span></span><br><span class=\"line\">        ,<span class=\"keyword\">hour</span>(<span class=\"string\">&#x27;2018-02-27 10:00:00&#x27;</span>)       <span class=\"keyword\">as</span> <span class=\"keyword\">hour</span></span><br><span class=\"line\">        ,<span class=\"keyword\">minute</span>(<span class=\"string\">&#x27;2018-02-27 10:00:00&#x27;</span>)     <span class=\"keyword\">as</span> <span class=\"keyword\">minute</span></span><br><span class=\"line\">        ,<span class=\"keyword\">second</span>(<span class=\"string\">&#x27;2018-02-27 10:00:00&#x27;</span>)     <span class=\"keyword\">as</span> <span class=\"keyword\">second</span></span><br><span class=\"line\">        ,<span class=\"keyword\">weekofyear</span>(<span class=\"string\">&#x27;2018-02-27 10:00:00&#x27;</span>) <span class=\"keyword\">as</span> <span class=\"keyword\">weekofyear</span></span><br><span class=\"line\">  获取当前时间:</span><br><span class=\"line\">        <span class=\"number\">1</span>).current_timestamp</span><br><span class=\"line\">        <span class=\"number\">2</span>).unix_timestamp()</span><br><span class=\"line\">        <span class=\"number\">3</span>).from_unixtime(<span class=\"keyword\">unix_timestamp</span>())</span><br><span class=\"line\">        <span class=\"number\">4</span>).CURRENT_DATE</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"7-hive优化\"><a href=\"#7-hive优化\" class=\"headerlink\" title=\"7.hive优化\"></a>7.hive优化</h2><h3 id=\"7-1大表join大表优化\"><a href=\"#7-1大表join大表优化\" class=\"headerlink\" title=\"7.1大表join大表优化\"></a>7.1大表join大表优化</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br><span class=\"line\">320</span><br><span class=\"line\">321</span><br><span class=\"line\">322</span><br><span class=\"line\">323</span><br><span class=\"line\">324</span><br><span class=\"line\">325</span><br><span class=\"line\">326</span><br><span class=\"line\">327</span><br><span class=\"line\">328</span><br><span class=\"line\">329</span><br><span class=\"line\">330</span><br><span class=\"line\">331</span><br><span class=\"line\">332</span><br><span class=\"line\">333</span><br><span class=\"line\">334</span><br><span class=\"line\">335</span><br><span class=\"line\">336</span><br><span class=\"line\">337</span><br><span class=\"line\">338</span><br><span class=\"line\">339</span><br><span class=\"line\">340</span><br><span class=\"line\">341</span><br><span class=\"line\">342</span><br><span class=\"line\">343</span><br><span class=\"line\">344</span><br><span class=\"line\">345</span><br><span class=\"line\">346</span><br><span class=\"line\">347</span><br><span class=\"line\">348</span><br><span class=\"line\">349</span><br><span class=\"line\">350</span><br><span class=\"line\">351</span><br><span class=\"line\">352</span><br><span class=\"line\">353</span><br><span class=\"line\">354</span><br><span class=\"line\">355</span><br><span class=\"line\">356</span><br><span class=\"line\">357</span><br><span class=\"line\">358</span><br><span class=\"line\">359</span><br><span class=\"line\">360</span><br><span class=\"line\">361</span><br><span class=\"line\">362</span><br><span class=\"line\">363</span><br><span class=\"line\">364</span><br><span class=\"line\">365</span><br><span class=\"line\">366</span><br><span class=\"line\">367</span><br><span class=\"line\">368</span><br><span class=\"line\">369</span><br><span class=\"line\">370</span><br><span class=\"line\">371</span><br><span class=\"line\">372</span><br><span class=\"line\">373</span><br><span class=\"line\">374</span><br><span class=\"line\">375</span><br><span class=\"line\">376</span><br><span class=\"line\">377</span><br><span class=\"line\">378</span><br><span class=\"line\">379</span><br><span class=\"line\">380</span><br><span class=\"line\">381</span><br><span class=\"line\">382</span><br><span class=\"line\">383</span><br><span class=\"line\">384</span><br><span class=\"line\">385</span><br><span class=\"line\">386</span><br><span class=\"line\">387</span><br><span class=\"line\">388</span><br><span class=\"line\">389</span><br><span class=\"line\">390</span><br><span class=\"line\">391</span><br><span class=\"line\">392</span><br><span class=\"line\">393</span><br><span class=\"line\">394</span><br><span class=\"line\">395</span><br><span class=\"line\">396</span><br><span class=\"line\">397</span><br><span class=\"line\">398</span><br><span class=\"line\">399</span><br><span class=\"line\">400</span><br><span class=\"line\">401</span><br><span class=\"line\">402</span><br><span class=\"line\">403</span><br><span class=\"line\">404</span><br><span class=\"line\">405</span><br><span class=\"line\">406</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">如果Hive优化实战2中mapjoin中小表dim_seller很大呢？比如超过了1GB大小？这种就是大表join大表的问题。首先引入一个具体的问题场景，然后基于此介绍各自优化方案。</span><br><span class=\"line\"></span><br><span class=\"line\">1、问题场景</span><br><span class=\"line\">问题场景如下：</span><br><span class=\"line\"></span><br><span class=\"line\">A表为一个汇总表，汇总的是卖家买家最近N天交易汇总信息，即对于每个卖家最近N天，其每个买家共成交了多少单，总金额是多少，假设N取90天，汇总值仅取成交单数。</span><br><span class=\"line\"></span><br><span class=\"line\">A表的字段有：buyer_id、seller_id、pay_cnt_90day。</span><br><span class=\"line\"></span><br><span class=\"line\">B表为卖家基本信息表，其字段有seller_id、sale_level，其中sale_levels是卖家的一个分层评级信息，比如吧卖家分为6个级别：S0、S1、S2、S3、S4和S5。</span><br><span class=\"line\"></span><br><span class=\"line\">要获得的结果是每个买家在各个级别的卖家的成交比例信息，比如：</span><br><span class=\"line\"></span><br><span class=\"line\">某买家：S0:10%；S1:20%；S2:20%；S3:10%；S4:20%；S5:10%。</span><br><span class=\"line\"></span><br><span class=\"line\">正如mapjoin中的例子一样，第一反应是直接join两表并统计：</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">select</span></span><br><span class=\"line\"></span><br><span class=\"line\">m.buyer_id,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">sum</span>(pay_cnt_90day)  <span class=\"keyword\">as</span> pay_cnt_90day,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">sum</span>(<span class=\"keyword\">case</span> <span class=\"keyword\">when</span> m.sale_level = <span class=\"number\">0</span>  <span class=\"keyword\">then</span> pay_cnt_90day  <span class=\"keyword\">end</span>)  <span class=\"keyword\">as</span> pay_cnt_90day_s0,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">sum</span>(<span class=\"keyword\">case</span> <span class=\"keyword\">when</span> m.sale_level = <span class=\"number\">1</span>  <span class=\"keyword\">then</span> pay_cnt_90day  <span class=\"keyword\">end</span>)  <span class=\"keyword\">as</span> pay_cnt_90day_s1,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">sum</span>(<span class=\"keyword\">case</span> <span class=\"keyword\">when</span> m.sale_level = <span class=\"number\">2</span>  <span class=\"keyword\">then</span> pay_cnt_90day  <span class=\"keyword\">end</span>)  <span class=\"keyword\">as</span> pay_cnt_90day_s2,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">sum</span>(<span class=\"keyword\">case</span> <span class=\"keyword\">when</span> m.sale_level = <span class=\"number\">3</span>  <span class=\"keyword\">then</span> pay_cnt_90day  <span class=\"keyword\">end</span>)  <span class=\"keyword\">as</span> pay_cnt_90day_s3,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">sum</span>(<span class=\"keyword\">case</span> <span class=\"keyword\">when</span> m.sale_level = <span class=\"number\">4</span>  <span class=\"keyword\">then</span> pay_cnt_90day  <span class=\"keyword\">end</span>)  <span class=\"keyword\">as</span> pay_cnt_90day_s4,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">sum</span>(<span class=\"keyword\">case</span> <span class=\"keyword\">when</span> m.sale_level = <span class=\"number\">5</span>  <span class=\"keyword\">then</span> pay_cnt_90day  <span class=\"keyword\">end</span>)  <span class=\"keyword\">as</span> pay_cnt_90day_s5</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> (</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">select</span>  a.buer_id,  a.seller_id,  b.sale_level, a.pay_cnt_90day</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> (  <span class=\"keyword\">select</span> buyer_id,  seller_id,  pay_cnt_90day   <span class=\"keyword\">from</span> table_A)  a</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">join</span></span><br><span class=\"line\"></span><br><span class=\"line\">(<span class=\"keyword\">select</span> seller_id,  sale_level  <span class=\"keyword\">from</span> table_B)  b</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">on</span>  a.seller_id  = b.seller_id</span><br><span class=\"line\"></span><br><span class=\"line\">)  m</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">group</span> <span class=\"keyword\">by</span> m.buyer_id</span><br><span class=\"line\"></span><br><span class=\"line\">但是此<span class=\"keyword\">SQL</span>会引起数据倾斜，原因在于卖家的二八准则，某些卖家<span class=\"number\">90</span>天内会有几百万甚至上千万的买家，但是大部分的卖家<span class=\"number\">90</span>天内买家的数目并不多，<span class=\"keyword\">join</span> table_A和table_B的时候，</span><br><span class=\"line\"></span><br><span class=\"line\">ODPS会按照seller_id进行分发，table_A的大卖家引起了数据倾斜。</span><br><span class=\"line\"></span><br><span class=\"line\">但是数据本身无法用mapjoin table_B解决，因为卖家超过千万条，文件大小有几个GB，超过了<span class=\"number\">1</span>GB的限制。</span><br><span class=\"line\"></span><br><span class=\"line\">优化方案<span class=\"number\">1</span>：转为mapjoin</span><br><span class=\"line\">一个很正常的想法是，尽管B表无法直接mapjoin, 但是是否可以间接mapjoin它呢？</span><br><span class=\"line\"></span><br><span class=\"line\">实际上此思路有两种途径：限制行和限制列。</span><br><span class=\"line\"></span><br><span class=\"line\">限制行的思路是不需要<span class=\"keyword\">join</span> B全表，而只需要<span class=\"keyword\">join</span>其在A表中存在的，对于本问题场景，就是过滤掉<span class=\"number\">90</span>天内没有成交的卖家。</span><br><span class=\"line\"></span><br><span class=\"line\">限制列的思路是只取需要的字段。</span><br><span class=\"line\"></span><br><span class=\"line\">加上如上的限制后，检查过滤后的B表是否满足了Hive  mapjoin的条件，如果能满足，那么添加过滤条件生成一个临时B表，然后mapjoin该表即可。采用此思路的语句如下：</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">select</span></span><br><span class=\"line\"></span><br><span class=\"line\">m.buyer_id,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">sum</span>(pay_cnt_90day)  <span class=\"keyword\">as</span> pay_cnt_90day,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">sum</span>(<span class=\"keyword\">case</span> <span class=\"keyword\">when</span> m.sale_level = <span class=\"number\">0</span>  <span class=\"keyword\">then</span> pay_cnt_90day  <span class=\"keyword\">end</span>)  <span class=\"keyword\">as</span> pay_cnt_90day_s0,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">sum</span>(<span class=\"keyword\">case</span> <span class=\"keyword\">when</span> m.sale_level = <span class=\"number\">1</span>  <span class=\"keyword\">then</span> pay_cnt_90day  <span class=\"keyword\">end</span>)  <span class=\"keyword\">as</span> pay_cnt_90day_s1,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">sum</span>(<span class=\"keyword\">case</span> <span class=\"keyword\">when</span> m.sale_level = <span class=\"number\">2</span>  <span class=\"keyword\">then</span> pay_cnt_90day  <span class=\"keyword\">end</span>)  <span class=\"keyword\">as</span> pay_cnt_90day_s2,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">sum</span>(<span class=\"keyword\">case</span> <span class=\"keyword\">when</span> m.sale_level = <span class=\"number\">3</span>  <span class=\"keyword\">then</span> pay_cnt_90day  <span class=\"keyword\">end</span>)  <span class=\"keyword\">as</span> pay_cnt_90day_s3,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">sum</span>(<span class=\"keyword\">case</span> <span class=\"keyword\">when</span> m.sale_level = <span class=\"number\">4</span>  <span class=\"keyword\">then</span> pay_cnt_90day  <span class=\"keyword\">end</span>)  <span class=\"keyword\">as</span> pay_cnt_90day_s4,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">sum</span>(<span class=\"keyword\">case</span> <span class=\"keyword\">when</span> m.sale_level = <span class=\"number\">5</span>  <span class=\"keyword\">then</span> pay_cnt_90day  <span class=\"keyword\">end</span>)  <span class=\"keyword\">as</span> pay_cnt_90day_s5</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> ( </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">select</span>  <span class=\"comment\">/*+mapjoin(b)*/</span></span><br><span class=\"line\"></span><br><span class=\"line\">a.buer_id,  a.seller_id,  b.sale_level, a.pay_cnt_90day</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> (  <span class=\"keyword\">select</span> buyer_id,  seller_id,  pay_cnt_90day   <span class=\"keyword\">from</span> table_A)  a</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">join</span></span><br><span class=\"line\"></span><br><span class=\"line\">(</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">select</span> seller_id,  sale_level  <span class=\"keyword\">from</span> table_B b0</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">join</span> </span><br><span class=\"line\"></span><br><span class=\"line\">(<span class=\"keyword\">select</span> seller_id <span class=\"keyword\">from</span> table_A <span class=\"keyword\">group</span> <span class=\"keyword\">by</span> seller_id) a0</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">on</span> b0.seller_id = a0.selller_id</span><br><span class=\"line\"></span><br><span class=\"line\">)  b</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">on</span>  a.seller_id  = b.seller_id</span><br><span class=\"line\"></span><br><span class=\"line\">)  m</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">group</span> <span class=\"keyword\">by</span> m.buyer_id</span><br><span class=\"line\"></span><br><span class=\"line\">此方案在一些情况可以起作用，但是很多时候还是无法解决上述问题，因为大部分卖家尽管<span class=\"number\">90</span>天内买家不多，但还是有一些的，过滤后的B表仍然很多。</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">优化方案<span class=\"number\">2</span>：<span class=\"keyword\">join</span>时用<span class=\"keyword\">case</span> <span class=\"keyword\">when</span>语句</span><br><span class=\"line\">此种解决方案应用场景是：倾斜的值是明确的而且数量很少，比如<span class=\"literal\">null</span>值引起的倾斜。其核心是将这些引起倾斜的值随机分发到Reduce,其主要核心逻辑在于<span class=\"keyword\">join</span>时对这些特殊值<span class=\"keyword\">concat</span>随机数，</span><br><span class=\"line\"></span><br><span class=\"line\">从而达到随机分发的目的。此方案的核心逻辑如下：</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">select</span> a.user_id, a.order_id, b.user_id</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> table_a a <span class=\"keyword\">join</span> table_b b</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">on</span> (<span class=\"keyword\">case</span> <span class=\"keyword\">when</span> a.user_is <span class=\"keyword\">is</span> <span class=\"literal\">null</span> <span class=\"keyword\">then</span> <span class=\"keyword\">concat</span>(<span class=\"string\">&#x27;hive&#x27;</span>, <span class=\"keyword\">rand</span>()) <span class=\"keyword\">else</span> a.user_id <span class=\"keyword\">end</span>) = b.user_id</span><br><span class=\"line\"></span><br><span class=\"line\">Hive 已对此进行了优化，只需要设置参数skewinfo和skewjoin参数，不修改<span class=\"keyword\">SQL</span>代码，例如，由于table_B的值“<span class=\"number\">0</span>” 和“<span class=\"number\">1</span>”引起了倾斜，值需要做如下设置：</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">set</span> hive.optimize.skewinfo=table_B:(selleer_id) [ ( <span class=\"string\">&quot;0&quot;</span>) (<span class=\"string\">&quot;1&quot;</span>) ) ] </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">set</span> hive.optimize.skewjoin = <span class=\"literal\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">但是方案2因为无法解决本问题场景的倾斜问题，因为倾斜的卖家大量存在而且动态变化。</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">优化方案3：倍数B表，再取模join</span><br><span class=\"line\">1、通用方案</span><br><span class=\"line\">此方案的思路是建立一个numbers表，其值只有一列int 行，比如从1到10（具体值可根据倾斜程度确定），然后放大B表10倍，再取模join。代码如下：</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">select</span></span><br><span class=\"line\"></span><br><span class=\"line\">m.buyer_id,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">sum</span>(pay_cnt_90day)  <span class=\"keyword\">as</span> pay_cnt_90day,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">sum</span>(<span class=\"keyword\">case</span> <span class=\"keyword\">when</span> m.sale_level = <span class=\"number\">0</span>  <span class=\"keyword\">then</span> pay_cnt_90day  <span class=\"keyword\">end</span>)  <span class=\"keyword\">as</span> pay_cnt_90day_s0,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">sum</span>(<span class=\"keyword\">case</span> <span class=\"keyword\">when</span> m.sale_level = <span class=\"number\">1</span>  <span class=\"keyword\">then</span> pay_cnt_90day  <span class=\"keyword\">end</span>)  <span class=\"keyword\">as</span> pay_cnt_90day_s1,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">sum</span>(<span class=\"keyword\">case</span> <span class=\"keyword\">when</span> m.sale_level = <span class=\"number\">2</span>  <span class=\"keyword\">then</span> pay_cnt_90day  <span class=\"keyword\">end</span>)  <span class=\"keyword\">as</span> pay_cnt_90day_s2,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">sum</span>(<span class=\"keyword\">case</span> <span class=\"keyword\">when</span> m.sale_level = <span class=\"number\">3</span>  <span class=\"keyword\">then</span> pay_cnt_90day  <span class=\"keyword\">end</span>)  <span class=\"keyword\">as</span> pay_cnt_90day_s3,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">sum</span>(<span class=\"keyword\">case</span> <span class=\"keyword\">when</span> m.sale_level = <span class=\"number\">4</span>  <span class=\"keyword\">then</span> pay_cnt_90day  <span class=\"keyword\">end</span>)  <span class=\"keyword\">as</span> pay_cnt_90day_s4,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">sum</span>(<span class=\"keyword\">case</span> <span class=\"keyword\">when</span> m.sale_level = <span class=\"number\">5</span>  <span class=\"keyword\">then</span> pay_cnt_90day  <span class=\"keyword\">end</span>)  <span class=\"keyword\">as</span> pay_cnt_90day_s5</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> (</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">select</span>  a.buer_id,  a.seller_id,  b.sale_level, a.pay_cnt_90day</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> (  <span class=\"keyword\">select</span> buyer_id,  seller_id,  pay_cnt_90day   <span class=\"keyword\">from</span> table_A)  a</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">join</span></span><br><span class=\"line\"></span><br><span class=\"line\">(</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">select</span>  <span class=\"comment\">/*+mapjoin(members)*/</span></span><br><span class=\"line\"></span><br><span class=\"line\">seller_id,  sale_level ,<span class=\"keyword\">member</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> table_B</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">join</span> members</span><br><span class=\"line\"></span><br><span class=\"line\">)  b</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">on</span>  a.seller_id  = b.seller_id</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">and</span> <span class=\"keyword\">mod</span>(a.pay_cnt_90day,<span class=\"number\">10</span>)+<span class=\"number\">1</span> = b.number </span><br><span class=\"line\"></span><br><span class=\"line\">)  m</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">group</span> <span class=\"keyword\">by</span> m.buyer_id</span><br><span class=\"line\"></span><br><span class=\"line\">此思路的核心在于，既然按照seller_id分发会倾斜，那么再人工增加一列进行分发，这样之前倾斜的值的倾斜程度会减少到原来的<span class=\"number\">1</span>/<span class=\"number\">10</span>，可以通过配置numbers表改放大倍数来降低倾斜程度，</span><br><span class=\"line\"></span><br><span class=\"line\">但这样做的一个弊端是B表也会膨胀N倍。</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">2</span>、专用方案</span><br><span class=\"line\">通用方案的思路把B表的每条数据都放大了相同的倍数，实际上这是不需要的，只需要把大卖家放大倍数即可：需要首先知道大卖家的名单，即先建立一个临时表动态存放每天最新的大卖家（</span><br><span class=\"line\"></span><br><span class=\"line\">比如dim_big_seller）,同时此表的大卖家要膨胀预先设定的倍数（<span class=\"number\">1000</span>倍）。</span><br><span class=\"line\"></span><br><span class=\"line\">在A表和B表分别新建一个<span class=\"keyword\">join</span>列，其逻辑为：如果是大卖家，那么<span class=\"keyword\">concat</span>一个随机分配正整数（<span class=\"number\">0</span>到预定义的倍数之间，本例为<span class=\"number\">0</span>~<span class=\"number\">1000</span>）；如果不是，保持不变。具体代码如下：</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">select</span></span><br><span class=\"line\"></span><br><span class=\"line\">m.buyer_id,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">sum</span>(pay_cnt_90day)  <span class=\"keyword\">as</span> pay_cnt_90day,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">sum</span>(<span class=\"keyword\">case</span> <span class=\"keyword\">when</span> m.sale_level = <span class=\"number\">0</span>  <span class=\"keyword\">then</span> pay_cnt_90day  <span class=\"keyword\">end</span>)  <span class=\"keyword\">as</span> pay_cnt_90day_s0,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">sum</span>(<span class=\"keyword\">case</span> <span class=\"keyword\">when</span> m.sale_level = <span class=\"number\">1</span>  <span class=\"keyword\">then</span> pay_cnt_90day  <span class=\"keyword\">end</span>)  <span class=\"keyword\">as</span> pay_cnt_90day_s1,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">sum</span>(<span class=\"keyword\">case</span> <span class=\"keyword\">when</span> m.sale_level = <span class=\"number\">2</span>  <span class=\"keyword\">then</span> pay_cnt_90day  <span class=\"keyword\">end</span>)  <span class=\"keyword\">as</span> pay_cnt_90day_s2,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">sum</span>(<span class=\"keyword\">case</span> <span class=\"keyword\">when</span> m.sale_level = <span class=\"number\">3</span>  <span class=\"keyword\">then</span> pay_cnt_90day  <span class=\"keyword\">end</span>)  <span class=\"keyword\">as</span> pay_cnt_90day_s3,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">sum</span>(<span class=\"keyword\">case</span> <span class=\"keyword\">when</span> m.sale_level = <span class=\"number\">4</span>  <span class=\"keyword\">then</span> pay_cnt_90day  <span class=\"keyword\">end</span>)  <span class=\"keyword\">as</span> pay_cnt_90day_s4,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">sum</span>(<span class=\"keyword\">case</span> <span class=\"keyword\">when</span> m.sale_level = <span class=\"number\">5</span>  <span class=\"keyword\">then</span> pay_cnt_90day  <span class=\"keyword\">end</span>)  <span class=\"keyword\">as</span> pay_cnt_90day_s5</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> (</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">select</span>  a.buer_id,  a.seller_id,  b.sale_level, a.pay_cnt_90day</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> (  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">select</span>  <span class=\"comment\">/*+mapjoin(big)*/</span></span><br><span class=\"line\"></span><br><span class=\"line\">buyer_id,  seller_id,  pay_cnt_90day,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span>(big.seller_id <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">null</span>, <span class=\"keyword\">concat</span>(  table_A.seller_id,  <span class=\"string\">&#x27;rnd&#x27;</span>,  <span class=\"keyword\">cast</span>(  <span class=\"keyword\">rand</span>() * <span class=\"number\">1000</span> <span class=\"keyword\">as</span> <span class=\"built_in\">bigint</span> ), table_A.seller_id)  <span class=\"keyword\">as</span> seller_id_joinkey</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> table_A</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">left</span> <span class=\"keyword\">outer</span> <span class=\"keyword\">join</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--big表seller_id有重复，请注意一定要group by 后再join,保证table_A的行数保持不变</span></span><br><span class=\"line\"></span><br><span class=\"line\">（<span class=\"keyword\">select</span> seller_id  <span class=\"keyword\">from</span> dim_big_seller  <span class=\"keyword\">group</span> <span class=\"keyword\">by</span> seller_id）<span class=\"keyword\">big</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">on</span> table_A.seller_id = big.seller_id</span><br><span class=\"line\"></span><br><span class=\"line\">)  a</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">join</span></span><br><span class=\"line\"></span><br><span class=\"line\">(</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">select</span>  <span class=\"comment\">/*+mapjoin(big)*/</span></span><br><span class=\"line\"></span><br><span class=\"line\">seller_id,  sale_level ,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--big表的seller_id_joinkey生成逻辑和上面的生成逻辑一样</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">coalesce</span>(seller_id_joinkey,table_B.seller_id) <span class=\"keyword\">as</span> seller_id_joinkey</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> table_B</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">left</span> <span class=\"keyword\">out</span> <span class=\"keyword\">join</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--table_B表join大卖家表后大卖家行数扩大1000倍，其它卖家行数保持不变</span></span><br><span class=\"line\"></span><br><span class=\"line\">(<span class=\"keyword\">select</span> seller_id, seller_id_joinkey <span class=\"keyword\">from</span> dim_big_seller) <span class=\"keyword\">big</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">on</span> table_B.seller_id= big.seller_id</span><br><span class=\"line\"></span><br><span class=\"line\">)  b</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">on</span>  a.seller_id_joinkey= b.seller_id_joinkey</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">and</span> <span class=\"keyword\">mod</span>(a.pay_cnt_90day,<span class=\"number\">10</span>)+<span class=\"number\">1</span> = b.number </span><br><span class=\"line\"></span><br><span class=\"line\">)  m</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">group</span> <span class=\"keyword\">by</span> m.buyer_id</span><br><span class=\"line\"></span><br><span class=\"line\">相比通用方案，专用方案的运行效率明细好了许多，因为只是将B表中大卖家的行数放大了<span class=\"number\">1000</span>倍，其它卖家的行数保持不变，但同时代码复杂了很多，而且必须首先建立大数据表。</span><br><span class=\"line\"></span><br><span class=\"line\">方案<span class=\"number\">4</span>：动态一分为二</span><br><span class=\"line\">实际上方案<span class=\"number\">2</span>和<span class=\"number\">3</span>都用了一分为二的思想，但是都不彻底，对于mapjoin不能解决的问题，终极解决方案是动态一分为二，即对倾斜的键值和不倾斜的键值分开处理，不倾斜的正常<span class=\"keyword\">join</span>即可，倾斜的把他们找出来做mapjoin，最后<span class=\"keyword\">union</span> <span class=\"keyword\">all</span>其结果即可。</span><br><span class=\"line\"></span><br><span class=\"line\">但是此种解决方案比较麻烦，代码复杂而且需要一个临时表存放倾斜的键值。代码如下：</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--由于数据倾斜，先找出90天买家超过10000的卖家</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">insert</span> overwrite <span class=\"keyword\">table</span>  temp_table_B</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">select</span> </span><br><span class=\"line\"></span><br><span class=\"line\">m.seller_id,  n.sale_level</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> (</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">select</span>   seller_id</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> (</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">select</span> seller_id,<span class=\"keyword\">count</span>(buyer_id) <span class=\"keyword\">as</span> byr_cnt</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> table_A</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">group</span> <span class=\"keyword\">by</span> seller_id</span><br><span class=\"line\"></span><br><span class=\"line\">) a</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">where</span> a.byr_cnt &gt;<span class=\"number\">10000</span></span><br><span class=\"line\"></span><br><span class=\"line\">) m</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">left</span> <span class=\"keyword\">join</span> </span><br><span class=\"line\"></span><br><span class=\"line\">(</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">select</span> seller_id, sale_level  <span class=\"keyword\">from</span> table_B</span><br><span class=\"line\"></span><br><span class=\"line\">) n</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">on</span> m.seller_id = n.seller_id;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--对于90天买家超过10000的卖家直接mapjoin,对其它卖家直接正常join即可。</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">select</span></span><br><span class=\"line\"></span><br><span class=\"line\">m.buyer_id,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">sum</span>(pay_cnt_90day)  <span class=\"keyword\">as</span> pay_cnt_90day,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">sum</span>(<span class=\"keyword\">case</span> <span class=\"keyword\">when</span> m.sale_level = <span class=\"number\">0</span>  <span class=\"keyword\">then</span> pay_cnt_90day  <span class=\"keyword\">end</span>)  <span class=\"keyword\">as</span> pay_cnt_90day_s0,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">sum</span>(<span class=\"keyword\">case</span> <span class=\"keyword\">when</span> m.sale_level = <span class=\"number\">1</span>  <span class=\"keyword\">then</span> pay_cnt_90day  <span class=\"keyword\">end</span>)  <span class=\"keyword\">as</span> pay_cnt_90day_s1,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">sum</span>(<span class=\"keyword\">case</span> <span class=\"keyword\">when</span> m.sale_level = <span class=\"number\">2</span>  <span class=\"keyword\">then</span> pay_cnt_90day  <span class=\"keyword\">end</span>)  <span class=\"keyword\">as</span> pay_cnt_90day_s2,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">sum</span>(<span class=\"keyword\">case</span> <span class=\"keyword\">when</span> m.sale_level = <span class=\"number\">3</span>  <span class=\"keyword\">then</span> pay_cnt_90day  <span class=\"keyword\">end</span>)  <span class=\"keyword\">as</span> pay_cnt_90day_s3,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">sum</span>(<span class=\"keyword\">case</span> <span class=\"keyword\">when</span> m.sale_level = <span class=\"number\">4</span>  <span class=\"keyword\">then</span> pay_cnt_90day  <span class=\"keyword\">end</span>)  <span class=\"keyword\">as</span> pay_cnt_90day_s4,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">sum</span>(<span class=\"keyword\">case</span> <span class=\"keyword\">when</span> m.sale_level = <span class=\"number\">5</span>  <span class=\"keyword\">then</span> pay_cnt_90day  <span class=\"keyword\">end</span>)  <span class=\"keyword\">as</span> pay_cnt_90day_s5</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> (</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">select</span>  a.buer_id,  a.seller_id,  b.sale_level, a.pay_cnt_90day</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> (  <span class=\"keyword\">select</span> buyer_id,  seller_id,  pay_cnt_90day   <span class=\"keyword\">from</span> table_A)  a</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">join</span></span><br><span class=\"line\"></span><br><span class=\"line\">(</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">select</span> seller_id,  a.sale_level </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> table_A  a</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">left</span> <span class=\"keyword\">join</span> temp_table_B b</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">on</span> a.seller_id = b.seller_id</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">where</span> b.seller_id <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">null</span></span><br><span class=\"line\"></span><br><span class=\"line\">)  b</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">on</span>  a.seller_id  = b.seller_id</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">union</span> <span class=\"keyword\">all</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">select</span>  <span class=\"comment\">/*+mapjoin(b)*/</span></span><br><span class=\"line\"></span><br><span class=\"line\">a.buer_id,  a.seller_id,  b.sale_level, a.pay_cnt_90day</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> ( </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">select</span> buyer_id,  seller_id,  pay_cnt_90day   </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> table_A</span><br><span class=\"line\"></span><br><span class=\"line\">)  a</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">join</span></span><br><span class=\"line\"></span><br><span class=\"line\">(</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">select</span> seller_id,  sale_level  <span class=\"keyword\">from</span> table_B </span><br><span class=\"line\"></span><br><span class=\"line\">)  b</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">on</span>  a.seller_id  = b.seller_id</span><br><span class=\"line\"></span><br><span class=\"line\">)  m  <span class=\"keyword\">group</span> <span class=\"keyword\">by</span> m.buyer_id</span><br><span class=\"line\"></span><br><span class=\"line\">) m</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">group</span> <span class=\"keyword\">by</span> m.buyer_id</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">总结：方案<span class=\"number\">1</span>、<span class=\"number\">2</span>以及方案<span class=\"number\">3</span>中的同用方案不能保证解决大表<span class=\"keyword\">join</span>大表问题，因为它们都存在种种不同的限制和特定使用场景。</span><br><span class=\"line\"></span><br><span class=\"line\">而方案<span class=\"number\">3</span>的专用方案和方案<span class=\"number\">4</span>是推荐的优化方案，但是它们都需要新建一个临时表来存储每日动态变化的大卖家。相对方案<span class=\"number\">4</span>来说，方案<span class=\"number\">3</span>的专用方案不需要对代码框架进行修改，但是B表会被放大，所以一定要是是维度表，不然统计结果会是错误的。方案<span class=\"number\">4</span>最通用，自由度最高，但是对代码的更改也最大，甚至修改更难代码框架，可以作为终极方案使用。</span><br></pre></td></tr></table></figure>"}],"PostAsset":[{"_id":"source/_posts/java多线程/20160713174739239","post":"ckjbi8tou000324vugrkybeob","slug":"20160713174739239","modified":1,"renderable":1},{"_id":"source/_posts/使用hexo+github搭建博客/v2-01e7fc8bb9280437deb437bf73a190a1_720w.jpg","post":"ckjbi8tox000624vudppbgv03","slug":"v2-01e7fc8bb9280437deb437bf73a190a1_720w.jpg","modified":1,"renderable":1},{"_id":"source/_posts/使用hexo+github搭建博客/v2-1c3baeecf1ef3bec5c8ef3f14639f68b_720w.jpg","post":"ckjbi8tox000624vudppbgv03","slug":"v2-1c3baeecf1ef3bec5c8ef3f14639f68b_720w.jpg","modified":1,"renderable":1},{"_id":"source/_posts/使用hexo+github搭建博客/v2-264c75c0e493ae8cc5f283567c64ff2c_720w.jpg","post":"ckjbi8tox000624vudppbgv03","slug":"v2-264c75c0e493ae8cc5f283567c64ff2c_720w.jpg","modified":1,"renderable":1},{"_id":"source/_posts/使用hexo+github搭建博客/v2-27b47b5ae479ce7987851292a67774b0_720w.jpg","post":"ckjbi8tox000624vudppbgv03","slug":"v2-27b47b5ae479ce7987851292a67774b0_720w.jpg","modified":1,"renderable":1},{"_id":"source/_posts/使用hexo+github搭建博客/v2-45701cf120ca77e6733ad30b40666f33_720w.jpg","post":"ckjbi8tox000624vudppbgv03","slug":"v2-45701cf120ca77e6733ad30b40666f33_720w.jpg","modified":1,"renderable":1},{"_id":"source/_posts/使用hexo+github搭建博客/v2-54f8744afc9746884e6b3acecfc5f8cf_720w.jpg","post":"ckjbi8tox000624vudppbgv03","slug":"v2-54f8744afc9746884e6b3acecfc5f8cf_720w.jpg","modified":1,"renderable":1},{"_id":"source/_posts/使用hexo+github搭建博客/v2-67a8165154f4c5f4a6333e76e78ed815_720w.jpg","post":"ckjbi8tox000624vudppbgv03","slug":"v2-67a8165154f4c5f4a6333e76e78ed815_720w.jpg","modified":1,"renderable":1},{"_id":"source/_posts/使用hexo+github搭建博客/v2-9125065afd24332d7cd84feb6a350730_720w.jpg","post":"ckjbi8tox000624vudppbgv03","slug":"v2-9125065afd24332d7cd84feb6a350730_720w.jpg","modified":1,"renderable":1},{"_id":"source/_posts/使用hexo+github搭建博客/v2-a193a47cf70fe6ecf156e5f3d34920ea_720w.jpg","post":"ckjbi8tox000624vudppbgv03","slug":"v2-a193a47cf70fe6ecf156e5f3d34920ea_720w.jpg","modified":1,"renderable":1},{"_id":"source/_posts/使用hexo+github搭建博客/v2-b4c7524a2451f4ab42f9c22ea3c7b6be_720w.jpg","post":"ckjbi8tox000624vudppbgv03","slug":"v2-b4c7524a2451f4ab42f9c22ea3c7b6be_720w.jpg","modified":1,"renderable":1},{"_id":"source/_posts/使用hexo+github搭建博客/v2-d5d37c8ad523d8ab5c7c200fabc9585e_720w.jpg","post":"ckjbi8tox000624vudppbgv03","slug":"v2-d5d37c8ad523d8ab5c7c200fabc9585e_720w.jpg","modified":1,"renderable":1},{"_id":"source/_posts/java基础知识整理/20160624152602394","post":"ckjbi8tp7000n24vu4hv30hq7","slug":"20160624152602394","modified":1,"renderable":1},{"_id":"source/_posts/java基础知识整理/20160624152704286","post":"ckjbi8tp7000n24vu4hv30hq7","slug":"20160624152704286","modified":1,"renderable":1},{"_id":"source/_posts/java基础知识整理/20180803193134355","post":"ckjbi8tp7000n24vu4hv30hq7","slug":"20180803193134355","modified":1,"renderable":1},{"_id":"source/_posts/java基础知识整理/20180803193423722","post":"ckjbi8tp7000n24vu4hv30hq7","slug":"20180803193423722","modified":1,"renderable":1},{"_id":"source/_posts/java基础知识整理/3775272-55dfd603d6e9b95c.jpg","post":"ckjbi8tp7000n24vu4hv30hq7","slug":"3775272-55dfd603d6e9b95c.jpg","modified":1,"renderable":1},{"_id":"source/_posts/java基础知识整理/772134-20160720003120122-551868817.png","post":"ckjbi8tp7000n24vu4hv30hq7","slug":"772134-20160720003120122-551868817.png","modified":1,"renderable":1},{"_id":"source/_posts/java基础知识整理/copycode.gif","post":"ckjbi8tp7000n24vu4hv30hq7","slug":"copycode.gif","modified":1,"renderable":1},{"_id":"source/_posts/hive知识整理/timg-1568381886490.jpg","post":"ckjbi8tq0000r24vugqm19rc7","slug":"timg-1568381886490.jpg","modified":1,"renderable":1}],"PostCategory":[{"post_id":"ckjbi8toq000124vuf8gecvrg","category_id":"ckjbi8tow000424vuds9nbkid","_id":"ckjbi8tp0000924vu6483avv0"},{"post_id":"ckjbi8tou000324vugrkybeob","category_id":"ckjbi8toz000724vua9pufu3q","_id":"ckjbi8tp2000e24vu60z44x5k"},{"post_id":"ckjbi8tox000624vudppbgv03","category_id":"ckjbi8tow000424vuds9nbkid","_id":"ckjbi8tp3000g24vuawsc8o7f"},{"post_id":"ckjbi8tp7000n24vu4hv30hq7","category_id":"ckjbi8toz000724vua9pufu3q","_id":"ckjbi8tp8000q24vudqkuhhsj"},{"post_id":"ckjbi8tq0000r24vugqm19rc7","category_id":"ckjbi8tow000424vuds9nbkid","_id":"ckjbi8tq2000t24vuh35x6i1v"}],"PostTag":[{"post_id":"ckjbi8toq000124vuf8gecvrg","tag_id":"ckjbi8tox000524vu3e2w8g22","_id":"ckjbi8tp2000c24vufr7b5ky1"},{"post_id":"ckjbi8toq000124vuf8gecvrg","tag_id":"ckjbi8toz000824vu2a2l80j5","_id":"ckjbi8tp2000d24vu7th0elgf"},{"post_id":"ckjbi8tou000324vugrkybeob","tag_id":"ckjbi8tp0000b24vu8yzg3xxs","_id":"ckjbi8tp3000i24vu4hetgrim"},{"post_id":"ckjbi8tou000324vugrkybeob","tag_id":"ckjbi8toz000824vu2a2l80j5","_id":"ckjbi8tp3000j24vue7gfft9m"},{"post_id":"ckjbi8tox000624vudppbgv03","tag_id":"ckjbi8tp3000h24vu1hdn79qk","_id":"ckjbi8tp4000l24vu7mmo6qdf"},{"post_id":"ckjbi8tox000624vudppbgv03","tag_id":"ckjbi8toz000824vu2a2l80j5","_id":"ckjbi8tp4000m24vueh2kglwu"},{"post_id":"ckjbi8tp7000n24vu4hv30hq7","tag_id":"ckjbi8tp0000b24vu8yzg3xxs","_id":"ckjbi8tp8000o24vu26jxfrxg"},{"post_id":"ckjbi8tp7000n24vu4hv30hq7","tag_id":"ckjbi8toz000824vu2a2l80j5","_id":"ckjbi8tp8000p24vub2to6b0e"},{"post_id":"ckjbi8tq0000r24vugqm19rc7","tag_id":"ckjbi8tq2000s24vud4c6887h","_id":"ckjbi8tq3000u24vu8equalks"}],"Tag":[{"name":"dataworks","_id":"ckjbi8tox000524vu3e2w8g22"},{"name":"随笔","_id":"ckjbi8toz000824vu2a2l80j5"},{"name":"java","_id":"ckjbi8tp0000b24vu8yzg3xxs"},{"name":"hexo","_id":"ckjbi8tp3000h24vu1hdn79qk"},{"name":"hive","_id":"ckjbi8tq2000s24vud4c6887h"}]}}