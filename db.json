{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"themes/yilia/source/main.0cf68a.css","path":"main.0cf68a.css","modified":1,"renderable":1},{"_id":"themes/yilia/source/main.0cf68a.js","path":"main.0cf68a.js","modified":1,"renderable":1},{"_id":"themes/yilia/source/mobile.992cbe.js","path":"mobile.992cbe.js","modified":1,"renderable":1},{"_id":"themes/yilia/source/slider.e37972.js","path":"slider.e37972.js","modified":1,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.16acc2.ttf","path":"fonts/iconfont.16acc2.ttf","modified":1,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.45d7ee.svg","path":"fonts/iconfont.45d7ee.svg","modified":1,"renderable":1},{"_id":"themes/yilia/source/fonts/default-skin.b257fa.svg","path":"fonts/default-skin.b257fa.svg","modified":1,"renderable":1},{"_id":"themes/yilia/source/fonts/tooltip.4004ff.svg","path":"fonts/tooltip.4004ff.svg","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/default-skin.png","path":"img/default-skin.png","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/preloader.gif","path":"img/preloader.gif","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/quan.png","path":"img/quan.png","modified":1,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.8c627f.woff","path":"fonts/iconfont.8c627f.woff","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/scrollbar_arrow.png","path":"img/scrollbar_arrow.png","modified":1,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.b322fa.eot","path":"fonts/iconfont.b322fa.eot","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/toux2.jpg","path":"img/toux2.jpg","modified":1,"renderable":1}],"Cache":[{"_id":"source/_posts/SQL.md","hash":"8b042fdca133285f1f374545084ffc1f3695836c","modified":1613995859893},{"_id":"source/_posts/UDF.md","hash":"ce7d75f19ef51dde4b5881b558ca31892af1b91b","modified":1613995294155},{"_id":"source/_posts/dataworks命令.md","hash":"8c992e3cbe0bc7b6da1f931ec186746f1cc2bd1f","modified":1613996035758},{"_id":"source/_posts/hive知识整理.md","hash":"758c8d64255b31a94f1c045593e5c65e52bcfaab","modified":1610281346145},{"_id":"source/categories/index.md","hash":"be63b6b409caf7b22a7becdae02feb21944ba5f1","modified":1608642539243},{"_id":"source/_posts/使用hexo+github搭建博客.md","hash":"b606364c0f20b8eeb9be64d254aaaf524d42795a","modified":1609511471399},{"_id":"source/_posts/hive知识整理/timg-1568381886490.jpg","hash":"ae3326aaaaef3325c43cd835e1c3c4b197a58e47","modified":1609332675351},{"_id":"source/_posts/java多线程.md","hash":"2cda15d0835cfef067b3a23d1b0765c5f4bf71f0","modified":1609337604081},{"_id":"source/_posts/java基础知识整理.md","hash":"77d3a183720d0f1f7d26fbcd5dd6502946eb393b","modified":1609337850947},{"_id":"source/_posts/java基础知识整理/20160624152602394","hash":"508dfa4bce04d181c495af4ce551de5c5fe107e7","modified":1609332675359},{"_id":"source/_posts/java基础知识整理/20180803193423722","hash":"c5f15f12cae94ccf3e18aaa423f1855ad1df4114","modified":1609332675381},{"_id":"source/_posts/java基础知识整理/20180803193134355","hash":"3fd5c6cdb93d1d43cd39c1afc469a27bc117ec27","modified":1609332675374},{"_id":"themes/yilia/layout/_partial/toc.ejs","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1608589568398},{"_id":"source/_posts/java基础知识整理/20160624152704286","hash":"927686932ca6f863d3d7c56d97edb26a5f9d35b9","modified":1609332675366},{"_id":"source/_posts/java基础知识整理/772134-20160720003120122-551868817.png","hash":"3490c9b6e59121083efdc8154c8982aa6892fcf5","modified":1609332675392},{"_id":"source/_posts/java基础知识整理/copycode.gif","hash":"7e9c17336e21497cc5b8871097e3e5c0332aa47d","modified":1609332675397},{"_id":"source/tags/index.md","hash":"9da2a666439023630bc07ecc85d4d62c96960a66","modified":1608642687043},{"_id":"source/_posts/java基础知识整理/3775272-55dfd603d6e9b95c.jpg","hash":"d2a4af8e3ed2f1660e4aaf624b13c6796cef39fb","modified":1609332675387},{"_id":"source/_posts/使用hexo+github搭建博客/v2-01e7fc8bb9280437deb437bf73a190a1_720w.jpg","hash":"8b90fb208f1daed26029c2341c04ba6c99a4c136","modified":1608641627519},{"_id":"source/_posts/使用hexo+github搭建博客/v2-1c3baeecf1ef3bec5c8ef3f14639f68b_720w.jpg","hash":"aefb6480e2f06bc5c6e4cfd00da9e364176a6720","modified":1608641626836},{"_id":"source/_posts/使用hexo+github搭建博客/v2-27b47b5ae479ce7987851292a67774b0_720w.jpg","hash":"0128b814f34574a6309a34228462efcde90a38af","modified":1608641626812},{"_id":"source/_posts/使用hexo+github搭建博客/v2-264c75c0e493ae8cc5f283567c64ff2c_720w.jpg","hash":"9ddcb0e5a0209611d2eff4c6153bd44fe67825ef","modified":1608641626829},{"_id":"source/_posts/使用hexo+github搭建博客/v2-45701cf120ca77e6733ad30b40666f33_720w.jpg","hash":"8d5ee71d15aa6517b7d4b75043047b6804bfdc94","modified":1608641626839},{"_id":"source/_posts/使用hexo+github搭建博客/v2-9125065afd24332d7cd84feb6a350730_720w.jpg","hash":"7a260501704c3884d1adfe98c8e3b933a7603783","modified":1608641626809},{"_id":"source/_posts/使用hexo+github搭建博客/v2-67a8165154f4c5f4a6333e76e78ed815_720w.jpg","hash":"6409ba4d0b090fcdc40b6c48d3deeb0f1d10c89c","modified":1608641627468},{"_id":"source/_posts/java多线程/20160713174739239","hash":"71d059ea97fa3a8aea9618bee7e818da763f2e14","modified":1609332675399},{"_id":"source/_posts/数据结构整理/clip_image002.jpg","hash":"9c3433c6342aaba29de2f3f9c64014f150840524","modified":1610202123563},{"_id":"source/_posts/数据结构整理/image-20210101224039379.png","hash":"c41cadb79d34522ecb157982f6302c1a52bbb7a2","modified":1609512039385},{"_id":"source/_posts/数据结构整理/image-20210101225223666.png","hash":"c0630f64398e87ecdae5bd18a559b90b926e9a49","modified":1609512743679},{"_id":"source/_posts/数据结构整理/image-20210101225427642.png","hash":"40840ed817fa614f6c95f40f55d5419c0c4db945","modified":1609512867667},{"_id":"source/_posts/数据结构整理/image-20210102132901736.png","hash":"9389438fc9b0918581c3d043a863bebc35136c60","modified":1609565341746},{"_id":"source/_posts/数据结构整理/image-20210102132908111.png","hash":"fe99c2c4650d0e5372859413ac3a2557b8e4f051","modified":1609565348128},{"_id":"source/_posts/数据结构整理/image-20210102132915893.png","hash":"fe99c2c4650d0e5372859413ac3a2557b8e4f051","modified":1609565355920},{"_id":"source/_posts/数据结构整理/image-20210102141037291.png","hash":"d001ea4c7b55ab265e3622a48cb3a3a4efe0df01","modified":1609567837303},{"_id":"source/_posts/数据结构整理/image-20210102141100384.png","hash":"d001ea4c7b55ab265e3622a48cb3a3a4efe0df01","modified":1609567860393},{"_id":"source/_posts/数据结构整理/image-20210102141112949.png","hash":"d001ea4c7b55ab265e3622a48cb3a3a4efe0df01","modified":1609567872982},{"_id":"source/_posts/数据结构整理/image-20210102141103126.png","hash":"d001ea4c7b55ab265e3622a48cb3a3a4efe0df01","modified":1609567863151},{"_id":"source/_posts/数据结构整理/image-20210102141347127.png","hash":"2844828c75abf45ad74c60de3dc708d4886827da","modified":1609568027140},{"_id":"source/_posts/数据结构整理/image-20210102141307586.png","hash":"2844828c75abf45ad74c60de3dc708d4886827da","modified":1609567987591},{"_id":"source/_posts/数据结构整理/image-20210102141350454.png","hash":"2844828c75abf45ad74c60de3dc708d4886827da","modified":1609568030459},{"_id":"source/_posts/数据结构整理/image-20210102141354482.png","hash":"2844828c75abf45ad74c60de3dc708d4886827da","modified":1609568034495},{"_id":"source/_posts/数据结构整理/image-20210102141434749.png","hash":"069f517c49a31465cd9d09c5f7d6f79c37839f32","modified":1609568074752},{"_id":"source/_posts/数据结构整理/image-20210102141540407.png","hash":"03800b8cf64be0b347e8e1ad2c8408164cb05d3c","modified":1609568140429},{"_id":"source/_posts/数据结构整理/image-20210102141959933.png","hash":"47281915ab3d630a8f29c0cc0fb6b742b64242b2","modified":1609568399945},{"_id":"source/_posts/数据结构整理/image-20210102163741163.png","hash":"37270a461cd1b24eb5f5034def0eb93ad726cb70","modified":1609576661167},{"_id":"source/_posts/数据结构整理/image-20210102142138277.png","hash":"3e3e57f53c2979827bcdce0cb571e8ef9a58780e","modified":1609568498280},{"_id":"source/_posts/数据结构整理/image-20210102200243327.png","hash":"5c1378f96b12cfbe3a590910606ad312166ddb1e","modified":1609588963339},{"_id":"source/_posts/数据结构整理/image-20210102200322572.png","hash":"77de91f1121a1a4211bdc755ff3acbc0979831ad","modified":1609589002582},{"_id":"source/_posts/数据结构整理/image-20210102200443841.png","hash":"dec0937c094059590a0c0d5474ed58f20d72bdab","modified":1609589083853},{"_id":"source/_posts/数据结构整理/image-20210102200402339.png","hash":"17592ebb0055dfb1262408caed4f08ed04c890a2","modified":1609589042350},{"_id":"source/_posts/数据结构整理/image-20210102200539559.png","hash":"74f4a4886f2a4f02e54bde792f42cc7d9edc917c","modified":1609589139577},{"_id":"source/_posts/数据结构整理/image-20210102203535568.png","hash":"3290544b91413ba42a4a8277a8b1145ee68c5170","modified":1609590935581},{"_id":"source/_posts/数据结构整理/image-20210102203605120.png","hash":"c26b27fd8462c866f993525926250e76bd9f3b69","modified":1609590965123},{"_id":"source/_posts/数据结构整理/image-20210106203601993.png","hash":"a9533b5c682ee180d4016935d347c63de5ec512d","modified":1609936562011},{"_id":"source/_posts/数据结构整理/image-20210106222042969.png","hash":"10bf6c54e1620d6607c2d4d477ea5c55481e4943","modified":1609942842979},{"_id":"source/_posts/使用hexo+github搭建博客/v2-b4c7524a2451f4ab42f9c22ea3c7b6be_720w.jpg","hash":"38cf318fb23e71a1b1f1d411964e0704f50e7be6","modified":1608641626822},{"_id":"source/_posts/使用hexo+github搭建博客/v2-a193a47cf70fe6ecf156e5f3d34920ea_720w.jpg","hash":"9f743a487023cf2e99ca96e9af6af49f8f3135bc","modified":1608641626819},{"_id":"source/_posts/数据结构整理/image-20210106222030582.png","hash":"0a00461a34bd883cc860c05726141ee61c9c8161","modified":1609942830588},{"_id":"source/_posts/数据结构整理/image-20210109154230371.png","hash":"a590f28e84346da5798a96b033e8a8ab6d007214","modified":1610178150377},{"_id":"source/_posts/数据结构整理/image-20210106222122233.png","hash":"10bf6c54e1620d6607c2d4d477ea5c55481e4943","modified":1609942882241},{"_id":"source/_posts/使用hexo+github搭建博客/v2-d5d37c8ad523d8ab5c7c200fabc9585e_720w.jpg","hash":"ee49f3e983e6c3c8218b9cff1bc999a56ea39e58","modified":1608641626564},{"_id":"source/_posts/数据结构整理/image-20210110115152310.png","hash":"2f2f53281e207e477fed63e8d0cf9d3c914d9b60","modified":1610250712312},{"_id":"source/_posts/数据结构整理/image-20210109154304890.png","hash":"a590f28e84346da5798a96b033e8a8ab6d007214","modified":1610178184931},{"_id":"source/_posts/数据结构整理/image-20210110114746786.png","hash":"d5bb22656863909cecadb50407b63732afe3fbd2","modified":1610250466804},{"_id":"source/_posts/数据结构整理/image-20210110115039736.png","hash":"3cea95871b74d1c3b62fb380b62265b874ceb33e","modified":1610250639756},{"_id":"source/_posts/数据结构整理/image-20210110111607853.png","hash":"5ddef96cd7277dc2c3b0605311dc052114f6dc48","modified":1610248567871},{"_id":"source/_posts/数据结构整理/image-20210110115158112.png","hash":"a29cff01a9c5219d9d1f59589853d11e7478ab66","modified":1610250718120},{"_id":"source/_posts/数据结构整理/image-20210110115048972.png","hash":"a29cff01a9c5219d9d1f59589853d11e7478ab66","modified":1610250648995},{"_id":"source/_posts/数据结构整理/image-20210110141059564.png","hash":"a29cff01a9c5219d9d1f59589853d11e7478ab66","modified":1610259059575},{"_id":"themes/yilia/.editorconfig","hash":"daaa8757fac18f8735fadd0a37a42c06f421ca14","modified":1608589568375},{"_id":"themes/yilia/.eslintignore","hash":"ed9d8911ca08c3dd5072c48dd0be4d06f8897730","modified":1608589568376},{"_id":"themes/yilia/.babelrc","hash":"db600d40e93e6d8023737a65d58d3be7370e5e30","modified":1608589568374},{"_id":"themes/yilia/README.md","hash":"1bf755806af9d8874bd22e1abbdaaa24328ef4dc","modified":1608589568378},{"_id":"themes/yilia/.gitattributes","hash":"758cfbecfa7919e99abddf3297f37cde7e3d8d4e","modified":1608589568377},{"_id":"themes/yilia/.gitignore","hash":"d5fc575329853ff620b50fc62ad4b18fa09a308a","modified":1608589568377},{"_id":"themes/yilia/package.json","hash":"ee6aa61f1cb89fd549e3e087c0232207a9c9ee30","modified":1608589568403},{"_id":"themes/yilia/.eslintrc.js","hash":"303d25adf02ad65720e537a16a4a137d14bb755f","modified":1608589568376},{"_id":"themes/yilia/img/default-skin.png","hash":"ed95a8e40a2c3478c5915376acb8e5f33677f24d","modified":1609332675407},{"_id":"themes/yilia/img/preloader.gif","hash":"6342367c93c82da1b9c620e97c84a389cc43d96d","modified":1609332675408},{"_id":"themes/yilia/img/quan.png","hash":"87113a168983df621e531a9feb14b31480bffe6f","modified":1609332675413},{"_id":"themes/yilia/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1609332675414},{"_id":"themes/yilia/_config.yml","hash":"a4be63b04e6742edbf078da4b46b575e46688a22","modified":1609332675406},{"_id":"themes/yilia/img/toux2.jpg","hash":"d375cf64f76816b35377ee8914748c8b254f13a9","modified":1609332675414},{"_id":"themes/yilia/languages/default.yml","hash":"f26a34a7983d4bc17c65c7f0f14da598e62ce66d","modified":1608589568379},{"_id":"themes/yilia/languages/fr.yml","hash":"b4be1c1592a72012e48df2b3ec41cc9685573e50","modified":1608589568380},{"_id":"themes/yilia/languages/nl.yml","hash":"3d82ec703d0b3287739d7cb4750a715ae83bfcb3","modified":1608589568380},{"_id":"themes/yilia/webpack.config.js","hash":"da7657347109ddb4ab8602b219778117254677fe","modified":1608589568447},{"_id":"themes/yilia/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1608589568400},{"_id":"themes/yilia/languages/no.yml","hash":"ddf2035e920a5ecb9076138c184257d9f51896a7","modified":1608589568381},{"_id":"themes/yilia/languages/zh-CN.yml","hash":"b057f389c6713010f97d461e48ec959b0b6f3b44","modified":1608589568382},{"_id":"themes/yilia/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1608589568400},{"_id":"themes/yilia/languages/ru.yml","hash":"2a476b4c6e04900914c81378941640ac5d58a1f0","modified":1608589568381},{"_id":"themes/yilia/layout/index.ejs","hash":"ec498c6c0606acde997ce195dad97b267418d980","modified":1608589568401},{"_id":"themes/yilia/languages/zh-tw.yml","hash":"f5f0ca88185da7a8457760d84bf221781473bd7c","modified":1608589568383},{"_id":"themes/yilia/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1608589568402},{"_id":"themes/yilia/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1608589568402},{"_id":"themes/yilia/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1608589568403},{"_id":"themes/yilia/source/main.0cf68a.css","hash":"ddf6e2c6b953c2c59a3c271e6070010a4cc81cf9","modified":1608589568443},{"_id":"themes/yilia/layout/layout.ejs","hash":"b471ab706d48e0be3f783eab1c94bf5878ef5a94","modified":1608589568401},{"_id":"themes/yilia/source-src/css.ejs","hash":"cf7eab48d626433120d1ef9697f719a359817018","modified":1608589568404},{"_id":"themes/yilia/source-src/script.ejs","hash":"28abac2426761d7e715b38aadd86ce6549c8ae77","modified":1608589568436},{"_id":"themes/yilia/layout/_partial/after-footer.ejs","hash":"c70f367f54064a441e574c913f5e0ea121d0f899","modified":1608589568384},{"_id":"themes/yilia/layout/_partial/archive-post.ejs","hash":"edc0154b30a4127acda10297bec6aacf754b4ac4","modified":1608589568384},{"_id":"themes/yilia/source/slider.e37972.js","hash":"ce5eac88301fe4f2fce0fb6203adfd58eb8313ac","modified":1608589568446},{"_id":"themes/yilia/layout/_partial/aside.ejs","hash":"751e5deab5365348be5243688b419c82d337ab9a","modified":1608589568386},{"_id":"themes/yilia/layout/_partial/archive.ejs","hash":"a4eacc2bc1278095a0ef99f904b0634c78f980eb","modified":1608589568385},{"_id":"themes/yilia/layout/_partial/css.ejs","hash":"236f8a377b2e4e35754319c3029bcd4a4115431d","modified":1608589568387},{"_id":"themes/yilia/layout/_partial/footer.ejs","hash":"871f81cacd5d41cb2eb001cd56254217a857dc2f","modified":1608589568388},{"_id":"themes/yilia/layout/_partial/baidu-analytics.ejs","hash":"155327c23607f69989b58845f24d842a54e504b8","modified":1608589568387},{"_id":"themes/yilia/layout/_partial/google-analytics.ejs","hash":"1ccc627d7697e68fddc367c73ac09920457e5b35","modified":1608589568388},{"_id":"themes/yilia/layout/_partial/header.ejs","hash":"b69855e07b65117769adc515cb64b803932068c9","modified":1608589568390},{"_id":"themes/yilia/layout/_partial/article.ejs","hash":"8dea8f5f93a60185439b330b0f1d1649a6ab4bd0","modified":1608589568385},{"_id":"themes/yilia/layout/_partial/left-col.ejs","hash":"fb1b8457b9eb15b55da1bf7b133e12c375dd26f8","modified":1608589568390},{"_id":"themes/yilia/layout/_partial/mathjax.ejs","hash":"11550a418921d330e6553be0569a94ab5a217967","modified":1608589568391},{"_id":"themes/yilia/layout/_partial/head.ejs","hash":"12ca7d8dba56bc767b9309dda9526dcbaffc1614","modified":1608589568389},{"_id":"themes/yilia/layout/_partial/viewer.ejs","hash":"cc1c39903aed0a0601d104238d2bbd13ad2a36f3","modified":1608589568399},{"_id":"themes/yilia/layout/_partial/mobile-nav.ejs","hash":"ccec1fc70f021cb50ac85b524e7949878ab93a18","modified":1608589568391},{"_id":"themes/yilia/source/fonts/iconfont.16acc2.ttf","hash":"f342ac8bf4d937f42a7d6a0032ad267ab47eb7f2","modified":1608589568438},{"_id":"themes/yilia/source/fonts/iconfont.45d7ee.svg","hash":"75767c904d483d9b93469afb6b92bb6bdface639","modified":1608589568438},{"_id":"themes/yilia/layout/_partial/tools.ejs","hash":"0ffcb251b79e8a920c9b4cb6bb7a96a808816165","modified":1608589568399},{"_id":"themes/yilia/source/img/default-skin.png","hash":"ed95a8e40a2c3478c5915376acb8e5f33677f24d","modified":1608589568441},{"_id":"themes/yilia/source/img/preloader.gif","hash":"6342367c93c82da1b9c620e97c84a389cc43d96d","modified":1608589568442},{"_id":"themes/yilia/source/fonts/default-skin.b257fa.svg","hash":"2ac727c9e092331d35cce95af209ccfac6d4c7c7","modified":1608589568437},{"_id":"themes/yilia/source/fonts/tooltip.4004ff.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1608589568440},{"_id":"themes/yilia/source/img/quan.png","hash":"87113a168983df621e531a9feb14b31480bffe6f","modified":1609332675415},{"_id":"themes/yilia/source/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1608589568442},{"_id":"themes/yilia/source/fonts/iconfont.b322fa.eot","hash":"bc8c5e88f4994a852041b4d83f126d9c4d419b4a","modified":1608589568440},{"_id":"themes/yilia/source/fonts/iconfont.8c627f.woff","hash":"aa9672cb097f7fd73ae5a03bcd3d9d726935bc0a","modified":1608589568439},{"_id":"themes/yilia/source-src/css/archive.scss","hash":"d6a7dd88404b383b5b94e4c7ec675a410c41f3cc","modified":1608589568406},{"_id":"themes/yilia/source/img/toux2.jpg","hash":"d375cf64f76816b35377ee8914748c8b254f13a9","modified":1608647728209},{"_id":"themes/yilia/source-src/css/_function.scss","hash":"ce227b6f5a9af194fd5d455200630f32c05e151f","modified":1608589568406},{"_id":"themes/yilia/source-src/css/_core.scss","hash":"29ba600e98ed55f7af4ade8038272c84cba21188","modified":1608589568405},{"_id":"themes/yilia/source-src/css/article-main.scss","hash":"1577a2336b3ad122f49f60dff2bc1a97d4e7b18b","modified":1608589568407},{"_id":"themes/yilia/source-src/css/article-nav.scss","hash":"8f82fe898ba1c1bd00c24a7d8270feddc7eba3bc","modified":1608589568408},{"_id":"themes/yilia/source-src/css/article.scss","hash":"55d082fec4c6bb341725567acaa29ce37d50320a","modified":1608589568409},{"_id":"themes/yilia/source-src/css/article-inner.scss","hash":"f7388f5c11370ef462f7cb913d8f72edf24ecaf9","modified":1608589568407},{"_id":"themes/yilia/source-src/css/aside.scss","hash":"07244c188f58ecfb90bb7c047b8cde977f1dc4b4","modified":1608589568409},{"_id":"themes/yilia/source-src/css/comment.scss","hash":"b85f344f2c66d43d7094746e0a9ccb21d0534201","modified":1608589568410},{"_id":"themes/yilia/source-src/css/global.scss","hash":"b4cb4f45a55d4250cd9056f76dab2a3c0dabcec4","modified":1608589568418},{"_id":"themes/yilia/source-src/css/footer.scss","hash":"7ca837a4cc34db1c35f01baec85eb10ccc64ea86","modified":1608589568417},{"_id":"themes/yilia/source-src/css/fonts.scss","hash":"96d7eb1d42c06fdcccb8ef969f6ecd30c3194903","modified":1608589568413},{"_id":"themes/yilia/source-src/css/grid.scss","hash":"f53ea8270752b5919ec5d79224d22af91f2eda12","modified":1608589568418},{"_id":"themes/yilia/source-src/css/highlight.scss","hash":"40e5aa5056dc0b3b9f51c5b387370b612e265d4e","modified":1608589568419},{"_id":"themes/yilia/source-src/css/mobile-slider.scss","hash":"19f10fd2f0c3377aa4b165b3c2291ecf86dd9351","modified":1608589568422},{"_id":"themes/yilia/source-src/css/main.scss","hash":"9eba1fcf4805256697528fcf3b767cf6dd8d0591","modified":1608589568422},{"_id":"themes/yilia/source-src/css/mobile.scss","hash":"d995dcd483a250fe61b426158afb61bf8923a927","modified":1608589568423},{"_id":"themes/yilia/source-src/css/scroll.scss","hash":"2495f7e4e3b055735c531f944b5f40a118a351ec","modified":1608589568424},{"_id":"themes/yilia/source-src/css/left.scss","hash":"80dac621e43581a254d0152d5df901e4d0b01c09","modified":1608589568421},{"_id":"themes/yilia/source-src/css/reward.scss","hash":"a557a9ed244c82b8b71e9da9de3339d92783499f","modified":1608589568424},{"_id":"themes/yilia/source-src/css/page.scss","hash":"244c4d75c375978ff9edb74acc68825e63c6b235","modified":1608589568423},{"_id":"themes/yilia/source-src/css/share.scss","hash":"9d6f6884f40c191882e56a1e1e1192400944a515","modified":1608589568425},{"_id":"themes/yilia/source-src/css/social.scss","hash":"a10a038a1dac8953cb4ffc7e04272eff9fac54e4","modified":1608589568426},{"_id":"themes/yilia/source-src/css/tags-cloud.scss","hash":"399744e98e7c67939ed9b23c2670d8baad044eda","modified":1608589568426},{"_id":"themes/yilia/source-src/css/tools.scss","hash":"2924fb6f77c4a9973cd928c2c7db0acb848ed483","modified":1608589568427},{"_id":"themes/yilia/source-src/css/tooltip.scss","hash":"b81cedbe31accca82e597801186911a7b5e6841c","modified":1608589568428},{"_id":"themes/yilia/source-src/css/tags.scss","hash":"915c93edd67c5326695cc7dc84b14c5f154dbcc8","modified":1608589568427},{"_id":"themes/yilia/source-src/js/anm.js","hash":"d18f6276a352b871390a4112d479b9e58b8cdbbe","modified":1608589568430},{"_id":"themes/yilia/source-src/js/aside.js","hash":"5e4c3c3d61f1e1ce2f09688d3aff25fadc851fff","modified":1608589568430},{"_id":"themes/yilia/source-src/js/fix.js","hash":"67b8819abb886c9d066fb3b0624ca15e06f63fe0","modified":1608589568431},{"_id":"themes/yilia/source-src/js/mobile.js","hash":"461c08ffcbc724d74ec7e0ff38e171eefe0f89fd","modified":1608589568432},{"_id":"themes/yilia/source-src/js/main.js","hash":"fe98bf90ce61658fe16ae057f8b6a512a845af3b","modified":1608589568432},{"_id":"themes/yilia/source-src/js/Q.js","hash":"e56d9710afa79b31ca6b9fbd845f6d1895f5214b","modified":1608589568429},{"_id":"themes/yilia/source-src/js/report.js","hash":"57680f9a23bd0a1eaafd64ae08cc33e20627ab15","modified":1608589568433},{"_id":"themes/yilia/source-src/js/slider.js","hash":"0beaa112657ad57c723d9e773d5b79de60c1dd74","modified":1608589568434},{"_id":"themes/yilia/source-src/js/share.js","hash":"d4ccff8266c37363b3904226f5d035b7db882c61","modified":1608589568434},{"_id":"themes/yilia/source-src/js/viewer.js","hash":"c699cf3c89409ec8f044258e0715a470861b5d5d","modified":1608589568435},{"_id":"themes/yilia/source-src/js/util.js","hash":"3bcdeb95072b85600874424e6929e3e22cfddaa0","modified":1608589568435},{"_id":"themes/yilia/source-src/js/browser.js","hash":"4dc04845cf27f350922b63f1813a9c82e6e33b05","modified":1608589568431},{"_id":"themes/yilia/layout/_partial/post/date.ejs","hash":"aae96de18d48cd3b9b7bf6fed0100e15b53cca97","modified":1608589568393},{"_id":"themes/yilia/layout/_partial/post/changyan.ejs","hash":"086c8a88fd3bcae7ec13258df58e25d6354af2fa","modified":1608589568393},{"_id":"themes/yilia/layout/_partial/post/category.ejs","hash":"e777cbf959b11c4dfda649c562799899b90ab4a3","modified":1608589568392},{"_id":"themes/yilia/layout/_partial/post/nav.ejs","hash":"b6a97043f9ec37e571aacacfedcda1d4d75e3c7c","modified":1608589568395},{"_id":"themes/yilia/layout/_partial/post/title.ejs","hash":"d4a460a35e2112d0c7414fd5e19b3a16093f1caf","modified":1608589568396},{"_id":"themes/yilia/layout/_partial/post/duoshuo.ejs","hash":"f6b4c4eaafb5ac386273354b5f64a26139b7a3b0","modified":1608589568393},{"_id":"themes/yilia/layout/_partial/post/gitment.ejs","hash":"25655016773aa5d0774c56115ae1736a9fc9ea1f","modified":1608589568394},{"_id":"themes/yilia/layout/_partial/post/wangyiyun.ejs","hash":"fb022502c741b4a26bad6b2ad37245c10ede3f1a","modified":1608589568397},{"_id":"themes/yilia/source-src/css/core/_animation.scss","hash":"1834c3ed8560716e63bb3a50be94cac87fbbeaf3","modified":1608589568410},{"_id":"themes/yilia/source-src/css/core/_media-queries.scss","hash":"262ffcd88775080b7f511db37f58d2bcb1b2bfc7","modified":1608589568411},{"_id":"themes/yilia/layout/_partial/post/share.ejs","hash":"345b262e3c3b75c0cd9a93d9ecabcf06e33e54ff","modified":1608589568395},{"_id":"themes/yilia/layout/_partial/post/tag.ejs","hash":"2c4e4ca36c9bb4318506c38aca7127f1f44d827f","modified":1608589568396},{"_id":"themes/yilia/source-src/css/fonts/iconfont.eot","hash":"bc8c5e88f4994a852041b4d83f126d9c4d419b4a","modified":1608589568415},{"_id":"themes/yilia/source-src/css/core/_variables.scss","hash":"6e75bdaa46de83094ba0873099c6e7d656a22453","modified":1608589568413},{"_id":"themes/yilia/source-src/css/core/_reset.scss","hash":"398a49913b4a47d928103562b1ce94520be4026a","modified":1608589568412},{"_id":"themes/yilia/source-src/css/fonts/iconfont.svg","hash":"75767c904d483d9b93469afb6b92bb6bdface639","modified":1608589568415},{"_id":"themes/yilia/source-src/css/img/checkered-pattern.png","hash":"049262fa0886989d750637b264bed34ab51c23c8","modified":1608589568420},{"_id":"themes/yilia/source-src/css/img/tooltip.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1608589568421},{"_id":"themes/yilia/source-src/css/fonts/iconfont.ttf","hash":"f342ac8bf4d937f42a7d6a0032ad267ab47eb7f2","modified":1608589568416},{"_id":"source/_posts/使用hexo+github搭建博客/v2-54f8744afc9746884e6b3acecfc5f8cf_720w.jpg","hash":"a2543f2c675046be72ff89eeb93b0d3a46b93690","modified":1608641626842},{"_id":"themes/yilia/source-src/css/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1608589568420},{"_id":"source/_posts/数据结构整理/image-20210102170510025.png","hash":"a589a8cedeb983f88e03d360541deab500e95d29","modified":1609578310044},{"_id":"source/_posts/数据结构整理/image-20210102194542735.png","hash":"8c5ea8bb671b570544326533d76b191dce0a996d","modified":1609587942760},{"_id":"source/_posts/数据结构整理/image-20210102194545635.png","hash":"8c5ea8bb671b570544326533d76b191dce0a996d","modified":1609587945660},{"_id":"source/_posts/数据结构整理/image-20210102202017455.png","hash":"4828df5c00e508edea9f890c632fbd4982358621","modified":1609590017472},{"_id":"themes/yilia/source/main.0cf68a.js","hash":"283ae27ea37ac3e0e45b2e05c2482a4c594b9c25","modified":1608589568444},{"_id":"themes/yilia/source-src/css/fonts/iconfont.woff","hash":"aa9672cb097f7fd73ae5a03bcd3d9d726935bc0a","modified":1608589568417},{"_id":"source/_posts/数据结构整理.md","hash":"39bcea456f6836bac764cbee34787ba1b581217c","modified":1611315881981},{"_id":"source/_posts/数据结构整理/image-20210110140634167.png","hash":"702d5e2bd39c6d1d5d95afea0feba5e612944344","modified":1610258794195},{"_id":"themes/yilia/source-src/css/core/_mixin.scss","hash":"91db061c9c17628291a005e5bd4936cf9d35a6c4","modified":1608589568412},{"_id":"themes/yilia/source/mobile.992cbe.js","hash":"1801ef448909ea23c0a48e9d63b80d0cfd5534ce","modified":1608589568445},{"_id":"themes/yilia/layout/_partial/script.ejs","hash":"e98ec0b3b56f14d1d79af99ceb42727719a584f3","modified":1608589568398},{"_id":"source/_posts/数据结构整理/image-20210102193620447.png","hash":"bb629235bb4f2b1cb6843cb56ab21ed37941acb0","modified":1609587380554},{"_id":"public/content.json","hash":"93df3ccab62a70fef9c9428c7d5e185e9f8fda36","modified":1613996110302},{"_id":"public/categories/index.html","hash":"cc30cb6b20ef260bab49ff255b1b4cf21d9e461f","modified":1613996110302},{"_id":"public/tags/index.html","hash":"b2d3b916cae269c2d453c3e1de9d3d1dccd9d258","modified":1613996110302},{"_id":"public/2021/02/22/SQL/index.html","hash":"ad24902f729bda740108a8ac758ec9b5d1dc2abe","modified":1613996110302},{"_id":"public/2021/02/22/UDF/index.html","hash":"abd95204aa3b030748c97bcd3838e6b8af80d9da","modified":1613996110302},{"_id":"public/2021/01/01/数据结构整理/index.html","hash":"eec205669b538c0653acb47613621a92a57ea99d","modified":1613996110302},{"_id":"public/2020/12/29/hive知识整理/index.html","hash":"573832631cb702cff222da8ca6f6fe5865e6baa6","modified":1613996110302},{"_id":"public/2020/12/28/java多线程/index.html","hash":"c698e5d3df4d61867fdb970e6e517f6784e45372","modified":1613996110302},{"_id":"public/2020/12/24/dataworks命令/index.html","hash":"600f97b28ca9f1c9fee4e44c6065e821d6aa534f","modified":1613996110302},{"_id":"public/2020/12/24/java基础知识整理/index.html","hash":"a2f4bee1976d601e865168cb06562c6fa44a0b20","modified":1613996110302},{"_id":"public/2020/12/22/使用hexo+github搭建博客/index.html","hash":"86ad5856df9b227745a0838bd2f55b241e9ed25d","modified":1613996110302},{"_id":"public/index.html","hash":"9d8843609ccbc1cdeb7564563b15557c6ef5a388","modified":1613996110302},{"_id":"public/archives/index.html","hash":"18950b29a6417b8fd3202c7450b0a57ad29c7567","modified":1613996110302},{"_id":"public/archives/2020/index.html","hash":"12fdde09eb039132d84b068d29e84a62950e41bc","modified":1613996110302},{"_id":"public/archives/2020/12/index.html","hash":"f13f84ecc081ee5656e701607813ed6e1add03f6","modified":1613996110302},{"_id":"public/archives/2021/index.html","hash":"e0a542c10219b294509af73bdcfb9f96a052db1c","modified":1613996110302},{"_id":"public/archives/2021/01/index.html","hash":"4b0c24c7d1b69ad67ee405425dadcf30bd559d09","modified":1613996110302},{"_id":"public/archives/2021/02/index.html","hash":"3fd95e014f82ebdd5ce959aff2885ea173365337","modified":1613996110302},{"_id":"public/categories/复习/index.html","hash":"c95dae1d881e6f1892db2c860d63c2cebd3148ad","modified":1613996110302},{"_id":"public/categories/工具/index.html","hash":"1e50dcba4ebcf180c47f842e38106c1c8797122f","modified":1613996110302},{"_id":"public/tags/sql/index.html","hash":"9697747d35fc87ba24e22f2c11ed13d69d97bfe6","modified":1613996110302},{"_id":"public/tags/udf/index.html","hash":"b9dafeaef374f670074a7914158843faf65aea8d","modified":1613996110302},{"_id":"public/tags/java/index.html","hash":"c2ec0174f0d2c990dffeebe253e935a4d9ea37f0","modified":1613996110302},{"_id":"public/tags/随笔/index.html","hash":"87a3740672291b516463979025ccaa6b6379ca06","modified":1613996110302},{"_id":"public/tags/hexo/index.html","hash":"7d284ccee8a84eb6b26c3878a1c20fe26fdeaebf","modified":1613996110302},{"_id":"public/tags/dataworks/index.html","hash":"9d2ba3338e6f73a2457937d930ad618fbc8ea34d","modified":1613996110302},{"_id":"public/tags/hive/index.html","hash":"08fc8d2749af752169ee19569dba02e2ebc5b153","modified":1613996110302},{"_id":"public/tags/数据结构/index.html","hash":"00616814d004c0866dfaf769cbf8d3bd7ce86aca","modified":1613996110302},{"_id":"public/fonts/iconfont.16acc2.ttf","hash":"f342ac8bf4d937f42a7d6a0032ad267ab47eb7f2","modified":1613996110302},{"_id":"public/fonts/default-skin.b257fa.svg","hash":"2ac727c9e092331d35cce95af209ccfac6d4c7c7","modified":1613996110302},{"_id":"public/fonts/tooltip.4004ff.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1613996110302},{"_id":"public/img/preloader.gif","hash":"6342367c93c82da1b9c620e97c84a389cc43d96d","modified":1613996110302},{"_id":"public/img/quan.png","hash":"87113a168983df621e531a9feb14b31480bffe6f","modified":1613996110302},{"_id":"public/img/default-skin.png","hash":"ed95a8e40a2c3478c5915376acb8e5f33677f24d","modified":1613996110302},{"_id":"public/fonts/iconfont.8c627f.woff","hash":"aa9672cb097f7fd73ae5a03bcd3d9d726935bc0a","modified":1613996110302},{"_id":"public/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1613996110302},{"_id":"public/fonts/iconfont.b322fa.eot","hash":"bc8c5e88f4994a852041b4d83f126d9c4d419b4a","modified":1613996110302},{"_id":"public/img/toux2.jpg","hash":"d375cf64f76816b35377ee8914748c8b254f13a9","modified":1613996110302},{"_id":"public/2020/12/28/java多线程/20160713174739239","hash":"71d059ea97fa3a8aea9618bee7e818da763f2e14","modified":1613996110302},{"_id":"public/2020/12/22/使用hexo+github搭建博客/v2-01e7fc8bb9280437deb437bf73a190a1_720w.jpg","hash":"8b90fb208f1daed26029c2341c04ba6c99a4c136","modified":1613996110302},{"_id":"public/2020/12/22/使用hexo+github搭建博客/v2-1c3baeecf1ef3bec5c8ef3f14639f68b_720w.jpg","hash":"aefb6480e2f06bc5c6e4cfd00da9e364176a6720","modified":1613996110302},{"_id":"public/2020/12/22/使用hexo+github搭建博客/v2-264c75c0e493ae8cc5f283567c64ff2c_720w.jpg","hash":"9ddcb0e5a0209611d2eff4c6153bd44fe67825ef","modified":1613996110302},{"_id":"public/2020/12/22/使用hexo+github搭建博客/v2-27b47b5ae479ce7987851292a67774b0_720w.jpg","hash":"0128b814f34574a6309a34228462efcde90a38af","modified":1613996110302},{"_id":"public/2020/12/22/使用hexo+github搭建博客/v2-45701cf120ca77e6733ad30b40666f33_720w.jpg","hash":"8d5ee71d15aa6517b7d4b75043047b6804bfdc94","modified":1613996110302},{"_id":"public/2020/12/22/使用hexo+github搭建博客/v2-67a8165154f4c5f4a6333e76e78ed815_720w.jpg","hash":"6409ba4d0b090fcdc40b6c48d3deeb0f1d10c89c","modified":1613996110302},{"_id":"public/2020/12/22/使用hexo+github搭建博客/v2-9125065afd24332d7cd84feb6a350730_720w.jpg","hash":"7a260501704c3884d1adfe98c8e3b933a7603783","modified":1613996110302},{"_id":"public/2020/12/22/使用hexo+github搭建博客/v2-a193a47cf70fe6ecf156e5f3d34920ea_720w.jpg","hash":"9f743a487023cf2e99ca96e9af6af49f8f3135bc","modified":1613996110302},{"_id":"public/2020/12/22/使用hexo+github搭建博客/v2-b4c7524a2451f4ab42f9c22ea3c7b6be_720w.jpg","hash":"38cf318fb23e71a1b1f1d411964e0704f50e7be6","modified":1613996110302},{"_id":"public/2020/12/24/java基础知识整理/20160624152602394","hash":"508dfa4bce04d181c495af4ce551de5c5fe107e7","modified":1613996110302},{"_id":"public/2020/12/22/使用hexo+github搭建博客/v2-d5d37c8ad523d8ab5c7c200fabc9585e_720w.jpg","hash":"ee49f3e983e6c3c8218b9cff1bc999a56ea39e58","modified":1613996110302},{"_id":"public/2020/12/24/java基础知识整理/20160624152704286","hash":"927686932ca6f863d3d7c56d97edb26a5f9d35b9","modified":1613996110302},{"_id":"public/2020/12/24/java基础知识整理/3775272-55dfd603d6e9b95c.jpg","hash":"d2a4af8e3ed2f1660e4aaf624b13c6796cef39fb","modified":1613996110302},{"_id":"public/2020/12/24/java基础知识整理/20180803193134355","hash":"3fd5c6cdb93d1d43cd39c1afc469a27bc117ec27","modified":1613996110302},{"_id":"public/2020/12/24/java基础知识整理/20180803193423722","hash":"c5f15f12cae94ccf3e18aaa423f1855ad1df4114","modified":1613996110302},{"_id":"public/2020/12/24/java基础知识整理/772134-20160720003120122-551868817.png","hash":"3490c9b6e59121083efdc8154c8982aa6892fcf5","modified":1613996110302},{"_id":"public/2020/12/24/java基础知识整理/copycode.gif","hash":"7e9c17336e21497cc5b8871097e3e5c0332aa47d","modified":1613996110302},{"_id":"public/2020/12/29/hive知识整理/timg-1568381886490.jpg","hash":"ae3326aaaaef3325c43cd835e1c3c4b197a58e47","modified":1613996110302},{"_id":"public/2021/01/01/数据结构整理/clip_image002.jpg","hash":"9c3433c6342aaba29de2f3f9c64014f150840524","modified":1613996110302},{"_id":"public/2021/01/01/数据结构整理/image-20210101224039379.png","hash":"c41cadb79d34522ecb157982f6302c1a52bbb7a2","modified":1613996110302},{"_id":"public/2021/01/01/数据结构整理/image-20210101225223666.png","hash":"c0630f64398e87ecdae5bd18a559b90b926e9a49","modified":1613996110302},{"_id":"public/2021/01/01/数据结构整理/image-20210102132901736.png","hash":"9389438fc9b0918581c3d043a863bebc35136c60","modified":1613996110302},{"_id":"public/2021/01/01/数据结构整理/image-20210102132908111.png","hash":"fe99c2c4650d0e5372859413ac3a2557b8e4f051","modified":1613996110302},{"_id":"public/2021/01/01/数据结构整理/image-20210102132915893.png","hash":"fe99c2c4650d0e5372859413ac3a2557b8e4f051","modified":1613996110302},{"_id":"public/2021/01/01/数据结构整理/image-20210102141037291.png","hash":"d001ea4c7b55ab265e3622a48cb3a3a4efe0df01","modified":1613996110302},{"_id":"public/2021/01/01/数据结构整理/image-20210102141100384.png","hash":"d001ea4c7b55ab265e3622a48cb3a3a4efe0df01","modified":1613996110302},{"_id":"public/2021/01/01/数据结构整理/image-20210102141103126.png","hash":"d001ea4c7b55ab265e3622a48cb3a3a4efe0df01","modified":1613996110302},{"_id":"public/2021/01/01/数据结构整理/image-20210102141112949.png","hash":"d001ea4c7b55ab265e3622a48cb3a3a4efe0df01","modified":1613996110302},{"_id":"public/2021/01/01/数据结构整理/image-20210102141307586.png","hash":"2844828c75abf45ad74c60de3dc708d4886827da","modified":1613996110302},{"_id":"public/2021/01/01/数据结构整理/image-20210102141354482.png","hash":"2844828c75abf45ad74c60de3dc708d4886827da","modified":1613996110302},{"_id":"public/2021/01/01/数据结构整理/image-20210102141350454.png","hash":"2844828c75abf45ad74c60de3dc708d4886827da","modified":1613996110302},{"_id":"public/2021/01/01/数据结构整理/image-20210102141347127.png","hash":"2844828c75abf45ad74c60de3dc708d4886827da","modified":1613996110302},{"_id":"public/2021/01/01/数据结构整理/image-20210102141434749.png","hash":"069f517c49a31465cd9d09c5f7d6f79c37839f32","modified":1613996110302},{"_id":"public/2021/01/01/数据结构整理/image-20210102142138277.png","hash":"3e3e57f53c2979827bcdce0cb571e8ef9a58780e","modified":1613996110302},{"_id":"public/2021/01/01/数据结构整理/image-20210102141959933.png","hash":"47281915ab3d630a8f29c0cc0fb6b742b64242b2","modified":1613996110302},{"_id":"public/2021/01/01/数据结构整理/image-20210102163741163.png","hash":"37270a461cd1b24eb5f5034def0eb93ad726cb70","modified":1613996110302},{"_id":"public/2021/01/01/数据结构整理/image-20210102141540407.png","hash":"03800b8cf64be0b347e8e1ad2c8408164cb05d3c","modified":1613996110302},{"_id":"public/2021/01/01/数据结构整理/image-20210102200243327.png","hash":"5c1378f96b12cfbe3a590910606ad312166ddb1e","modified":1613996110302},{"_id":"public/2021/01/01/数据结构整理/image-20210102200322572.png","hash":"77de91f1121a1a4211bdc755ff3acbc0979831ad","modified":1613996110302},{"_id":"public/2021/01/01/数据结构整理/image-20210102200402339.png","hash":"17592ebb0055dfb1262408caed4f08ed04c890a2","modified":1613996110302},{"_id":"public/2021/01/01/数据结构整理/image-20210102200443841.png","hash":"dec0937c094059590a0c0d5474ed58f20d72bdab","modified":1613996110302},{"_id":"public/2021/01/01/数据结构整理/image-20210102200539559.png","hash":"74f4a4886f2a4f02e54bde792f42cc7d9edc917c","modified":1613996110302},{"_id":"public/2021/01/01/数据结构整理/image-20210102203535568.png","hash":"3290544b91413ba42a4a8277a8b1145ee68c5170","modified":1613996110302},{"_id":"public/2021/01/01/数据结构整理/image-20210102203605120.png","hash":"c26b27fd8462c866f993525926250e76bd9f3b69","modified":1613996110302},{"_id":"public/2021/01/01/数据结构整理/image-20210106203601993.png","hash":"a9533b5c682ee180d4016935d347c63de5ec512d","modified":1613996110302},{"_id":"public/2021/01/01/数据结构整理/image-20210106222122233.png","hash":"10bf6c54e1620d6607c2d4d477ea5c55481e4943","modified":1613996110302},{"_id":"public/2021/01/01/数据结构整理/image-20210106222042969.png","hash":"10bf6c54e1620d6607c2d4d477ea5c55481e4943","modified":1613996110302},{"_id":"public/2021/01/01/数据结构整理/image-20210106222030582.png","hash":"0a00461a34bd883cc860c05726141ee61c9c8161","modified":1613996110302},{"_id":"public/2021/01/01/数据结构整理/image-20210109154230371.png","hash":"a590f28e84346da5798a96b033e8a8ab6d007214","modified":1613996110302},{"_id":"public/2021/01/01/数据结构整理/image-20210109154304890.png","hash":"a590f28e84346da5798a96b033e8a8ab6d007214","modified":1613996110302},{"_id":"public/2021/01/01/数据结构整理/image-20210110111607853.png","hash":"5ddef96cd7277dc2c3b0605311dc052114f6dc48","modified":1613996110302},{"_id":"public/2021/01/01/数据结构整理/image-20210110114746786.png","hash":"d5bb22656863909cecadb50407b63732afe3fbd2","modified":1613996110302},{"_id":"public/2021/01/01/数据结构整理/image-20210110115039736.png","hash":"3cea95871b74d1c3b62fb380b62265b874ceb33e","modified":1613996110302},{"_id":"public/2021/01/01/数据结构整理/image-20210110115152310.png","hash":"2f2f53281e207e477fed63e8d0cf9d3c914d9b60","modified":1613996110302},{"_id":"public/2021/01/01/数据结构整理/image-20210110115158112.png","hash":"a29cff01a9c5219d9d1f59589853d11e7478ab66","modified":1613996110302},{"_id":"public/2021/01/01/数据结构整理/image-20210110141059564.png","hash":"a29cff01a9c5219d9d1f59589853d11e7478ab66","modified":1613996110302},{"_id":"public/2021/01/01/数据结构整理/image-20210110115048972.png","hash":"a29cff01a9c5219d9d1f59589853d11e7478ab66","modified":1613996110302},{"_id":"public/fonts/iconfont.45d7ee.svg","hash":"75767c904d483d9b93469afb6b92bb6bdface639","modified":1613996110302},{"_id":"public/2020/12/22/使用hexo+github搭建博客/v2-54f8744afc9746884e6b3acecfc5f8cf_720w.jpg","hash":"a2543f2c675046be72ff89eeb93b0d3a46b93690","modified":1613996110302},{"_id":"public/2021/01/01/数据结构整理/image-20210101225427642.png","hash":"40840ed817fa614f6c95f40f55d5419c0c4db945","modified":1613996110302},{"_id":"public/2021/01/01/数据结构整理/image-20210102170510025.png","hash":"a589a8cedeb983f88e03d360541deab500e95d29","modified":1613996110302},{"_id":"public/2021/01/01/数据结构整理/image-20210102194542735.png","hash":"8c5ea8bb671b570544326533d76b191dce0a996d","modified":1613996110302},{"_id":"public/2021/01/01/数据结构整理/image-20210102194545635.png","hash":"8c5ea8bb671b570544326533d76b191dce0a996d","modified":1613996110302},{"_id":"public/2021/01/01/数据结构整理/image-20210102202017455.png","hash":"4828df5c00e508edea9f890c632fbd4982358621","modified":1613996110302},{"_id":"public/2021/01/01/数据结构整理/image-20210110140634167.png","hash":"702d5e2bd39c6d1d5d95afea0feba5e612944344","modified":1613996110302},{"_id":"public/main.0cf68a.css","hash":"ddf6e2c6b953c2c59a3c271e6070010a4cc81cf9","modified":1613996110302},{"_id":"public/slider.e37972.js","hash":"6dec4e220c89049037eebc44404abd8455d22ad7","modified":1613996110302},{"_id":"public/main.0cf68a.js","hash":"993fadeb5f6d296e9d997a49ee20dc97333ceab7","modified":1613996110302},{"_id":"public/mobile.992cbe.js","hash":"01b35e71e37aa2849664eb5daf26daede2278398","modified":1613996110302},{"_id":"public/2021/01/01/数据结构整理/image-20210102193620447.png","hash":"bb629235bb4f2b1cb6843cb56ab21ed37941acb0","modified":1613996110302}],"Category":[{"name":"复习","_id":"cklgjm1vc0007ikvu23jz2apm"},{"name":"工具","_id":"cklgjm1ve000aikvu9ff21434"}],"Data":[],"Page":[{"title":"categories","date":"2020-12-22T13:08:59.000Z","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2020-12-22 21:08:59\n---\n","updated":"2020-12-22T13:08:59.243Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cklgjm1uz0000ikvubj5r753a","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2020-12-22T13:11:27.000Z","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2020-12-22 21:11:27\n---\n","updated":"2020-12-22T13:11:27.043Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cklgjm1v70002ikvu35e4bd6h","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"SQL整理","date":"2021-02-22T13:16:31.000Z","_content":"\n# SQL整理\n\n## 维度打平\n\n```sql\nwith t1 as (\n    select id  industry_id\n    ,industry_name \n    from weier_ai.ods_monkey_ai_industry_df \n    where ds = '${ds}' \n    and id is not null \n    and industry_name is not null \n    and status = 0 \n    group by id, industry_name\n    \n),\nt2 as(\n    select \n    'ks'                                   app \n    ,cid                                   cate_id\n    ,name                                  cate_name\n    ,parent_cid                            parent_cate_id\n    ,cat_level                             cate_level\n    ,if(is_parent = 1, 1, 0)               is_parent  \n    ,industry_id                           industry_id\n    ,status                                cate_status\n    ,features                              feature                    \n    ,gmt_create                            create_gmt\n    ,gmt_modified                          update_gmt    \n    ,ds    \n    -- 这表中 有平台id 字段   \n    from weier_ai.ods_resource_platform_product_category_df \n    where   ds = '${ds}'  \n    AND     cid is not null \n    AND     name is not null \n    AND     status = '0'\n)\nselect\na.app \n,a.cate_id\n,a.cate_name\n,a.parent_cate_id \n,CASE\n            WHEN d.cate_id is not null THEN 4\n            WHEN d.cate_id is null and c.cate_id is not null THEN 3\n            WHEN c.cate_id is null and b.cate_id is not null THEN 2\n            when b.cate_id is null and a.cate_id is not null THEN 1\n    END     cate_level \n,a.is_parent\n,a.industry_id\n,f.industry_name\n,a.cate_status\n,a.feature\n,a.create_gmt\n,a.update_gmt\n,CASE\n            WHEN d.cate_id is not null THEN d.cate_id\n            WHEN d.cate_id is null and c.cate_id is not null THEN c.cate_id\n            WHEN c.cate_id is null and b.cate_id is not null THEN b.cate_id \n            when b.cate_id is null and a.cate_id is not null THEN a.cate_id \n    END cate_1_id\n,CASE   \n            WHEN d.cate_name is not null THEN d.cate_name\n            WHEN d.cate_id is null and c.cate_name is not null THEN c.cate_name\n            WHEN c.cate_id is null and b.cate_name is not null THEN b.cate_name \n            when b.cate_id is null and a.cate_name is not null THEN a.cate_name \n    END cate_1_name \n,CASE   \n            WHEN d.cate_id is not null and c.cate_id is not null THEN c.cate_id \n            WHEN d.cate_id is null and c.cate_id is not null and b.cate_id is not null THEN b.cate_id \n            WHEN c.cate_id is null and b.cate_id is not null and a.cate_id is not null THEN a.cate_id \n            else null \n    END cate_2_id \n,CASE    \n            WHEN d.cate_name is not null and c.cate_name is not null THEN c.cate_name \n            WHEN d.cate_name is null and c.cate_name is not null and b.cate_name is not null THEN b.cate_name \n            WHEN c.cate_name is null and b.cate_name is not null and a.cate_name is not null THEN a.cate_name  \n            else null \n    END cate_2_name\n,CASE  \n            WHEN d.cate_id is not null and c.cate_id is not null and b.cate_id is not null THEN b.cate_id \n            WHEN d.cate_id is null and c.cate_id is not null and b.cate_id is not null and a.cate_id is not null THEN a.cate_id \n            else null \n    END cate_3_id\n,CASE     \n            WHEN d.cate_name is not null and c.cate_name is not null and b.cate_name is not null THEN b.cate_name \n            WHEN d.cate_name is null and c.cate_name is not null and b.cate_name is not null and a.cate_name is not null THEN a.cate_name \n            else null \n    END cate_3_name\n,CASE   \n            WHEN  d.cate_id is not null and c.cate_id is not null and b.cate_id is not null and a.cate_id is not null THEN a.cate_id \n            else null \n    END cate_4_id\n,CASE   \n            WHEN d.cate_name is not null and c.cate_name is not null and b.cate_name is not null and a.cate_name is not null THEN a.cate_name  \n            else null \n    END cate_4_name\nfrom  t2 a \nleft join t2 b\non  a.parent_cate_id = b.cate_id \nleft join t2 c\non  b.parent_cate_id = c.cate_id \nleft join t2 d\non  c.parent_cate_id = d.cate_id  \nLEFT JOIN   t1  f \nON   a.industry_id = f.industry_id \n; \n\n--\n\nSELECT  \na.app \n,a.cate_id\n,a.cate_name\n,a.parent_cate_id\n,a.cate_level --1 为最高级\n,a.is_parent\n,a.industry_id\n,f.industry_name\n,a.cate_status\n,a.feature\n,a.create_gmt\n,a.update_gmt\n,CASE    WHEN a.cate_level = 1 THEN a.cate_id\n            WHEN b.cate_level = 1 THEN b.cate_id\n            WHEN c.cate_level = 1 THEN c.cate_id\n            WHEN d.cate_level = 1 THEN d.cate_id \n            ELSE NULL \n    END cate_1_id\n,CASE    WHEN a.cate_level = 1 THEN a.cate_name\n            WHEN b.cate_level = 1 THEN b.cate_name\n            WHEN c.cate_level = 1 THEN c.cate_name\n            WHEN d.cate_level = 1 THEN d.cate_name \n            ELSE NULL \n    END cate_1_name\n,CASE    WHEN a.cate_level = 2 THEN a.cate_id\n            WHEN b.cate_level = 2 THEN b.cate_id\n            WHEN c.cate_level = 2 THEN c.cate_id\n            WHEN d.cate_level = 2 THEN d.cate_id \n            ELSE NULL \n    END cate_2_id\n,CASE    WHEN a.cate_level = 2 THEN a.cate_name\n            WHEN b.cate_level = 2 THEN b.cate_name\n            WHEN c.cate_level = 2 THEN c.cate_name\n            WHEN d.cate_level = 2 THEN d.cate_name \n            ELSE NULL \n    END cate_2_name\n,CASE    WHEN a.cate_level = 3 THEN a.cate_id\n            WHEN b.cate_level = 3 THEN b.cate_id\n            WHEN c.cate_level = 3 THEN c.cate_id\n            WHEN d.cate_level = 3 THEN d.cate_id \n            ELSE NULL \n    END cate_3_id\n,CASE    WHEN a.cate_level = 3 THEN a.cate_name\n            WHEN b.cate_level = 3 THEN b.cate_name\n            WHEN c.cate_level = 3 THEN c.cate_name\n            WHEN d.cate_level = 3 THEN d.cate_name \n            ELSE NULL \n    END cate_3_name\n,CASE    WHEN a.cate_level = 4 THEN a.cate_id\n            WHEN b.cate_level = 4 THEN b.cate_id\n            WHEN c.cate_level = 4 THEN c.cate_id\n            WHEN d.cate_level = 4 THEN d.cate_id \n            ELSE NULL \n    END cate_4_id\n,CASE    WHEN a.cate_level = 4 THEN a.cate_name\n            WHEN b.cate_level = 4 THEN b.cate_name\n            WHEN c.cate_level = 4 THEN c.cate_name\n            WHEN d.cate_level = 4 THEN d.cate_name \n            ELSE NULL \n    END cate_4_name\nFROM    ods_monkey_product_category_df a\nLEFT JOIN ods_monkey_product_category_df b\non      a.parent_cate_id = b.cate_id \nLEFT JOIN   ods_monkey_product_category_df c\nON      b.parent_cate_id = c.cate_id\nLEFT JOIN ods_monkey_product_category_df d\nON      c.parent_cate_id = d.cate_id \nLEFT JOIN   ods_monkey_ai_industry_df  f\nON   a.industry_id = f.industry_id  \n```\n\n## 订单处理\n\n```sql\n\n\nINSERT OVERWRITE TABLE dwd_order_child_order_info_du\nPARTITION( ds = '${ds}' , app = 'tb' )  \nselect \n/*+mapjoin(b)*/ \n-- 流程节点  \ngmt_order_create   order_create_gmt \n,gmt_order_pay     pay_gmt   \n,gmt_order_ship    ship_gmt \n,gmt_order_end     order_end_gmt \n,gmt_order_rated   rated_gmt      \n,if(refund_status='SUCCESS',gmt_modified, NULL)    refund_gmt  \n--订单状态   \n,case when gmt_order_rated>gmt_order_create then 6\nwhen a.order_status='TRADE_NO_CREATE_PAY' or a.order_status='WAIT_BUYER_PAY' then 1\nwhen a.order_status='WAIT_SELLER_SEND_GOODS' then 2\nwhen a.order_status='SELLER_CONSIGNED_PART' or a.order_status='WAIT_BUYER_CONFIRM_GOODS' then 3\nwhen a.order_status='TRADE_FINISHED' then 4\nwhen a.order_status='TRADE_CLOSED' or a.order_status='TRADE_CLOSED_BY_TAOBAO' then 5\nelse null end as order_status    \t\t\t\t\t\t\t--1：待付款    2：待发货    3：已发货    4：已完成    5：已关闭    6：已评价\n--退货状态\n,case when a.refund_status='WAIT_SELLER_AGREE' then 1\nwhen a.refund_status='WAIT_BUYER_RETURN_GOODS' or a.refund_status='SELLER_REFUSE_BUYER' then 2\nwhen a.refund_status='WAIT_SELLER_CONFIRM_GOODS' then 3\nwhen a.refund_status='SUCCESS' then 4\nwhen a.refund_status='CLOSED' then 5\nelse null end as   refund_status  \t\t\t\t\t\t\t--1、申请退款    2、处理退款申请    3、退货退款中    4、退款成功    5、退款关闭\n,if(gmt_order_end is not null and order_status = 'TRADE_FINISHED', 1, 0)  is_order_success  \n,if(refund_status = 'SUCCESS', 1, 0)   is_refund_success \n,if(gmt_order_rated is not null, buyer_rate, 0 ) is_buyer_rated   -- 需要处理   \n\n--维度字段    \n,tid   order_id \n,oid   child_order_id  \n,c.product_id\n,a.iid  product_src_id  \n,c.product_name \n,b.shop_id           shop_id   \n,b.shop_name         shop_name \n,b.shop_account \n,b.org_id            org_id \n,b.org_name          org_name  \n \n,buyer_nick          buyer_id  \n,GET_PHONE(tb_tel(GET_JSON_OBJECT(a.features, '$.wr_t_code')))         buyer_phone \n,GET_JSON_OBJECT(a.features, '$.receiver_name')             buyer_name   \n\n,null    promotion_id   \n,GET_ADDRESS(tb_order_decode(GET_JSON_OBJECT(a.features, '$.wr_s_code')),4) as province\t--省份\n,tb_order_decode(GET_JSON_OBJECT(a.features, '$.wr_c_code')) as city\t \t--城市\n,tb_order_decode(GET_JSON_OBJECT(a.features, '$.wr_d_code')) as town\t\t--地区 \n-- \n,if(post_fee is not null, post_fee, 0 )   post_fee_amt\n,if(payment is not null,   payment , 0)   payment_amt\n,if(num > 0, num, 1)   product_num \n,if(price > 0, price, if(num > 0, ROUND((total_fee+discount_fee)/num), total_fee+discount_fee))   product_amt  \n,if(num*price > 0, num*price, total_fee+discount_fee )   product_total_amt    \n,if(discount_fee is not null,abs(discount_fee), 0)  discount_amt \n--\n,a.gmt_create       create_gmt  \n,a.gmt_modified     update_gmt  \n,if(a.status = 0, 0, 1)   is_del  \n,a.features         feature \n,TO_JSON(\"flag\", flag\n    ,\"reason\",reason\n    ,\"refund_success_time\",refund_success_time\n)    extra_info \n\nfrom  (\n    select *\n    from  weier_ai.ods_order_info_du \n    where ds = '${ds}' \n    and tid is not null \n    AND oid is not null \n    AND iid is NOT NULL \n    AND seller_nick is NOT NULL \n    AND buyer_nick is NOT NULL \n    AND gmt_order_create is NOT NULL  \n)   a \n-- 排除非客户的订单数据\njoin (\n    select * \n    from (\n        select * \n        ,ROW_NUMBER()over(partition by app, shop_account order by shop_end_gmt desc) rk \n        from weier_ai.dim_shop \n        where ds = '${ds}' \n        -- 只获取 tb 的店铺  \n        and app = 'tb' \n        and shop_id is not null \n        and shop_account is not null \n    ) \n    where rk = 1 \n)   b \non  trim(a.seller_nick) = trim(b.shop_account) \nleft JOIN (\n    select * \n    from (\n        select * \n        ,ROW_NUMBER()over(partition by app, shop_account, product_src_id order by create_gmt desc) rk \n        from weier_ai.dim_product \n        where ds = '${ds}'  \n        -- 只获取 tb 的商品\n        and app = 'tb'\n        and product_id is not null \n        and product_src_id is not null \n        and shop_account is not null \n    ) \n    where rk = 1 \n)  c \non a.iid = c.product_src_id \nand trim(b.shop_account) = trim(c.shop_account)     \n;\n\n\nset odps.stage.mapper.split.size = 512;\nINSERT OVERWRITE TABLE dwd_order_child_order_info_di\nPARTITION( ds,app )  \nselect \n-- 流程节点  \norder_create_gmt \n,pay_gmt   \n,ship_gmt \n,order_end_gmt \n,rated_gmt      \n,refund_gmt     \n,order_status   \n,refund_status  \n,is_order_success  \n,is_refund_success \n,is_buyer_rated   \n--维度字段    \n,order_id \n,child_order_id  \n,product_id\n,product_src_id  \n,product_name\n,shop_id  \n,shop_name\n,shop_account \n,org_id\n,org_name\n,buyer_id\n,buyer_phone\n,buyer_name\n,promotion_id\n,province\n,city\n,town\n,post_fee_amt\n,payment_amt\n,product_num\n,product_amt\n,product_total_amt\n,discount_amt\n,create_gmt\n,update_gmt\n,is_del\n,feature\n,extra_info\n    \n--重新放进order_create_gmt订单创建时间分区\n,TO_CHAR(order_create_gmt, 'yyyymmdd') ds\n,app     \nfrom dwd_order_child_order_info_du \nwhere ds = '${ds}' and app='tb'\nand TO_CHAR(order_create_gmt, 'yyyymmdd') > TO_CHAR(dateadd(to_date('${ds}', 'yyyymmdd'), -9, 'mm'),'yyyymmdd')\n\nunion all \n\nselect \n-- 流程节点  \na.order_create_gmt \n,a.pay_gmt   \n,a.ship_gmt \n,a.order_end_gmt \n,a.rated_gmt      \n,a.refund_gmt     \n,a.order_status   \n,a.refund_status  \n,a.is_order_success  \n,a.is_refund_success \n,a.is_buyer_rated   \n--维度字段    \n,a.order_id \n,a.child_order_id  \n,a.product_id\n,a.product_src_id  \n,a.product_name\n,a.shop_id  \n,a.shop_name\n,a.shop_account \n,a.org_id\n,a.org_name\n,a.buyer_id\n,a.buyer_phone\n,a.buyer_name\n,a.promotion_id\n,a.province\n,a.city\n,a.town\n,a.post_fee_amt\n,a.payment_amt\n,a.product_num\n,a.product_amt\n,a.product_total_amt\n,a.discount_amt\n,a.create_gmt\n,a.update_gmt\n,a.is_del\n,a.feature\n,a.extra_info  \n--\n,a.ds    \n,a.app \nfrom (\n     -- 发生变动的老分区订单数据   \n    select * \n    from dwd_order_child_order_info_di  \n    where ds in (\n        select TO_CHAR(order_create_gmt, 'yyyymmdd')  \n        from dwd_order_child_order_info_du  \n        where ds = '${ds}' and app='tb' \n        and order_create_gmt is not null \n        and TO_CHAR(order_create_gmt, 'yyyymmdd') > TO_CHAR(dateadd(to_date('${ds}', 'yyyymmdd'), -9, 'mm'),'yyyymmdd')\n        group by TO_CHAR(order_create_gmt, 'yyyymmdd')   \n    )  \n    and app='tb'\n    and order_id is not null \n    and child_order_id is not null \n) a \nleft join (\n    -- 新订单数据\n    select * \n    from dwd_order_child_order_info_du  \n    where ds = '${ds}' and app='tb' \n    and order_id is not null \n    and child_order_id is not null \n) b \non a.order_id = b.order_id \nand a.child_order_id = b.child_order_id \nwhere b.child_order_id is null \n;\n```\n\n## 正则处理\n\n```sql\n select\n    replace(\n    replace(\n    replace(\n    replace(\n    regexp_replace(\n        regexp_substr(\n            content,'\\{.*\\}'),'\\\\\\\\',''),'\\\"\\{','{'),\n            '\\}\\\"','}'),'\\\"\\[','['),'\\]\\\"',']'\n            ) json\n    from ods_loghub_weierai_im_group_online_di_test\n    where\n    ds = '${ds}'\n    and INSTR(content,'发送至客户端成功')>0\n\n\n-- select \n-- case when company regexp '.*公司$' then 1 when company regexp '.*中心$' then 2 end company_category;\n\nselect regexp_extract('IloveYou','(I)(.*?)(You)',2) ;\nselect regexp_replace(\"IloveYou\",\"You\",\"\") ;\n\n-- 1 REGEXP_LIKE ：与LIKE的功能相似\n--查询value中以1开头60结束的记录并且长度是7位\nselect * from fzq where value like '1____60';\nselect * from fzq where regexp_like(value,'1....60');\n\n-- 2 REGEXP_INSTR ：与INSTR的功能相似\n--返回匹配上的初始索引位置\nselect REGEXP_INSTR('http3213', 'http') ; --1\n\n-- 3 REGEXP_SUBSTR ：与SUBSTR的功能相似\nselect REGEXP_SUBSTR('http3213', 'http') ; --http\n-- 4 REGEXP_REPLACE ：与REPLACE的功能相似\n\n-- REGEXP_SUBSTR延伸substr()函数的功能，让你搜索一个正则表达式模式字符串。\n\n-- 这也类似于REGEXP_INSTR，而是返回子字符串的位置，它返回的子字符串本身。\n\n-- 5 REGEXP_COUNT(msg_content, \"[.?!。？！]+\") 统计匹配上的正则出现次数\nselect REGEXP_COUNT('！2131232131FFF!', \"[.?!。？！]+\") ;\n```\n\n","source":"_posts/SQL.md","raw":"---\ntitle: SQL整理\ndate: 2021-02-22 21:16:31\ntags:\n- sql\ncategories: \n---\n\n# SQL整理\n\n## 维度打平\n\n```sql\nwith t1 as (\n    select id  industry_id\n    ,industry_name \n    from weier_ai.ods_monkey_ai_industry_df \n    where ds = '${ds}' \n    and id is not null \n    and industry_name is not null \n    and status = 0 \n    group by id, industry_name\n    \n),\nt2 as(\n    select \n    'ks'                                   app \n    ,cid                                   cate_id\n    ,name                                  cate_name\n    ,parent_cid                            parent_cate_id\n    ,cat_level                             cate_level\n    ,if(is_parent = 1, 1, 0)               is_parent  \n    ,industry_id                           industry_id\n    ,status                                cate_status\n    ,features                              feature                    \n    ,gmt_create                            create_gmt\n    ,gmt_modified                          update_gmt    \n    ,ds    \n    -- 这表中 有平台id 字段   \n    from weier_ai.ods_resource_platform_product_category_df \n    where   ds = '${ds}'  \n    AND     cid is not null \n    AND     name is not null \n    AND     status = '0'\n)\nselect\na.app \n,a.cate_id\n,a.cate_name\n,a.parent_cate_id \n,CASE\n            WHEN d.cate_id is not null THEN 4\n            WHEN d.cate_id is null and c.cate_id is not null THEN 3\n            WHEN c.cate_id is null and b.cate_id is not null THEN 2\n            when b.cate_id is null and a.cate_id is not null THEN 1\n    END     cate_level \n,a.is_parent\n,a.industry_id\n,f.industry_name\n,a.cate_status\n,a.feature\n,a.create_gmt\n,a.update_gmt\n,CASE\n            WHEN d.cate_id is not null THEN d.cate_id\n            WHEN d.cate_id is null and c.cate_id is not null THEN c.cate_id\n            WHEN c.cate_id is null and b.cate_id is not null THEN b.cate_id \n            when b.cate_id is null and a.cate_id is not null THEN a.cate_id \n    END cate_1_id\n,CASE   \n            WHEN d.cate_name is not null THEN d.cate_name\n            WHEN d.cate_id is null and c.cate_name is not null THEN c.cate_name\n            WHEN c.cate_id is null and b.cate_name is not null THEN b.cate_name \n            when b.cate_id is null and a.cate_name is not null THEN a.cate_name \n    END cate_1_name \n,CASE   \n            WHEN d.cate_id is not null and c.cate_id is not null THEN c.cate_id \n            WHEN d.cate_id is null and c.cate_id is not null and b.cate_id is not null THEN b.cate_id \n            WHEN c.cate_id is null and b.cate_id is not null and a.cate_id is not null THEN a.cate_id \n            else null \n    END cate_2_id \n,CASE    \n            WHEN d.cate_name is not null and c.cate_name is not null THEN c.cate_name \n            WHEN d.cate_name is null and c.cate_name is not null and b.cate_name is not null THEN b.cate_name \n            WHEN c.cate_name is null and b.cate_name is not null and a.cate_name is not null THEN a.cate_name  \n            else null \n    END cate_2_name\n,CASE  \n            WHEN d.cate_id is not null and c.cate_id is not null and b.cate_id is not null THEN b.cate_id \n            WHEN d.cate_id is null and c.cate_id is not null and b.cate_id is not null and a.cate_id is not null THEN a.cate_id \n            else null \n    END cate_3_id\n,CASE     \n            WHEN d.cate_name is not null and c.cate_name is not null and b.cate_name is not null THEN b.cate_name \n            WHEN d.cate_name is null and c.cate_name is not null and b.cate_name is not null and a.cate_name is not null THEN a.cate_name \n            else null \n    END cate_3_name\n,CASE   \n            WHEN  d.cate_id is not null and c.cate_id is not null and b.cate_id is not null and a.cate_id is not null THEN a.cate_id \n            else null \n    END cate_4_id\n,CASE   \n            WHEN d.cate_name is not null and c.cate_name is not null and b.cate_name is not null and a.cate_name is not null THEN a.cate_name  \n            else null \n    END cate_4_name\nfrom  t2 a \nleft join t2 b\non  a.parent_cate_id = b.cate_id \nleft join t2 c\non  b.parent_cate_id = c.cate_id \nleft join t2 d\non  c.parent_cate_id = d.cate_id  \nLEFT JOIN   t1  f \nON   a.industry_id = f.industry_id \n; \n\n--\n\nSELECT  \na.app \n,a.cate_id\n,a.cate_name\n,a.parent_cate_id\n,a.cate_level --1 为最高级\n,a.is_parent\n,a.industry_id\n,f.industry_name\n,a.cate_status\n,a.feature\n,a.create_gmt\n,a.update_gmt\n,CASE    WHEN a.cate_level = 1 THEN a.cate_id\n            WHEN b.cate_level = 1 THEN b.cate_id\n            WHEN c.cate_level = 1 THEN c.cate_id\n            WHEN d.cate_level = 1 THEN d.cate_id \n            ELSE NULL \n    END cate_1_id\n,CASE    WHEN a.cate_level = 1 THEN a.cate_name\n            WHEN b.cate_level = 1 THEN b.cate_name\n            WHEN c.cate_level = 1 THEN c.cate_name\n            WHEN d.cate_level = 1 THEN d.cate_name \n            ELSE NULL \n    END cate_1_name\n,CASE    WHEN a.cate_level = 2 THEN a.cate_id\n            WHEN b.cate_level = 2 THEN b.cate_id\n            WHEN c.cate_level = 2 THEN c.cate_id\n            WHEN d.cate_level = 2 THEN d.cate_id \n            ELSE NULL \n    END cate_2_id\n,CASE    WHEN a.cate_level = 2 THEN a.cate_name\n            WHEN b.cate_level = 2 THEN b.cate_name\n            WHEN c.cate_level = 2 THEN c.cate_name\n            WHEN d.cate_level = 2 THEN d.cate_name \n            ELSE NULL \n    END cate_2_name\n,CASE    WHEN a.cate_level = 3 THEN a.cate_id\n            WHEN b.cate_level = 3 THEN b.cate_id\n            WHEN c.cate_level = 3 THEN c.cate_id\n            WHEN d.cate_level = 3 THEN d.cate_id \n            ELSE NULL \n    END cate_3_id\n,CASE    WHEN a.cate_level = 3 THEN a.cate_name\n            WHEN b.cate_level = 3 THEN b.cate_name\n            WHEN c.cate_level = 3 THEN c.cate_name\n            WHEN d.cate_level = 3 THEN d.cate_name \n            ELSE NULL \n    END cate_3_name\n,CASE    WHEN a.cate_level = 4 THEN a.cate_id\n            WHEN b.cate_level = 4 THEN b.cate_id\n            WHEN c.cate_level = 4 THEN c.cate_id\n            WHEN d.cate_level = 4 THEN d.cate_id \n            ELSE NULL \n    END cate_4_id\n,CASE    WHEN a.cate_level = 4 THEN a.cate_name\n            WHEN b.cate_level = 4 THEN b.cate_name\n            WHEN c.cate_level = 4 THEN c.cate_name\n            WHEN d.cate_level = 4 THEN d.cate_name \n            ELSE NULL \n    END cate_4_name\nFROM    ods_monkey_product_category_df a\nLEFT JOIN ods_monkey_product_category_df b\non      a.parent_cate_id = b.cate_id \nLEFT JOIN   ods_monkey_product_category_df c\nON      b.parent_cate_id = c.cate_id\nLEFT JOIN ods_monkey_product_category_df d\nON      c.parent_cate_id = d.cate_id \nLEFT JOIN   ods_monkey_ai_industry_df  f\nON   a.industry_id = f.industry_id  \n```\n\n## 订单处理\n\n```sql\n\n\nINSERT OVERWRITE TABLE dwd_order_child_order_info_du\nPARTITION( ds = '${ds}' , app = 'tb' )  \nselect \n/*+mapjoin(b)*/ \n-- 流程节点  \ngmt_order_create   order_create_gmt \n,gmt_order_pay     pay_gmt   \n,gmt_order_ship    ship_gmt \n,gmt_order_end     order_end_gmt \n,gmt_order_rated   rated_gmt      \n,if(refund_status='SUCCESS',gmt_modified, NULL)    refund_gmt  \n--订单状态   \n,case when gmt_order_rated>gmt_order_create then 6\nwhen a.order_status='TRADE_NO_CREATE_PAY' or a.order_status='WAIT_BUYER_PAY' then 1\nwhen a.order_status='WAIT_SELLER_SEND_GOODS' then 2\nwhen a.order_status='SELLER_CONSIGNED_PART' or a.order_status='WAIT_BUYER_CONFIRM_GOODS' then 3\nwhen a.order_status='TRADE_FINISHED' then 4\nwhen a.order_status='TRADE_CLOSED' or a.order_status='TRADE_CLOSED_BY_TAOBAO' then 5\nelse null end as order_status    \t\t\t\t\t\t\t--1：待付款    2：待发货    3：已发货    4：已完成    5：已关闭    6：已评价\n--退货状态\n,case when a.refund_status='WAIT_SELLER_AGREE' then 1\nwhen a.refund_status='WAIT_BUYER_RETURN_GOODS' or a.refund_status='SELLER_REFUSE_BUYER' then 2\nwhen a.refund_status='WAIT_SELLER_CONFIRM_GOODS' then 3\nwhen a.refund_status='SUCCESS' then 4\nwhen a.refund_status='CLOSED' then 5\nelse null end as   refund_status  \t\t\t\t\t\t\t--1、申请退款    2、处理退款申请    3、退货退款中    4、退款成功    5、退款关闭\n,if(gmt_order_end is not null and order_status = 'TRADE_FINISHED', 1, 0)  is_order_success  \n,if(refund_status = 'SUCCESS', 1, 0)   is_refund_success \n,if(gmt_order_rated is not null, buyer_rate, 0 ) is_buyer_rated   -- 需要处理   \n\n--维度字段    \n,tid   order_id \n,oid   child_order_id  \n,c.product_id\n,a.iid  product_src_id  \n,c.product_name \n,b.shop_id           shop_id   \n,b.shop_name         shop_name \n,b.shop_account \n,b.org_id            org_id \n,b.org_name          org_name  \n \n,buyer_nick          buyer_id  \n,GET_PHONE(tb_tel(GET_JSON_OBJECT(a.features, '$.wr_t_code')))         buyer_phone \n,GET_JSON_OBJECT(a.features, '$.receiver_name')             buyer_name   \n\n,null    promotion_id   \n,GET_ADDRESS(tb_order_decode(GET_JSON_OBJECT(a.features, '$.wr_s_code')),4) as province\t--省份\n,tb_order_decode(GET_JSON_OBJECT(a.features, '$.wr_c_code')) as city\t \t--城市\n,tb_order_decode(GET_JSON_OBJECT(a.features, '$.wr_d_code')) as town\t\t--地区 \n-- \n,if(post_fee is not null, post_fee, 0 )   post_fee_amt\n,if(payment is not null,   payment , 0)   payment_amt\n,if(num > 0, num, 1)   product_num \n,if(price > 0, price, if(num > 0, ROUND((total_fee+discount_fee)/num), total_fee+discount_fee))   product_amt  \n,if(num*price > 0, num*price, total_fee+discount_fee )   product_total_amt    \n,if(discount_fee is not null,abs(discount_fee), 0)  discount_amt \n--\n,a.gmt_create       create_gmt  \n,a.gmt_modified     update_gmt  \n,if(a.status = 0, 0, 1)   is_del  \n,a.features         feature \n,TO_JSON(\"flag\", flag\n    ,\"reason\",reason\n    ,\"refund_success_time\",refund_success_time\n)    extra_info \n\nfrom  (\n    select *\n    from  weier_ai.ods_order_info_du \n    where ds = '${ds}' \n    and tid is not null \n    AND oid is not null \n    AND iid is NOT NULL \n    AND seller_nick is NOT NULL \n    AND buyer_nick is NOT NULL \n    AND gmt_order_create is NOT NULL  \n)   a \n-- 排除非客户的订单数据\njoin (\n    select * \n    from (\n        select * \n        ,ROW_NUMBER()over(partition by app, shop_account order by shop_end_gmt desc) rk \n        from weier_ai.dim_shop \n        where ds = '${ds}' \n        -- 只获取 tb 的店铺  \n        and app = 'tb' \n        and shop_id is not null \n        and shop_account is not null \n    ) \n    where rk = 1 \n)   b \non  trim(a.seller_nick) = trim(b.shop_account) \nleft JOIN (\n    select * \n    from (\n        select * \n        ,ROW_NUMBER()over(partition by app, shop_account, product_src_id order by create_gmt desc) rk \n        from weier_ai.dim_product \n        where ds = '${ds}'  \n        -- 只获取 tb 的商品\n        and app = 'tb'\n        and product_id is not null \n        and product_src_id is not null \n        and shop_account is not null \n    ) \n    where rk = 1 \n)  c \non a.iid = c.product_src_id \nand trim(b.shop_account) = trim(c.shop_account)     \n;\n\n\nset odps.stage.mapper.split.size = 512;\nINSERT OVERWRITE TABLE dwd_order_child_order_info_di\nPARTITION( ds,app )  \nselect \n-- 流程节点  \norder_create_gmt \n,pay_gmt   \n,ship_gmt \n,order_end_gmt \n,rated_gmt      \n,refund_gmt     \n,order_status   \n,refund_status  \n,is_order_success  \n,is_refund_success \n,is_buyer_rated   \n--维度字段    \n,order_id \n,child_order_id  \n,product_id\n,product_src_id  \n,product_name\n,shop_id  \n,shop_name\n,shop_account \n,org_id\n,org_name\n,buyer_id\n,buyer_phone\n,buyer_name\n,promotion_id\n,province\n,city\n,town\n,post_fee_amt\n,payment_amt\n,product_num\n,product_amt\n,product_total_amt\n,discount_amt\n,create_gmt\n,update_gmt\n,is_del\n,feature\n,extra_info\n    \n--重新放进order_create_gmt订单创建时间分区\n,TO_CHAR(order_create_gmt, 'yyyymmdd') ds\n,app     \nfrom dwd_order_child_order_info_du \nwhere ds = '${ds}' and app='tb'\nand TO_CHAR(order_create_gmt, 'yyyymmdd') > TO_CHAR(dateadd(to_date('${ds}', 'yyyymmdd'), -9, 'mm'),'yyyymmdd')\n\nunion all \n\nselect \n-- 流程节点  \na.order_create_gmt \n,a.pay_gmt   \n,a.ship_gmt \n,a.order_end_gmt \n,a.rated_gmt      \n,a.refund_gmt     \n,a.order_status   \n,a.refund_status  \n,a.is_order_success  \n,a.is_refund_success \n,a.is_buyer_rated   \n--维度字段    \n,a.order_id \n,a.child_order_id  \n,a.product_id\n,a.product_src_id  \n,a.product_name\n,a.shop_id  \n,a.shop_name\n,a.shop_account \n,a.org_id\n,a.org_name\n,a.buyer_id\n,a.buyer_phone\n,a.buyer_name\n,a.promotion_id\n,a.province\n,a.city\n,a.town\n,a.post_fee_amt\n,a.payment_amt\n,a.product_num\n,a.product_amt\n,a.product_total_amt\n,a.discount_amt\n,a.create_gmt\n,a.update_gmt\n,a.is_del\n,a.feature\n,a.extra_info  \n--\n,a.ds    \n,a.app \nfrom (\n     -- 发生变动的老分区订单数据   \n    select * \n    from dwd_order_child_order_info_di  \n    where ds in (\n        select TO_CHAR(order_create_gmt, 'yyyymmdd')  \n        from dwd_order_child_order_info_du  \n        where ds = '${ds}' and app='tb' \n        and order_create_gmt is not null \n        and TO_CHAR(order_create_gmt, 'yyyymmdd') > TO_CHAR(dateadd(to_date('${ds}', 'yyyymmdd'), -9, 'mm'),'yyyymmdd')\n        group by TO_CHAR(order_create_gmt, 'yyyymmdd')   \n    )  \n    and app='tb'\n    and order_id is not null \n    and child_order_id is not null \n) a \nleft join (\n    -- 新订单数据\n    select * \n    from dwd_order_child_order_info_du  \n    where ds = '${ds}' and app='tb' \n    and order_id is not null \n    and child_order_id is not null \n) b \non a.order_id = b.order_id \nand a.child_order_id = b.child_order_id \nwhere b.child_order_id is null \n;\n```\n\n## 正则处理\n\n```sql\n select\n    replace(\n    replace(\n    replace(\n    replace(\n    regexp_replace(\n        regexp_substr(\n            content,'\\{.*\\}'),'\\\\\\\\',''),'\\\"\\{','{'),\n            '\\}\\\"','}'),'\\\"\\[','['),'\\]\\\"',']'\n            ) json\n    from ods_loghub_weierai_im_group_online_di_test\n    where\n    ds = '${ds}'\n    and INSTR(content,'发送至客户端成功')>0\n\n\n-- select \n-- case when company regexp '.*公司$' then 1 when company regexp '.*中心$' then 2 end company_category;\n\nselect regexp_extract('IloveYou','(I)(.*?)(You)',2) ;\nselect regexp_replace(\"IloveYou\",\"You\",\"\") ;\n\n-- 1 REGEXP_LIKE ：与LIKE的功能相似\n--查询value中以1开头60结束的记录并且长度是7位\nselect * from fzq where value like '1____60';\nselect * from fzq where regexp_like(value,'1....60');\n\n-- 2 REGEXP_INSTR ：与INSTR的功能相似\n--返回匹配上的初始索引位置\nselect REGEXP_INSTR('http3213', 'http') ; --1\n\n-- 3 REGEXP_SUBSTR ：与SUBSTR的功能相似\nselect REGEXP_SUBSTR('http3213', 'http') ; --http\n-- 4 REGEXP_REPLACE ：与REPLACE的功能相似\n\n-- REGEXP_SUBSTR延伸substr()函数的功能，让你搜索一个正则表达式模式字符串。\n\n-- 这也类似于REGEXP_INSTR，而是返回子字符串的位置，它返回的子字符串本身。\n\n-- 5 REGEXP_COUNT(msg_content, \"[.?!。？！]+\") 统计匹配上的正则出现次数\nselect REGEXP_COUNT('！2131232131FFF!', \"[.?!。？！]+\") ;\n```\n\n","slug":"SQL","published":1,"updated":"2021-02-22T12:10:59.893Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cklgjm1v30001ikvu7e974b7k","content":"<h1><span id=\"sql整理\">SQL整理</span></h1><h2><span id=\"维度打平\">维度打平</span></h2><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">with</span> t1 <span class=\"keyword\">as</span> (</span><br><span class=\"line\">    <span class=\"keyword\">select</span> <span class=\"keyword\">id</span>  industry_id</span><br><span class=\"line\">    ,industry_name </span><br><span class=\"line\">    <span class=\"keyword\">from</span> weier_ai.ods_monkey_ai_industry_df </span><br><span class=\"line\">    <span class=\"keyword\">where</span> ds = <span class=\"string\">&#x27;$&#123;ds&#125;&#x27;</span> </span><br><span class=\"line\">    <span class=\"keyword\">and</span> <span class=\"keyword\">id</span> <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">null</span> </span><br><span class=\"line\">    <span class=\"keyword\">and</span> industry_name <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">null</span> </span><br><span class=\"line\">    <span class=\"keyword\">and</span> <span class=\"keyword\">status</span> = <span class=\"number\">0</span> </span><br><span class=\"line\">    <span class=\"keyword\">group</span> <span class=\"keyword\">by</span> <span class=\"keyword\">id</span>, industry_name</span><br><span class=\"line\">    </span><br><span class=\"line\">),</span><br><span class=\"line\">t2 <span class=\"keyword\">as</span>(</span><br><span class=\"line\">    <span class=\"keyword\">select</span> </span><br><span class=\"line\">    <span class=\"string\">&#x27;ks&#x27;</span>                                   app </span><br><span class=\"line\">    ,cid                                   cate_id</span><br><span class=\"line\">    ,<span class=\"keyword\">name</span>                                  cate_name</span><br><span class=\"line\">    ,parent_cid                            parent_cate_id</span><br><span class=\"line\">    ,cat_level                             cate_level</span><br><span class=\"line\">    ,<span class=\"keyword\">if</span>(is_parent = <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>)               is_parent  </span><br><span class=\"line\">    ,industry_id                           industry_id</span><br><span class=\"line\">    ,<span class=\"keyword\">status</span>                                cate_status</span><br><span class=\"line\">    ,features                              feature                    </span><br><span class=\"line\">    ,gmt_create                            create_gmt</span><br><span class=\"line\">    ,gmt_modified                          update_gmt    </span><br><span class=\"line\">    ,ds    </span><br><span class=\"line\">    <span class=\"comment\">-- 这表中 有平台id 字段   </span></span><br><span class=\"line\">    <span class=\"keyword\">from</span> weier_ai.ods_resource_platform_product_category_df </span><br><span class=\"line\">    <span class=\"keyword\">where</span>   ds = <span class=\"string\">&#x27;$&#123;ds&#125;&#x27;</span>  </span><br><span class=\"line\">    <span class=\"keyword\">AND</span>     cid <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">null</span> </span><br><span class=\"line\">    <span class=\"keyword\">AND</span>     <span class=\"keyword\">name</span> <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">null</span> </span><br><span class=\"line\">    <span class=\"keyword\">AND</span>     <span class=\"keyword\">status</span> = <span class=\"string\">&#x27;0&#x27;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"keyword\">select</span></span><br><span class=\"line\">a.app </span><br><span class=\"line\">,a.cate_id</span><br><span class=\"line\">,a.cate_name</span><br><span class=\"line\">,a.parent_cate_id </span><br><span class=\"line\">,<span class=\"keyword\">CASE</span></span><br><span class=\"line\">            <span class=\"keyword\">WHEN</span> d.cate_id <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">null</span> <span class=\"keyword\">THEN</span> <span class=\"number\">4</span></span><br><span class=\"line\">            <span class=\"keyword\">WHEN</span> d.cate_id <span class=\"keyword\">is</span> <span class=\"literal\">null</span> <span class=\"keyword\">and</span> c.cate_id <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">null</span> <span class=\"keyword\">THEN</span> <span class=\"number\">3</span></span><br><span class=\"line\">            <span class=\"keyword\">WHEN</span> c.cate_id <span class=\"keyword\">is</span> <span class=\"literal\">null</span> <span class=\"keyword\">and</span> b.cate_id <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">null</span> <span class=\"keyword\">THEN</span> <span class=\"number\">2</span></span><br><span class=\"line\">            <span class=\"keyword\">when</span> b.cate_id <span class=\"keyword\">is</span> <span class=\"literal\">null</span> <span class=\"keyword\">and</span> a.cate_id <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">null</span> <span class=\"keyword\">THEN</span> <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">END</span>     cate_level </span><br><span class=\"line\">,a.is_parent</span><br><span class=\"line\">,a.industry_id</span><br><span class=\"line\">,f.industry_name</span><br><span class=\"line\">,a.cate_status</span><br><span class=\"line\">,a.feature</span><br><span class=\"line\">,a.create_gmt</span><br><span class=\"line\">,a.update_gmt</span><br><span class=\"line\">,<span class=\"keyword\">CASE</span></span><br><span class=\"line\">            <span class=\"keyword\">WHEN</span> d.cate_id <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">null</span> <span class=\"keyword\">THEN</span> d.cate_id</span><br><span class=\"line\">            <span class=\"keyword\">WHEN</span> d.cate_id <span class=\"keyword\">is</span> <span class=\"literal\">null</span> <span class=\"keyword\">and</span> c.cate_id <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">null</span> <span class=\"keyword\">THEN</span> c.cate_id</span><br><span class=\"line\">            <span class=\"keyword\">WHEN</span> c.cate_id <span class=\"keyword\">is</span> <span class=\"literal\">null</span> <span class=\"keyword\">and</span> b.cate_id <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">null</span> <span class=\"keyword\">THEN</span> b.cate_id </span><br><span class=\"line\">            <span class=\"keyword\">when</span> b.cate_id <span class=\"keyword\">is</span> <span class=\"literal\">null</span> <span class=\"keyword\">and</span> a.cate_id <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">null</span> <span class=\"keyword\">THEN</span> a.cate_id </span><br><span class=\"line\">    <span class=\"keyword\">END</span> cate_1_id</span><br><span class=\"line\">,<span class=\"keyword\">CASE</span>   </span><br><span class=\"line\">            <span class=\"keyword\">WHEN</span> d.cate_name <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">null</span> <span class=\"keyword\">THEN</span> d.cate_name</span><br><span class=\"line\">            <span class=\"keyword\">WHEN</span> d.cate_id <span class=\"keyword\">is</span> <span class=\"literal\">null</span> <span class=\"keyword\">and</span> c.cate_name <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">null</span> <span class=\"keyword\">THEN</span> c.cate_name</span><br><span class=\"line\">            <span class=\"keyword\">WHEN</span> c.cate_id <span class=\"keyword\">is</span> <span class=\"literal\">null</span> <span class=\"keyword\">and</span> b.cate_name <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">null</span> <span class=\"keyword\">THEN</span> b.cate_name </span><br><span class=\"line\">            <span class=\"keyword\">when</span> b.cate_id <span class=\"keyword\">is</span> <span class=\"literal\">null</span> <span class=\"keyword\">and</span> a.cate_name <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">null</span> <span class=\"keyword\">THEN</span> a.cate_name </span><br><span class=\"line\">    <span class=\"keyword\">END</span> cate_1_name </span><br><span class=\"line\">,<span class=\"keyword\">CASE</span>   </span><br><span class=\"line\">            <span class=\"keyword\">WHEN</span> d.cate_id <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">null</span> <span class=\"keyword\">and</span> c.cate_id <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">null</span> <span class=\"keyword\">THEN</span> c.cate_id </span><br><span class=\"line\">            <span class=\"keyword\">WHEN</span> d.cate_id <span class=\"keyword\">is</span> <span class=\"literal\">null</span> <span class=\"keyword\">and</span> c.cate_id <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">null</span> <span class=\"keyword\">and</span> b.cate_id <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">null</span> <span class=\"keyword\">THEN</span> b.cate_id </span><br><span class=\"line\">            <span class=\"keyword\">WHEN</span> c.cate_id <span class=\"keyword\">is</span> <span class=\"literal\">null</span> <span class=\"keyword\">and</span> b.cate_id <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">null</span> <span class=\"keyword\">and</span> a.cate_id <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">null</span> <span class=\"keyword\">THEN</span> a.cate_id </span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"literal\">null</span> </span><br><span class=\"line\">    <span class=\"keyword\">END</span> cate_2_id </span><br><span class=\"line\">,<span class=\"keyword\">CASE</span>    </span><br><span class=\"line\">            <span class=\"keyword\">WHEN</span> d.cate_name <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">null</span> <span class=\"keyword\">and</span> c.cate_name <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">null</span> <span class=\"keyword\">THEN</span> c.cate_name </span><br><span class=\"line\">            <span class=\"keyword\">WHEN</span> d.cate_name <span class=\"keyword\">is</span> <span class=\"literal\">null</span> <span class=\"keyword\">and</span> c.cate_name <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">null</span> <span class=\"keyword\">and</span> b.cate_name <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">null</span> <span class=\"keyword\">THEN</span> b.cate_name </span><br><span class=\"line\">            <span class=\"keyword\">WHEN</span> c.cate_name <span class=\"keyword\">is</span> <span class=\"literal\">null</span> <span class=\"keyword\">and</span> b.cate_name <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">null</span> <span class=\"keyword\">and</span> a.cate_name <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">null</span> <span class=\"keyword\">THEN</span> a.cate_name  </span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"literal\">null</span> </span><br><span class=\"line\">    <span class=\"keyword\">END</span> cate_2_name</span><br><span class=\"line\">,<span class=\"keyword\">CASE</span>  </span><br><span class=\"line\">            <span class=\"keyword\">WHEN</span> d.cate_id <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">null</span> <span class=\"keyword\">and</span> c.cate_id <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">null</span> <span class=\"keyword\">and</span> b.cate_id <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">null</span> <span class=\"keyword\">THEN</span> b.cate_id </span><br><span class=\"line\">            <span class=\"keyword\">WHEN</span> d.cate_id <span class=\"keyword\">is</span> <span class=\"literal\">null</span> <span class=\"keyword\">and</span> c.cate_id <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">null</span> <span class=\"keyword\">and</span> b.cate_id <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">null</span> <span class=\"keyword\">and</span> a.cate_id <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">null</span> <span class=\"keyword\">THEN</span> a.cate_id </span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"literal\">null</span> </span><br><span class=\"line\">    <span class=\"keyword\">END</span> cate_3_id</span><br><span class=\"line\">,<span class=\"keyword\">CASE</span>     </span><br><span class=\"line\">            <span class=\"keyword\">WHEN</span> d.cate_name <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">null</span> <span class=\"keyword\">and</span> c.cate_name <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">null</span> <span class=\"keyword\">and</span> b.cate_name <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">null</span> <span class=\"keyword\">THEN</span> b.cate_name </span><br><span class=\"line\">            <span class=\"keyword\">WHEN</span> d.cate_name <span class=\"keyword\">is</span> <span class=\"literal\">null</span> <span class=\"keyword\">and</span> c.cate_name <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">null</span> <span class=\"keyword\">and</span> b.cate_name <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">null</span> <span class=\"keyword\">and</span> a.cate_name <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">null</span> <span class=\"keyword\">THEN</span> a.cate_name </span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"literal\">null</span> </span><br><span class=\"line\">    <span class=\"keyword\">END</span> cate_3_name</span><br><span class=\"line\">,<span class=\"keyword\">CASE</span>   </span><br><span class=\"line\">            <span class=\"keyword\">WHEN</span>  d.cate_id <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">null</span> <span class=\"keyword\">and</span> c.cate_id <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">null</span> <span class=\"keyword\">and</span> b.cate_id <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">null</span> <span class=\"keyword\">and</span> a.cate_id <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">null</span> <span class=\"keyword\">THEN</span> a.cate_id </span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"literal\">null</span> </span><br><span class=\"line\">    <span class=\"keyword\">END</span> cate_4_id</span><br><span class=\"line\">,<span class=\"keyword\">CASE</span>   </span><br><span class=\"line\">            <span class=\"keyword\">WHEN</span> d.cate_name <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">null</span> <span class=\"keyword\">and</span> c.cate_name <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">null</span> <span class=\"keyword\">and</span> b.cate_name <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">null</span> <span class=\"keyword\">and</span> a.cate_name <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">null</span> <span class=\"keyword\">THEN</span> a.cate_name  </span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"literal\">null</span> </span><br><span class=\"line\">    <span class=\"keyword\">END</span> cate_4_name</span><br><span class=\"line\"><span class=\"keyword\">from</span>  t2 a </span><br><span class=\"line\"><span class=\"keyword\">left</span> <span class=\"keyword\">join</span> t2 b</span><br><span class=\"line\"><span class=\"keyword\">on</span>  a.parent_cate_id = b.cate_id </span><br><span class=\"line\"><span class=\"keyword\">left</span> <span class=\"keyword\">join</span> t2 c</span><br><span class=\"line\"><span class=\"keyword\">on</span>  b.parent_cate_id = c.cate_id </span><br><span class=\"line\"><span class=\"keyword\">left</span> <span class=\"keyword\">join</span> t2 d</span><br><span class=\"line\"><span class=\"keyword\">on</span>  c.parent_cate_id = d.cate_id  </span><br><span class=\"line\"><span class=\"keyword\">LEFT</span> <span class=\"keyword\">JOIN</span>   t1  f </span><br><span class=\"line\"><span class=\"keyword\">ON</span>   a.industry_id = f.industry_id </span><br><span class=\"line\">; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span>  </span><br><span class=\"line\">a.app </span><br><span class=\"line\">,a.cate_id</span><br><span class=\"line\">,a.cate_name</span><br><span class=\"line\">,a.parent_cate_id</span><br><span class=\"line\">,a.cate_level <span class=\"comment\">--1 为最高级</span></span><br><span class=\"line\">,a.is_parent</span><br><span class=\"line\">,a.industry_id</span><br><span class=\"line\">,f.industry_name</span><br><span class=\"line\">,a.cate_status</span><br><span class=\"line\">,a.feature</span><br><span class=\"line\">,a.create_gmt</span><br><span class=\"line\">,a.update_gmt</span><br><span class=\"line\">,<span class=\"keyword\">CASE</span>    <span class=\"keyword\">WHEN</span> a.cate_level = <span class=\"number\">1</span> <span class=\"keyword\">THEN</span> a.cate_id</span><br><span class=\"line\">            <span class=\"keyword\">WHEN</span> b.cate_level = <span class=\"number\">1</span> <span class=\"keyword\">THEN</span> b.cate_id</span><br><span class=\"line\">            <span class=\"keyword\">WHEN</span> c.cate_level = <span class=\"number\">1</span> <span class=\"keyword\">THEN</span> c.cate_id</span><br><span class=\"line\">            <span class=\"keyword\">WHEN</span> d.cate_level = <span class=\"number\">1</span> <span class=\"keyword\">THEN</span> d.cate_id </span><br><span class=\"line\">            <span class=\"keyword\">ELSE</span> <span class=\"literal\">NULL</span> </span><br><span class=\"line\">    <span class=\"keyword\">END</span> cate_1_id</span><br><span class=\"line\">,<span class=\"keyword\">CASE</span>    <span class=\"keyword\">WHEN</span> a.cate_level = <span class=\"number\">1</span> <span class=\"keyword\">THEN</span> a.cate_name</span><br><span class=\"line\">            <span class=\"keyword\">WHEN</span> b.cate_level = <span class=\"number\">1</span> <span class=\"keyword\">THEN</span> b.cate_name</span><br><span class=\"line\">            <span class=\"keyword\">WHEN</span> c.cate_level = <span class=\"number\">1</span> <span class=\"keyword\">THEN</span> c.cate_name</span><br><span class=\"line\">            <span class=\"keyword\">WHEN</span> d.cate_level = <span class=\"number\">1</span> <span class=\"keyword\">THEN</span> d.cate_name </span><br><span class=\"line\">            <span class=\"keyword\">ELSE</span> <span class=\"literal\">NULL</span> </span><br><span class=\"line\">    <span class=\"keyword\">END</span> cate_1_name</span><br><span class=\"line\">,<span class=\"keyword\">CASE</span>    <span class=\"keyword\">WHEN</span> a.cate_level = <span class=\"number\">2</span> <span class=\"keyword\">THEN</span> a.cate_id</span><br><span class=\"line\">            <span class=\"keyword\">WHEN</span> b.cate_level = <span class=\"number\">2</span> <span class=\"keyword\">THEN</span> b.cate_id</span><br><span class=\"line\">            <span class=\"keyword\">WHEN</span> c.cate_level = <span class=\"number\">2</span> <span class=\"keyword\">THEN</span> c.cate_id</span><br><span class=\"line\">            <span class=\"keyword\">WHEN</span> d.cate_level = <span class=\"number\">2</span> <span class=\"keyword\">THEN</span> d.cate_id </span><br><span class=\"line\">            <span class=\"keyword\">ELSE</span> <span class=\"literal\">NULL</span> </span><br><span class=\"line\">    <span class=\"keyword\">END</span> cate_2_id</span><br><span class=\"line\">,<span class=\"keyword\">CASE</span>    <span class=\"keyword\">WHEN</span> a.cate_level = <span class=\"number\">2</span> <span class=\"keyword\">THEN</span> a.cate_name</span><br><span class=\"line\">            <span class=\"keyword\">WHEN</span> b.cate_level = <span class=\"number\">2</span> <span class=\"keyword\">THEN</span> b.cate_name</span><br><span class=\"line\">            <span class=\"keyword\">WHEN</span> c.cate_level = <span class=\"number\">2</span> <span class=\"keyword\">THEN</span> c.cate_name</span><br><span class=\"line\">            <span class=\"keyword\">WHEN</span> d.cate_level = <span class=\"number\">2</span> <span class=\"keyword\">THEN</span> d.cate_name </span><br><span class=\"line\">            <span class=\"keyword\">ELSE</span> <span class=\"literal\">NULL</span> </span><br><span class=\"line\">    <span class=\"keyword\">END</span> cate_2_name</span><br><span class=\"line\">,<span class=\"keyword\">CASE</span>    <span class=\"keyword\">WHEN</span> a.cate_level = <span class=\"number\">3</span> <span class=\"keyword\">THEN</span> a.cate_id</span><br><span class=\"line\">            <span class=\"keyword\">WHEN</span> b.cate_level = <span class=\"number\">3</span> <span class=\"keyword\">THEN</span> b.cate_id</span><br><span class=\"line\">            <span class=\"keyword\">WHEN</span> c.cate_level = <span class=\"number\">3</span> <span class=\"keyword\">THEN</span> c.cate_id</span><br><span class=\"line\">            <span class=\"keyword\">WHEN</span> d.cate_level = <span class=\"number\">3</span> <span class=\"keyword\">THEN</span> d.cate_id </span><br><span class=\"line\">            <span class=\"keyword\">ELSE</span> <span class=\"literal\">NULL</span> </span><br><span class=\"line\">    <span class=\"keyword\">END</span> cate_3_id</span><br><span class=\"line\">,<span class=\"keyword\">CASE</span>    <span class=\"keyword\">WHEN</span> a.cate_level = <span class=\"number\">3</span> <span class=\"keyword\">THEN</span> a.cate_name</span><br><span class=\"line\">            <span class=\"keyword\">WHEN</span> b.cate_level = <span class=\"number\">3</span> <span class=\"keyword\">THEN</span> b.cate_name</span><br><span class=\"line\">            <span class=\"keyword\">WHEN</span> c.cate_level = <span class=\"number\">3</span> <span class=\"keyword\">THEN</span> c.cate_name</span><br><span class=\"line\">            <span class=\"keyword\">WHEN</span> d.cate_level = <span class=\"number\">3</span> <span class=\"keyword\">THEN</span> d.cate_name </span><br><span class=\"line\">            <span class=\"keyword\">ELSE</span> <span class=\"literal\">NULL</span> </span><br><span class=\"line\">    <span class=\"keyword\">END</span> cate_3_name</span><br><span class=\"line\">,<span class=\"keyword\">CASE</span>    <span class=\"keyword\">WHEN</span> a.cate_level = <span class=\"number\">4</span> <span class=\"keyword\">THEN</span> a.cate_id</span><br><span class=\"line\">            <span class=\"keyword\">WHEN</span> b.cate_level = <span class=\"number\">4</span> <span class=\"keyword\">THEN</span> b.cate_id</span><br><span class=\"line\">            <span class=\"keyword\">WHEN</span> c.cate_level = <span class=\"number\">4</span> <span class=\"keyword\">THEN</span> c.cate_id</span><br><span class=\"line\">            <span class=\"keyword\">WHEN</span> d.cate_level = <span class=\"number\">4</span> <span class=\"keyword\">THEN</span> d.cate_id </span><br><span class=\"line\">            <span class=\"keyword\">ELSE</span> <span class=\"literal\">NULL</span> </span><br><span class=\"line\">    <span class=\"keyword\">END</span> cate_4_id</span><br><span class=\"line\">,<span class=\"keyword\">CASE</span>    <span class=\"keyword\">WHEN</span> a.cate_level = <span class=\"number\">4</span> <span class=\"keyword\">THEN</span> a.cate_name</span><br><span class=\"line\">            <span class=\"keyword\">WHEN</span> b.cate_level = <span class=\"number\">4</span> <span class=\"keyword\">THEN</span> b.cate_name</span><br><span class=\"line\">            <span class=\"keyword\">WHEN</span> c.cate_level = <span class=\"number\">4</span> <span class=\"keyword\">THEN</span> c.cate_name</span><br><span class=\"line\">            <span class=\"keyword\">WHEN</span> d.cate_level = <span class=\"number\">4</span> <span class=\"keyword\">THEN</span> d.cate_name </span><br><span class=\"line\">            <span class=\"keyword\">ELSE</span> <span class=\"literal\">NULL</span> </span><br><span class=\"line\">    <span class=\"keyword\">END</span> cate_4_name</span><br><span class=\"line\"><span class=\"keyword\">FROM</span>    ods_monkey_product_category_df a</span><br><span class=\"line\"><span class=\"keyword\">LEFT</span> <span class=\"keyword\">JOIN</span> ods_monkey_product_category_df b</span><br><span class=\"line\"><span class=\"keyword\">on</span>      a.parent_cate_id = b.cate_id </span><br><span class=\"line\"><span class=\"keyword\">LEFT</span> <span class=\"keyword\">JOIN</span>   ods_monkey_product_category_df c</span><br><span class=\"line\"><span class=\"keyword\">ON</span>      b.parent_cate_id = c.cate_id</span><br><span class=\"line\"><span class=\"keyword\">LEFT</span> <span class=\"keyword\">JOIN</span> ods_monkey_product_category_df d</span><br><span class=\"line\"><span class=\"keyword\">ON</span>      c.parent_cate_id = d.cate_id </span><br><span class=\"line\"><span class=\"keyword\">LEFT</span> <span class=\"keyword\">JOIN</span>   ods_monkey_ai_industry_df  f</span><br><span class=\"line\"><span class=\"keyword\">ON</span>   a.industry_id = f.industry_id  </span><br></pre></td></tr></table></figure>\n<h2><span id=\"订单处理\">订单处理</span></h2><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> OVERWRITE <span class=\"keyword\">TABLE</span> dwd_order_child_order_info_du</span><br><span class=\"line\"><span class=\"keyword\">PARTITION</span>( ds = <span class=\"string\">&#x27;$&#123;ds&#125;&#x27;</span> , app = <span class=\"string\">&#x27;tb&#x27;</span> )  </span><br><span class=\"line\"><span class=\"keyword\">select</span> </span><br><span class=\"line\"><span class=\"comment\">/*+mapjoin(b)*/</span> </span><br><span class=\"line\"><span class=\"comment\">-- 流程节点  </span></span><br><span class=\"line\">gmt_order_create   order_create_gmt </span><br><span class=\"line\">,gmt_order_pay     pay_gmt   </span><br><span class=\"line\">,gmt_order_ship    ship_gmt </span><br><span class=\"line\">,gmt_order_end     order_end_gmt </span><br><span class=\"line\">,gmt_order_rated   rated_gmt      </span><br><span class=\"line\">,<span class=\"keyword\">if</span>(refund_status=<span class=\"string\">&#x27;SUCCESS&#x27;</span>,gmt_modified, <span class=\"literal\">NULL</span>)    refund_gmt  </span><br><span class=\"line\"><span class=\"comment\">--订单状态   </span></span><br><span class=\"line\">,<span class=\"keyword\">case</span> <span class=\"keyword\">when</span> gmt_order_rated&gt;gmt_order_create <span class=\"keyword\">then</span> <span class=\"number\">6</span></span><br><span class=\"line\"><span class=\"keyword\">when</span> a.order_status=<span class=\"string\">&#x27;TRADE_NO_CREATE_PAY&#x27;</span> <span class=\"keyword\">or</span> a.order_status=<span class=\"string\">&#x27;WAIT_BUYER_PAY&#x27;</span> <span class=\"keyword\">then</span> <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">when</span> a.order_status=<span class=\"string\">&#x27;WAIT_SELLER_SEND_GOODS&#x27;</span> <span class=\"keyword\">then</span> <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"keyword\">when</span> a.order_status=<span class=\"string\">&#x27;SELLER_CONSIGNED_PART&#x27;</span> <span class=\"keyword\">or</span> a.order_status=<span class=\"string\">&#x27;WAIT_BUYER_CONFIRM_GOODS&#x27;</span> <span class=\"keyword\">then</span> <span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"keyword\">when</span> a.order_status=<span class=\"string\">&#x27;TRADE_FINISHED&#x27;</span> <span class=\"keyword\">then</span> <span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"keyword\">when</span> a.order_status=<span class=\"string\">&#x27;TRADE_CLOSED&#x27;</span> <span class=\"keyword\">or</span> a.order_status=<span class=\"string\">&#x27;TRADE_CLOSED_BY_TAOBAO&#x27;</span> <span class=\"keyword\">then</span> <span class=\"number\">5</span></span><br><span class=\"line\"><span class=\"keyword\">else</span> <span class=\"literal\">null</span> <span class=\"keyword\">end</span> <span class=\"keyword\">as</span> order_status    \t\t\t\t\t\t\t<span class=\"comment\">--1：待付款    2：待发货    3：已发货    4：已完成    5：已关闭    6：已评价</span></span><br><span class=\"line\"><span class=\"comment\">--退货状态</span></span><br><span class=\"line\">,<span class=\"keyword\">case</span> <span class=\"keyword\">when</span> a.refund_status=<span class=\"string\">&#x27;WAIT_SELLER_AGREE&#x27;</span> <span class=\"keyword\">then</span> <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">when</span> a.refund_status=<span class=\"string\">&#x27;WAIT_BUYER_RETURN_GOODS&#x27;</span> <span class=\"keyword\">or</span> a.refund_status=<span class=\"string\">&#x27;SELLER_REFUSE_BUYER&#x27;</span> <span class=\"keyword\">then</span> <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"keyword\">when</span> a.refund_status=<span class=\"string\">&#x27;WAIT_SELLER_CONFIRM_GOODS&#x27;</span> <span class=\"keyword\">then</span> <span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"keyword\">when</span> a.refund_status=<span class=\"string\">&#x27;SUCCESS&#x27;</span> <span class=\"keyword\">then</span> <span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"keyword\">when</span> a.refund_status=<span class=\"string\">&#x27;CLOSED&#x27;</span> <span class=\"keyword\">then</span> <span class=\"number\">5</span></span><br><span class=\"line\"><span class=\"keyword\">else</span> <span class=\"literal\">null</span> <span class=\"keyword\">end</span> <span class=\"keyword\">as</span>   refund_status  \t\t\t\t\t\t\t<span class=\"comment\">--1、申请退款    2、处理退款申请    3、退货退款中    4、退款成功    5、退款关闭</span></span><br><span class=\"line\">,<span class=\"keyword\">if</span>(gmt_order_end <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">null</span> <span class=\"keyword\">and</span> order_status = <span class=\"string\">&#x27;TRADE_FINISHED&#x27;</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>)  is_order_success  </span><br><span class=\"line\">,<span class=\"keyword\">if</span>(refund_status = <span class=\"string\">&#x27;SUCCESS&#x27;</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>)   is_refund_success </span><br><span class=\"line\">,<span class=\"keyword\">if</span>(gmt_order_rated <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">null</span>, buyer_rate, <span class=\"number\">0</span> ) is_buyer_rated   <span class=\"comment\">-- 需要处理   </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--维度字段    </span></span><br><span class=\"line\">,tid   order_id </span><br><span class=\"line\">,<span class=\"keyword\">oid</span>   child_order_id  </span><br><span class=\"line\">,c.product_id</span><br><span class=\"line\">,a.iid  product_src_id  </span><br><span class=\"line\">,c.product_name </span><br><span class=\"line\">,b.shop_id           shop_id   </span><br><span class=\"line\">,b.shop_name         shop_name </span><br><span class=\"line\">,b.shop_account </span><br><span class=\"line\">,b.org_id            org_id </span><br><span class=\"line\">,b.org_name          org_name  </span><br><span class=\"line\"> </span><br><span class=\"line\">,buyer_nick          buyer_id  </span><br><span class=\"line\">,GET_PHONE(tb_tel(GET_JSON_OBJECT(a.features, <span class=\"string\">&#x27;$.wr_t_code&#x27;</span>)))         buyer_phone </span><br><span class=\"line\">,GET_JSON_OBJECT(a.features, <span class=\"string\">&#x27;$.receiver_name&#x27;</span>)             buyer_name   </span><br><span class=\"line\"></span><br><span class=\"line\">,<span class=\"literal\">null</span>    promotion_id   </span><br><span class=\"line\">,GET_ADDRESS(tb_order_decode(GET_JSON_OBJECT(a.features, <span class=\"string\">&#x27;$.wr_s_code&#x27;</span>)),<span class=\"number\">4</span>) <span class=\"keyword\">as</span> province\t<span class=\"comment\">--省份</span></span><br><span class=\"line\">,tb_order_decode(GET_JSON_OBJECT(a.features, <span class=\"string\">&#x27;$.wr_c_code&#x27;</span>)) <span class=\"keyword\">as</span> city\t \t<span class=\"comment\">--城市</span></span><br><span class=\"line\">,tb_order_decode(GET_JSON_OBJECT(a.features, <span class=\"string\">&#x27;$.wr_d_code&#x27;</span>)) <span class=\"keyword\">as</span> town\t\t<span class=\"comment\">--地区 </span></span><br><span class=\"line\"><span class=\"comment\">-- </span></span><br><span class=\"line\">,<span class=\"keyword\">if</span>(post_fee <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">null</span>, post_fee, <span class=\"number\">0</span> )   post_fee_amt</span><br><span class=\"line\">,<span class=\"keyword\">if</span>(payment <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">null</span>,   payment , <span class=\"number\">0</span>)   payment_amt</span><br><span class=\"line\">,<span class=\"keyword\">if</span>(<span class=\"keyword\">num</span> &gt; <span class=\"number\">0</span>, <span class=\"keyword\">num</span>, <span class=\"number\">1</span>)   product_num </span><br><span class=\"line\">,<span class=\"keyword\">if</span>(price &gt; <span class=\"number\">0</span>, price, <span class=\"keyword\">if</span>(<span class=\"keyword\">num</span> &gt; <span class=\"number\">0</span>, <span class=\"keyword\">ROUND</span>((total_fee+discount_fee)/<span class=\"keyword\">num</span>), total_fee+discount_fee))   product_amt  </span><br><span class=\"line\">,<span class=\"keyword\">if</span>(<span class=\"keyword\">num</span>*price &gt; <span class=\"number\">0</span>, <span class=\"keyword\">num</span>*price, total_fee+discount_fee )   product_total_amt    </span><br><span class=\"line\">,<span class=\"keyword\">if</span>(discount_fee <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">null</span>,<span class=\"keyword\">abs</span>(discount_fee), <span class=\"number\">0</span>)  discount_amt </span><br><span class=\"line\"><span class=\"comment\">--</span></span><br><span class=\"line\">,a.gmt_create       create_gmt  </span><br><span class=\"line\">,a.gmt_modified     update_gmt  </span><br><span class=\"line\">,<span class=\"keyword\">if</span>(a.status = <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>)   is_del  </span><br><span class=\"line\">,a.features         feature </span><br><span class=\"line\">,TO_JSON(<span class=\"string\">&quot;flag&quot;</span>, flag</span><br><span class=\"line\">    ,<span class=\"string\">&quot;reason&quot;</span>,reason</span><br><span class=\"line\">    ,<span class=\"string\">&quot;refund_success_time&quot;</span>,refund_success_time</span><br><span class=\"line\">)    extra_info </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span>  (</span><br><span class=\"line\">    <span class=\"keyword\">select</span> *</span><br><span class=\"line\">    <span class=\"keyword\">from</span>  weier_ai.ods_order_info_du </span><br><span class=\"line\">    <span class=\"keyword\">where</span> ds = <span class=\"string\">&#x27;$&#123;ds&#125;&#x27;</span> </span><br><span class=\"line\">    <span class=\"keyword\">and</span> tid <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">null</span> </span><br><span class=\"line\">    <span class=\"keyword\">AND</span> <span class=\"keyword\">oid</span> <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">null</span> </span><br><span class=\"line\">    <span class=\"keyword\">AND</span> iid <span class=\"keyword\">is</span> <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span> </span><br><span class=\"line\">    <span class=\"keyword\">AND</span> seller_nick <span class=\"keyword\">is</span> <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span> </span><br><span class=\"line\">    <span class=\"keyword\">AND</span> buyer_nick <span class=\"keyword\">is</span> <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span> </span><br><span class=\"line\">    <span class=\"keyword\">AND</span> gmt_order_create <span class=\"keyword\">is</span> <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>  </span><br><span class=\"line\">)   a </span><br><span class=\"line\"><span class=\"comment\">-- 排除非客户的订单数据</span></span><br><span class=\"line\"><span class=\"keyword\">join</span> (</span><br><span class=\"line\">    <span class=\"keyword\">select</span> * </span><br><span class=\"line\">    <span class=\"keyword\">from</span> (</span><br><span class=\"line\">        <span class=\"keyword\">select</span> * </span><br><span class=\"line\">        ,ROW_NUMBER()<span class=\"keyword\">over</span>(<span class=\"keyword\">partition</span> <span class=\"keyword\">by</span> app, shop_account <span class=\"keyword\">order</span> <span class=\"keyword\">by</span> shop_end_gmt <span class=\"keyword\">desc</span>) rk </span><br><span class=\"line\">        <span class=\"keyword\">from</span> weier_ai.dim_shop </span><br><span class=\"line\">        <span class=\"keyword\">where</span> ds = <span class=\"string\">&#x27;$&#123;ds&#125;&#x27;</span> </span><br><span class=\"line\">        <span class=\"comment\">-- 只获取 tb 的店铺  </span></span><br><span class=\"line\">        <span class=\"keyword\">and</span> app = <span class=\"string\">&#x27;tb&#x27;</span> </span><br><span class=\"line\">        <span class=\"keyword\">and</span> shop_id <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">null</span> </span><br><span class=\"line\">        <span class=\"keyword\">and</span> shop_account <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">null</span> </span><br><span class=\"line\">    ) </span><br><span class=\"line\">    <span class=\"keyword\">where</span> rk = <span class=\"number\">1</span> </span><br><span class=\"line\">)   b </span><br><span class=\"line\"><span class=\"keyword\">on</span>  <span class=\"keyword\">trim</span>(a.seller_nick) = <span class=\"keyword\">trim</span>(b.shop_account) </span><br><span class=\"line\"><span class=\"keyword\">left</span> <span class=\"keyword\">JOIN</span> (</span><br><span class=\"line\">    <span class=\"keyword\">select</span> * </span><br><span class=\"line\">    <span class=\"keyword\">from</span> (</span><br><span class=\"line\">        <span class=\"keyword\">select</span> * </span><br><span class=\"line\">        ,ROW_NUMBER()<span class=\"keyword\">over</span>(<span class=\"keyword\">partition</span> <span class=\"keyword\">by</span> app, shop_account, product_src_id <span class=\"keyword\">order</span> <span class=\"keyword\">by</span> create_gmt <span class=\"keyword\">desc</span>) rk </span><br><span class=\"line\">        <span class=\"keyword\">from</span> weier_ai.dim_product </span><br><span class=\"line\">        <span class=\"keyword\">where</span> ds = <span class=\"string\">&#x27;$&#123;ds&#125;&#x27;</span>  </span><br><span class=\"line\">        <span class=\"comment\">-- 只获取 tb 的商品</span></span><br><span class=\"line\">        <span class=\"keyword\">and</span> app = <span class=\"string\">&#x27;tb&#x27;</span></span><br><span class=\"line\">        <span class=\"keyword\">and</span> product_id <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">null</span> </span><br><span class=\"line\">        <span class=\"keyword\">and</span> product_src_id <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">null</span> </span><br><span class=\"line\">        <span class=\"keyword\">and</span> shop_account <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">null</span> </span><br><span class=\"line\">    ) </span><br><span class=\"line\">    <span class=\"keyword\">where</span> rk = <span class=\"number\">1</span> </span><br><span class=\"line\">)  c </span><br><span class=\"line\"><span class=\"keyword\">on</span> a.iid = c.product_src_id </span><br><span class=\"line\"><span class=\"keyword\">and</span> <span class=\"keyword\">trim</span>(b.shop_account) = <span class=\"keyword\">trim</span>(c.shop_account)     </span><br><span class=\"line\">;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">set</span> odps.stage.mapper.split.size = <span class=\"number\">512</span>;</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> OVERWRITE <span class=\"keyword\">TABLE</span> dwd_order_child_order_info_di</span><br><span class=\"line\"><span class=\"keyword\">PARTITION</span>( ds,app )  </span><br><span class=\"line\"><span class=\"keyword\">select</span> </span><br><span class=\"line\"><span class=\"comment\">-- 流程节点  </span></span><br><span class=\"line\">order_create_gmt </span><br><span class=\"line\">,pay_gmt   </span><br><span class=\"line\">,ship_gmt </span><br><span class=\"line\">,order_end_gmt </span><br><span class=\"line\">,rated_gmt      </span><br><span class=\"line\">,refund_gmt     </span><br><span class=\"line\">,order_status   </span><br><span class=\"line\">,refund_status  </span><br><span class=\"line\">,is_order_success  </span><br><span class=\"line\">,is_refund_success </span><br><span class=\"line\">,is_buyer_rated   </span><br><span class=\"line\"><span class=\"comment\">--维度字段    </span></span><br><span class=\"line\">,order_id </span><br><span class=\"line\">,child_order_id  </span><br><span class=\"line\">,product_id</span><br><span class=\"line\">,product_src_id  </span><br><span class=\"line\">,product_name</span><br><span class=\"line\">,shop_id  </span><br><span class=\"line\">,shop_name</span><br><span class=\"line\">,shop_account </span><br><span class=\"line\">,org_id</span><br><span class=\"line\">,org_name</span><br><span class=\"line\">,buyer_id</span><br><span class=\"line\">,buyer_phone</span><br><span class=\"line\">,buyer_name</span><br><span class=\"line\">,promotion_id</span><br><span class=\"line\">,province</span><br><span class=\"line\">,city</span><br><span class=\"line\">,town</span><br><span class=\"line\">,post_fee_amt</span><br><span class=\"line\">,payment_amt</span><br><span class=\"line\">,product_num</span><br><span class=\"line\">,product_amt</span><br><span class=\"line\">,product_total_amt</span><br><span class=\"line\">,discount_amt</span><br><span class=\"line\">,create_gmt</span><br><span class=\"line\">,update_gmt</span><br><span class=\"line\">,is_del</span><br><span class=\"line\">,feature</span><br><span class=\"line\">,extra_info</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"comment\">--重新放进order_create_gmt订单创建时间分区</span></span><br><span class=\"line\">,TO_CHAR(order_create_gmt, <span class=\"string\">&#x27;yyyymmdd&#x27;</span>) ds</span><br><span class=\"line\">,app     </span><br><span class=\"line\"><span class=\"keyword\">from</span> dwd_order_child_order_info_du </span><br><span class=\"line\"><span class=\"keyword\">where</span> ds = <span class=\"string\">&#x27;$&#123;ds&#125;&#x27;</span> <span class=\"keyword\">and</span> app=<span class=\"string\">&#x27;tb&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">and</span> TO_CHAR(order_create_gmt, <span class=\"string\">&#x27;yyyymmdd&#x27;</span>) &gt; TO_CHAR(<span class=\"keyword\">dateadd</span>(<span class=\"keyword\">to_date</span>(<span class=\"string\">&#x27;$&#123;ds&#125;&#x27;</span>, <span class=\"string\">&#x27;yyyymmdd&#x27;</span>), <span class=\"number\">-9</span>, <span class=\"string\">&#x27;mm&#x27;</span>),<span class=\"string\">&#x27;yyyymmdd&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">union</span> <span class=\"keyword\">all</span> </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">select</span> </span><br><span class=\"line\"><span class=\"comment\">-- 流程节点  </span></span><br><span class=\"line\">a.order_create_gmt </span><br><span class=\"line\">,a.pay_gmt   </span><br><span class=\"line\">,a.ship_gmt </span><br><span class=\"line\">,a.order_end_gmt </span><br><span class=\"line\">,a.rated_gmt      </span><br><span class=\"line\">,a.refund_gmt     </span><br><span class=\"line\">,a.order_status   </span><br><span class=\"line\">,a.refund_status  </span><br><span class=\"line\">,a.is_order_success  </span><br><span class=\"line\">,a.is_refund_success </span><br><span class=\"line\">,a.is_buyer_rated   </span><br><span class=\"line\"><span class=\"comment\">--维度字段    </span></span><br><span class=\"line\">,a.order_id </span><br><span class=\"line\">,a.child_order_id  </span><br><span class=\"line\">,a.product_id</span><br><span class=\"line\">,a.product_src_id  </span><br><span class=\"line\">,a.product_name</span><br><span class=\"line\">,a.shop_id  </span><br><span class=\"line\">,a.shop_name</span><br><span class=\"line\">,a.shop_account </span><br><span class=\"line\">,a.org_id</span><br><span class=\"line\">,a.org_name</span><br><span class=\"line\">,a.buyer_id</span><br><span class=\"line\">,a.buyer_phone</span><br><span class=\"line\">,a.buyer_name</span><br><span class=\"line\">,a.promotion_id</span><br><span class=\"line\">,a.province</span><br><span class=\"line\">,a.city</span><br><span class=\"line\">,a.town</span><br><span class=\"line\">,a.post_fee_amt</span><br><span class=\"line\">,a.payment_amt</span><br><span class=\"line\">,a.product_num</span><br><span class=\"line\">,a.product_amt</span><br><span class=\"line\">,a.product_total_amt</span><br><span class=\"line\">,a.discount_amt</span><br><span class=\"line\">,a.create_gmt</span><br><span class=\"line\">,a.update_gmt</span><br><span class=\"line\">,a.is_del</span><br><span class=\"line\">,a.feature</span><br><span class=\"line\">,a.extra_info  </span><br><span class=\"line\"><span class=\"comment\">--</span></span><br><span class=\"line\">,a.ds    </span><br><span class=\"line\">,a.app </span><br><span class=\"line\"><span class=\"keyword\">from</span> (</span><br><span class=\"line\">     <span class=\"comment\">-- 发生变动的老分区订单数据   </span></span><br><span class=\"line\">    <span class=\"keyword\">select</span> * </span><br><span class=\"line\">    <span class=\"keyword\">from</span> dwd_order_child_order_info_di  </span><br><span class=\"line\">    <span class=\"keyword\">where</span> ds <span class=\"keyword\">in</span> (</span><br><span class=\"line\">        <span class=\"keyword\">select</span> TO_CHAR(order_create_gmt, <span class=\"string\">&#x27;yyyymmdd&#x27;</span>)  </span><br><span class=\"line\">        <span class=\"keyword\">from</span> dwd_order_child_order_info_du  </span><br><span class=\"line\">        <span class=\"keyword\">where</span> ds = <span class=\"string\">&#x27;$&#123;ds&#125;&#x27;</span> <span class=\"keyword\">and</span> app=<span class=\"string\">&#x27;tb&#x27;</span> </span><br><span class=\"line\">        <span class=\"keyword\">and</span> order_create_gmt <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">null</span> </span><br><span class=\"line\">        <span class=\"keyword\">and</span> TO_CHAR(order_create_gmt, <span class=\"string\">&#x27;yyyymmdd&#x27;</span>) &gt; TO_CHAR(<span class=\"keyword\">dateadd</span>(<span class=\"keyword\">to_date</span>(<span class=\"string\">&#x27;$&#123;ds&#125;&#x27;</span>, <span class=\"string\">&#x27;yyyymmdd&#x27;</span>), <span class=\"number\">-9</span>, <span class=\"string\">&#x27;mm&#x27;</span>),<span class=\"string\">&#x27;yyyymmdd&#x27;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">group</span> <span class=\"keyword\">by</span> TO_CHAR(order_create_gmt, <span class=\"string\">&#x27;yyyymmdd&#x27;</span>)   </span><br><span class=\"line\">    )  </span><br><span class=\"line\">    <span class=\"keyword\">and</span> app=<span class=\"string\">&#x27;tb&#x27;</span></span><br><span class=\"line\">    <span class=\"keyword\">and</span> order_id <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">null</span> </span><br><span class=\"line\">    <span class=\"keyword\">and</span> child_order_id <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">null</span> </span><br><span class=\"line\">) a </span><br><span class=\"line\"><span class=\"keyword\">left</span> <span class=\"keyword\">join</span> (</span><br><span class=\"line\">    <span class=\"comment\">-- 新订单数据</span></span><br><span class=\"line\">    <span class=\"keyword\">select</span> * </span><br><span class=\"line\">    <span class=\"keyword\">from</span> dwd_order_child_order_info_du  </span><br><span class=\"line\">    <span class=\"keyword\">where</span> ds = <span class=\"string\">&#x27;$&#123;ds&#125;&#x27;</span> <span class=\"keyword\">and</span> app=<span class=\"string\">&#x27;tb&#x27;</span> </span><br><span class=\"line\">    <span class=\"keyword\">and</span> order_id <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">null</span> </span><br><span class=\"line\">    <span class=\"keyword\">and</span> child_order_id <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">null</span> </span><br><span class=\"line\">) b </span><br><span class=\"line\"><span class=\"keyword\">on</span> a.order_id = b.order_id </span><br><span class=\"line\"><span class=\"keyword\">and</span> a.child_order_id = b.child_order_id </span><br><span class=\"line\"><span class=\"keyword\">where</span> b.child_order_id <span class=\"keyword\">is</span> <span class=\"literal\">null</span> </span><br><span class=\"line\">;</span><br></pre></td></tr></table></figure>\n<h2><span id=\"正则处理\">正则处理</span></h2><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"keyword\">select</span></span><br><span class=\"line\">    <span class=\"keyword\">replace</span>(</span><br><span class=\"line\">    <span class=\"keyword\">replace</span>(</span><br><span class=\"line\">    <span class=\"keyword\">replace</span>(</span><br><span class=\"line\">    <span class=\"keyword\">replace</span>(</span><br><span class=\"line\">    regexp_replace(</span><br><span class=\"line\">        regexp_substr(</span><br><span class=\"line\">            <span class=\"keyword\">content</span>,<span class=\"string\">&#x27;\\&#123;.*\\&#125;&#x27;</span>),<span class=\"string\">&#x27;\\\\\\\\&#x27;</span>,<span class=\"string\">&#x27;&#x27;</span>),<span class=\"string\">&#x27;\\&quot;\\&#123;&#x27;</span>,<span class=\"string\">&#x27;&#123;&#x27;</span>),</span><br><span class=\"line\">            <span class=\"string\">&#x27;\\&#125;\\&quot;&#x27;</span>,<span class=\"string\">&#x27;&#125;&#x27;</span>),<span class=\"string\">&#x27;\\&quot;\\[&#x27;</span>,<span class=\"string\">&#x27;[&#x27;</span>),<span class=\"string\">&#x27;\\]\\&quot;&#x27;</span>,<span class=\"string\">&#x27;]&#x27;</span></span><br><span class=\"line\">            ) <span class=\"keyword\">json</span></span><br><span class=\"line\">    <span class=\"keyword\">from</span> ods_loghub_weierai_im_group_online_di_test</span><br><span class=\"line\">    <span class=\"keyword\">where</span></span><br><span class=\"line\">    ds = <span class=\"string\">&#x27;$&#123;ds&#125;&#x27;</span></span><br><span class=\"line\">    <span class=\"keyword\">and</span> <span class=\"keyword\">INSTR</span>(<span class=\"keyword\">content</span>,<span class=\"string\">&#x27;发送至客户端成功&#x27;</span>)&gt;<span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- select </span></span><br><span class=\"line\"><span class=\"comment\">-- case when company regexp &#x27;.*公司$&#x27; then 1 when company regexp &#x27;.*中心$&#x27; then 2 end company_category;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">select</span> regexp_extract(<span class=\"string\">&#x27;IloveYou&#x27;</span>,<span class=\"string\">&#x27;(I)(.*?)(You)&#x27;</span>,<span class=\"number\">2</span>) ;</span><br><span class=\"line\"><span class=\"keyword\">select</span> regexp_replace(<span class=\"string\">&quot;IloveYou&quot;</span>,<span class=\"string\">&quot;You&quot;</span>,<span class=\"string\">&quot;&quot;</span>) ;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 1 REGEXP_LIKE ：与LIKE的功能相似</span></span><br><span class=\"line\"><span class=\"comment\">--查询value中以1开头60结束的记录并且长度是7位</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> fzq <span class=\"keyword\">where</span> <span class=\"keyword\">value</span> <span class=\"keyword\">like</span> <span class=\"string\">&#x27;1____60&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> fzq <span class=\"keyword\">where</span> <span class=\"keyword\">regexp_like</span>(<span class=\"keyword\">value</span>,<span class=\"string\">&#x27;1....60&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 2 REGEXP_INSTR ：与INSTR的功能相似</span></span><br><span class=\"line\"><span class=\"comment\">--返回匹配上的初始索引位置</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> REGEXP_INSTR(<span class=\"string\">&#x27;http3213&#x27;</span>, <span class=\"string\">&#x27;http&#x27;</span>) ; <span class=\"comment\">--1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 3 REGEXP_SUBSTR ：与SUBSTR的功能相似</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> REGEXP_SUBSTR(<span class=\"string\">&#x27;http3213&#x27;</span>, <span class=\"string\">&#x27;http&#x27;</span>) ; <span class=\"comment\">--http</span></span><br><span class=\"line\"><span class=\"comment\">-- 4 REGEXP_REPLACE ：与REPLACE的功能相似</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- REGEXP_SUBSTR延伸substr()函数的功能，让你搜索一个正则表达式模式字符串。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 这也类似于REGEXP_INSTR，而是返回子字符串的位置，它返回的子字符串本身。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 5 REGEXP_COUNT(msg_content, &quot;[.?!。？！]+&quot;) 统计匹配上的正则出现次数</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> REGEXP_COUNT(<span class=\"string\">&#x27;！2131232131FFF!&#x27;</span>, <span class=\"string\">&quot;[.?!。？！]+&quot;</span>) ;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"SQL整理\"><a href=\"#SQL整理\" class=\"headerlink\" title=\"SQL整理\"></a>SQL整理</h1><h2 id=\"维度打平\"><a href=\"#维度打平\" class=\"headerlink\" title=\"维度打平\"></a>维度打平</h2><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">with</span> t1 <span class=\"keyword\">as</span> (</span><br><span class=\"line\">    <span class=\"keyword\">select</span> <span class=\"keyword\">id</span>  industry_id</span><br><span class=\"line\">    ,industry_name </span><br><span class=\"line\">    <span class=\"keyword\">from</span> weier_ai.ods_monkey_ai_industry_df </span><br><span class=\"line\">    <span class=\"keyword\">where</span> ds = <span class=\"string\">&#x27;$&#123;ds&#125;&#x27;</span> </span><br><span class=\"line\">    <span class=\"keyword\">and</span> <span class=\"keyword\">id</span> <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">null</span> </span><br><span class=\"line\">    <span class=\"keyword\">and</span> industry_name <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">null</span> </span><br><span class=\"line\">    <span class=\"keyword\">and</span> <span class=\"keyword\">status</span> = <span class=\"number\">0</span> </span><br><span class=\"line\">    <span class=\"keyword\">group</span> <span class=\"keyword\">by</span> <span class=\"keyword\">id</span>, industry_name</span><br><span class=\"line\">    </span><br><span class=\"line\">),</span><br><span class=\"line\">t2 <span class=\"keyword\">as</span>(</span><br><span class=\"line\">    <span class=\"keyword\">select</span> </span><br><span class=\"line\">    <span class=\"string\">&#x27;ks&#x27;</span>                                   app </span><br><span class=\"line\">    ,cid                                   cate_id</span><br><span class=\"line\">    ,<span class=\"keyword\">name</span>                                  cate_name</span><br><span class=\"line\">    ,parent_cid                            parent_cate_id</span><br><span class=\"line\">    ,cat_level                             cate_level</span><br><span class=\"line\">    ,<span class=\"keyword\">if</span>(is_parent = <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>)               is_parent  </span><br><span class=\"line\">    ,industry_id                           industry_id</span><br><span class=\"line\">    ,<span class=\"keyword\">status</span>                                cate_status</span><br><span class=\"line\">    ,features                              feature                    </span><br><span class=\"line\">    ,gmt_create                            create_gmt</span><br><span class=\"line\">    ,gmt_modified                          update_gmt    </span><br><span class=\"line\">    ,ds    </span><br><span class=\"line\">    <span class=\"comment\">-- 这表中 有平台id 字段   </span></span><br><span class=\"line\">    <span class=\"keyword\">from</span> weier_ai.ods_resource_platform_product_category_df </span><br><span class=\"line\">    <span class=\"keyword\">where</span>   ds = <span class=\"string\">&#x27;$&#123;ds&#125;&#x27;</span>  </span><br><span class=\"line\">    <span class=\"keyword\">AND</span>     cid <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">null</span> </span><br><span class=\"line\">    <span class=\"keyword\">AND</span>     <span class=\"keyword\">name</span> <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">null</span> </span><br><span class=\"line\">    <span class=\"keyword\">AND</span>     <span class=\"keyword\">status</span> = <span class=\"string\">&#x27;0&#x27;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"keyword\">select</span></span><br><span class=\"line\">a.app </span><br><span class=\"line\">,a.cate_id</span><br><span class=\"line\">,a.cate_name</span><br><span class=\"line\">,a.parent_cate_id </span><br><span class=\"line\">,<span class=\"keyword\">CASE</span></span><br><span class=\"line\">            <span class=\"keyword\">WHEN</span> d.cate_id <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">null</span> <span class=\"keyword\">THEN</span> <span class=\"number\">4</span></span><br><span class=\"line\">            <span class=\"keyword\">WHEN</span> d.cate_id <span class=\"keyword\">is</span> <span class=\"literal\">null</span> <span class=\"keyword\">and</span> c.cate_id <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">null</span> <span class=\"keyword\">THEN</span> <span class=\"number\">3</span></span><br><span class=\"line\">            <span class=\"keyword\">WHEN</span> c.cate_id <span class=\"keyword\">is</span> <span class=\"literal\">null</span> <span class=\"keyword\">and</span> b.cate_id <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">null</span> <span class=\"keyword\">THEN</span> <span class=\"number\">2</span></span><br><span class=\"line\">            <span class=\"keyword\">when</span> b.cate_id <span class=\"keyword\">is</span> <span class=\"literal\">null</span> <span class=\"keyword\">and</span> a.cate_id <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">null</span> <span class=\"keyword\">THEN</span> <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">END</span>     cate_level </span><br><span class=\"line\">,a.is_parent</span><br><span class=\"line\">,a.industry_id</span><br><span class=\"line\">,f.industry_name</span><br><span class=\"line\">,a.cate_status</span><br><span class=\"line\">,a.feature</span><br><span class=\"line\">,a.create_gmt</span><br><span class=\"line\">,a.update_gmt</span><br><span class=\"line\">,<span class=\"keyword\">CASE</span></span><br><span class=\"line\">            <span class=\"keyword\">WHEN</span> d.cate_id <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">null</span> <span class=\"keyword\">THEN</span> d.cate_id</span><br><span class=\"line\">            <span class=\"keyword\">WHEN</span> d.cate_id <span class=\"keyword\">is</span> <span class=\"literal\">null</span> <span class=\"keyword\">and</span> c.cate_id <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">null</span> <span class=\"keyword\">THEN</span> c.cate_id</span><br><span class=\"line\">            <span class=\"keyword\">WHEN</span> c.cate_id <span class=\"keyword\">is</span> <span class=\"literal\">null</span> <span class=\"keyword\">and</span> b.cate_id <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">null</span> <span class=\"keyword\">THEN</span> b.cate_id </span><br><span class=\"line\">            <span class=\"keyword\">when</span> b.cate_id <span class=\"keyword\">is</span> <span class=\"literal\">null</span> <span class=\"keyword\">and</span> a.cate_id <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">null</span> <span class=\"keyword\">THEN</span> a.cate_id </span><br><span class=\"line\">    <span class=\"keyword\">END</span> cate_1_id</span><br><span class=\"line\">,<span class=\"keyword\">CASE</span>   </span><br><span class=\"line\">            <span class=\"keyword\">WHEN</span> d.cate_name <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">null</span> <span class=\"keyword\">THEN</span> d.cate_name</span><br><span class=\"line\">            <span class=\"keyword\">WHEN</span> d.cate_id <span class=\"keyword\">is</span> <span class=\"literal\">null</span> <span class=\"keyword\">and</span> c.cate_name <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">null</span> <span class=\"keyword\">THEN</span> c.cate_name</span><br><span class=\"line\">            <span class=\"keyword\">WHEN</span> c.cate_id <span class=\"keyword\">is</span> <span class=\"literal\">null</span> <span class=\"keyword\">and</span> b.cate_name <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">null</span> <span class=\"keyword\">THEN</span> b.cate_name </span><br><span class=\"line\">            <span class=\"keyword\">when</span> b.cate_id <span class=\"keyword\">is</span> <span class=\"literal\">null</span> <span class=\"keyword\">and</span> a.cate_name <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">null</span> <span class=\"keyword\">THEN</span> a.cate_name </span><br><span class=\"line\">    <span class=\"keyword\">END</span> cate_1_name </span><br><span class=\"line\">,<span class=\"keyword\">CASE</span>   </span><br><span class=\"line\">            <span class=\"keyword\">WHEN</span> d.cate_id <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">null</span> <span class=\"keyword\">and</span> c.cate_id <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">null</span> <span class=\"keyword\">THEN</span> c.cate_id </span><br><span class=\"line\">            <span class=\"keyword\">WHEN</span> d.cate_id <span class=\"keyword\">is</span> <span class=\"literal\">null</span> <span class=\"keyword\">and</span> c.cate_id <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">null</span> <span class=\"keyword\">and</span> b.cate_id <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">null</span> <span class=\"keyword\">THEN</span> b.cate_id </span><br><span class=\"line\">            <span class=\"keyword\">WHEN</span> c.cate_id <span class=\"keyword\">is</span> <span class=\"literal\">null</span> <span class=\"keyword\">and</span> b.cate_id <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">null</span> <span class=\"keyword\">and</span> a.cate_id <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">null</span> <span class=\"keyword\">THEN</span> a.cate_id </span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"literal\">null</span> </span><br><span class=\"line\">    <span class=\"keyword\">END</span> cate_2_id </span><br><span class=\"line\">,<span class=\"keyword\">CASE</span>    </span><br><span class=\"line\">            <span class=\"keyword\">WHEN</span> d.cate_name <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">null</span> <span class=\"keyword\">and</span> c.cate_name <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">null</span> <span class=\"keyword\">THEN</span> c.cate_name </span><br><span class=\"line\">            <span class=\"keyword\">WHEN</span> d.cate_name <span class=\"keyword\">is</span> <span class=\"literal\">null</span> <span class=\"keyword\">and</span> c.cate_name <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">null</span> <span class=\"keyword\">and</span> b.cate_name <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">null</span> <span class=\"keyword\">THEN</span> b.cate_name </span><br><span class=\"line\">            <span class=\"keyword\">WHEN</span> c.cate_name <span class=\"keyword\">is</span> <span class=\"literal\">null</span> <span class=\"keyword\">and</span> b.cate_name <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">null</span> <span class=\"keyword\">and</span> a.cate_name <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">null</span> <span class=\"keyword\">THEN</span> a.cate_name  </span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"literal\">null</span> </span><br><span class=\"line\">    <span class=\"keyword\">END</span> cate_2_name</span><br><span class=\"line\">,<span class=\"keyword\">CASE</span>  </span><br><span class=\"line\">            <span class=\"keyword\">WHEN</span> d.cate_id <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">null</span> <span class=\"keyword\">and</span> c.cate_id <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">null</span> <span class=\"keyword\">and</span> b.cate_id <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">null</span> <span class=\"keyword\">THEN</span> b.cate_id </span><br><span class=\"line\">            <span class=\"keyword\">WHEN</span> d.cate_id <span class=\"keyword\">is</span> <span class=\"literal\">null</span> <span class=\"keyword\">and</span> c.cate_id <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">null</span> <span class=\"keyword\">and</span> b.cate_id <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">null</span> <span class=\"keyword\">and</span> a.cate_id <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">null</span> <span class=\"keyword\">THEN</span> a.cate_id </span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"literal\">null</span> </span><br><span class=\"line\">    <span class=\"keyword\">END</span> cate_3_id</span><br><span class=\"line\">,<span class=\"keyword\">CASE</span>     </span><br><span class=\"line\">            <span class=\"keyword\">WHEN</span> d.cate_name <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">null</span> <span class=\"keyword\">and</span> c.cate_name <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">null</span> <span class=\"keyword\">and</span> b.cate_name <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">null</span> <span class=\"keyword\">THEN</span> b.cate_name </span><br><span class=\"line\">            <span class=\"keyword\">WHEN</span> d.cate_name <span class=\"keyword\">is</span> <span class=\"literal\">null</span> <span class=\"keyword\">and</span> c.cate_name <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">null</span> <span class=\"keyword\">and</span> b.cate_name <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">null</span> <span class=\"keyword\">and</span> a.cate_name <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">null</span> <span class=\"keyword\">THEN</span> a.cate_name </span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"literal\">null</span> </span><br><span class=\"line\">    <span class=\"keyword\">END</span> cate_3_name</span><br><span class=\"line\">,<span class=\"keyword\">CASE</span>   </span><br><span class=\"line\">            <span class=\"keyword\">WHEN</span>  d.cate_id <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">null</span> <span class=\"keyword\">and</span> c.cate_id <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">null</span> <span class=\"keyword\">and</span> b.cate_id <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">null</span> <span class=\"keyword\">and</span> a.cate_id <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">null</span> <span class=\"keyword\">THEN</span> a.cate_id </span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"literal\">null</span> </span><br><span class=\"line\">    <span class=\"keyword\">END</span> cate_4_id</span><br><span class=\"line\">,<span class=\"keyword\">CASE</span>   </span><br><span class=\"line\">            <span class=\"keyword\">WHEN</span> d.cate_name <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">null</span> <span class=\"keyword\">and</span> c.cate_name <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">null</span> <span class=\"keyword\">and</span> b.cate_name <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">null</span> <span class=\"keyword\">and</span> a.cate_name <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">null</span> <span class=\"keyword\">THEN</span> a.cate_name  </span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"literal\">null</span> </span><br><span class=\"line\">    <span class=\"keyword\">END</span> cate_4_name</span><br><span class=\"line\"><span class=\"keyword\">from</span>  t2 a </span><br><span class=\"line\"><span class=\"keyword\">left</span> <span class=\"keyword\">join</span> t2 b</span><br><span class=\"line\"><span class=\"keyword\">on</span>  a.parent_cate_id = b.cate_id </span><br><span class=\"line\"><span class=\"keyword\">left</span> <span class=\"keyword\">join</span> t2 c</span><br><span class=\"line\"><span class=\"keyword\">on</span>  b.parent_cate_id = c.cate_id </span><br><span class=\"line\"><span class=\"keyword\">left</span> <span class=\"keyword\">join</span> t2 d</span><br><span class=\"line\"><span class=\"keyword\">on</span>  c.parent_cate_id = d.cate_id  </span><br><span class=\"line\"><span class=\"keyword\">LEFT</span> <span class=\"keyword\">JOIN</span>   t1  f </span><br><span class=\"line\"><span class=\"keyword\">ON</span>   a.industry_id = f.industry_id </span><br><span class=\"line\">; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span>  </span><br><span class=\"line\">a.app </span><br><span class=\"line\">,a.cate_id</span><br><span class=\"line\">,a.cate_name</span><br><span class=\"line\">,a.parent_cate_id</span><br><span class=\"line\">,a.cate_level <span class=\"comment\">--1 为最高级</span></span><br><span class=\"line\">,a.is_parent</span><br><span class=\"line\">,a.industry_id</span><br><span class=\"line\">,f.industry_name</span><br><span class=\"line\">,a.cate_status</span><br><span class=\"line\">,a.feature</span><br><span class=\"line\">,a.create_gmt</span><br><span class=\"line\">,a.update_gmt</span><br><span class=\"line\">,<span class=\"keyword\">CASE</span>    <span class=\"keyword\">WHEN</span> a.cate_level = <span class=\"number\">1</span> <span class=\"keyword\">THEN</span> a.cate_id</span><br><span class=\"line\">            <span class=\"keyword\">WHEN</span> b.cate_level = <span class=\"number\">1</span> <span class=\"keyword\">THEN</span> b.cate_id</span><br><span class=\"line\">            <span class=\"keyword\">WHEN</span> c.cate_level = <span class=\"number\">1</span> <span class=\"keyword\">THEN</span> c.cate_id</span><br><span class=\"line\">            <span class=\"keyword\">WHEN</span> d.cate_level = <span class=\"number\">1</span> <span class=\"keyword\">THEN</span> d.cate_id </span><br><span class=\"line\">            <span class=\"keyword\">ELSE</span> <span class=\"literal\">NULL</span> </span><br><span class=\"line\">    <span class=\"keyword\">END</span> cate_1_id</span><br><span class=\"line\">,<span class=\"keyword\">CASE</span>    <span class=\"keyword\">WHEN</span> a.cate_level = <span class=\"number\">1</span> <span class=\"keyword\">THEN</span> a.cate_name</span><br><span class=\"line\">            <span class=\"keyword\">WHEN</span> b.cate_level = <span class=\"number\">1</span> <span class=\"keyword\">THEN</span> b.cate_name</span><br><span class=\"line\">            <span class=\"keyword\">WHEN</span> c.cate_level = <span class=\"number\">1</span> <span class=\"keyword\">THEN</span> c.cate_name</span><br><span class=\"line\">            <span class=\"keyword\">WHEN</span> d.cate_level = <span class=\"number\">1</span> <span class=\"keyword\">THEN</span> d.cate_name </span><br><span class=\"line\">            <span class=\"keyword\">ELSE</span> <span class=\"literal\">NULL</span> </span><br><span class=\"line\">    <span class=\"keyword\">END</span> cate_1_name</span><br><span class=\"line\">,<span class=\"keyword\">CASE</span>    <span class=\"keyword\">WHEN</span> a.cate_level = <span class=\"number\">2</span> <span class=\"keyword\">THEN</span> a.cate_id</span><br><span class=\"line\">            <span class=\"keyword\">WHEN</span> b.cate_level = <span class=\"number\">2</span> <span class=\"keyword\">THEN</span> b.cate_id</span><br><span class=\"line\">            <span class=\"keyword\">WHEN</span> c.cate_level = <span class=\"number\">2</span> <span class=\"keyword\">THEN</span> c.cate_id</span><br><span class=\"line\">            <span class=\"keyword\">WHEN</span> d.cate_level = <span class=\"number\">2</span> <span class=\"keyword\">THEN</span> d.cate_id </span><br><span class=\"line\">            <span class=\"keyword\">ELSE</span> <span class=\"literal\">NULL</span> </span><br><span class=\"line\">    <span class=\"keyword\">END</span> cate_2_id</span><br><span class=\"line\">,<span class=\"keyword\">CASE</span>    <span class=\"keyword\">WHEN</span> a.cate_level = <span class=\"number\">2</span> <span class=\"keyword\">THEN</span> a.cate_name</span><br><span class=\"line\">            <span class=\"keyword\">WHEN</span> b.cate_level = <span class=\"number\">2</span> <span class=\"keyword\">THEN</span> b.cate_name</span><br><span class=\"line\">            <span class=\"keyword\">WHEN</span> c.cate_level = <span class=\"number\">2</span> <span class=\"keyword\">THEN</span> c.cate_name</span><br><span class=\"line\">            <span class=\"keyword\">WHEN</span> d.cate_level = <span class=\"number\">2</span> <span class=\"keyword\">THEN</span> d.cate_name </span><br><span class=\"line\">            <span class=\"keyword\">ELSE</span> <span class=\"literal\">NULL</span> </span><br><span class=\"line\">    <span class=\"keyword\">END</span> cate_2_name</span><br><span class=\"line\">,<span class=\"keyword\">CASE</span>    <span class=\"keyword\">WHEN</span> a.cate_level = <span class=\"number\">3</span> <span class=\"keyword\">THEN</span> a.cate_id</span><br><span class=\"line\">            <span class=\"keyword\">WHEN</span> b.cate_level = <span class=\"number\">3</span> <span class=\"keyword\">THEN</span> b.cate_id</span><br><span class=\"line\">            <span class=\"keyword\">WHEN</span> c.cate_level = <span class=\"number\">3</span> <span class=\"keyword\">THEN</span> c.cate_id</span><br><span class=\"line\">            <span class=\"keyword\">WHEN</span> d.cate_level = <span class=\"number\">3</span> <span class=\"keyword\">THEN</span> d.cate_id </span><br><span class=\"line\">            <span class=\"keyword\">ELSE</span> <span class=\"literal\">NULL</span> </span><br><span class=\"line\">    <span class=\"keyword\">END</span> cate_3_id</span><br><span class=\"line\">,<span class=\"keyword\">CASE</span>    <span class=\"keyword\">WHEN</span> a.cate_level = <span class=\"number\">3</span> <span class=\"keyword\">THEN</span> a.cate_name</span><br><span class=\"line\">            <span class=\"keyword\">WHEN</span> b.cate_level = <span class=\"number\">3</span> <span class=\"keyword\">THEN</span> b.cate_name</span><br><span class=\"line\">            <span class=\"keyword\">WHEN</span> c.cate_level = <span class=\"number\">3</span> <span class=\"keyword\">THEN</span> c.cate_name</span><br><span class=\"line\">            <span class=\"keyword\">WHEN</span> d.cate_level = <span class=\"number\">3</span> <span class=\"keyword\">THEN</span> d.cate_name </span><br><span class=\"line\">            <span class=\"keyword\">ELSE</span> <span class=\"literal\">NULL</span> </span><br><span class=\"line\">    <span class=\"keyword\">END</span> cate_3_name</span><br><span class=\"line\">,<span class=\"keyword\">CASE</span>    <span class=\"keyword\">WHEN</span> a.cate_level = <span class=\"number\">4</span> <span class=\"keyword\">THEN</span> a.cate_id</span><br><span class=\"line\">            <span class=\"keyword\">WHEN</span> b.cate_level = <span class=\"number\">4</span> <span class=\"keyword\">THEN</span> b.cate_id</span><br><span class=\"line\">            <span class=\"keyword\">WHEN</span> c.cate_level = <span class=\"number\">4</span> <span class=\"keyword\">THEN</span> c.cate_id</span><br><span class=\"line\">            <span class=\"keyword\">WHEN</span> d.cate_level = <span class=\"number\">4</span> <span class=\"keyword\">THEN</span> d.cate_id </span><br><span class=\"line\">            <span class=\"keyword\">ELSE</span> <span class=\"literal\">NULL</span> </span><br><span class=\"line\">    <span class=\"keyword\">END</span> cate_4_id</span><br><span class=\"line\">,<span class=\"keyword\">CASE</span>    <span class=\"keyword\">WHEN</span> a.cate_level = <span class=\"number\">4</span> <span class=\"keyword\">THEN</span> a.cate_name</span><br><span class=\"line\">            <span class=\"keyword\">WHEN</span> b.cate_level = <span class=\"number\">4</span> <span class=\"keyword\">THEN</span> b.cate_name</span><br><span class=\"line\">            <span class=\"keyword\">WHEN</span> c.cate_level = <span class=\"number\">4</span> <span class=\"keyword\">THEN</span> c.cate_name</span><br><span class=\"line\">            <span class=\"keyword\">WHEN</span> d.cate_level = <span class=\"number\">4</span> <span class=\"keyword\">THEN</span> d.cate_name </span><br><span class=\"line\">            <span class=\"keyword\">ELSE</span> <span class=\"literal\">NULL</span> </span><br><span class=\"line\">    <span class=\"keyword\">END</span> cate_4_name</span><br><span class=\"line\"><span class=\"keyword\">FROM</span>    ods_monkey_product_category_df a</span><br><span class=\"line\"><span class=\"keyword\">LEFT</span> <span class=\"keyword\">JOIN</span> ods_monkey_product_category_df b</span><br><span class=\"line\"><span class=\"keyword\">on</span>      a.parent_cate_id = b.cate_id </span><br><span class=\"line\"><span class=\"keyword\">LEFT</span> <span class=\"keyword\">JOIN</span>   ods_monkey_product_category_df c</span><br><span class=\"line\"><span class=\"keyword\">ON</span>      b.parent_cate_id = c.cate_id</span><br><span class=\"line\"><span class=\"keyword\">LEFT</span> <span class=\"keyword\">JOIN</span> ods_monkey_product_category_df d</span><br><span class=\"line\"><span class=\"keyword\">ON</span>      c.parent_cate_id = d.cate_id </span><br><span class=\"line\"><span class=\"keyword\">LEFT</span> <span class=\"keyword\">JOIN</span>   ods_monkey_ai_industry_df  f</span><br><span class=\"line\"><span class=\"keyword\">ON</span>   a.industry_id = f.industry_id  </span><br></pre></td></tr></table></figure>\n<h2 id=\"订单处理\"><a href=\"#订单处理\" class=\"headerlink\" title=\"订单处理\"></a>订单处理</h2><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> OVERWRITE <span class=\"keyword\">TABLE</span> dwd_order_child_order_info_du</span><br><span class=\"line\"><span class=\"keyword\">PARTITION</span>( ds = <span class=\"string\">&#x27;$&#123;ds&#125;&#x27;</span> , app = <span class=\"string\">&#x27;tb&#x27;</span> )  </span><br><span class=\"line\"><span class=\"keyword\">select</span> </span><br><span class=\"line\"><span class=\"comment\">/*+mapjoin(b)*/</span> </span><br><span class=\"line\"><span class=\"comment\">-- 流程节点  </span></span><br><span class=\"line\">gmt_order_create   order_create_gmt </span><br><span class=\"line\">,gmt_order_pay     pay_gmt   </span><br><span class=\"line\">,gmt_order_ship    ship_gmt </span><br><span class=\"line\">,gmt_order_end     order_end_gmt </span><br><span class=\"line\">,gmt_order_rated   rated_gmt      </span><br><span class=\"line\">,<span class=\"keyword\">if</span>(refund_status=<span class=\"string\">&#x27;SUCCESS&#x27;</span>,gmt_modified, <span class=\"literal\">NULL</span>)    refund_gmt  </span><br><span class=\"line\"><span class=\"comment\">--订单状态   </span></span><br><span class=\"line\">,<span class=\"keyword\">case</span> <span class=\"keyword\">when</span> gmt_order_rated&gt;gmt_order_create <span class=\"keyword\">then</span> <span class=\"number\">6</span></span><br><span class=\"line\"><span class=\"keyword\">when</span> a.order_status=<span class=\"string\">&#x27;TRADE_NO_CREATE_PAY&#x27;</span> <span class=\"keyword\">or</span> a.order_status=<span class=\"string\">&#x27;WAIT_BUYER_PAY&#x27;</span> <span class=\"keyword\">then</span> <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">when</span> a.order_status=<span class=\"string\">&#x27;WAIT_SELLER_SEND_GOODS&#x27;</span> <span class=\"keyword\">then</span> <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"keyword\">when</span> a.order_status=<span class=\"string\">&#x27;SELLER_CONSIGNED_PART&#x27;</span> <span class=\"keyword\">or</span> a.order_status=<span class=\"string\">&#x27;WAIT_BUYER_CONFIRM_GOODS&#x27;</span> <span class=\"keyword\">then</span> <span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"keyword\">when</span> a.order_status=<span class=\"string\">&#x27;TRADE_FINISHED&#x27;</span> <span class=\"keyword\">then</span> <span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"keyword\">when</span> a.order_status=<span class=\"string\">&#x27;TRADE_CLOSED&#x27;</span> <span class=\"keyword\">or</span> a.order_status=<span class=\"string\">&#x27;TRADE_CLOSED_BY_TAOBAO&#x27;</span> <span class=\"keyword\">then</span> <span class=\"number\">5</span></span><br><span class=\"line\"><span class=\"keyword\">else</span> <span class=\"literal\">null</span> <span class=\"keyword\">end</span> <span class=\"keyword\">as</span> order_status    \t\t\t\t\t\t\t<span class=\"comment\">--1：待付款    2：待发货    3：已发货    4：已完成    5：已关闭    6：已评价</span></span><br><span class=\"line\"><span class=\"comment\">--退货状态</span></span><br><span class=\"line\">,<span class=\"keyword\">case</span> <span class=\"keyword\">when</span> a.refund_status=<span class=\"string\">&#x27;WAIT_SELLER_AGREE&#x27;</span> <span class=\"keyword\">then</span> <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">when</span> a.refund_status=<span class=\"string\">&#x27;WAIT_BUYER_RETURN_GOODS&#x27;</span> <span class=\"keyword\">or</span> a.refund_status=<span class=\"string\">&#x27;SELLER_REFUSE_BUYER&#x27;</span> <span class=\"keyword\">then</span> <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"keyword\">when</span> a.refund_status=<span class=\"string\">&#x27;WAIT_SELLER_CONFIRM_GOODS&#x27;</span> <span class=\"keyword\">then</span> <span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"keyword\">when</span> a.refund_status=<span class=\"string\">&#x27;SUCCESS&#x27;</span> <span class=\"keyword\">then</span> <span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"keyword\">when</span> a.refund_status=<span class=\"string\">&#x27;CLOSED&#x27;</span> <span class=\"keyword\">then</span> <span class=\"number\">5</span></span><br><span class=\"line\"><span class=\"keyword\">else</span> <span class=\"literal\">null</span> <span class=\"keyword\">end</span> <span class=\"keyword\">as</span>   refund_status  \t\t\t\t\t\t\t<span class=\"comment\">--1、申请退款    2、处理退款申请    3、退货退款中    4、退款成功    5、退款关闭</span></span><br><span class=\"line\">,<span class=\"keyword\">if</span>(gmt_order_end <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">null</span> <span class=\"keyword\">and</span> order_status = <span class=\"string\">&#x27;TRADE_FINISHED&#x27;</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>)  is_order_success  </span><br><span class=\"line\">,<span class=\"keyword\">if</span>(refund_status = <span class=\"string\">&#x27;SUCCESS&#x27;</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>)   is_refund_success </span><br><span class=\"line\">,<span class=\"keyword\">if</span>(gmt_order_rated <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">null</span>, buyer_rate, <span class=\"number\">0</span> ) is_buyer_rated   <span class=\"comment\">-- 需要处理   </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--维度字段    </span></span><br><span class=\"line\">,tid   order_id </span><br><span class=\"line\">,<span class=\"keyword\">oid</span>   child_order_id  </span><br><span class=\"line\">,c.product_id</span><br><span class=\"line\">,a.iid  product_src_id  </span><br><span class=\"line\">,c.product_name </span><br><span class=\"line\">,b.shop_id           shop_id   </span><br><span class=\"line\">,b.shop_name         shop_name </span><br><span class=\"line\">,b.shop_account </span><br><span class=\"line\">,b.org_id            org_id </span><br><span class=\"line\">,b.org_name          org_name  </span><br><span class=\"line\"> </span><br><span class=\"line\">,buyer_nick          buyer_id  </span><br><span class=\"line\">,GET_PHONE(tb_tel(GET_JSON_OBJECT(a.features, <span class=\"string\">&#x27;$.wr_t_code&#x27;</span>)))         buyer_phone </span><br><span class=\"line\">,GET_JSON_OBJECT(a.features, <span class=\"string\">&#x27;$.receiver_name&#x27;</span>)             buyer_name   </span><br><span class=\"line\"></span><br><span class=\"line\">,<span class=\"literal\">null</span>    promotion_id   </span><br><span class=\"line\">,GET_ADDRESS(tb_order_decode(GET_JSON_OBJECT(a.features, <span class=\"string\">&#x27;$.wr_s_code&#x27;</span>)),<span class=\"number\">4</span>) <span class=\"keyword\">as</span> province\t<span class=\"comment\">--省份</span></span><br><span class=\"line\">,tb_order_decode(GET_JSON_OBJECT(a.features, <span class=\"string\">&#x27;$.wr_c_code&#x27;</span>)) <span class=\"keyword\">as</span> city\t \t<span class=\"comment\">--城市</span></span><br><span class=\"line\">,tb_order_decode(GET_JSON_OBJECT(a.features, <span class=\"string\">&#x27;$.wr_d_code&#x27;</span>)) <span class=\"keyword\">as</span> town\t\t<span class=\"comment\">--地区 </span></span><br><span class=\"line\"><span class=\"comment\">-- </span></span><br><span class=\"line\">,<span class=\"keyword\">if</span>(post_fee <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">null</span>, post_fee, <span class=\"number\">0</span> )   post_fee_amt</span><br><span class=\"line\">,<span class=\"keyword\">if</span>(payment <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">null</span>,   payment , <span class=\"number\">0</span>)   payment_amt</span><br><span class=\"line\">,<span class=\"keyword\">if</span>(<span class=\"keyword\">num</span> &gt; <span class=\"number\">0</span>, <span class=\"keyword\">num</span>, <span class=\"number\">1</span>)   product_num </span><br><span class=\"line\">,<span class=\"keyword\">if</span>(price &gt; <span class=\"number\">0</span>, price, <span class=\"keyword\">if</span>(<span class=\"keyword\">num</span> &gt; <span class=\"number\">0</span>, <span class=\"keyword\">ROUND</span>((total_fee+discount_fee)/<span class=\"keyword\">num</span>), total_fee+discount_fee))   product_amt  </span><br><span class=\"line\">,<span class=\"keyword\">if</span>(<span class=\"keyword\">num</span>*price &gt; <span class=\"number\">0</span>, <span class=\"keyword\">num</span>*price, total_fee+discount_fee )   product_total_amt    </span><br><span class=\"line\">,<span class=\"keyword\">if</span>(discount_fee <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">null</span>,<span class=\"keyword\">abs</span>(discount_fee), <span class=\"number\">0</span>)  discount_amt </span><br><span class=\"line\"><span class=\"comment\">--</span></span><br><span class=\"line\">,a.gmt_create       create_gmt  </span><br><span class=\"line\">,a.gmt_modified     update_gmt  </span><br><span class=\"line\">,<span class=\"keyword\">if</span>(a.status = <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>)   is_del  </span><br><span class=\"line\">,a.features         feature </span><br><span class=\"line\">,TO_JSON(<span class=\"string\">&quot;flag&quot;</span>, flag</span><br><span class=\"line\">    ,<span class=\"string\">&quot;reason&quot;</span>,reason</span><br><span class=\"line\">    ,<span class=\"string\">&quot;refund_success_time&quot;</span>,refund_success_time</span><br><span class=\"line\">)    extra_info </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span>  (</span><br><span class=\"line\">    <span class=\"keyword\">select</span> *</span><br><span class=\"line\">    <span class=\"keyword\">from</span>  weier_ai.ods_order_info_du </span><br><span class=\"line\">    <span class=\"keyword\">where</span> ds = <span class=\"string\">&#x27;$&#123;ds&#125;&#x27;</span> </span><br><span class=\"line\">    <span class=\"keyword\">and</span> tid <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">null</span> </span><br><span class=\"line\">    <span class=\"keyword\">AND</span> <span class=\"keyword\">oid</span> <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">null</span> </span><br><span class=\"line\">    <span class=\"keyword\">AND</span> iid <span class=\"keyword\">is</span> <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span> </span><br><span class=\"line\">    <span class=\"keyword\">AND</span> seller_nick <span class=\"keyword\">is</span> <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span> </span><br><span class=\"line\">    <span class=\"keyword\">AND</span> buyer_nick <span class=\"keyword\">is</span> <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span> </span><br><span class=\"line\">    <span class=\"keyword\">AND</span> gmt_order_create <span class=\"keyword\">is</span> <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>  </span><br><span class=\"line\">)   a </span><br><span class=\"line\"><span class=\"comment\">-- 排除非客户的订单数据</span></span><br><span class=\"line\"><span class=\"keyword\">join</span> (</span><br><span class=\"line\">    <span class=\"keyword\">select</span> * </span><br><span class=\"line\">    <span class=\"keyword\">from</span> (</span><br><span class=\"line\">        <span class=\"keyword\">select</span> * </span><br><span class=\"line\">        ,ROW_NUMBER()<span class=\"keyword\">over</span>(<span class=\"keyword\">partition</span> <span class=\"keyword\">by</span> app, shop_account <span class=\"keyword\">order</span> <span class=\"keyword\">by</span> shop_end_gmt <span class=\"keyword\">desc</span>) rk </span><br><span class=\"line\">        <span class=\"keyword\">from</span> weier_ai.dim_shop </span><br><span class=\"line\">        <span class=\"keyword\">where</span> ds = <span class=\"string\">&#x27;$&#123;ds&#125;&#x27;</span> </span><br><span class=\"line\">        <span class=\"comment\">-- 只获取 tb 的店铺  </span></span><br><span class=\"line\">        <span class=\"keyword\">and</span> app = <span class=\"string\">&#x27;tb&#x27;</span> </span><br><span class=\"line\">        <span class=\"keyword\">and</span> shop_id <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">null</span> </span><br><span class=\"line\">        <span class=\"keyword\">and</span> shop_account <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">null</span> </span><br><span class=\"line\">    ) </span><br><span class=\"line\">    <span class=\"keyword\">where</span> rk = <span class=\"number\">1</span> </span><br><span class=\"line\">)   b </span><br><span class=\"line\"><span class=\"keyword\">on</span>  <span class=\"keyword\">trim</span>(a.seller_nick) = <span class=\"keyword\">trim</span>(b.shop_account) </span><br><span class=\"line\"><span class=\"keyword\">left</span> <span class=\"keyword\">JOIN</span> (</span><br><span class=\"line\">    <span class=\"keyword\">select</span> * </span><br><span class=\"line\">    <span class=\"keyword\">from</span> (</span><br><span class=\"line\">        <span class=\"keyword\">select</span> * </span><br><span class=\"line\">        ,ROW_NUMBER()<span class=\"keyword\">over</span>(<span class=\"keyword\">partition</span> <span class=\"keyword\">by</span> app, shop_account, product_src_id <span class=\"keyword\">order</span> <span class=\"keyword\">by</span> create_gmt <span class=\"keyword\">desc</span>) rk </span><br><span class=\"line\">        <span class=\"keyword\">from</span> weier_ai.dim_product </span><br><span class=\"line\">        <span class=\"keyword\">where</span> ds = <span class=\"string\">&#x27;$&#123;ds&#125;&#x27;</span>  </span><br><span class=\"line\">        <span class=\"comment\">-- 只获取 tb 的商品</span></span><br><span class=\"line\">        <span class=\"keyword\">and</span> app = <span class=\"string\">&#x27;tb&#x27;</span></span><br><span class=\"line\">        <span class=\"keyword\">and</span> product_id <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">null</span> </span><br><span class=\"line\">        <span class=\"keyword\">and</span> product_src_id <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">null</span> </span><br><span class=\"line\">        <span class=\"keyword\">and</span> shop_account <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">null</span> </span><br><span class=\"line\">    ) </span><br><span class=\"line\">    <span class=\"keyword\">where</span> rk = <span class=\"number\">1</span> </span><br><span class=\"line\">)  c </span><br><span class=\"line\"><span class=\"keyword\">on</span> a.iid = c.product_src_id </span><br><span class=\"line\"><span class=\"keyword\">and</span> <span class=\"keyword\">trim</span>(b.shop_account) = <span class=\"keyword\">trim</span>(c.shop_account)     </span><br><span class=\"line\">;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">set</span> odps.stage.mapper.split.size = <span class=\"number\">512</span>;</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> OVERWRITE <span class=\"keyword\">TABLE</span> dwd_order_child_order_info_di</span><br><span class=\"line\"><span class=\"keyword\">PARTITION</span>( ds,app )  </span><br><span class=\"line\"><span class=\"keyword\">select</span> </span><br><span class=\"line\"><span class=\"comment\">-- 流程节点  </span></span><br><span class=\"line\">order_create_gmt </span><br><span class=\"line\">,pay_gmt   </span><br><span class=\"line\">,ship_gmt </span><br><span class=\"line\">,order_end_gmt </span><br><span class=\"line\">,rated_gmt      </span><br><span class=\"line\">,refund_gmt     </span><br><span class=\"line\">,order_status   </span><br><span class=\"line\">,refund_status  </span><br><span class=\"line\">,is_order_success  </span><br><span class=\"line\">,is_refund_success </span><br><span class=\"line\">,is_buyer_rated   </span><br><span class=\"line\"><span class=\"comment\">--维度字段    </span></span><br><span class=\"line\">,order_id </span><br><span class=\"line\">,child_order_id  </span><br><span class=\"line\">,product_id</span><br><span class=\"line\">,product_src_id  </span><br><span class=\"line\">,product_name</span><br><span class=\"line\">,shop_id  </span><br><span class=\"line\">,shop_name</span><br><span class=\"line\">,shop_account </span><br><span class=\"line\">,org_id</span><br><span class=\"line\">,org_name</span><br><span class=\"line\">,buyer_id</span><br><span class=\"line\">,buyer_phone</span><br><span class=\"line\">,buyer_name</span><br><span class=\"line\">,promotion_id</span><br><span class=\"line\">,province</span><br><span class=\"line\">,city</span><br><span class=\"line\">,town</span><br><span class=\"line\">,post_fee_amt</span><br><span class=\"line\">,payment_amt</span><br><span class=\"line\">,product_num</span><br><span class=\"line\">,product_amt</span><br><span class=\"line\">,product_total_amt</span><br><span class=\"line\">,discount_amt</span><br><span class=\"line\">,create_gmt</span><br><span class=\"line\">,update_gmt</span><br><span class=\"line\">,is_del</span><br><span class=\"line\">,feature</span><br><span class=\"line\">,extra_info</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"comment\">--重新放进order_create_gmt订单创建时间分区</span></span><br><span class=\"line\">,TO_CHAR(order_create_gmt, <span class=\"string\">&#x27;yyyymmdd&#x27;</span>) ds</span><br><span class=\"line\">,app     </span><br><span class=\"line\"><span class=\"keyword\">from</span> dwd_order_child_order_info_du </span><br><span class=\"line\"><span class=\"keyword\">where</span> ds = <span class=\"string\">&#x27;$&#123;ds&#125;&#x27;</span> <span class=\"keyword\">and</span> app=<span class=\"string\">&#x27;tb&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">and</span> TO_CHAR(order_create_gmt, <span class=\"string\">&#x27;yyyymmdd&#x27;</span>) &gt; TO_CHAR(<span class=\"keyword\">dateadd</span>(<span class=\"keyword\">to_date</span>(<span class=\"string\">&#x27;$&#123;ds&#125;&#x27;</span>, <span class=\"string\">&#x27;yyyymmdd&#x27;</span>), <span class=\"number\">-9</span>, <span class=\"string\">&#x27;mm&#x27;</span>),<span class=\"string\">&#x27;yyyymmdd&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">union</span> <span class=\"keyword\">all</span> </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">select</span> </span><br><span class=\"line\"><span class=\"comment\">-- 流程节点  </span></span><br><span class=\"line\">a.order_create_gmt </span><br><span class=\"line\">,a.pay_gmt   </span><br><span class=\"line\">,a.ship_gmt </span><br><span class=\"line\">,a.order_end_gmt </span><br><span class=\"line\">,a.rated_gmt      </span><br><span class=\"line\">,a.refund_gmt     </span><br><span class=\"line\">,a.order_status   </span><br><span class=\"line\">,a.refund_status  </span><br><span class=\"line\">,a.is_order_success  </span><br><span class=\"line\">,a.is_refund_success </span><br><span class=\"line\">,a.is_buyer_rated   </span><br><span class=\"line\"><span class=\"comment\">--维度字段    </span></span><br><span class=\"line\">,a.order_id </span><br><span class=\"line\">,a.child_order_id  </span><br><span class=\"line\">,a.product_id</span><br><span class=\"line\">,a.product_src_id  </span><br><span class=\"line\">,a.product_name</span><br><span class=\"line\">,a.shop_id  </span><br><span class=\"line\">,a.shop_name</span><br><span class=\"line\">,a.shop_account </span><br><span class=\"line\">,a.org_id</span><br><span class=\"line\">,a.org_name</span><br><span class=\"line\">,a.buyer_id</span><br><span class=\"line\">,a.buyer_phone</span><br><span class=\"line\">,a.buyer_name</span><br><span class=\"line\">,a.promotion_id</span><br><span class=\"line\">,a.province</span><br><span class=\"line\">,a.city</span><br><span class=\"line\">,a.town</span><br><span class=\"line\">,a.post_fee_amt</span><br><span class=\"line\">,a.payment_amt</span><br><span class=\"line\">,a.product_num</span><br><span class=\"line\">,a.product_amt</span><br><span class=\"line\">,a.product_total_amt</span><br><span class=\"line\">,a.discount_amt</span><br><span class=\"line\">,a.create_gmt</span><br><span class=\"line\">,a.update_gmt</span><br><span class=\"line\">,a.is_del</span><br><span class=\"line\">,a.feature</span><br><span class=\"line\">,a.extra_info  </span><br><span class=\"line\"><span class=\"comment\">--</span></span><br><span class=\"line\">,a.ds    </span><br><span class=\"line\">,a.app </span><br><span class=\"line\"><span class=\"keyword\">from</span> (</span><br><span class=\"line\">     <span class=\"comment\">-- 发生变动的老分区订单数据   </span></span><br><span class=\"line\">    <span class=\"keyword\">select</span> * </span><br><span class=\"line\">    <span class=\"keyword\">from</span> dwd_order_child_order_info_di  </span><br><span class=\"line\">    <span class=\"keyword\">where</span> ds <span class=\"keyword\">in</span> (</span><br><span class=\"line\">        <span class=\"keyword\">select</span> TO_CHAR(order_create_gmt, <span class=\"string\">&#x27;yyyymmdd&#x27;</span>)  </span><br><span class=\"line\">        <span class=\"keyword\">from</span> dwd_order_child_order_info_du  </span><br><span class=\"line\">        <span class=\"keyword\">where</span> ds = <span class=\"string\">&#x27;$&#123;ds&#125;&#x27;</span> <span class=\"keyword\">and</span> app=<span class=\"string\">&#x27;tb&#x27;</span> </span><br><span class=\"line\">        <span class=\"keyword\">and</span> order_create_gmt <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">null</span> </span><br><span class=\"line\">        <span class=\"keyword\">and</span> TO_CHAR(order_create_gmt, <span class=\"string\">&#x27;yyyymmdd&#x27;</span>) &gt; TO_CHAR(<span class=\"keyword\">dateadd</span>(<span class=\"keyword\">to_date</span>(<span class=\"string\">&#x27;$&#123;ds&#125;&#x27;</span>, <span class=\"string\">&#x27;yyyymmdd&#x27;</span>), <span class=\"number\">-9</span>, <span class=\"string\">&#x27;mm&#x27;</span>),<span class=\"string\">&#x27;yyyymmdd&#x27;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">group</span> <span class=\"keyword\">by</span> TO_CHAR(order_create_gmt, <span class=\"string\">&#x27;yyyymmdd&#x27;</span>)   </span><br><span class=\"line\">    )  </span><br><span class=\"line\">    <span class=\"keyword\">and</span> app=<span class=\"string\">&#x27;tb&#x27;</span></span><br><span class=\"line\">    <span class=\"keyword\">and</span> order_id <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">null</span> </span><br><span class=\"line\">    <span class=\"keyword\">and</span> child_order_id <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">null</span> </span><br><span class=\"line\">) a </span><br><span class=\"line\"><span class=\"keyword\">left</span> <span class=\"keyword\">join</span> (</span><br><span class=\"line\">    <span class=\"comment\">-- 新订单数据</span></span><br><span class=\"line\">    <span class=\"keyword\">select</span> * </span><br><span class=\"line\">    <span class=\"keyword\">from</span> dwd_order_child_order_info_du  </span><br><span class=\"line\">    <span class=\"keyword\">where</span> ds = <span class=\"string\">&#x27;$&#123;ds&#125;&#x27;</span> <span class=\"keyword\">and</span> app=<span class=\"string\">&#x27;tb&#x27;</span> </span><br><span class=\"line\">    <span class=\"keyword\">and</span> order_id <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">null</span> </span><br><span class=\"line\">    <span class=\"keyword\">and</span> child_order_id <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">null</span> </span><br><span class=\"line\">) b </span><br><span class=\"line\"><span class=\"keyword\">on</span> a.order_id = b.order_id </span><br><span class=\"line\"><span class=\"keyword\">and</span> a.child_order_id = b.child_order_id </span><br><span class=\"line\"><span class=\"keyword\">where</span> b.child_order_id <span class=\"keyword\">is</span> <span class=\"literal\">null</span> </span><br><span class=\"line\">;</span><br></pre></td></tr></table></figure>\n<h2 id=\"正则处理\"><a href=\"#正则处理\" class=\"headerlink\" title=\"正则处理\"></a>正则处理</h2><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"keyword\">select</span></span><br><span class=\"line\">    <span class=\"keyword\">replace</span>(</span><br><span class=\"line\">    <span class=\"keyword\">replace</span>(</span><br><span class=\"line\">    <span class=\"keyword\">replace</span>(</span><br><span class=\"line\">    <span class=\"keyword\">replace</span>(</span><br><span class=\"line\">    regexp_replace(</span><br><span class=\"line\">        regexp_substr(</span><br><span class=\"line\">            <span class=\"keyword\">content</span>,<span class=\"string\">&#x27;\\&#123;.*\\&#125;&#x27;</span>),<span class=\"string\">&#x27;\\\\\\\\&#x27;</span>,<span class=\"string\">&#x27;&#x27;</span>),<span class=\"string\">&#x27;\\&quot;\\&#123;&#x27;</span>,<span class=\"string\">&#x27;&#123;&#x27;</span>),</span><br><span class=\"line\">            <span class=\"string\">&#x27;\\&#125;\\&quot;&#x27;</span>,<span class=\"string\">&#x27;&#125;&#x27;</span>),<span class=\"string\">&#x27;\\&quot;\\[&#x27;</span>,<span class=\"string\">&#x27;[&#x27;</span>),<span class=\"string\">&#x27;\\]\\&quot;&#x27;</span>,<span class=\"string\">&#x27;]&#x27;</span></span><br><span class=\"line\">            ) <span class=\"keyword\">json</span></span><br><span class=\"line\">    <span class=\"keyword\">from</span> ods_loghub_weierai_im_group_online_di_test</span><br><span class=\"line\">    <span class=\"keyword\">where</span></span><br><span class=\"line\">    ds = <span class=\"string\">&#x27;$&#123;ds&#125;&#x27;</span></span><br><span class=\"line\">    <span class=\"keyword\">and</span> <span class=\"keyword\">INSTR</span>(<span class=\"keyword\">content</span>,<span class=\"string\">&#x27;发送至客户端成功&#x27;</span>)&gt;<span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- select </span></span><br><span class=\"line\"><span class=\"comment\">-- case when company regexp &#x27;.*公司$&#x27; then 1 when company regexp &#x27;.*中心$&#x27; then 2 end company_category;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">select</span> regexp_extract(<span class=\"string\">&#x27;IloveYou&#x27;</span>,<span class=\"string\">&#x27;(I)(.*?)(You)&#x27;</span>,<span class=\"number\">2</span>) ;</span><br><span class=\"line\"><span class=\"keyword\">select</span> regexp_replace(<span class=\"string\">&quot;IloveYou&quot;</span>,<span class=\"string\">&quot;You&quot;</span>,<span class=\"string\">&quot;&quot;</span>) ;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 1 REGEXP_LIKE ：与LIKE的功能相似</span></span><br><span class=\"line\"><span class=\"comment\">--查询value中以1开头60结束的记录并且长度是7位</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> fzq <span class=\"keyword\">where</span> <span class=\"keyword\">value</span> <span class=\"keyword\">like</span> <span class=\"string\">&#x27;1____60&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> fzq <span class=\"keyword\">where</span> <span class=\"keyword\">regexp_like</span>(<span class=\"keyword\">value</span>,<span class=\"string\">&#x27;1....60&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 2 REGEXP_INSTR ：与INSTR的功能相似</span></span><br><span class=\"line\"><span class=\"comment\">--返回匹配上的初始索引位置</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> REGEXP_INSTR(<span class=\"string\">&#x27;http3213&#x27;</span>, <span class=\"string\">&#x27;http&#x27;</span>) ; <span class=\"comment\">--1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 3 REGEXP_SUBSTR ：与SUBSTR的功能相似</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> REGEXP_SUBSTR(<span class=\"string\">&#x27;http3213&#x27;</span>, <span class=\"string\">&#x27;http&#x27;</span>) ; <span class=\"comment\">--http</span></span><br><span class=\"line\"><span class=\"comment\">-- 4 REGEXP_REPLACE ：与REPLACE的功能相似</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- REGEXP_SUBSTR延伸substr()函数的功能，让你搜索一个正则表达式模式字符串。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 这也类似于REGEXP_INSTR，而是返回子字符串的位置，它返回的子字符串本身。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 5 REGEXP_COUNT(msg_content, &quot;[.?!。？！]+&quot;) 统计匹配上的正则出现次数</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> REGEXP_COUNT(<span class=\"string\">&#x27;！2131232131FFF!&#x27;</span>, <span class=\"string\">&quot;[.?!。？！]+&quot;</span>) ;</span><br></pre></td></tr></table></figure>\n"},{"title":"UDF整理","date":"2021-02-22T13:16:31.000Z","_content":"\n# UDF\n\n```python\n#coding:utf-8\nfrom odps.udf  import annotate\nimport re\n@annotate(\"string,bigint->string\")\n# class GetAddress(object):\n#     def evaluate(self, str,index):\n#         if str is None or len(str) <= 0:\n#             return None\n#         pattern = re.compile(r'(?P<province>上海市|天津市|北京市|云南省|台湾省|吉林省|四川省|安徽省|山东省|山西省|广东省|江苏省|江西省|河北省|河南省|浙江省|海南省|湖北省|湖南省|甘肃省|福建省|黑龙江省|贵州省|辽宁省|重庆市|陕西省|青海省|香港特别行政区|西藏自治区|澳门特别行政区|广西壮族自治区|新疆维吾尔自治区|内蒙古自治区|宁夏回族自治区)(?P<city>.*?市|.*?自治州|.*县|.*?区|.*行政单位|.*市辖区|.*?行政区|.*盟)(?P<county>[^县]+县|.+县|.+区|.+市|.+旗|.+海域|.+岛)?(?P<town>[^区]+区|.+镇)?(?P<village>.*)')\n#         #pattern = re.compile(r'(?<province>[^省]+省|.+自治区|.*?自治区|.*?省|.*?行政区|上海市|北京市|天津市|重庆市)(?P<city>[^市]+市|.+自治州)(P?<county>[^县]+县|.+区|.+镇|.+局)?(?P<town>[^区]+区|.+镇)?(?P<village>.*)')\n        \n#         try:\n#             match = re.match(pattern, str.split('收货人')[0].split('所在地区')[0].split('超市')[0].split('夜市')[0].split('小区')[0].split('校区')[0])\n#             if match:\n#                 # 使用Match获得分组信息\n#                 if(index==1):return (match.group(\"province\"))\n#                 if(index==2):return(match.group(\"city\"))\n#                 if(index==3):return(match.group(\"county\"))\n#             # return regions\n#         except Exception as e:\n#             print(e)\n#             return None\nclass GetAddress(object):\n    def evaluate(self, address, index):\n        if address is None or len(address) <= 0:\n            return None\n\n        try:\n            if (index == 4):\n                p = re.search(r'(上海|天津|北京|重庆)',address)\n                if p is not None :return (p.group()+'市')\n                else:return address\n            recity = re.compile(\n                r'(?P<city>.*?自治州|.*?自治县|兴安盟|锡林郭勒盟|阿拉善盟|大兴安岭地区|和田地区|阿克苏地区|阿勒泰地区|阿里地区|塔城地区|喀什地区|.*?市|.*?县|.*?区)?(?P<county>.*)')\n            recounty = re.compile(r'(?P<county>.*?县|.{2,5}区|.*?镇|.*?旗|.+海域|.*?市|.+岛)?(?P<town>.*)')\n            pattern = re.compile(\n                r'(?P<province>上海市|天津市|北京市|云南省|台湾省|吉林省|四川省|安徽省|山东省|山西省|广东省|江苏省|江西省|河北省|河南省|浙江省|海南省|湖北省|湖南省|甘肃省|福建省|黑龙江省|贵州省|辽宁省|重庆市|陕西省|青海省|香港特别行政区|西藏自治区|澳门特别行政区|广西壮族自治区|新疆维吾尔自治区|内蒙古自治区|宁夏回族自治区)?(?P<city>.*)')\n            match = re.match(pattern, address.split('收货人')[0])\n            province = match.group(\"province\");\n            if (index == 1): return (province)\n            addr1 = match.group(\"city\").replace('市辖区', province).replace('所在地区', '').replace('自治区直辖县', '').replace('省直辖县',\n                                                                                                              '').replace(\n                '省直辖县级行政区划', '').replace('级行政区划', '')\n            city = re.match(recity, addr1[:35]).group(\"city\")\n            if (len(province) > 0 and province.__contains__(\"市\")):\n                city = province\n            if (index == 2):\n                if (len(province) > 0):\n                    return (city)\n                else:\n                    return None\n            if (len(city) == 0 or city == ''):\n                addr2 = addr1\n            else:\n                addr2 = addr1[len(city):]\n            county = re.match(recounty, addr2[:20]).group(\"county\")\n            if (index == 3): return (county.replace(province,''))\n\n\n            # return regions\n        except Exception as e:\n            print(e)\n            return None\n\n#coding:utf-8\nfrom odps.udf  import annotate\n\n# 此资源用于处理字符串\n\nimport json\n@annotate(\"*->string\")\nclass ToJson(object):\n    def evaluate(self, *args):\n        data = {}\n        for index in range(len(args)):\n            if index % 2 == 0:\n                data[args[index]] = args[index+1]\n\n        return json.dumps(data,ensure_ascii=False) \n\n#coding:utf-8\nfrom odps.udf  import annotate\n\n# 通过变量给数据打标签\n\n\n@annotate(\"bigint->bigint\")\nclass SetGroupFlag(object):\n\n    flag_value = 1\n\n    def evaluate(self, inputdata):\n        if inputdata is None :\n            return None\n\n        try:\n            if inputdata == 0 :\n                return self.flag_value\n            elif inputdata == 1 :\n                self.flag_value += 1\n                return self.flag_value\n            else:\n                return None\n        except Exception as e:\n            print(e)\n            return None\n\n\n#coding:utf-8\nfrom odps.udf  import annotate\n\n# 从字符串中获取url\nimport re\n@annotate(\"string->array<string>\")\nclass GetURLs(object):\n    specialCharList = [']', '[','-', ',', '$', '(', ')', '#', '+', '&', '*', '?', '!', '.', '`', '~', '@', '%', '^',\n                       '\\\\', '。',\n                       '？', '！', '】', '【']\n\n    def getMatchCount(self, str):\n        count = 0\n        for i in range(len(str) - 1, -1, -1):\n            if str[i] in self.specialCharList:\n                count += 1\n            else:\n                break\n        return count\n\n    def evaluate(self, str):\n        if str is None or len(str) <= 0:\n            return None\n\n        # 匹配模式\n        pattern = re.compile(\n            r'http[s]?://(?:(?!http[s]?://)[a-zA-Z]|[0-9]|[=?$\\-_@.&+/]|[!*\\(\\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+')\n        urls = re.findall(pattern, str)\n\n        try:\n            for i in range(len(urls)):\n                length = self.getMatchCount(urls[i])\n                if length != 0:\n                    urls[i] = urls[i][0:-length]\n            if len(urls) > 0:\n                return urls\n            else:\n                return None\n        except:\n            return None\n\n#coding:utf-8\nfrom odps.udf  import annotate\n@annotate(\"*->array<String>\")\nclass GetSetNvl(object):\n    def evaluate(self, *args):\n        data = set()\n        result = []\n        for value in args:\n            if value is not None:\n                if isinstance(value,list):\n                    if len(value)>0:\n                        for vue1 in value:\n                            data.add(vue1)\n                else:\n                    data.add(value)\n        for s in data:\n            result.append(s)\n        return result\n\n#coding:utf-8\nfrom odps.udf  import annotate\nimport re\n@annotate(\"string->string\")\nclass GetPhone(object):\n    pattern = re.compile(\"^1\\d{10}$|^861\\d{10}$|^001\\d{10}$\")\n    def evaluate(self, str):\n        if str is None or len(str) <= 0:\n            return None\n        if re.match(self.pattern, str):\n            if len(str)==11 and str[0]==\"1\":\n                return str\n            if len(str)==13 and str[0:3]==\"861\":\n                return str[2:13]\n            if len(str) == 13 and str[0:3] == \"001\":\n                return str[2:13]\n            else : None \n        else :\n            return None \n            \n\n#coding:utf-8\nfrom odps.udf  import annotate\nimport re \n\n# 用于提取html 标签属性的值\n@annotate(\"string,string,string,string->array<String>\")\nclass GetHTMLABLEATTR(object):\n    \"\"\"   \n     :param value: 固定参数，定义当天日期\n     :param lable_name: 固定参数，标签名\n     :param attr: 固定参数，表示当天是否学习python\n     :param extend_regex: 默认参数，扩展正则对属性里面的值进行提取 注意一定要加上(?:regex)表示非捕获分组\n     :return:返回匹配的数据 list\n     \"\"\"\n    def evaluate(self, value,lable_name, attr, extend_regex=''):\n        data = []\n        if attr is not None and len(attr) > 0 and lable_name is not None and len(lable_name) > 0 and extend_regex is not None:\n            # regex = '<{lable_name}[^>]*{attr}\\s*=\\s*[\\\"\\']?([^\\s\\\"\\'>]*){extend_regex}'\n            regex = '<' + lable_name + '[^>]*' + attr + '\\s*=\\s*[\\\"\\']?([^\\s\\\"\\'>]*' + extend_regex +')'\n            pattern = re.compile(\n                r'%s'%regex,re.M | re.I\n            )\n        else:\n            return data\n        if value is not None and len(value) > 0:\n            try:\n                results = re.findall(pattern, value)\n                for result in results:\n                    data.append(result)\n            except Exception as e:\n                print(e)\n                return []\n        return data\n\n```\n\n","source":"_posts/UDF.md","raw":"---\ntitle: UDF整理\ndate: 2021-02-22 21:16:31\ntags:\n- udf\ncategories: \n---\n\n# UDF\n\n```python\n#coding:utf-8\nfrom odps.udf  import annotate\nimport re\n@annotate(\"string,bigint->string\")\n# class GetAddress(object):\n#     def evaluate(self, str,index):\n#         if str is None or len(str) <= 0:\n#             return None\n#         pattern = re.compile(r'(?P<province>上海市|天津市|北京市|云南省|台湾省|吉林省|四川省|安徽省|山东省|山西省|广东省|江苏省|江西省|河北省|河南省|浙江省|海南省|湖北省|湖南省|甘肃省|福建省|黑龙江省|贵州省|辽宁省|重庆市|陕西省|青海省|香港特别行政区|西藏自治区|澳门特别行政区|广西壮族自治区|新疆维吾尔自治区|内蒙古自治区|宁夏回族自治区)(?P<city>.*?市|.*?自治州|.*县|.*?区|.*行政单位|.*市辖区|.*?行政区|.*盟)(?P<county>[^县]+县|.+县|.+区|.+市|.+旗|.+海域|.+岛)?(?P<town>[^区]+区|.+镇)?(?P<village>.*)')\n#         #pattern = re.compile(r'(?<province>[^省]+省|.+自治区|.*?自治区|.*?省|.*?行政区|上海市|北京市|天津市|重庆市)(?P<city>[^市]+市|.+自治州)(P?<county>[^县]+县|.+区|.+镇|.+局)?(?P<town>[^区]+区|.+镇)?(?P<village>.*)')\n        \n#         try:\n#             match = re.match(pattern, str.split('收货人')[0].split('所在地区')[0].split('超市')[0].split('夜市')[0].split('小区')[0].split('校区')[0])\n#             if match:\n#                 # 使用Match获得分组信息\n#                 if(index==1):return (match.group(\"province\"))\n#                 if(index==2):return(match.group(\"city\"))\n#                 if(index==3):return(match.group(\"county\"))\n#             # return regions\n#         except Exception as e:\n#             print(e)\n#             return None\nclass GetAddress(object):\n    def evaluate(self, address, index):\n        if address is None or len(address) <= 0:\n            return None\n\n        try:\n            if (index == 4):\n                p = re.search(r'(上海|天津|北京|重庆)',address)\n                if p is not None :return (p.group()+'市')\n                else:return address\n            recity = re.compile(\n                r'(?P<city>.*?自治州|.*?自治县|兴安盟|锡林郭勒盟|阿拉善盟|大兴安岭地区|和田地区|阿克苏地区|阿勒泰地区|阿里地区|塔城地区|喀什地区|.*?市|.*?县|.*?区)?(?P<county>.*)')\n            recounty = re.compile(r'(?P<county>.*?县|.{2,5}区|.*?镇|.*?旗|.+海域|.*?市|.+岛)?(?P<town>.*)')\n            pattern = re.compile(\n                r'(?P<province>上海市|天津市|北京市|云南省|台湾省|吉林省|四川省|安徽省|山东省|山西省|广东省|江苏省|江西省|河北省|河南省|浙江省|海南省|湖北省|湖南省|甘肃省|福建省|黑龙江省|贵州省|辽宁省|重庆市|陕西省|青海省|香港特别行政区|西藏自治区|澳门特别行政区|广西壮族自治区|新疆维吾尔自治区|内蒙古自治区|宁夏回族自治区)?(?P<city>.*)')\n            match = re.match(pattern, address.split('收货人')[0])\n            province = match.group(\"province\");\n            if (index == 1): return (province)\n            addr1 = match.group(\"city\").replace('市辖区', province).replace('所在地区', '').replace('自治区直辖县', '').replace('省直辖县',\n                                                                                                              '').replace(\n                '省直辖县级行政区划', '').replace('级行政区划', '')\n            city = re.match(recity, addr1[:35]).group(\"city\")\n            if (len(province) > 0 and province.__contains__(\"市\")):\n                city = province\n            if (index == 2):\n                if (len(province) > 0):\n                    return (city)\n                else:\n                    return None\n            if (len(city) == 0 or city == ''):\n                addr2 = addr1\n            else:\n                addr2 = addr1[len(city):]\n            county = re.match(recounty, addr2[:20]).group(\"county\")\n            if (index == 3): return (county.replace(province,''))\n\n\n            # return regions\n        except Exception as e:\n            print(e)\n            return None\n\n#coding:utf-8\nfrom odps.udf  import annotate\n\n# 此资源用于处理字符串\n\nimport json\n@annotate(\"*->string\")\nclass ToJson(object):\n    def evaluate(self, *args):\n        data = {}\n        for index in range(len(args)):\n            if index % 2 == 0:\n                data[args[index]] = args[index+1]\n\n        return json.dumps(data,ensure_ascii=False) \n\n#coding:utf-8\nfrom odps.udf  import annotate\n\n# 通过变量给数据打标签\n\n\n@annotate(\"bigint->bigint\")\nclass SetGroupFlag(object):\n\n    flag_value = 1\n\n    def evaluate(self, inputdata):\n        if inputdata is None :\n            return None\n\n        try:\n            if inputdata == 0 :\n                return self.flag_value\n            elif inputdata == 1 :\n                self.flag_value += 1\n                return self.flag_value\n            else:\n                return None\n        except Exception as e:\n            print(e)\n            return None\n\n\n#coding:utf-8\nfrom odps.udf  import annotate\n\n# 从字符串中获取url\nimport re\n@annotate(\"string->array<string>\")\nclass GetURLs(object):\n    specialCharList = [']', '[','-', ',', '$', '(', ')', '#', '+', '&', '*', '?', '!', '.', '`', '~', '@', '%', '^',\n                       '\\\\', '。',\n                       '？', '！', '】', '【']\n\n    def getMatchCount(self, str):\n        count = 0\n        for i in range(len(str) - 1, -1, -1):\n            if str[i] in self.specialCharList:\n                count += 1\n            else:\n                break\n        return count\n\n    def evaluate(self, str):\n        if str is None or len(str) <= 0:\n            return None\n\n        # 匹配模式\n        pattern = re.compile(\n            r'http[s]?://(?:(?!http[s]?://)[a-zA-Z]|[0-9]|[=?$\\-_@.&+/]|[!*\\(\\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+')\n        urls = re.findall(pattern, str)\n\n        try:\n            for i in range(len(urls)):\n                length = self.getMatchCount(urls[i])\n                if length != 0:\n                    urls[i] = urls[i][0:-length]\n            if len(urls) > 0:\n                return urls\n            else:\n                return None\n        except:\n            return None\n\n#coding:utf-8\nfrom odps.udf  import annotate\n@annotate(\"*->array<String>\")\nclass GetSetNvl(object):\n    def evaluate(self, *args):\n        data = set()\n        result = []\n        for value in args:\n            if value is not None:\n                if isinstance(value,list):\n                    if len(value)>0:\n                        for vue1 in value:\n                            data.add(vue1)\n                else:\n                    data.add(value)\n        for s in data:\n            result.append(s)\n        return result\n\n#coding:utf-8\nfrom odps.udf  import annotate\nimport re\n@annotate(\"string->string\")\nclass GetPhone(object):\n    pattern = re.compile(\"^1\\d{10}$|^861\\d{10}$|^001\\d{10}$\")\n    def evaluate(self, str):\n        if str is None or len(str) <= 0:\n            return None\n        if re.match(self.pattern, str):\n            if len(str)==11 and str[0]==\"1\":\n                return str\n            if len(str)==13 and str[0:3]==\"861\":\n                return str[2:13]\n            if len(str) == 13 and str[0:3] == \"001\":\n                return str[2:13]\n            else : None \n        else :\n            return None \n            \n\n#coding:utf-8\nfrom odps.udf  import annotate\nimport re \n\n# 用于提取html 标签属性的值\n@annotate(\"string,string,string,string->array<String>\")\nclass GetHTMLABLEATTR(object):\n    \"\"\"   \n     :param value: 固定参数，定义当天日期\n     :param lable_name: 固定参数，标签名\n     :param attr: 固定参数，表示当天是否学习python\n     :param extend_regex: 默认参数，扩展正则对属性里面的值进行提取 注意一定要加上(?:regex)表示非捕获分组\n     :return:返回匹配的数据 list\n     \"\"\"\n    def evaluate(self, value,lable_name, attr, extend_regex=''):\n        data = []\n        if attr is not None and len(attr) > 0 and lable_name is not None and len(lable_name) > 0 and extend_regex is not None:\n            # regex = '<{lable_name}[^>]*{attr}\\s*=\\s*[\\\"\\']?([^\\s\\\"\\'>]*){extend_regex}'\n            regex = '<' + lable_name + '[^>]*' + attr + '\\s*=\\s*[\\\"\\']?([^\\s\\\"\\'>]*' + extend_regex +')'\n            pattern = re.compile(\n                r'%s'%regex,re.M | re.I\n            )\n        else:\n            return data\n        if value is not None and len(value) > 0:\n            try:\n                results = re.findall(pattern, value)\n                for result in results:\n                    data.append(result)\n            except Exception as e:\n                print(e)\n                return []\n        return data\n\n```\n\n","slug":"UDF","published":1,"updated":"2021-02-22T12:01:34.155Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cklgjm1v70003ikvudmgsdd2y","content":"<h1><span id=\"udf\">UDF</span></h1><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#coding:utf-8</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> odps.udf  <span class=\"keyword\">import</span> annotate</span><br><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\"><span class=\"meta\">@annotate(<span class=\"params\"><span class=\"string\">&quot;string,bigint-&gt;string&quot;</span></span>)</span></span><br><span class=\"line\"><span class=\"comment\"># class GetAddress(object):</span></span><br><span class=\"line\"><span class=\"comment\">#     def evaluate(self, str,index):</span></span><br><span class=\"line\"><span class=\"comment\">#         if str is None or len(str) &lt;= 0:</span></span><br><span class=\"line\"><span class=\"comment\">#             return None</span></span><br><span class=\"line\"><span class=\"comment\">#         pattern = re.compile(r&#x27;(?P&lt;province&gt;上海市|天津市|北京市|云南省|台湾省|吉林省|四川省|安徽省|山东省|山西省|广东省|江苏省|江西省|河北省|河南省|浙江省|海南省|湖北省|湖南省|甘肃省|福建省|黑龙江省|贵州省|辽宁省|重庆市|陕西省|青海省|香港特别行政区|西藏自治区|澳门特别行政区|广西壮族自治区|新疆维吾尔自治区|内蒙古自治区|宁夏回族自治区)(?P&lt;city&gt;.*?市|.*?自治州|.*县|.*?区|.*行政单位|.*市辖区|.*?行政区|.*盟)(?P&lt;county&gt;[^县]+县|.+县|.+区|.+市|.+旗|.+海域|.+岛)?(?P&lt;town&gt;[^区]+区|.+镇)?(?P&lt;village&gt;.*)&#x27;)</span></span><br><span class=\"line\"><span class=\"comment\">#         #pattern = re.compile(r&#x27;(?&lt;province&gt;[^省]+省|.+自治区|.*?自治区|.*?省|.*?行政区|上海市|北京市|天津市|重庆市)(?P&lt;city&gt;[^市]+市|.+自治州)(P?&lt;county&gt;[^县]+县|.+区|.+镇|.+局)?(?P&lt;town&gt;[^区]+区|.+镇)?(?P&lt;village&gt;.*)&#x27;)</span></span><br><span class=\"line\">        </span><br><span class=\"line\"><span class=\"comment\">#         try:</span></span><br><span class=\"line\"><span class=\"comment\">#             match = re.match(pattern, str.split(&#x27;收货人&#x27;)[0].split(&#x27;所在地区&#x27;)[0].split(&#x27;超市&#x27;)[0].split(&#x27;夜市&#x27;)[0].split(&#x27;小区&#x27;)[0].split(&#x27;校区&#x27;)[0])</span></span><br><span class=\"line\"><span class=\"comment\">#             if match:</span></span><br><span class=\"line\"><span class=\"comment\">#                 # 使用Match获得分组信息</span></span><br><span class=\"line\"><span class=\"comment\">#                 if(index==1):return (match.group(&quot;province&quot;))</span></span><br><span class=\"line\"><span class=\"comment\">#                 if(index==2):return(match.group(&quot;city&quot;))</span></span><br><span class=\"line\"><span class=\"comment\">#                 if(index==3):return(match.group(&quot;county&quot;))</span></span><br><span class=\"line\"><span class=\"comment\">#             # return regions</span></span><br><span class=\"line\"><span class=\"comment\">#         except Exception as e:</span></span><br><span class=\"line\"><span class=\"comment\">#             print(e)</span></span><br><span class=\"line\"><span class=\"comment\">#             return None</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GetAddress</span>(<span class=\"params\"><span class=\"built_in\">object</span></span>):</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">evaluate</span>(<span class=\"params\">self, address, index</span>):</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> address <span class=\"keyword\">is</span> <span class=\"literal\">None</span> <span class=\"keyword\">or</span> <span class=\"built_in\">len</span>(address) &lt;= <span class=\"number\">0</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">None</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span>:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (index == <span class=\"number\">4</span>):</span><br><span class=\"line\">                p = re.search(<span class=\"string\">r&#x27;(上海|天津|北京|重庆)&#x27;</span>,address)</span><br><span class=\"line\">                <span class=\"keyword\">if</span> p <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">None</span> :<span class=\"keyword\">return</span> (p.group()+<span class=\"string\">&#x27;市&#x27;</span>)</span><br><span class=\"line\">                <span class=\"keyword\">else</span>:<span class=\"keyword\">return</span> address</span><br><span class=\"line\">            recity = re.<span class=\"built_in\">compile</span>(</span><br><span class=\"line\">                <span class=\"string\">r&#x27;(?P&lt;city&gt;.*?自治州|.*?自治县|兴安盟|锡林郭勒盟|阿拉善盟|大兴安岭地区|和田地区|阿克苏地区|阿勒泰地区|阿里地区|塔城地区|喀什地区|.*?市|.*?县|.*?区)?(?P&lt;county&gt;.*)&#x27;</span>)</span><br><span class=\"line\">            recounty = re.<span class=\"built_in\">compile</span>(<span class=\"string\">r&#x27;(?P&lt;county&gt;.*?县|.&#123;2,5&#125;区|.*?镇|.*?旗|.+海域|.*?市|.+岛)?(?P&lt;town&gt;.*)&#x27;</span>)</span><br><span class=\"line\">            pattern = re.<span class=\"built_in\">compile</span>(</span><br><span class=\"line\">                <span class=\"string\">r&#x27;(?P&lt;province&gt;上海市|天津市|北京市|云南省|台湾省|吉林省|四川省|安徽省|山东省|山西省|广东省|江苏省|江西省|河北省|河南省|浙江省|海南省|湖北省|湖南省|甘肃省|福建省|黑龙江省|贵州省|辽宁省|重庆市|陕西省|青海省|香港特别行政区|西藏自治区|澳门特别行政区|广西壮族自治区|新疆维吾尔自治区|内蒙古自治区|宁夏回族自治区)?(?P&lt;city&gt;.*)&#x27;</span>)</span><br><span class=\"line\">            match = re.match(pattern, address.split(<span class=\"string\">&#x27;收货人&#x27;</span>)[<span class=\"number\">0</span>])</span><br><span class=\"line\">            province = match.group(<span class=\"string\">&quot;province&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (index == <span class=\"number\">1</span>): <span class=\"keyword\">return</span> (province)</span><br><span class=\"line\">            addr1 = match.group(<span class=\"string\">&quot;city&quot;</span>).replace(<span class=\"string\">&#x27;市辖区&#x27;</span>, province).replace(<span class=\"string\">&#x27;所在地区&#x27;</span>, <span class=\"string\">&#x27;&#x27;</span>).replace(<span class=\"string\">&#x27;自治区直辖县&#x27;</span>, <span class=\"string\">&#x27;&#x27;</span>).replace(<span class=\"string\">&#x27;省直辖县&#x27;</span>,</span><br><span class=\"line\">                                                                                                              <span class=\"string\">&#x27;&#x27;</span>).replace(</span><br><span class=\"line\">                <span class=\"string\">&#x27;省直辖县级行政区划&#x27;</span>, <span class=\"string\">&#x27;&#x27;</span>).replace(<span class=\"string\">&#x27;级行政区划&#x27;</span>, <span class=\"string\">&#x27;&#x27;</span>)</span><br><span class=\"line\">            city = re.match(recity, addr1[:<span class=\"number\">35</span>]).group(<span class=\"string\">&quot;city&quot;</span>)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"built_in\">len</span>(province) &gt; <span class=\"number\">0</span> <span class=\"keyword\">and</span> province.__contains__(<span class=\"string\">&quot;市&quot;</span>)):</span><br><span class=\"line\">                city = province</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (index == <span class=\"number\">2</span>):</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"built_in\">len</span>(province) &gt; <span class=\"number\">0</span>):</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> (city)</span><br><span class=\"line\">                <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"literal\">None</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"built_in\">len</span>(city) == <span class=\"number\">0</span> <span class=\"keyword\">or</span> city == <span class=\"string\">&#x27;&#x27;</span>):</span><br><span class=\"line\">                addr2 = addr1</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                addr2 = addr1[<span class=\"built_in\">len</span>(city):]</span><br><span class=\"line\">            county = re.match(recounty, addr2[:<span class=\"number\">20</span>]).group(<span class=\"string\">&quot;county&quot;</span>)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (index == <span class=\"number\">3</span>): <span class=\"keyword\">return</span> (county.replace(province,<span class=\"string\">&#x27;&#x27;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\"># return regions</span></span><br><span class=\"line\">        <span class=\"keyword\">except</span> Exception <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">            print(e)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">None</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#coding:utf-8</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> odps.udf  <span class=\"keyword\">import</span> annotate</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 此资源用于处理字符串</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> json</span><br><span class=\"line\"><span class=\"meta\">@annotate(<span class=\"params\"><span class=\"string\">&quot;*-&gt;string&quot;</span></span>)</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ToJson</span>(<span class=\"params\"><span class=\"built_in\">object</span></span>):</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">evaluate</span>(<span class=\"params\">self, *args</span>):</span></span><br><span class=\"line\">        data = &#123;&#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> index <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(args)):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> index % <span class=\"number\">2</span> == <span class=\"number\">0</span>:</span><br><span class=\"line\">                data[args[index]] = args[index+<span class=\"number\">1</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> json.dumps(data,ensure_ascii=<span class=\"literal\">False</span>) </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#coding:utf-8</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> odps.udf  <span class=\"keyword\">import</span> annotate</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 通过变量给数据打标签</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@annotate(<span class=\"params\"><span class=\"string\">&quot;bigint-&gt;bigint&quot;</span></span>)</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SetGroupFlag</span>(<span class=\"params\"><span class=\"built_in\">object</span></span>):</span></span><br><span class=\"line\"></span><br><span class=\"line\">    flag_value = <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">evaluate</span>(<span class=\"params\">self, inputdata</span>):</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> inputdata <span class=\"keyword\">is</span> <span class=\"literal\">None</span> :</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">None</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span>:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> inputdata == <span class=\"number\">0</span> :</span><br><span class=\"line\">                <span class=\"keyword\">return</span> self.flag_value</span><br><span class=\"line\">            <span class=\"keyword\">elif</span> inputdata == <span class=\"number\">1</span> :</span><br><span class=\"line\">                self.flag_value += <span class=\"number\">1</span></span><br><span class=\"line\">                <span class=\"keyword\">return</span> self.flag_value</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">None</span></span><br><span class=\"line\">        <span class=\"keyword\">except</span> Exception <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">            print(e)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">None</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#coding:utf-8</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> odps.udf  <span class=\"keyword\">import</span> annotate</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 从字符串中获取url</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\"><span class=\"meta\">@annotate(<span class=\"params\"><span class=\"string\">&quot;string-&gt;array&lt;string&gt;&quot;</span></span>)</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GetURLs</span>(<span class=\"params\"><span class=\"built_in\">object</span></span>):</span></span><br><span class=\"line\">    specialCharList = [<span class=\"string\">&#x27;]&#x27;</span>, <span class=\"string\">&#x27;[&#x27;</span>,<span class=\"string\">&#x27;-&#x27;</span>, <span class=\"string\">&#x27;,&#x27;</span>, <span class=\"string\">&#x27;$&#x27;</span>, <span class=\"string\">&#x27;(&#x27;</span>, <span class=\"string\">&#x27;)&#x27;</span>, <span class=\"string\">&#x27;#&#x27;</span>, <span class=\"string\">&#x27;+&#x27;</span>, <span class=\"string\">&#x27;&amp;&#x27;</span>, <span class=\"string\">&#x27;*&#x27;</span>, <span class=\"string\">&#x27;?&#x27;</span>, <span class=\"string\">&#x27;!&#x27;</span>, <span class=\"string\">&#x27;.&#x27;</span>, <span class=\"string\">&#x27;`&#x27;</span>, <span class=\"string\">&#x27;~&#x27;</span>, <span class=\"string\">&#x27;@&#x27;</span>, <span class=\"string\">&#x27;%&#x27;</span>, <span class=\"string\">&#x27;^&#x27;</span>,</span><br><span class=\"line\">                       <span class=\"string\">&#x27;\\\\&#x27;</span>, <span class=\"string\">&#x27;。&#x27;</span>,</span><br><span class=\"line\">                       <span class=\"string\">&#x27;？&#x27;</span>, <span class=\"string\">&#x27;！&#x27;</span>, <span class=\"string\">&#x27;】&#x27;</span>, <span class=\"string\">&#x27;【&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getMatchCount</span>(<span class=\"params\">self, <span class=\"built_in\">str</span></span>):</span></span><br><span class=\"line\">        count = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(<span class=\"built_in\">str</span>) - <span class=\"number\">1</span>, -<span class=\"number\">1</span>, -<span class=\"number\">1</span>):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"built_in\">str</span>[i] <span class=\"keyword\">in</span> self.specialCharList:</span><br><span class=\"line\">                count += <span class=\"number\">1</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                <span class=\"keyword\">break</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> count</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">evaluate</span>(<span class=\"params\">self, <span class=\"built_in\">str</span></span>):</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"built_in\">str</span> <span class=\"keyword\">is</span> <span class=\"literal\">None</span> <span class=\"keyword\">or</span> <span class=\"built_in\">len</span>(<span class=\"built_in\">str</span>) &lt;= <span class=\"number\">0</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">None</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 匹配模式</span></span><br><span class=\"line\">        pattern = re.<span class=\"built_in\">compile</span>(</span><br><span class=\"line\">            <span class=\"string\">r&#x27;http[s]?://(?:(?!http[s]?://)[a-zA-Z]|[0-9]|[=?$\\-_@.&amp;+/]|[!*\\(\\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+&#x27;</span>)</span><br><span class=\"line\">        urls = re.findall(pattern, <span class=\"built_in\">str</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span>:</span><br><span class=\"line\">            <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(urls)):</span><br><span class=\"line\">                length = self.getMatchCount(urls[i])</span><br><span class=\"line\">                <span class=\"keyword\">if</span> length != <span class=\"number\">0</span>:</span><br><span class=\"line\">                    urls[i] = urls[i][<span class=\"number\">0</span>:-length]</span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(urls) &gt; <span class=\"number\">0</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> urls</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">None</span></span><br><span class=\"line\">        <span class=\"keyword\">except</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">None</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#coding:utf-8</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> odps.udf  <span class=\"keyword\">import</span> annotate</span><br><span class=\"line\"><span class=\"meta\">@annotate(<span class=\"params\"><span class=\"string\">&quot;*-&gt;array&lt;String&gt;&quot;</span></span>)</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GetSetNvl</span>(<span class=\"params\"><span class=\"built_in\">object</span></span>):</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">evaluate</span>(<span class=\"params\">self, *args</span>):</span></span><br><span class=\"line\">        data = <span class=\"built_in\">set</span>()</span><br><span class=\"line\">        result = []</span><br><span class=\"line\">        <span class=\"keyword\">for</span> value <span class=\"keyword\">in</span> args:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> value <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">None</span>:</span><br><span class=\"line\">                <span class=\"keyword\">if</span> <span class=\"built_in\">isinstance</span>(value,<span class=\"built_in\">list</span>):</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(value)&gt;<span class=\"number\">0</span>:</span><br><span class=\"line\">                        <span class=\"keyword\">for</span> vue1 <span class=\"keyword\">in</span> value:</span><br><span class=\"line\">                            data.add(vue1)</span><br><span class=\"line\">                <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                    data.add(value)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> s <span class=\"keyword\">in</span> data:</span><br><span class=\"line\">            result.append(s)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#coding:utf-8</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> odps.udf  <span class=\"keyword\">import</span> annotate</span><br><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\"><span class=\"meta\">@annotate(<span class=\"params\"><span class=\"string\">&quot;string-&gt;string&quot;</span></span>)</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GetPhone</span>(<span class=\"params\"><span class=\"built_in\">object</span></span>):</span></span><br><span class=\"line\">    pattern = re.<span class=\"built_in\">compile</span>(<span class=\"string\">&quot;^1\\d&#123;10&#125;$|^861\\d&#123;10&#125;$|^001\\d&#123;10&#125;$&quot;</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">evaluate</span>(<span class=\"params\">self, <span class=\"built_in\">str</span></span>):</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"built_in\">str</span> <span class=\"keyword\">is</span> <span class=\"literal\">None</span> <span class=\"keyword\">or</span> <span class=\"built_in\">len</span>(<span class=\"built_in\">str</span>) &lt;= <span class=\"number\">0</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">None</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> re.match(self.pattern, <span class=\"built_in\">str</span>):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(<span class=\"built_in\">str</span>)==<span class=\"number\">11</span> <span class=\"keyword\">and</span> <span class=\"built_in\">str</span>[<span class=\"number\">0</span>]==<span class=\"string\">&quot;1&quot;</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"built_in\">str</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(<span class=\"built_in\">str</span>)==<span class=\"number\">13</span> <span class=\"keyword\">and</span> <span class=\"built_in\">str</span>[<span class=\"number\">0</span>:<span class=\"number\">3</span>]==<span class=\"string\">&quot;861&quot;</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"built_in\">str</span>[<span class=\"number\">2</span>:<span class=\"number\">13</span>]</span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(<span class=\"built_in\">str</span>) == <span class=\"number\">13</span> <span class=\"keyword\">and</span> <span class=\"built_in\">str</span>[<span class=\"number\">0</span>:<span class=\"number\">3</span>] == <span class=\"string\">&quot;001&quot;</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"built_in\">str</span>[<span class=\"number\">2</span>:<span class=\"number\">13</span>]</span><br><span class=\"line\">            <span class=\"keyword\">else</span> : <span class=\"literal\">None</span> </span><br><span class=\"line\">        <span class=\"keyword\">else</span> :</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">None</span> </span><br><span class=\"line\">            </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#coding:utf-8</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> odps.udf  <span class=\"keyword\">import</span> annotate</span><br><span class=\"line\"><span class=\"keyword\">import</span> re </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 用于提取html 标签属性的值</span></span><br><span class=\"line\"><span class=\"meta\">@annotate(<span class=\"params\"><span class=\"string\">&quot;string,string,string,string-&gt;array&lt;String&gt;&quot;</span></span>)</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GetHTMLABLEATTR</span>(<span class=\"params\"><span class=\"built_in\">object</span></span>):</span></span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;   </span></span><br><span class=\"line\"><span class=\"string\">     :param value: 固定参数，定义当天日期</span></span><br><span class=\"line\"><span class=\"string\">     :param lable_name: 固定参数，标签名</span></span><br><span class=\"line\"><span class=\"string\">     :param attr: 固定参数，表示当天是否学习python</span></span><br><span class=\"line\"><span class=\"string\">     :param extend_regex: 默认参数，扩展正则对属性里面的值进行提取 注意一定要加上(?:regex)表示非捕获分组</span></span><br><span class=\"line\"><span class=\"string\">     :return:返回匹配的数据 list</span></span><br><span class=\"line\"><span class=\"string\">     &quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">evaluate</span>(<span class=\"params\">self, value,lable_name, attr, extend_regex=<span class=\"string\">&#x27;&#x27;</span></span>):</span></span><br><span class=\"line\">        data = []</span><br><span class=\"line\">        <span class=\"keyword\">if</span> attr <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">None</span> <span class=\"keyword\">and</span> <span class=\"built_in\">len</span>(attr) &gt; <span class=\"number\">0</span> <span class=\"keyword\">and</span> lable_name <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">None</span> <span class=\"keyword\">and</span> <span class=\"built_in\">len</span>(lable_name) &gt; <span class=\"number\">0</span> <span class=\"keyword\">and</span> extend_regex <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">None</span>:</span><br><span class=\"line\">            <span class=\"comment\"># regex = &#x27;&lt;&#123;lable_name&#125;[^&gt;]*&#123;attr&#125;\\s*=\\s*[\\&quot;\\&#x27;]?([^\\s\\&quot;\\&#x27;&gt;]*)&#123;extend_regex&#125;&#x27;</span></span><br><span class=\"line\">            regex = <span class=\"string\">&#x27;&lt;&#x27;</span> + lable_name + <span class=\"string\">&#x27;[^&gt;]*&#x27;</span> + attr + <span class=\"string\">&#x27;\\s*=\\s*[\\&quot;\\&#x27;]?([^\\s\\&quot;\\&#x27;&gt;]*&#x27;</span> + extend_regex +<span class=\"string\">&#x27;)&#x27;</span></span><br><span class=\"line\">            pattern = re.<span class=\"built_in\">compile</span>(</span><br><span class=\"line\">                <span class=\"string\">r&#x27;%s&#x27;</span>%regex,re.M | re.I</span><br><span class=\"line\">            )</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> data</span><br><span class=\"line\">        <span class=\"keyword\">if</span> value <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">None</span> <span class=\"keyword\">and</span> <span class=\"built_in\">len</span>(value) &gt; <span class=\"number\">0</span>:</span><br><span class=\"line\">            <span class=\"keyword\">try</span>:</span><br><span class=\"line\">                results = re.findall(pattern, value)</span><br><span class=\"line\">                <span class=\"keyword\">for</span> result <span class=\"keyword\">in</span> results:</span><br><span class=\"line\">                    data.append(result)</span><br><span class=\"line\">            <span class=\"keyword\">except</span> Exception <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">                print(e)</span><br><span class=\"line\">                <span class=\"keyword\">return</span> []</span><br><span class=\"line\">        <span class=\"keyword\">return</span> data</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"UDF\"><a href=\"#UDF\" class=\"headerlink\" title=\"UDF\"></a>UDF</h1><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#coding:utf-8</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> odps.udf  <span class=\"keyword\">import</span> annotate</span><br><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\"><span class=\"meta\">@annotate(<span class=\"params\"><span class=\"string\">&quot;string,bigint-&gt;string&quot;</span></span>)</span></span><br><span class=\"line\"><span class=\"comment\"># class GetAddress(object):</span></span><br><span class=\"line\"><span class=\"comment\">#     def evaluate(self, str,index):</span></span><br><span class=\"line\"><span class=\"comment\">#         if str is None or len(str) &lt;= 0:</span></span><br><span class=\"line\"><span class=\"comment\">#             return None</span></span><br><span class=\"line\"><span class=\"comment\">#         pattern = re.compile(r&#x27;(?P&lt;province&gt;上海市|天津市|北京市|云南省|台湾省|吉林省|四川省|安徽省|山东省|山西省|广东省|江苏省|江西省|河北省|河南省|浙江省|海南省|湖北省|湖南省|甘肃省|福建省|黑龙江省|贵州省|辽宁省|重庆市|陕西省|青海省|香港特别行政区|西藏自治区|澳门特别行政区|广西壮族自治区|新疆维吾尔自治区|内蒙古自治区|宁夏回族自治区)(?P&lt;city&gt;.*?市|.*?自治州|.*县|.*?区|.*行政单位|.*市辖区|.*?行政区|.*盟)(?P&lt;county&gt;[^县]+县|.+县|.+区|.+市|.+旗|.+海域|.+岛)?(?P&lt;town&gt;[^区]+区|.+镇)?(?P&lt;village&gt;.*)&#x27;)</span></span><br><span class=\"line\"><span class=\"comment\">#         #pattern = re.compile(r&#x27;(?&lt;province&gt;[^省]+省|.+自治区|.*?自治区|.*?省|.*?行政区|上海市|北京市|天津市|重庆市)(?P&lt;city&gt;[^市]+市|.+自治州)(P?&lt;county&gt;[^县]+县|.+区|.+镇|.+局)?(?P&lt;town&gt;[^区]+区|.+镇)?(?P&lt;village&gt;.*)&#x27;)</span></span><br><span class=\"line\">        </span><br><span class=\"line\"><span class=\"comment\">#         try:</span></span><br><span class=\"line\"><span class=\"comment\">#             match = re.match(pattern, str.split(&#x27;收货人&#x27;)[0].split(&#x27;所在地区&#x27;)[0].split(&#x27;超市&#x27;)[0].split(&#x27;夜市&#x27;)[0].split(&#x27;小区&#x27;)[0].split(&#x27;校区&#x27;)[0])</span></span><br><span class=\"line\"><span class=\"comment\">#             if match:</span></span><br><span class=\"line\"><span class=\"comment\">#                 # 使用Match获得分组信息</span></span><br><span class=\"line\"><span class=\"comment\">#                 if(index==1):return (match.group(&quot;province&quot;))</span></span><br><span class=\"line\"><span class=\"comment\">#                 if(index==2):return(match.group(&quot;city&quot;))</span></span><br><span class=\"line\"><span class=\"comment\">#                 if(index==3):return(match.group(&quot;county&quot;))</span></span><br><span class=\"line\"><span class=\"comment\">#             # return regions</span></span><br><span class=\"line\"><span class=\"comment\">#         except Exception as e:</span></span><br><span class=\"line\"><span class=\"comment\">#             print(e)</span></span><br><span class=\"line\"><span class=\"comment\">#             return None</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GetAddress</span>(<span class=\"params\"><span class=\"built_in\">object</span></span>):</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">evaluate</span>(<span class=\"params\">self, address, index</span>):</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> address <span class=\"keyword\">is</span> <span class=\"literal\">None</span> <span class=\"keyword\">or</span> <span class=\"built_in\">len</span>(address) &lt;= <span class=\"number\">0</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">None</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span>:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (index == <span class=\"number\">4</span>):</span><br><span class=\"line\">                p = re.search(<span class=\"string\">r&#x27;(上海|天津|北京|重庆)&#x27;</span>,address)</span><br><span class=\"line\">                <span class=\"keyword\">if</span> p <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">None</span> :<span class=\"keyword\">return</span> (p.group()+<span class=\"string\">&#x27;市&#x27;</span>)</span><br><span class=\"line\">                <span class=\"keyword\">else</span>:<span class=\"keyword\">return</span> address</span><br><span class=\"line\">            recity = re.<span class=\"built_in\">compile</span>(</span><br><span class=\"line\">                <span class=\"string\">r&#x27;(?P&lt;city&gt;.*?自治州|.*?自治县|兴安盟|锡林郭勒盟|阿拉善盟|大兴安岭地区|和田地区|阿克苏地区|阿勒泰地区|阿里地区|塔城地区|喀什地区|.*?市|.*?县|.*?区)?(?P&lt;county&gt;.*)&#x27;</span>)</span><br><span class=\"line\">            recounty = re.<span class=\"built_in\">compile</span>(<span class=\"string\">r&#x27;(?P&lt;county&gt;.*?县|.&#123;2,5&#125;区|.*?镇|.*?旗|.+海域|.*?市|.+岛)?(?P&lt;town&gt;.*)&#x27;</span>)</span><br><span class=\"line\">            pattern = re.<span class=\"built_in\">compile</span>(</span><br><span class=\"line\">                <span class=\"string\">r&#x27;(?P&lt;province&gt;上海市|天津市|北京市|云南省|台湾省|吉林省|四川省|安徽省|山东省|山西省|广东省|江苏省|江西省|河北省|河南省|浙江省|海南省|湖北省|湖南省|甘肃省|福建省|黑龙江省|贵州省|辽宁省|重庆市|陕西省|青海省|香港特别行政区|西藏自治区|澳门特别行政区|广西壮族自治区|新疆维吾尔自治区|内蒙古自治区|宁夏回族自治区)?(?P&lt;city&gt;.*)&#x27;</span>)</span><br><span class=\"line\">            match = re.match(pattern, address.split(<span class=\"string\">&#x27;收货人&#x27;</span>)[<span class=\"number\">0</span>])</span><br><span class=\"line\">            province = match.group(<span class=\"string\">&quot;province&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (index == <span class=\"number\">1</span>): <span class=\"keyword\">return</span> (province)</span><br><span class=\"line\">            addr1 = match.group(<span class=\"string\">&quot;city&quot;</span>).replace(<span class=\"string\">&#x27;市辖区&#x27;</span>, province).replace(<span class=\"string\">&#x27;所在地区&#x27;</span>, <span class=\"string\">&#x27;&#x27;</span>).replace(<span class=\"string\">&#x27;自治区直辖县&#x27;</span>, <span class=\"string\">&#x27;&#x27;</span>).replace(<span class=\"string\">&#x27;省直辖县&#x27;</span>,</span><br><span class=\"line\">                                                                                                              <span class=\"string\">&#x27;&#x27;</span>).replace(</span><br><span class=\"line\">                <span class=\"string\">&#x27;省直辖县级行政区划&#x27;</span>, <span class=\"string\">&#x27;&#x27;</span>).replace(<span class=\"string\">&#x27;级行政区划&#x27;</span>, <span class=\"string\">&#x27;&#x27;</span>)</span><br><span class=\"line\">            city = re.match(recity, addr1[:<span class=\"number\">35</span>]).group(<span class=\"string\">&quot;city&quot;</span>)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"built_in\">len</span>(province) &gt; <span class=\"number\">0</span> <span class=\"keyword\">and</span> province.__contains__(<span class=\"string\">&quot;市&quot;</span>)):</span><br><span class=\"line\">                city = province</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (index == <span class=\"number\">2</span>):</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"built_in\">len</span>(province) &gt; <span class=\"number\">0</span>):</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> (city)</span><br><span class=\"line\">                <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"literal\">None</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"built_in\">len</span>(city) == <span class=\"number\">0</span> <span class=\"keyword\">or</span> city == <span class=\"string\">&#x27;&#x27;</span>):</span><br><span class=\"line\">                addr2 = addr1</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                addr2 = addr1[<span class=\"built_in\">len</span>(city):]</span><br><span class=\"line\">            county = re.match(recounty, addr2[:<span class=\"number\">20</span>]).group(<span class=\"string\">&quot;county&quot;</span>)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (index == <span class=\"number\">3</span>): <span class=\"keyword\">return</span> (county.replace(province,<span class=\"string\">&#x27;&#x27;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\"># return regions</span></span><br><span class=\"line\">        <span class=\"keyword\">except</span> Exception <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">            print(e)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">None</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#coding:utf-8</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> odps.udf  <span class=\"keyword\">import</span> annotate</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 此资源用于处理字符串</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> json</span><br><span class=\"line\"><span class=\"meta\">@annotate(<span class=\"params\"><span class=\"string\">&quot;*-&gt;string&quot;</span></span>)</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ToJson</span>(<span class=\"params\"><span class=\"built_in\">object</span></span>):</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">evaluate</span>(<span class=\"params\">self, *args</span>):</span></span><br><span class=\"line\">        data = &#123;&#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> index <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(args)):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> index % <span class=\"number\">2</span> == <span class=\"number\">0</span>:</span><br><span class=\"line\">                data[args[index]] = args[index+<span class=\"number\">1</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> json.dumps(data,ensure_ascii=<span class=\"literal\">False</span>) </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#coding:utf-8</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> odps.udf  <span class=\"keyword\">import</span> annotate</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 通过变量给数据打标签</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@annotate(<span class=\"params\"><span class=\"string\">&quot;bigint-&gt;bigint&quot;</span></span>)</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SetGroupFlag</span>(<span class=\"params\"><span class=\"built_in\">object</span></span>):</span></span><br><span class=\"line\"></span><br><span class=\"line\">    flag_value = <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">evaluate</span>(<span class=\"params\">self, inputdata</span>):</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> inputdata <span class=\"keyword\">is</span> <span class=\"literal\">None</span> :</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">None</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span>:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> inputdata == <span class=\"number\">0</span> :</span><br><span class=\"line\">                <span class=\"keyword\">return</span> self.flag_value</span><br><span class=\"line\">            <span class=\"keyword\">elif</span> inputdata == <span class=\"number\">1</span> :</span><br><span class=\"line\">                self.flag_value += <span class=\"number\">1</span></span><br><span class=\"line\">                <span class=\"keyword\">return</span> self.flag_value</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">None</span></span><br><span class=\"line\">        <span class=\"keyword\">except</span> Exception <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">            print(e)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">None</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#coding:utf-8</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> odps.udf  <span class=\"keyword\">import</span> annotate</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 从字符串中获取url</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\"><span class=\"meta\">@annotate(<span class=\"params\"><span class=\"string\">&quot;string-&gt;array&lt;string&gt;&quot;</span></span>)</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GetURLs</span>(<span class=\"params\"><span class=\"built_in\">object</span></span>):</span></span><br><span class=\"line\">    specialCharList = [<span class=\"string\">&#x27;]&#x27;</span>, <span class=\"string\">&#x27;[&#x27;</span>,<span class=\"string\">&#x27;-&#x27;</span>, <span class=\"string\">&#x27;,&#x27;</span>, <span class=\"string\">&#x27;$&#x27;</span>, <span class=\"string\">&#x27;(&#x27;</span>, <span class=\"string\">&#x27;)&#x27;</span>, <span class=\"string\">&#x27;#&#x27;</span>, <span class=\"string\">&#x27;+&#x27;</span>, <span class=\"string\">&#x27;&amp;&#x27;</span>, <span class=\"string\">&#x27;*&#x27;</span>, <span class=\"string\">&#x27;?&#x27;</span>, <span class=\"string\">&#x27;!&#x27;</span>, <span class=\"string\">&#x27;.&#x27;</span>, <span class=\"string\">&#x27;`&#x27;</span>, <span class=\"string\">&#x27;~&#x27;</span>, <span class=\"string\">&#x27;@&#x27;</span>, <span class=\"string\">&#x27;%&#x27;</span>, <span class=\"string\">&#x27;^&#x27;</span>,</span><br><span class=\"line\">                       <span class=\"string\">&#x27;\\\\&#x27;</span>, <span class=\"string\">&#x27;。&#x27;</span>,</span><br><span class=\"line\">                       <span class=\"string\">&#x27;？&#x27;</span>, <span class=\"string\">&#x27;！&#x27;</span>, <span class=\"string\">&#x27;】&#x27;</span>, <span class=\"string\">&#x27;【&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getMatchCount</span>(<span class=\"params\">self, <span class=\"built_in\">str</span></span>):</span></span><br><span class=\"line\">        count = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(<span class=\"built_in\">str</span>) - <span class=\"number\">1</span>, -<span class=\"number\">1</span>, -<span class=\"number\">1</span>):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"built_in\">str</span>[i] <span class=\"keyword\">in</span> self.specialCharList:</span><br><span class=\"line\">                count += <span class=\"number\">1</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                <span class=\"keyword\">break</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> count</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">evaluate</span>(<span class=\"params\">self, <span class=\"built_in\">str</span></span>):</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"built_in\">str</span> <span class=\"keyword\">is</span> <span class=\"literal\">None</span> <span class=\"keyword\">or</span> <span class=\"built_in\">len</span>(<span class=\"built_in\">str</span>) &lt;= <span class=\"number\">0</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">None</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 匹配模式</span></span><br><span class=\"line\">        pattern = re.<span class=\"built_in\">compile</span>(</span><br><span class=\"line\">            <span class=\"string\">r&#x27;http[s]?://(?:(?!http[s]?://)[a-zA-Z]|[0-9]|[=?$\\-_@.&amp;+/]|[!*\\(\\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+&#x27;</span>)</span><br><span class=\"line\">        urls = re.findall(pattern, <span class=\"built_in\">str</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span>:</span><br><span class=\"line\">            <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(urls)):</span><br><span class=\"line\">                length = self.getMatchCount(urls[i])</span><br><span class=\"line\">                <span class=\"keyword\">if</span> length != <span class=\"number\">0</span>:</span><br><span class=\"line\">                    urls[i] = urls[i][<span class=\"number\">0</span>:-length]</span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(urls) &gt; <span class=\"number\">0</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> urls</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">None</span></span><br><span class=\"line\">        <span class=\"keyword\">except</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">None</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#coding:utf-8</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> odps.udf  <span class=\"keyword\">import</span> annotate</span><br><span class=\"line\"><span class=\"meta\">@annotate(<span class=\"params\"><span class=\"string\">&quot;*-&gt;array&lt;String&gt;&quot;</span></span>)</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GetSetNvl</span>(<span class=\"params\"><span class=\"built_in\">object</span></span>):</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">evaluate</span>(<span class=\"params\">self, *args</span>):</span></span><br><span class=\"line\">        data = <span class=\"built_in\">set</span>()</span><br><span class=\"line\">        result = []</span><br><span class=\"line\">        <span class=\"keyword\">for</span> value <span class=\"keyword\">in</span> args:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> value <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">None</span>:</span><br><span class=\"line\">                <span class=\"keyword\">if</span> <span class=\"built_in\">isinstance</span>(value,<span class=\"built_in\">list</span>):</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(value)&gt;<span class=\"number\">0</span>:</span><br><span class=\"line\">                        <span class=\"keyword\">for</span> vue1 <span class=\"keyword\">in</span> value:</span><br><span class=\"line\">                            data.add(vue1)</span><br><span class=\"line\">                <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                    data.add(value)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> s <span class=\"keyword\">in</span> data:</span><br><span class=\"line\">            result.append(s)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#coding:utf-8</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> odps.udf  <span class=\"keyword\">import</span> annotate</span><br><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\"><span class=\"meta\">@annotate(<span class=\"params\"><span class=\"string\">&quot;string-&gt;string&quot;</span></span>)</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GetPhone</span>(<span class=\"params\"><span class=\"built_in\">object</span></span>):</span></span><br><span class=\"line\">    pattern = re.<span class=\"built_in\">compile</span>(<span class=\"string\">&quot;^1\\d&#123;10&#125;$|^861\\d&#123;10&#125;$|^001\\d&#123;10&#125;$&quot;</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">evaluate</span>(<span class=\"params\">self, <span class=\"built_in\">str</span></span>):</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"built_in\">str</span> <span class=\"keyword\">is</span> <span class=\"literal\">None</span> <span class=\"keyword\">or</span> <span class=\"built_in\">len</span>(<span class=\"built_in\">str</span>) &lt;= <span class=\"number\">0</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">None</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> re.match(self.pattern, <span class=\"built_in\">str</span>):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(<span class=\"built_in\">str</span>)==<span class=\"number\">11</span> <span class=\"keyword\">and</span> <span class=\"built_in\">str</span>[<span class=\"number\">0</span>]==<span class=\"string\">&quot;1&quot;</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"built_in\">str</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(<span class=\"built_in\">str</span>)==<span class=\"number\">13</span> <span class=\"keyword\">and</span> <span class=\"built_in\">str</span>[<span class=\"number\">0</span>:<span class=\"number\">3</span>]==<span class=\"string\">&quot;861&quot;</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"built_in\">str</span>[<span class=\"number\">2</span>:<span class=\"number\">13</span>]</span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(<span class=\"built_in\">str</span>) == <span class=\"number\">13</span> <span class=\"keyword\">and</span> <span class=\"built_in\">str</span>[<span class=\"number\">0</span>:<span class=\"number\">3</span>] == <span class=\"string\">&quot;001&quot;</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"built_in\">str</span>[<span class=\"number\">2</span>:<span class=\"number\">13</span>]</span><br><span class=\"line\">            <span class=\"keyword\">else</span> : <span class=\"literal\">None</span> </span><br><span class=\"line\">        <span class=\"keyword\">else</span> :</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">None</span> </span><br><span class=\"line\">            </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#coding:utf-8</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> odps.udf  <span class=\"keyword\">import</span> annotate</span><br><span class=\"line\"><span class=\"keyword\">import</span> re </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 用于提取html 标签属性的值</span></span><br><span class=\"line\"><span class=\"meta\">@annotate(<span class=\"params\"><span class=\"string\">&quot;string,string,string,string-&gt;array&lt;String&gt;&quot;</span></span>)</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GetHTMLABLEATTR</span>(<span class=\"params\"><span class=\"built_in\">object</span></span>):</span></span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;   </span></span><br><span class=\"line\"><span class=\"string\">     :param value: 固定参数，定义当天日期</span></span><br><span class=\"line\"><span class=\"string\">     :param lable_name: 固定参数，标签名</span></span><br><span class=\"line\"><span class=\"string\">     :param attr: 固定参数，表示当天是否学习python</span></span><br><span class=\"line\"><span class=\"string\">     :param extend_regex: 默认参数，扩展正则对属性里面的值进行提取 注意一定要加上(?:regex)表示非捕获分组</span></span><br><span class=\"line\"><span class=\"string\">     :return:返回匹配的数据 list</span></span><br><span class=\"line\"><span class=\"string\">     &quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">evaluate</span>(<span class=\"params\">self, value,lable_name, attr, extend_regex=<span class=\"string\">&#x27;&#x27;</span></span>):</span></span><br><span class=\"line\">        data = []</span><br><span class=\"line\">        <span class=\"keyword\">if</span> attr <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">None</span> <span class=\"keyword\">and</span> <span class=\"built_in\">len</span>(attr) &gt; <span class=\"number\">0</span> <span class=\"keyword\">and</span> lable_name <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">None</span> <span class=\"keyword\">and</span> <span class=\"built_in\">len</span>(lable_name) &gt; <span class=\"number\">0</span> <span class=\"keyword\">and</span> extend_regex <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">None</span>:</span><br><span class=\"line\">            <span class=\"comment\"># regex = &#x27;&lt;&#123;lable_name&#125;[^&gt;]*&#123;attr&#125;\\s*=\\s*[\\&quot;\\&#x27;]?([^\\s\\&quot;\\&#x27;&gt;]*)&#123;extend_regex&#125;&#x27;</span></span><br><span class=\"line\">            regex = <span class=\"string\">&#x27;&lt;&#x27;</span> + lable_name + <span class=\"string\">&#x27;[^&gt;]*&#x27;</span> + attr + <span class=\"string\">&#x27;\\s*=\\s*[\\&quot;\\&#x27;]?([^\\s\\&quot;\\&#x27;&gt;]*&#x27;</span> + extend_regex +<span class=\"string\">&#x27;)&#x27;</span></span><br><span class=\"line\">            pattern = re.<span class=\"built_in\">compile</span>(</span><br><span class=\"line\">                <span class=\"string\">r&#x27;%s&#x27;</span>%regex,re.M | re.I</span><br><span class=\"line\">            )</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> data</span><br><span class=\"line\">        <span class=\"keyword\">if</span> value <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">None</span> <span class=\"keyword\">and</span> <span class=\"built_in\">len</span>(value) &gt; <span class=\"number\">0</span>:</span><br><span class=\"line\">            <span class=\"keyword\">try</span>:</span><br><span class=\"line\">                results = re.findall(pattern, value)</span><br><span class=\"line\">                <span class=\"keyword\">for</span> result <span class=\"keyword\">in</span> results:</span><br><span class=\"line\">                    data.append(result)</span><br><span class=\"line\">            <span class=\"keyword\">except</span> Exception <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">                print(e)</span><br><span class=\"line\">                <span class=\"keyword\">return</span> []</span><br><span class=\"line\">        <span class=\"keyword\">return</span> data</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n"},{"title":"java多线程","date":"2020-12-28T14:20:52.000Z","_content":"\n<!-- toc -->\n\n[TOC]\n\n\n\n## 一、线程创建4种方式\n\n### 1、继承Thread\n\n### 2、实现Runnable接口\n\n### 3、使用FutureTask接受实现Callable接口类的构造，然后传入线程类\n\n### 4、使用线程池\n\n<!--more-->\n\n![FutureTask](java多线程/20160713174739239)\n\n\n\n## 二、常用线程池\n\n\tnewFixedThreadPool\n\tnewSingleThreadExecutor\n\tnewCachedThreadPool\n\t创建一个大小无限的线程池。此线程池支持定时以及周期性执行任务的需求\n\tnewScheduledThreadPool\n​\t\n\n\n\n## 三、线程池7大参数\n\n​\t\tcorePoolSize:线程池中的常驻核心线程数\n​\t\tmaximunPoolSize:线程池能够容纳同时执行的最大线程数\n​\t\tkeepAliveTime:多余的空闲线程的存活时间(多余线程池线程数据超过corePoolSize时，空闲时间达到keepAliveTime)\n​\t\tUnit:keepAliveTime的单位\n​\t\tworkQueue:任务队列，被提交但尚未被执行的任务\n​\t\tthreadFactory:表示生成线程池中工作线程的线程工厂，用来创建线程一般用默认的即可\n​\t\thandler:拒绝策略，当队列满了并且工作线程大于等于线程池的最大线程数maximunPoolSize时如何来如何拒绝请求执行的runnable的策略\n​\t\t\n\n\t\t线程池工作原理\n\t\t\t1.创建了线程池后，等待提交过来的任务请求。\n\t\t\t2.当调用execute()方法添加一个请求任务，线程池会做如下判断\n\t\t\t\t2.1如果正在运行的线程数量小于corePoolSize，那么马上创建线程运行这个任务\n\t\t\t\t2.2如果正在运行的线程数量大于等于corePoolSize，那么将这个任务放入队列\n\t\t\t\t2.3如果这时候队列满了且正在运行的线程数量还小于maximumPoolSize，那么还是要创建非核心线程立刻运行这个任务\n\t\t\t\t2.4如果队列满了且正在运行的线程数量大于或等于maximumPoolSize，那么线程池会启动饱和拒绝策略来执行\n\t\t\t3.当一个线程完成任务时，它会从队列中取下一个任务来执行\n\t\t\t4.当一个线程无事可做超过一定的时间（keepAliveTime）时，线程会判断：\n\t\t\t\t如果当前线程数大于corePoolSize，那么这个线程被停掉\n\t\t\t\t所以线程池的所有任务完成后它最终会收缩到corePoolSize的大小\n\t\t线程池的拒绝策略（等待队列已经满了，再也塞不下新任务了，线程池的max线程也达到了，无法继续为新任务服务，这时候用拒绝策略合理的处理这个问题）\n\t\t\t1.AbortPolicy:直接抛出RejectedExecutionException\n\t\t\t2.CallerRunsPolicy:\"调用者运行\"一种调节机制，该策略既不会抛弃任务，也不会抛异常。而实将某些任务回退到调用者，从而降低新的任务流量\n\t\t\t3.DiscardOldersPolicy:抛弃队列中等待最久的任务，然后把当前任务加入队列中尝试再次提交当前任务\n\t\t\t4.DiscardPolicy:直接丢弃任务，不予处理也不抛弃异常。\n\t\t线程池参数设置：CPU密集型:核心数+1  IO密集型:2*核心数，核心数/（1-阻尼系数（0.8-0.9））\n##  四、使用Lock代替Synchronized\n\n​\tSynchronized\tLock\n​\twait\t\t\t(Condition)c.await\n​\tnotify\t\t\t(Condition)c.signal\n​\t使用Lock可以让多线程之间按顺序执行\n​\t区别：\n\n​\t\t  1原始构成：Synchronized是关键字属于JVM层面（monitorenter monitorexit）Lock是具体类是API层面\n​\t      2使用方法：Synchronized不需要手动释放锁，执行完系统会自动让线程释放对锁的占用 Lock需要手动释放锁否则可能死锁\n​\t\t  3等待是否可中断：Synchronized不可中断，除非抛出异常，Lock可中断\n​\t\t  4加锁是否公平\n​\t\t  5锁绑定多个条件Condition(精准唤醒)","source":"_posts/java多线程.md","raw":"---\ntitle: java多线程\ndate: 2020-12-28 22:20:52\ntags:\n- java\n- 随笔\ncategories:\n - 复习\n---\n\n<!-- toc -->\n\n[TOC]\n\n\n\n## 一、线程创建4种方式\n\n### 1、继承Thread\n\n### 2、实现Runnable接口\n\n### 3、使用FutureTask接受实现Callable接口类的构造，然后传入线程类\n\n### 4、使用线程池\n\n<!--more-->\n\n![FutureTask](java多线程/20160713174739239)\n\n\n\n## 二、常用线程池\n\n\tnewFixedThreadPool\n\tnewSingleThreadExecutor\n\tnewCachedThreadPool\n\t创建一个大小无限的线程池。此线程池支持定时以及周期性执行任务的需求\n\tnewScheduledThreadPool\n​\t\n\n\n\n## 三、线程池7大参数\n\n​\t\tcorePoolSize:线程池中的常驻核心线程数\n​\t\tmaximunPoolSize:线程池能够容纳同时执行的最大线程数\n​\t\tkeepAliveTime:多余的空闲线程的存活时间(多余线程池线程数据超过corePoolSize时，空闲时间达到keepAliveTime)\n​\t\tUnit:keepAliveTime的单位\n​\t\tworkQueue:任务队列，被提交但尚未被执行的任务\n​\t\tthreadFactory:表示生成线程池中工作线程的线程工厂，用来创建线程一般用默认的即可\n​\t\thandler:拒绝策略，当队列满了并且工作线程大于等于线程池的最大线程数maximunPoolSize时如何来如何拒绝请求执行的runnable的策略\n​\t\t\n\n\t\t线程池工作原理\n\t\t\t1.创建了线程池后，等待提交过来的任务请求。\n\t\t\t2.当调用execute()方法添加一个请求任务，线程池会做如下判断\n\t\t\t\t2.1如果正在运行的线程数量小于corePoolSize，那么马上创建线程运行这个任务\n\t\t\t\t2.2如果正在运行的线程数量大于等于corePoolSize，那么将这个任务放入队列\n\t\t\t\t2.3如果这时候队列满了且正在运行的线程数量还小于maximumPoolSize，那么还是要创建非核心线程立刻运行这个任务\n\t\t\t\t2.4如果队列满了且正在运行的线程数量大于或等于maximumPoolSize，那么线程池会启动饱和拒绝策略来执行\n\t\t\t3.当一个线程完成任务时，它会从队列中取下一个任务来执行\n\t\t\t4.当一个线程无事可做超过一定的时间（keepAliveTime）时，线程会判断：\n\t\t\t\t如果当前线程数大于corePoolSize，那么这个线程被停掉\n\t\t\t\t所以线程池的所有任务完成后它最终会收缩到corePoolSize的大小\n\t\t线程池的拒绝策略（等待队列已经满了，再也塞不下新任务了，线程池的max线程也达到了，无法继续为新任务服务，这时候用拒绝策略合理的处理这个问题）\n\t\t\t1.AbortPolicy:直接抛出RejectedExecutionException\n\t\t\t2.CallerRunsPolicy:\"调用者运行\"一种调节机制，该策略既不会抛弃任务，也不会抛异常。而实将某些任务回退到调用者，从而降低新的任务流量\n\t\t\t3.DiscardOldersPolicy:抛弃队列中等待最久的任务，然后把当前任务加入队列中尝试再次提交当前任务\n\t\t\t4.DiscardPolicy:直接丢弃任务，不予处理也不抛弃异常。\n\t\t线程池参数设置：CPU密集型:核心数+1  IO密集型:2*核心数，核心数/（1-阻尼系数（0.8-0.9））\n##  四、使用Lock代替Synchronized\n\n​\tSynchronized\tLock\n​\twait\t\t\t(Condition)c.await\n​\tnotify\t\t\t(Condition)c.signal\n​\t使用Lock可以让多线程之间按顺序执行\n​\t区别：\n\n​\t\t  1原始构成：Synchronized是关键字属于JVM层面（monitorenter monitorexit）Lock是具体类是API层面\n​\t      2使用方法：Synchronized不需要手动释放锁，执行完系统会自动让线程释放对锁的占用 Lock需要手动释放锁否则可能死锁\n​\t\t  3等待是否可中断：Synchronized不可中断，除非抛出异常，Lock可中断\n​\t\t  4加锁是否公平\n​\t\t  5锁绑定多个条件Condition(精准唤醒)","slug":"java多线程","published":1,"updated":"2020-12-30T14:13:24.081Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cklgjm1va0005ikvuczqxgyu9","content":"<!-- toc -->\n\n<ul>\n<li><a href=\"#%E4%B8%80-%E7%BA%BF%E7%A8%8B%E5%88%9B%E5%BB%BA4%E7%A7%8D%E6%96%B9%E5%BC%8F\">一、线程创建4种方式</a><ul>\n<li><a href=\"#1-%E7%BB%A7%E6%89%BFthread\">1、继承Thread</a></li>\n<li><a href=\"#2-%E5%AE%9E%E7%8E%B0runnable%E6%8E%A5%E5%8F%A3\">2、实现Runnable接口</a></li>\n<li><a href=\"#3-%E4%BD%BF%E7%94%A8futuretask%E6%8E%A5%E5%8F%97%E5%AE%9E%E7%8E%B0callable%E6%8E%A5%E5%8F%A3%E7%B1%BB%E7%9A%84%E6%9E%84%E9%80%A0%E7%84%B6%E5%90%8E%E4%BC%A0%E5%85%A5%E7%BA%BF%E7%A8%8B%E7%B1%BB\">3、使用FutureTask接受实现Callable接口类的构造，然后传入线程类</a></li>\n<li><a href=\"#4-%E4%BD%BF%E7%94%A8%E7%BA%BF%E7%A8%8B%E6%B1%A0\">4、使用线程池</a></li>\n</ul>\n</li>\n<li><a href=\"#%E4%BA%8C-%E5%B8%B8%E7%94%A8%E7%BA%BF%E7%A8%8B%E6%B1%A0\">二、常用线程池</a></li>\n<li><a href=\"#%E4%B8%89-%E7%BA%BF%E7%A8%8B%E6%B1%A07%E5%A4%A7%E5%8F%82%E6%95%B0\">三、线程池7大参数</a></li>\n<li><a href=\"#%E5%9B%9B-%E4%BD%BF%E7%94%A8lock%E4%BB%A3%E6%9B%BFsynchronized\">四、使用Lock代替Synchronized</a></li>\n</ul>\n<!-- tocstop -->\n\n<p>[TOC]</p>\n<h2><span id=\"一-线程创建4种方式\">一、线程创建4种方式</span></h2><h3><span id=\"1-继承thread\">1、继承Thread</span></h3><h3><span id=\"2-实现runnable接口\">2、实现Runnable接口</span></h3><h3><span id=\"3-使用futuretask接受实现callable接口类的构造然后传入线程类\">3、使用FutureTask接受实现Callable接口类的构造，然后传入线程类</span></h3><h3><span id=\"4-使用线程池\">4、使用线程池</span></h3><a id=\"more\"></a>\n\n<p><img src=\"/2020/12/28/java%E5%A4%9A%E7%BA%BF%E7%A8%8B/20160713174739239\" alt=\"FutureTask\"></p>\n<h2><span id=\"二-常用线程池\">二、常用线程池</span></h2><pre><code>newFixedThreadPool\nnewSingleThreadExecutor\nnewCachedThreadPool\n创建一个大小无限的线程池。此线程池支持定时以及周期性执行任务的需求\nnewScheduledThreadPool</code></pre>\n<p>​    </p>\n<h2><span id=\"三-线程池7大参数\">三、线程池7大参数</span></h2><p>​        corePoolSize:线程池中的常驻核心线程数<br>​        maximunPoolSize:线程池能够容纳同时执行的最大线程数<br>​        keepAliveTime:多余的空闲线程的存活时间(多余线程池线程数据超过corePoolSize时，空闲时间达到keepAliveTime)<br>​        Unit:keepAliveTime的单位<br>​        workQueue:任务队列，被提交但尚未被执行的任务<br>​        threadFactory:表示生成线程池中工作线程的线程工厂，用来创建线程一般用默认的即可<br>​        handler:拒绝策略，当队列满了并且工作线程大于等于线程池的最大线程数maximunPoolSize时如何来如何拒绝请求执行的runnable的策略<br>​        </p>\n<pre><code>    线程池工作原理\n        1.创建了线程池后，等待提交过来的任务请求。\n        2.当调用execute()方法添加一个请求任务，线程池会做如下判断\n            2.1如果正在运行的线程数量小于corePoolSize，那么马上创建线程运行这个任务\n            2.2如果正在运行的线程数量大于等于corePoolSize，那么将这个任务放入队列\n            2.3如果这时候队列满了且正在运行的线程数量还小于maximumPoolSize，那么还是要创建非核心线程立刻运行这个任务\n            2.4如果队列满了且正在运行的线程数量大于或等于maximumPoolSize，那么线程池会启动饱和拒绝策略来执行\n        3.当一个线程完成任务时，它会从队列中取下一个任务来执行\n        4.当一个线程无事可做超过一定的时间（keepAliveTime）时，线程会判断：\n            如果当前线程数大于corePoolSize，那么这个线程被停掉\n            所以线程池的所有任务完成后它最终会收缩到corePoolSize的大小\n    线程池的拒绝策略（等待队列已经满了，再也塞不下新任务了，线程池的max线程也达到了，无法继续为新任务服务，这时候用拒绝策略合理的处理这个问题）\n        1.AbortPolicy:直接抛出RejectedExecutionException\n        2.CallerRunsPolicy:&quot;调用者运行&quot;一种调节机制，该策略既不会抛弃任务，也不会抛异常。而实将某些任务回退到调用者，从而降低新的任务流量\n        3.DiscardOldersPolicy:抛弃队列中等待最久的任务，然后把当前任务加入队列中尝试再次提交当前任务\n        4.DiscardPolicy:直接丢弃任务，不予处理也不抛弃异常。\n    线程池参数设置：CPU密集型:核心数+1  IO密集型:2*核心数，核心数/（1-阻尼系数（0.8-0.9））</code></pre>\n<h2><span id=\"四-使用lock代替synchronized\">四、使用Lock代替Synchronized</span></h2><p>​    Synchronized    Lock<br>​    wait            (Condition)c.await<br>​    notify            (Condition)c.signal<br>​    使用Lock可以让多线程之间按顺序执行<br>​    区别：</p>\n<p>​          1原始构成：Synchronized是关键字属于JVM层面（monitorenter monitorexit）Lock是具体类是API层面<br>​          2使用方法：Synchronized不需要手动释放锁，执行完系统会自动让线程释放对锁的占用 Lock需要手动释放锁否则可能死锁<br>​          3等待是否可中断：Synchronized不可中断，除非抛出异常，Lock可中断<br>​          4加锁是否公平<br>​          5锁绑定多个条件Condition(精准唤醒)</p>\n","site":{"data":{}},"excerpt":"<!-- toc -->\n\n<ul>\n<li><a href=\"#%E4%B8%80-%E7%BA%BF%E7%A8%8B%E5%88%9B%E5%BB%BA4%E7%A7%8D%E6%96%B9%E5%BC%8F\">一、线程创建4种方式</a><ul>\n<li><a href=\"#1-%E7%BB%A7%E6%89%BFthread\">1、继承Thread</a></li>\n<li><a href=\"#2-%E5%AE%9E%E7%8E%B0runnable%E6%8E%A5%E5%8F%A3\">2、实现Runnable接口</a></li>\n<li><a href=\"#3-%E4%BD%BF%E7%94%A8futuretask%E6%8E%A5%E5%8F%97%E5%AE%9E%E7%8E%B0callable%E6%8E%A5%E5%8F%A3%E7%B1%BB%E7%9A%84%E6%9E%84%E9%80%A0%E7%84%B6%E5%90%8E%E4%BC%A0%E5%85%A5%E7%BA%BF%E7%A8%8B%E7%B1%BB\">3、使用FutureTask接受实现Callable接口类的构造，然后传入线程类</a></li>\n<li><a href=\"#4-%E4%BD%BF%E7%94%A8%E7%BA%BF%E7%A8%8B%E6%B1%A0\">4、使用线程池</a></li>\n</ul>\n</li>\n<li><a href=\"#%E4%BA%8C-%E5%B8%B8%E7%94%A8%E7%BA%BF%E7%A8%8B%E6%B1%A0\">二、常用线程池</a></li>\n<li><a href=\"#%E4%B8%89-%E7%BA%BF%E7%A8%8B%E6%B1%A07%E5%A4%A7%E5%8F%82%E6%95%B0\">三、线程池7大参数</a></li>\n<li><a href=\"#%E5%9B%9B-%E4%BD%BF%E7%94%A8lock%E4%BB%A3%E6%9B%BFsynchronized\">四、使用Lock代替Synchronized</a></li>\n</ul>\n<!-- tocstop -->\n\n<p>[TOC]</p>\n<h2 id=\"一、线程创建4种方式\"><a href=\"#一、线程创建4种方式\" class=\"headerlink\" title=\"一、线程创建4种方式\"></a>一、线程创建4种方式</h2><h3 id=\"1、继承Thread\"><a href=\"#1、继承Thread\" class=\"headerlink\" title=\"1、继承Thread\"></a>1、继承Thread</h3><h3 id=\"2、实现Runnable接口\"><a href=\"#2、实现Runnable接口\" class=\"headerlink\" title=\"2、实现Runnable接口\"></a>2、实现Runnable接口</h3><h3 id=\"3、使用FutureTask接受实现Callable接口类的构造，然后传入线程类\"><a href=\"#3、使用FutureTask接受实现Callable接口类的构造，然后传入线程类\" class=\"headerlink\" title=\"3、使用FutureTask接受实现Callable接口类的构造，然后传入线程类\"></a>3、使用FutureTask接受实现Callable接口类的构造，然后传入线程类</h3><h3 id=\"4、使用线程池\"><a href=\"#4、使用线程池\" class=\"headerlink\" title=\"4、使用线程池\"></a>4、使用线程池</h3>","more":"<p><img src=\"/2020/12/28/java%E5%A4%9A%E7%BA%BF%E7%A8%8B/20160713174739239\" alt=\"FutureTask\"></p>\n<h2 id=\"二、常用线程池\"><a href=\"#二、常用线程池\" class=\"headerlink\" title=\"二、常用线程池\"></a>二、常用线程池</h2><pre><code>newFixedThreadPool\nnewSingleThreadExecutor\nnewCachedThreadPool\n创建一个大小无限的线程池。此线程池支持定时以及周期性执行任务的需求\nnewScheduledThreadPool</code></pre>\n<p>​    </p>\n<h2 id=\"三、线程池7大参数\"><a href=\"#三、线程池7大参数\" class=\"headerlink\" title=\"三、线程池7大参数\"></a>三、线程池7大参数</h2><p>​        corePoolSize:线程池中的常驻核心线程数<br>​        maximunPoolSize:线程池能够容纳同时执行的最大线程数<br>​        keepAliveTime:多余的空闲线程的存活时间(多余线程池线程数据超过corePoolSize时，空闲时间达到keepAliveTime)<br>​        Unit:keepAliveTime的单位<br>​        workQueue:任务队列，被提交但尚未被执行的任务<br>​        threadFactory:表示生成线程池中工作线程的线程工厂，用来创建线程一般用默认的即可<br>​        handler:拒绝策略，当队列满了并且工作线程大于等于线程池的最大线程数maximunPoolSize时如何来如何拒绝请求执行的runnable的策略<br>​        </p>\n<pre><code>    线程池工作原理\n        1.创建了线程池后，等待提交过来的任务请求。\n        2.当调用execute()方法添加一个请求任务，线程池会做如下判断\n            2.1如果正在运行的线程数量小于corePoolSize，那么马上创建线程运行这个任务\n            2.2如果正在运行的线程数量大于等于corePoolSize，那么将这个任务放入队列\n            2.3如果这时候队列满了且正在运行的线程数量还小于maximumPoolSize，那么还是要创建非核心线程立刻运行这个任务\n            2.4如果队列满了且正在运行的线程数量大于或等于maximumPoolSize，那么线程池会启动饱和拒绝策略来执行\n        3.当一个线程完成任务时，它会从队列中取下一个任务来执行\n        4.当一个线程无事可做超过一定的时间（keepAliveTime）时，线程会判断：\n            如果当前线程数大于corePoolSize，那么这个线程被停掉\n            所以线程池的所有任务完成后它最终会收缩到corePoolSize的大小\n    线程池的拒绝策略（等待队列已经满了，再也塞不下新任务了，线程池的max线程也达到了，无法继续为新任务服务，这时候用拒绝策略合理的处理这个问题）\n        1.AbortPolicy:直接抛出RejectedExecutionException\n        2.CallerRunsPolicy:&quot;调用者运行&quot;一种调节机制，该策略既不会抛弃任务，也不会抛异常。而实将某些任务回退到调用者，从而降低新的任务流量\n        3.DiscardOldersPolicy:抛弃队列中等待最久的任务，然后把当前任务加入队列中尝试再次提交当前任务\n        4.DiscardPolicy:直接丢弃任务，不予处理也不抛弃异常。\n    线程池参数设置：CPU密集型:核心数+1  IO密集型:2*核心数，核心数/（1-阻尼系数（0.8-0.9））</code></pre>\n<h2 id=\"四、使用Lock代替Synchronized\"><a href=\"#四、使用Lock代替Synchronized\" class=\"headerlink\" title=\"四、使用Lock代替Synchronized\"></a>四、使用Lock代替Synchronized</h2><p>​    Synchronized    Lock<br>​    wait            (Condition)c.await<br>​    notify            (Condition)c.signal<br>​    使用Lock可以让多线程之间按顺序执行<br>​    区别：</p>\n<p>​          1原始构成：Synchronized是关键字属于JVM层面（monitorenter monitorexit）Lock是具体类是API层面<br>​          2使用方法：Synchronized不需要手动释放锁，执行完系统会自动让线程释放对锁的占用 Lock需要手动释放锁否则可能死锁<br>​          3等待是否可中断：Synchronized不可中断，除非抛出异常，Lock可中断<br>​          4加锁是否公平<br>​          5锁绑定多个条件Condition(精准唤醒)</p>"},{"title":"使用hexo+github搭建博客","date":"2020-12-22T12:47:56.000Z","_content":"\n<!-- toc -->\n\n[TOC]\n\n\n\n## 前言\n\n近些年来很多用户都喜欢使用 GitHub Pages 来搭建 Hexo 静态博客网站，其最吸引人的莫过于完全免费使用，并且非常稳定。\n\n虽然搭建时比较麻烦，有点折腾，但是配置完成后，基本不需要操心维护的事，甚至放了几年都忘记了，打开来看文章依然还在。\n\n本文就详细介绍下如何使用 Hexo + GitHub 搭建免费个人博客网站的教程。\n\n------\n\n为了照顾小白用户（第一次使用 GitHub 和 Hexo），尽可能详细，包括常见的坑和问题都有提示说明。下面目录中**第 3~5 步为最重要的步骤**，其他内容如果已经会的可以选择性跳过。\n\n看起来有点繁杂，捋顺了倒也简单，认真跟教程走，完整操作一遍大概需要 30 分钟。\n\n<!--more-->\n\n**内容目录：**\n\n- 简介：GitHub Pages 和 Hexo & 原理\n\n1. 准备：环境搭建\n   1.1. 注意事项\n   1.2. 环境搭建\n2. 连接 Github\n3. 创建 Github Pages 仓库\n4. 本地安装 Hexo 博客程序\n   4.1. 安装 Hexo\n   4.2. Hexo 初始化和本地预览\n5. 部署 Hexo 到 GitHub Pages\n6. 绑定域名（可选）\n7. 开始使用\n   7.1. 发布文章\n   7.2. 网站设置\n   7.3. 更换主题\n   7.4. 常用代码\n8. 常见问题\n\n## 简介\n\n### GitHub Pages 是什么？\n\n- [What is GitHub Pages? - GitHub Help](https://link.zhihu.com/?target=https%3A//help.github.com/en/articles/what-is-github-pages)\n\nGitHub Pages 是由 GitHub 官方提供的一种免费的静态站点托管服务，让我们可以在 GitHub 仓库里托管和发布自己的静态网站页面。\n\n### Hexo 是什么？\n\n- 官网：[hexo.io](https://link.zhihu.com/?target=https%3A//hexo.io/zh-cn/)\n\nHexo 是一个快速、简洁且高效的静态博客框架，它基于 Node.js 运行，可以将我们撰写的 Markdown 文档解析渲染成静态的 HTML 网页。\n\n### Hexo + GitHub 文章发布原理\n\n在本地撰写 Markdown 格式文章后，通过 Hexo 解析文档，渲染生成具有主题样式的 HTML 静态网页，再推送到 GitHub 上完成博文的发布。\n\n![img](使用hexo+github搭建博客/v2-a193a47cf70fe6ecf156e5f3d34920ea_720w.jpg)\n\n### 优点和不足\n\n**优点：**完全免费；静态站点，轻量快速；可按需求自由定制改造；托管在 GitHub，安全省心；迁移方便……\n\n**不足：**发文不便，依赖于本地环境；更适合个人博客使用；GitHub 在国内访问速度有点不快。\n\n## 1. 准备\n\n### 注意事项\n\n- 输入代码时，核对准确，最好切换成英文输入法；\n- 将文中的 “用户名” 和 “邮箱” 替换为自己的 GitHub 账户名和绑定的邮箱；\n- 统一使用 Git Bash 进行操作（支持 Win、Mac）；\n- 小白请严格按步骤进行，不要跳！\n\n###  环境搭建\n\nHexo 基于 Node.js，搭建过程中还需要使用 npm（Node.js 已带） 和 git，因此先搭建本地操作环境，安装 Node.js 和 Git。\n\n- Node.js：[https://nodejs.org/zh-cn](https://link.zhihu.com/?target=https%3A//nodejs.org/zh-cn)\n- Git：[https://git-scm.com/downloads](https://link.zhihu.com/?target=https%3A//git-scm.com/downloads)\n\n下载 Node.js 和 Git 程序并安装，一路点 “下一步” 按默认配置完成安装。\n\n安装完成后，Win+R 输入 cmd 并打开，依次输入 `node -v`、`npm -v` 和 `git --version` 并回车，如下图出现程序版本号即可。\n\n![img](使用hexo+github搭建博客/v2-27b47b5ae479ce7987851292a67774b0_720w.jpg)\n\n## 2. 连接 Github\n\n使用邮箱注册 [GitHub](https://link.zhihu.com/?target=https%3A//github.com/) 账户，选择免费账户（Free），并完成邮件验证。\n\n右键 -> Git Bash Here，**设置用户名和邮箱**：\n\n```text\ngit config --global user.name \"GitHub 用户名\"\ngit config --global user.email \"GitHub 邮箱\"\n```\n\n**创建 SSH 密匙**：\n\n输入 `ssh-keygen -t rsa -C \"GitHub 邮箱\"`，然后一路回车。\n\n**添加密匙：**\n\n进入 [C:\\Users\\用户名\\.ssh] 目录（要勾选显示“隐藏的项目”），用记事本打开公钥 id_rsa.pub 文件并复制里面的内容。\n\n登陆 GitHub ，进入 Settings 页面，选择左边栏的 SSH and GPG keys，点击 New SSH key。\n\nTitle 随便取个名字，粘贴复制的 id_rsa.pub 内容到 Key 中，点击 Add SSH key 完成添加。\n\n![img](使用hexo+github搭建博客/v2-9125065afd24332d7cd84feb6a350730_720w.jpg)\n\n**验证连接：**\n\n打开 Git Bash，输入 `ssh -T git@github.com` 出现 “Are you sure……”，输入 yes 回车确认。\n\n![img](使用hexo+github搭建博客/v2-b4c7524a2451f4ab42f9c22ea3c7b6be_720w.jpg)\n\n显示 “Hi xxx! You've successfully……” 即连接成功。\n\n## 3. 创建 Github Pages 仓库\n\nGitHub 主页右上角加号 -> New repository：\n\n- Repository name 中输入 `用户名.github.io`\n- 勾选 “Initialize this repository with a README”\n- Description 选填\n\n填好后点击 Create repository 创建。\n\n![img](使用hexo+github搭建博客/v2-67a8165154f4c5f4a6333e76e78ed815_720w.jpg)\n\n创建后默认自动启用 HTTPS，博客地址为：`https://用户名.github.io`\n\n## 4. 本地安装 Hexo 博客程序\n\n新建一个文件夹用来存放 Hexo 的程序文件，如 Hexo-Blog。打开该文件夹，右键 -> Git Bash Here。\n\n### 4.1 安装 Hexo\n\n使用 npm 一键安装 Hexo 博客程序：\n\n```text\nnpm install -g hexo-cli\n```\n\nMac 用户需要管理员权限（sudo），运行这条命令：\n\n```text\nsudo npm install -g hexo-cli\n```\n\n安装时间有点久（真的很慢！），界面也没任何反应，**耐心等待**，安装完成后如下图。\n\n![img](使用hexo+github搭建博客/v2-01e7fc8bb9280437deb437bf73a190a1_720w.jpg)\n\n### 4.2 Hexo 初始化和本地预览\n\n**初始化并安装所需组件：**\n\n```text\nhexo init      # 初始化\nnpm install    # 安装组件\n```\n\n完成后依次输入下面命令，**启动本地服务器进行预览**：\n\n```text\nhexo g   # 生成页面\nhexo s   # 启动预览\n```\n\n**访问** `http://localhost:4000`**，出现 Hexo 默认页面，本地博客安装成功！**\n\n![img](使用hexo+github搭建博客/v2-1c3baeecf1ef3bec5c8ef3f14639f68b_720w.jpg)\n\n**Tips：**如果出现页面加载不出来，可能是端口被占用了。Ctrl+C 关闭服务器，运行 `hexo server -p 5000` 更改端口号后重试。\n\nHexo 博客文件夹目录结构如下：\n\n![img](使用hexo+github搭建博客/v2-264c75c0e493ae8cc5f283567c64ff2c_720w.jpg)\n\n## 5. 部署 Hexo 到 GitHub Pages\n\n本地博客测试成功后，就是上传到 GitHub 进行部署，使其能够在网络上访问。\n\n首先**安装 hexo-deployer-git**：\n\n```text\nnpm install hexo-deployer-git --save\n```\n\n然后**修改 _config.yml** 文件末尾的 Deployment 部分，修改成如下：\n\n```text\ndeploy:\n  type: git\n  repository: git@github.com:用户名/用户名.github.io.git\n  branch: master\n```\n\n完成后运行 `hexo d` 将网站上传部署到 GitHub Pages。\n\n完成！这时访问我们的 GitHub 域名 `https://用户名.github.io` 就可以看到 Hexo 网站了。\n\n## 6. 绑定域名（可选）\n\n博客搭建完成使用的是 GitHub 的子域名（用户名.[http://github.io](https://link.zhihu.com/?target=http%3A//github.io)），我们可以为 Hexo 博客绑定自己的域名替换 GitHub 域名，更加个性化和专业，也利于 SEO。\n\n我们使用 [Namesilo](https://link.zhihu.com/?target=https%3A//www.namesilo.com/%3Frid%3Dd27fa32do) 进行注册，便宜好用没啥套路，使用优惠码 `okoff` 优惠一美元，com 域名大概 50 块一年。\n\n###  6.1 域名注册和解析\n\n- 域名注册和解析教程：[Namesilo 域名购买及使用教程](https://zhuanlan.zhihu.com/p/33921436)\n\n按上面教程注册并解析域名，在 DNS 设置部分，删除自带的记录，然后添加 CNAME 记录将 www 域名解析指向 `用户名.github.io`。\n\n![img](使用hexo+github搭建博客/v2-d5d37c8ad523d8ab5c7c200fabc9585e_720w.jpg)\n\n###  6.2 绑定域名到 Hexo 博客\n\n进入本地博客文件夹的 source 目录，打开记事本，里面输入自己的域名，如 http://www.example.com，保存名称为 “CNAME”，格式为 “所有文件”（无 .txt 后缀）。\n\n清除缓存等文件并重新发布网站：\n\n```text\nhexo clean   # 清除缓存文件等\nhexo g       # 生成页面\nhexo s       # 启动预览\n```\n\n现在就可以使用自己的域名访问 Hexo 博客了。\n\n###  6.3 开启 HTTPS\n\n配置自己的域名后，需要我们手动开启 HTTPS。打开博客所在 GitHub 仓库，Settings -> 下拉找到 GitHub Pages -> 勾选 Enforce HTTPS。\n\n![img](使用hexo+github搭建博客/v2-54f8744afc9746884e6b3acecfc5f8cf_720w.jpg)\n\nHTTPS 证书部署成功需要一定时间，等大概几分钟再访问域名，就可以看到域名前面的小绿锁了，HTTPS 配置完成！\n\n## 7. 开始使用\n\n### 7.1 发布文章\n\n进入博客所在目录，右键打开 Git Bash Here，创建博文：\n\n```text\nhexo new \"My New Post\"\n```\n\n然后 source 文件夹中会出现一个 My New Post.md 文件，就可以使用 Markdown 编辑器在该文件中撰写文章了。\n\n写完后运行下面代码将文章渲染并部署到 GitHub Pages 上完成发布。**以后每次发布文章都是这两条命令。**\n\n```text\nhexo g   # 生成页面\nhexo d   # 部署发布\n```\n\n\n也可以不使用命令自己创建 .md 文件，只需在文件开头手动加入如下格式 Front-matter 即可，写完后运行 `hexo g` 和 `hexo d` 发布。\n\n```text\n---\ntitle: Hello World # 标题\ndate: 2019/3/26 hh:mm:ss # 时间\ncategories: # 分类\n- Diary\ntags: # 标签\n- PS3\n- Games\n---\n\n```\n\n###  7.2 网站设置\n\n包括网站名称、描述、作者、链接样式等，全部在网站目录下的 _config.yml 文件中，参考[官方文档](https://link.zhihu.com/?target=https%3A//hexo.io/zh-cn/docs/configuration)按需要编辑。\n\n注意：冒号后要加一个空格！\n\n###  7.3 更换主题\n\n在 [Themes | Hexo](https://link.zhihu.com/?target=https%3A//hexo.io/themes/) 选择一个喜欢的主题，比如 [NexT](https://link.zhihu.com/?target=http%3A//theme-next.iissnan.com/getting-started.html)，进入网站目录打开 Git Bash Here 下载主题：\n\n```text\ngit clone https://github.com/iissnan/hexo-theme-next themes/next\n```\n\n然后修改 _config.yml 中的 theme 为新主题名称 next，发布。（有的主题需要将 _config.yml 替换为主题自带的，参考主题说明。）\n\n### 7.4 常用命令\n\n```text\nhexo new \"name\"       # 新建文章\nhexo new page \"name\"  # 新建页面\nhexo g                # 生成页面\nhexo d                # 部署\nhexo g -d             # 生成页面并部署\nhexo s                # 本地预览\nhexo clean            # 清除缓存和已生成的静态文件\nhexo help             # 帮助\n```\n\n## 8 常见问题\n\n**1、Hexo 设置显示文章摘要，首页不显示全文**\n\nHexo 主页文章列表默认会显示文章全文，浏览时很不方便，可以在文章中插入 `<!--more-->` 进行分段。\n\n该代码前面的内容会作为摘要显示，而后面的内容会替换为 “Read More” 隐藏起来。\n\n![img](使用hexo+github搭建博客/v2-45701cf120ca77e6733ad30b40666f33_720w.jpg)\n\n**2、设置网站图标**\n\n进入 themes/主题 文件夹，打开 _config.yml 配置文件，找到 favicon 修改，一般格式为：`favicon: 图标地址`。（不同主题可能略有差别）\n\n**3、修改并部署后没有效果**\n\n使用 `hexo clean` 清理后重新部署。\n\n**4、开启 HTTPS 后访问网站显示连接不安全？**\n\n证书还未部署生效，等待一会儿，清除浏览器缓存再试。\n\n**5、Mac 安装 Hexo 报错无法安装**\n\nMac 用户需要管理员权限运行，使用 `sudo npm install -g hexo-cli` 命令安装。\n\n**6、npm 下载速度慢，甚至完全没反应**\n\n使用 npm 安装程序等待很久也没反应，或者下载速度很慢，可以更换 npm 源为国内 npm 镜像。\n\n临时更换方法：在 npm 安装命令后面加上：\n\n```text\n--registry https://registry.npm.taobao.org \n```\n\n## 结语\n\nHexo 是一种纯静态的博客，我们必须要在本地完成文章的编辑再部署到 GitHub 上，依赖于本地环境。不能像 WordPress 或 Typecho 那样的动态博客一样能直接在浏览器中完成撰文和发布。","source":"_posts/使用hexo+github搭建博客.md","raw":"---\ntitle: 使用hexo+github搭建博客\ndate: 2020-12-22 20:47:56\ncategories: \n- 工具\ntags:\n- hexo\n- 随笔\n---\n\n<!-- toc -->\n\n[TOC]\n\n\n\n## 前言\n\n近些年来很多用户都喜欢使用 GitHub Pages 来搭建 Hexo 静态博客网站，其最吸引人的莫过于完全免费使用，并且非常稳定。\n\n虽然搭建时比较麻烦，有点折腾，但是配置完成后，基本不需要操心维护的事，甚至放了几年都忘记了，打开来看文章依然还在。\n\n本文就详细介绍下如何使用 Hexo + GitHub 搭建免费个人博客网站的教程。\n\n------\n\n为了照顾小白用户（第一次使用 GitHub 和 Hexo），尽可能详细，包括常见的坑和问题都有提示说明。下面目录中**第 3~5 步为最重要的步骤**，其他内容如果已经会的可以选择性跳过。\n\n看起来有点繁杂，捋顺了倒也简单，认真跟教程走，完整操作一遍大概需要 30 分钟。\n\n<!--more-->\n\n**内容目录：**\n\n- 简介：GitHub Pages 和 Hexo & 原理\n\n1. 准备：环境搭建\n   1.1. 注意事项\n   1.2. 环境搭建\n2. 连接 Github\n3. 创建 Github Pages 仓库\n4. 本地安装 Hexo 博客程序\n   4.1. 安装 Hexo\n   4.2. Hexo 初始化和本地预览\n5. 部署 Hexo 到 GitHub Pages\n6. 绑定域名（可选）\n7. 开始使用\n   7.1. 发布文章\n   7.2. 网站设置\n   7.3. 更换主题\n   7.4. 常用代码\n8. 常见问题\n\n## 简介\n\n### GitHub Pages 是什么？\n\n- [What is GitHub Pages? - GitHub Help](https://link.zhihu.com/?target=https%3A//help.github.com/en/articles/what-is-github-pages)\n\nGitHub Pages 是由 GitHub 官方提供的一种免费的静态站点托管服务，让我们可以在 GitHub 仓库里托管和发布自己的静态网站页面。\n\n### Hexo 是什么？\n\n- 官网：[hexo.io](https://link.zhihu.com/?target=https%3A//hexo.io/zh-cn/)\n\nHexo 是一个快速、简洁且高效的静态博客框架，它基于 Node.js 运行，可以将我们撰写的 Markdown 文档解析渲染成静态的 HTML 网页。\n\n### Hexo + GitHub 文章发布原理\n\n在本地撰写 Markdown 格式文章后，通过 Hexo 解析文档，渲染生成具有主题样式的 HTML 静态网页，再推送到 GitHub 上完成博文的发布。\n\n![img](使用hexo+github搭建博客/v2-a193a47cf70fe6ecf156e5f3d34920ea_720w.jpg)\n\n### 优点和不足\n\n**优点：**完全免费；静态站点，轻量快速；可按需求自由定制改造；托管在 GitHub，安全省心；迁移方便……\n\n**不足：**发文不便，依赖于本地环境；更适合个人博客使用；GitHub 在国内访问速度有点不快。\n\n## 1. 准备\n\n### 注意事项\n\n- 输入代码时，核对准确，最好切换成英文输入法；\n- 将文中的 “用户名” 和 “邮箱” 替换为自己的 GitHub 账户名和绑定的邮箱；\n- 统一使用 Git Bash 进行操作（支持 Win、Mac）；\n- 小白请严格按步骤进行，不要跳！\n\n###  环境搭建\n\nHexo 基于 Node.js，搭建过程中还需要使用 npm（Node.js 已带） 和 git，因此先搭建本地操作环境，安装 Node.js 和 Git。\n\n- Node.js：[https://nodejs.org/zh-cn](https://link.zhihu.com/?target=https%3A//nodejs.org/zh-cn)\n- Git：[https://git-scm.com/downloads](https://link.zhihu.com/?target=https%3A//git-scm.com/downloads)\n\n下载 Node.js 和 Git 程序并安装，一路点 “下一步” 按默认配置完成安装。\n\n安装完成后，Win+R 输入 cmd 并打开，依次输入 `node -v`、`npm -v` 和 `git --version` 并回车，如下图出现程序版本号即可。\n\n![img](使用hexo+github搭建博客/v2-27b47b5ae479ce7987851292a67774b0_720w.jpg)\n\n## 2. 连接 Github\n\n使用邮箱注册 [GitHub](https://link.zhihu.com/?target=https%3A//github.com/) 账户，选择免费账户（Free），并完成邮件验证。\n\n右键 -> Git Bash Here，**设置用户名和邮箱**：\n\n```text\ngit config --global user.name \"GitHub 用户名\"\ngit config --global user.email \"GitHub 邮箱\"\n```\n\n**创建 SSH 密匙**：\n\n输入 `ssh-keygen -t rsa -C \"GitHub 邮箱\"`，然后一路回车。\n\n**添加密匙：**\n\n进入 [C:\\Users\\用户名\\.ssh] 目录（要勾选显示“隐藏的项目”），用记事本打开公钥 id_rsa.pub 文件并复制里面的内容。\n\n登陆 GitHub ，进入 Settings 页面，选择左边栏的 SSH and GPG keys，点击 New SSH key。\n\nTitle 随便取个名字，粘贴复制的 id_rsa.pub 内容到 Key 中，点击 Add SSH key 完成添加。\n\n![img](使用hexo+github搭建博客/v2-9125065afd24332d7cd84feb6a350730_720w.jpg)\n\n**验证连接：**\n\n打开 Git Bash，输入 `ssh -T git@github.com` 出现 “Are you sure……”，输入 yes 回车确认。\n\n![img](使用hexo+github搭建博客/v2-b4c7524a2451f4ab42f9c22ea3c7b6be_720w.jpg)\n\n显示 “Hi xxx! You've successfully……” 即连接成功。\n\n## 3. 创建 Github Pages 仓库\n\nGitHub 主页右上角加号 -> New repository：\n\n- Repository name 中输入 `用户名.github.io`\n- 勾选 “Initialize this repository with a README”\n- Description 选填\n\n填好后点击 Create repository 创建。\n\n![img](使用hexo+github搭建博客/v2-67a8165154f4c5f4a6333e76e78ed815_720w.jpg)\n\n创建后默认自动启用 HTTPS，博客地址为：`https://用户名.github.io`\n\n## 4. 本地安装 Hexo 博客程序\n\n新建一个文件夹用来存放 Hexo 的程序文件，如 Hexo-Blog。打开该文件夹，右键 -> Git Bash Here。\n\n### 4.1 安装 Hexo\n\n使用 npm 一键安装 Hexo 博客程序：\n\n```text\nnpm install -g hexo-cli\n```\n\nMac 用户需要管理员权限（sudo），运行这条命令：\n\n```text\nsudo npm install -g hexo-cli\n```\n\n安装时间有点久（真的很慢！），界面也没任何反应，**耐心等待**，安装完成后如下图。\n\n![img](使用hexo+github搭建博客/v2-01e7fc8bb9280437deb437bf73a190a1_720w.jpg)\n\n### 4.2 Hexo 初始化和本地预览\n\n**初始化并安装所需组件：**\n\n```text\nhexo init      # 初始化\nnpm install    # 安装组件\n```\n\n完成后依次输入下面命令，**启动本地服务器进行预览**：\n\n```text\nhexo g   # 生成页面\nhexo s   # 启动预览\n```\n\n**访问** `http://localhost:4000`**，出现 Hexo 默认页面，本地博客安装成功！**\n\n![img](使用hexo+github搭建博客/v2-1c3baeecf1ef3bec5c8ef3f14639f68b_720w.jpg)\n\n**Tips：**如果出现页面加载不出来，可能是端口被占用了。Ctrl+C 关闭服务器，运行 `hexo server -p 5000` 更改端口号后重试。\n\nHexo 博客文件夹目录结构如下：\n\n![img](使用hexo+github搭建博客/v2-264c75c0e493ae8cc5f283567c64ff2c_720w.jpg)\n\n## 5. 部署 Hexo 到 GitHub Pages\n\n本地博客测试成功后，就是上传到 GitHub 进行部署，使其能够在网络上访问。\n\n首先**安装 hexo-deployer-git**：\n\n```text\nnpm install hexo-deployer-git --save\n```\n\n然后**修改 _config.yml** 文件末尾的 Deployment 部分，修改成如下：\n\n```text\ndeploy:\n  type: git\n  repository: git@github.com:用户名/用户名.github.io.git\n  branch: master\n```\n\n完成后运行 `hexo d` 将网站上传部署到 GitHub Pages。\n\n完成！这时访问我们的 GitHub 域名 `https://用户名.github.io` 就可以看到 Hexo 网站了。\n\n## 6. 绑定域名（可选）\n\n博客搭建完成使用的是 GitHub 的子域名（用户名.[http://github.io](https://link.zhihu.com/?target=http%3A//github.io)），我们可以为 Hexo 博客绑定自己的域名替换 GitHub 域名，更加个性化和专业，也利于 SEO。\n\n我们使用 [Namesilo](https://link.zhihu.com/?target=https%3A//www.namesilo.com/%3Frid%3Dd27fa32do) 进行注册，便宜好用没啥套路，使用优惠码 `okoff` 优惠一美元，com 域名大概 50 块一年。\n\n###  6.1 域名注册和解析\n\n- 域名注册和解析教程：[Namesilo 域名购买及使用教程](https://zhuanlan.zhihu.com/p/33921436)\n\n按上面教程注册并解析域名，在 DNS 设置部分，删除自带的记录，然后添加 CNAME 记录将 www 域名解析指向 `用户名.github.io`。\n\n![img](使用hexo+github搭建博客/v2-d5d37c8ad523d8ab5c7c200fabc9585e_720w.jpg)\n\n###  6.2 绑定域名到 Hexo 博客\n\n进入本地博客文件夹的 source 目录，打开记事本，里面输入自己的域名，如 http://www.example.com，保存名称为 “CNAME”，格式为 “所有文件”（无 .txt 后缀）。\n\n清除缓存等文件并重新发布网站：\n\n```text\nhexo clean   # 清除缓存文件等\nhexo g       # 生成页面\nhexo s       # 启动预览\n```\n\n现在就可以使用自己的域名访问 Hexo 博客了。\n\n###  6.3 开启 HTTPS\n\n配置自己的域名后，需要我们手动开启 HTTPS。打开博客所在 GitHub 仓库，Settings -> 下拉找到 GitHub Pages -> 勾选 Enforce HTTPS。\n\n![img](使用hexo+github搭建博客/v2-54f8744afc9746884e6b3acecfc5f8cf_720w.jpg)\n\nHTTPS 证书部署成功需要一定时间，等大概几分钟再访问域名，就可以看到域名前面的小绿锁了，HTTPS 配置完成！\n\n## 7. 开始使用\n\n### 7.1 发布文章\n\n进入博客所在目录，右键打开 Git Bash Here，创建博文：\n\n```text\nhexo new \"My New Post\"\n```\n\n然后 source 文件夹中会出现一个 My New Post.md 文件，就可以使用 Markdown 编辑器在该文件中撰写文章了。\n\n写完后运行下面代码将文章渲染并部署到 GitHub Pages 上完成发布。**以后每次发布文章都是这两条命令。**\n\n```text\nhexo g   # 生成页面\nhexo d   # 部署发布\n```\n\n\n也可以不使用命令自己创建 .md 文件，只需在文件开头手动加入如下格式 Front-matter 即可，写完后运行 `hexo g` 和 `hexo d` 发布。\n\n```text\n---\ntitle: Hello World # 标题\ndate: 2019/3/26 hh:mm:ss # 时间\ncategories: # 分类\n- Diary\ntags: # 标签\n- PS3\n- Games\n---\n\n```\n\n###  7.2 网站设置\n\n包括网站名称、描述、作者、链接样式等，全部在网站目录下的 _config.yml 文件中，参考[官方文档](https://link.zhihu.com/?target=https%3A//hexo.io/zh-cn/docs/configuration)按需要编辑。\n\n注意：冒号后要加一个空格！\n\n###  7.3 更换主题\n\n在 [Themes | Hexo](https://link.zhihu.com/?target=https%3A//hexo.io/themes/) 选择一个喜欢的主题，比如 [NexT](https://link.zhihu.com/?target=http%3A//theme-next.iissnan.com/getting-started.html)，进入网站目录打开 Git Bash Here 下载主题：\n\n```text\ngit clone https://github.com/iissnan/hexo-theme-next themes/next\n```\n\n然后修改 _config.yml 中的 theme 为新主题名称 next，发布。（有的主题需要将 _config.yml 替换为主题自带的，参考主题说明。）\n\n### 7.4 常用命令\n\n```text\nhexo new \"name\"       # 新建文章\nhexo new page \"name\"  # 新建页面\nhexo g                # 生成页面\nhexo d                # 部署\nhexo g -d             # 生成页面并部署\nhexo s                # 本地预览\nhexo clean            # 清除缓存和已生成的静态文件\nhexo help             # 帮助\n```\n\n## 8 常见问题\n\n**1、Hexo 设置显示文章摘要，首页不显示全文**\n\nHexo 主页文章列表默认会显示文章全文，浏览时很不方便，可以在文章中插入 `<!--more-->` 进行分段。\n\n该代码前面的内容会作为摘要显示，而后面的内容会替换为 “Read More” 隐藏起来。\n\n![img](使用hexo+github搭建博客/v2-45701cf120ca77e6733ad30b40666f33_720w.jpg)\n\n**2、设置网站图标**\n\n进入 themes/主题 文件夹，打开 _config.yml 配置文件，找到 favicon 修改，一般格式为：`favicon: 图标地址`。（不同主题可能略有差别）\n\n**3、修改并部署后没有效果**\n\n使用 `hexo clean` 清理后重新部署。\n\n**4、开启 HTTPS 后访问网站显示连接不安全？**\n\n证书还未部署生效，等待一会儿，清除浏览器缓存再试。\n\n**5、Mac 安装 Hexo 报错无法安装**\n\nMac 用户需要管理员权限运行，使用 `sudo npm install -g hexo-cli` 命令安装。\n\n**6、npm 下载速度慢，甚至完全没反应**\n\n使用 npm 安装程序等待很久也没反应，或者下载速度很慢，可以更换 npm 源为国内 npm 镜像。\n\n临时更换方法：在 npm 安装命令后面加上：\n\n```text\n--registry https://registry.npm.taobao.org \n```\n\n## 结语\n\nHexo 是一种纯静态的博客，我们必须要在本地完成文章的编辑再部署到 GitHub 上，依赖于本地环境。不能像 WordPress 或 Typecho 那样的动态博客一样能直接在浏览器中完成撰文和发布。","slug":"使用hexo+github搭建博客","published":1,"updated":"2021-01-01T14:31:11.399Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cklgjm1vb0006ikvu7d6haf18","content":"<!-- toc -->\n\n<ul>\n<li><a href=\"#%E5%89%8D%E8%A8%80\">前言</a></li>\n<li><a href=\"#%E7%AE%80%E4%BB%8B\">简介</a><ul>\n<li><a href=\"#github-pages-%E6%98%AF%E4%BB%80%E4%B9%88\">GitHub Pages 是什么？</a></li>\n<li><a href=\"#hexo-%E6%98%AF%E4%BB%80%E4%B9%88\">Hexo 是什么？</a></li>\n<li><a href=\"#hexo-github-%E6%96%87%E7%AB%A0%E5%8F%91%E5%B8%83%E5%8E%9F%E7%90%86\">Hexo + GitHub 文章发布原理</a></li>\n<li><a href=\"#%E4%BC%98%E7%82%B9%E5%92%8C%E4%B8%8D%E8%B6%B3\">优点和不足</a></li>\n</ul>\n</li>\n<li><a href=\"#1-%E5%87%86%E5%A4%87\">1. 准备</a><ul>\n<li><a href=\"#%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9\">注意事项</a></li>\n<li><a href=\"#%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA\">环境搭建</a></li>\n</ul>\n</li>\n<li><a href=\"#2-%E8%BF%9E%E6%8E%A5-github\">2. 连接 Github</a></li>\n<li><a href=\"#3-%E5%88%9B%E5%BB%BA-github-pages-%E4%BB%93%E5%BA%93\">3. 创建 Github Pages 仓库</a></li>\n<li><a href=\"#4-%E6%9C%AC%E5%9C%B0%E5%AE%89%E8%A3%85-hexo-%E5%8D%9A%E5%AE%A2%E7%A8%8B%E5%BA%8F\">4. 本地安装 Hexo 博客程序</a><ul>\n<li><a href=\"#41-%E5%AE%89%E8%A3%85-hexo\">4.1 安装 Hexo</a></li>\n<li><a href=\"#42-hexo-%E5%88%9D%E5%A7%8B%E5%8C%96%E5%92%8C%E6%9C%AC%E5%9C%B0%E9%A2%84%E8%A7%88\">4.2 Hexo 初始化和本地预览</a></li>\n</ul>\n</li>\n<li><a href=\"#5-%E9%83%A8%E7%BD%B2-hexo-%E5%88%B0-github-pages\">5. 部署 Hexo 到 GitHub Pages</a></li>\n<li><a href=\"#6-%E7%BB%91%E5%AE%9A%E5%9F%9F%E5%90%8D%E5%8F%AF%E9%80%89\">6. 绑定域名（可选）</a><ul>\n<li><a href=\"#61-%E5%9F%9F%E5%90%8D%E6%B3%A8%E5%86%8C%E5%92%8C%E8%A7%A3%E6%9E%90\">6.1 域名注册和解析</a></li>\n<li><a href=\"#62-%E7%BB%91%E5%AE%9A%E5%9F%9F%E5%90%8D%E5%88%B0-hexo-%E5%8D%9A%E5%AE%A2\">6.2 绑定域名到 Hexo 博客</a></li>\n<li><a href=\"#63-%E5%BC%80%E5%90%AF-https\">6.3 开启 HTTPS</a></li>\n</ul>\n</li>\n<li><a href=\"#7-%E5%BC%80%E5%A7%8B%E4%BD%BF%E7%94%A8\">7. 开始使用</a><ul>\n<li><a href=\"#71-%E5%8F%91%E5%B8%83%E6%96%87%E7%AB%A0\">7.1 发布文章</a></li>\n<li><a href=\"#72-%E7%BD%91%E7%AB%99%E8%AE%BE%E7%BD%AE\">7.2 网站设置</a></li>\n<li><a href=\"#73-%E6%9B%B4%E6%8D%A2%E4%B8%BB%E9%A2%98\">7.3 更换主题</a></li>\n<li><a href=\"#74-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4\">7.4 常用命令</a></li>\n</ul>\n</li>\n<li><a href=\"#8-%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98\">8 常见问题</a></li>\n<li><a href=\"#%E7%BB%93%E8%AF%AD\">结语</a></li>\n</ul>\n<!-- tocstop -->\n\n<p>[TOC]</p>\n<h2><span id=\"前言\">前言</span></h2><p>近些年来很多用户都喜欢使用 GitHub Pages 来搭建 Hexo 静态博客网站，其最吸引人的莫过于完全免费使用，并且非常稳定。</p>\n<p>虽然搭建时比较麻烦，有点折腾，但是配置完成后，基本不需要操心维护的事，甚至放了几年都忘记了，打开来看文章依然还在。</p>\n<p>本文就详细介绍下如何使用 Hexo + GitHub 搭建免费个人博客网站的教程。</p>\n<hr>\n<p>为了照顾小白用户（第一次使用 GitHub 和 Hexo），尽可能详细，包括常见的坑和问题都有提示说明。下面目录中<strong>第 3~5 步为最重要的步骤</strong>，其他内容如果已经会的可以选择性跳过。</p>\n<p>看起来有点繁杂，捋顺了倒也简单，认真跟教程走，完整操作一遍大概需要 30 分钟。</p>\n<a id=\"more\"></a>\n\n<p><strong>内容目录：</strong></p>\n<ul>\n<li>简介：GitHub Pages 和 Hexo &amp; 原理</li>\n</ul>\n<ol>\n<li>准备：环境搭建<br>1.1. 注意事项<br>1.2. 环境搭建</li>\n<li>连接 Github</li>\n<li>创建 Github Pages 仓库</li>\n<li>本地安装 Hexo 博客程序<br>4.1. 安装 Hexo<br>4.2. Hexo 初始化和本地预览</li>\n<li>部署 Hexo 到 GitHub Pages</li>\n<li>绑定域名（可选）</li>\n<li>开始使用<br>7.1. 发布文章<br>7.2. 网站设置<br>7.3. 更换主题<br>7.4. 常用代码</li>\n<li>常见问题</li>\n</ol>\n<h2><span id=\"简介\">简介</span></h2><h3><span id=\"github-pages-是什么\">GitHub Pages 是什么？</span></h3><ul>\n<li><a href=\"https://link.zhihu.com/?target=https://help.github.com/en/articles/what-is-github-pages\">What is GitHub Pages? - GitHub Help</a></li>\n</ul>\n<p>GitHub Pages 是由 GitHub 官方提供的一种免费的静态站点托管服务，让我们可以在 GitHub 仓库里托管和发布自己的静态网站页面。</p>\n<h3><span id=\"hexo-是什么\">Hexo 是什么？</span></h3><ul>\n<li>官网：<a href=\"https://link.zhihu.com/?target=https://hexo.io/zh-cn/\">hexo.io</a></li>\n</ul>\n<p>Hexo 是一个快速、简洁且高效的静态博客框架，它基于 Node.js 运行，可以将我们撰写的 Markdown 文档解析渲染成静态的 HTML 网页。</p>\n<h3><span id=\"hexo-github-文章发布原理\">Hexo + GitHub 文章发布原理</span></h3><p>在本地撰写 Markdown 格式文章后，通过 Hexo 解析文档，渲染生成具有主题样式的 HTML 静态网页，再推送到 GitHub 上完成博文的发布。</p>\n<p><img src=\"/2020/12/22/%E4%BD%BF%E7%94%A8hexo+github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/v2-a193a47cf70fe6ecf156e5f3d34920ea_720w.jpg\" alt=\"img\"></p>\n<h3><span id=\"优点和不足\">优点和不足</span></h3><p><strong>优点：</strong>完全免费；静态站点，轻量快速；可按需求自由定制改造；托管在 GitHub，安全省心；迁移方便……</p>\n<p><strong>不足：</strong>发文不便，依赖于本地环境；更适合个人博客使用；GitHub 在国内访问速度有点不快。</p>\n<h2><span id=\"1-准备\">1. 准备</span></h2><h3><span id=\"注意事项\">注意事项</span></h3><ul>\n<li>输入代码时，核对准确，最好切换成英文输入法；</li>\n<li>将文中的 “用户名” 和 “邮箱” 替换为自己的 GitHub 账户名和绑定的邮箱；</li>\n<li>统一使用 Git Bash 进行操作（支持 Win、Mac）；</li>\n<li>小白请严格按步骤进行，不要跳！</li>\n</ul>\n<h3><span id=\"环境搭建\">环境搭建</span></h3><p>Hexo 基于 Node.js，搭建过程中还需要使用 npm（Node.js 已带） 和 git，因此先搭建本地操作环境，安装 Node.js 和 Git。</p>\n<ul>\n<li>Node.js：<a href=\"https://link.zhihu.com/?target=https://nodejs.org/zh-cn\">https://nodejs.org/zh-cn</a></li>\n<li>Git：<a href=\"https://link.zhihu.com/?target=https://git-scm.com/downloads\">https://git-scm.com/downloads</a></li>\n</ul>\n<p>下载 Node.js 和 Git 程序并安装，一路点 “下一步” 按默认配置完成安装。</p>\n<p>安装完成后，Win+R 输入 cmd 并打开，依次输入 <code>node -v</code>、<code>npm -v</code> 和 <code>git --version</code> 并回车，如下图出现程序版本号即可。</p>\n<p><img src=\"/2020/12/22/%E4%BD%BF%E7%94%A8hexo+github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/v2-27b47b5ae479ce7987851292a67774b0_720w.jpg\" alt=\"img\"></p>\n<h2><span id=\"2-连接-github\">2. 连接 Github</span></h2><p>使用邮箱注册 <a href=\"https://link.zhihu.com/?target=https://github.com/\">GitHub</a> 账户，选择免费账户（Free），并完成邮件验证。</p>\n<p>右键 -&gt; Git Bash Here，<strong>设置用户名和邮箱</strong>：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global user.name &quot;GitHub 用户名&quot;</span><br><span class=\"line\">git config --global user.email &quot;GitHub 邮箱&quot;</span><br></pre></td></tr></table></figure>\n<p><strong>创建 SSH 密匙</strong>：</p>\n<p>输入 <code>ssh-keygen -t rsa -C &quot;GitHub 邮箱&quot;</code>，然后一路回车。</p>\n<p><strong>添加密匙：</strong></p>\n<p>进入 [C:\\Users\\用户名.ssh] 目录（要勾选显示“隐藏的项目”），用记事本打开公钥 id_rsa.pub 文件并复制里面的内容。</p>\n<p>登陆 GitHub ，进入 Settings 页面，选择左边栏的 SSH and GPG keys，点击 New SSH key。</p>\n<p>Title 随便取个名字，粘贴复制的 id_rsa.pub 内容到 Key 中，点击 Add SSH key 完成添加。</p>\n<p><img src=\"/2020/12/22/%E4%BD%BF%E7%94%A8hexo+github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/v2-9125065afd24332d7cd84feb6a350730_720w.jpg\" alt=\"img\"></p>\n<p><strong>验证连接：</strong></p>\n<p>打开 Git Bash，输入 <code>ssh -T git@github.com</code> 出现 “Are you sure……”，输入 yes 回车确认。</p>\n<p><img src=\"/2020/12/22/%E4%BD%BF%E7%94%A8hexo+github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/v2-b4c7524a2451f4ab42f9c22ea3c7b6be_720w.jpg\" alt=\"img\"></p>\n<p>显示 “Hi xxx! You’ve successfully……” 即连接成功。</p>\n<h2><span id=\"3-创建-github-pages-仓库\">3. 创建 Github Pages 仓库</span></h2><p>GitHub 主页右上角加号 -&gt; New repository：</p>\n<ul>\n<li>Repository name 中输入 <code>用户名.github.io</code></li>\n<li>勾选 “Initialize this repository with a README”</li>\n<li>Description 选填</li>\n</ul>\n<p>填好后点击 Create repository 创建。</p>\n<p><img src=\"/2020/12/22/%E4%BD%BF%E7%94%A8hexo+github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/v2-67a8165154f4c5f4a6333e76e78ed815_720w.jpg\" alt=\"img\"></p>\n<p>创建后默认自动启用 HTTPS，博客地址为：<code>https://用户名.github.io</code></p>\n<h2><span id=\"4-本地安装-hexo-博客程序\">4. 本地安装 Hexo 博客程序</span></h2><p>新建一个文件夹用来存放 Hexo 的程序文件，如 Hexo-Blog。打开该文件夹，右键 -&gt; Git Bash Here。</p>\n<h3><span id=\"41-安装-hexo\">4.1 安装 Hexo</span></h3><p>使用 npm 一键安装 Hexo 博客程序：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>\n<p>Mac 用户需要管理员权限（sudo），运行这条命令：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo npm install -g hexo-cli</span><br></pre></td></tr></table></figure>\n<p>安装时间有点久（真的很慢！），界面也没任何反应，<strong>耐心等待</strong>，安装完成后如下图。</p>\n<p><img src=\"/2020/12/22/%E4%BD%BF%E7%94%A8hexo+github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/v2-01e7fc8bb9280437deb437bf73a190a1_720w.jpg\" alt=\"img\"></p>\n<h3><span id=\"42-hexo-初始化和本地预览\">4.2 Hexo 初始化和本地预览</span></h3><p><strong>初始化并安装所需组件：</strong></p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo init      # 初始化</span><br><span class=\"line\">npm install    # 安装组件</span><br></pre></td></tr></table></figure>\n<p>完成后依次输入下面命令，<strong>启动本地服务器进行预览</strong>：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo g   # 生成页面</span><br><span class=\"line\">hexo s   # 启动预览</span><br></pre></td></tr></table></figure>\n<p><strong>访问</strong> <code>http://localhost:4000</code><strong>，出现 Hexo 默认页面，本地博客安装成功！</strong></p>\n<p><img src=\"/2020/12/22/%E4%BD%BF%E7%94%A8hexo+github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/v2-1c3baeecf1ef3bec5c8ef3f14639f68b_720w.jpg\" alt=\"img\"></p>\n<p><strong>Tips：</strong>如果出现页面加载不出来，可能是端口被占用了。Ctrl+C 关闭服务器，运行 <code>hexo server -p 5000</code> 更改端口号后重试。</p>\n<p>Hexo 博客文件夹目录结构如下：</p>\n<p><img src=\"/2020/12/22/%E4%BD%BF%E7%94%A8hexo+github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/v2-264c75c0e493ae8cc5f283567c64ff2c_720w.jpg\" alt=\"img\"></p>\n<h2><span id=\"5-部署-hexo-到-github-pages\">5. 部署 Hexo 到 GitHub Pages</span></h2><p>本地博客测试成功后，就是上传到 GitHub 进行部署，使其能够在网络上访问。</p>\n<p>首先<strong>安装 hexo-deployer-git</strong>：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>\n<p>然后<strong>修改 _config.yml</strong> 文件末尾的 Deployment 部分，修改成如下：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deploy:</span><br><span class=\"line\">  type: git</span><br><span class=\"line\">  repository: git@github.com:用户名/用户名.github.io.git</span><br><span class=\"line\">  branch: master</span><br></pre></td></tr></table></figure>\n<p>完成后运行 <code>hexo d</code> 将网站上传部署到 GitHub Pages。</p>\n<p>完成！这时访问我们的 GitHub 域名 <code>https://用户名.github.io</code> 就可以看到 Hexo 网站了。</p>\n<h2><span id=\"6-绑定域名可选\">6. 绑定域名（可选）</span></h2><p>博客搭建完成使用的是 GitHub 的子域名（用户名.<a href=\"https://link.zhihu.com/?target=http://github.io\">http://github.io</a>），我们可以为 Hexo 博客绑定自己的域名替换 GitHub 域名，更加个性化和专业，也利于 SEO。</p>\n<p>我们使用 <a href=\"https://link.zhihu.com/?target=https://www.namesilo.com/?rid=d27fa32do\">Namesilo</a> 进行注册，便宜好用没啥套路，使用优惠码 <code>okoff</code> 优惠一美元，com 域名大概 50 块一年。</p>\n<h3><span id=\"61-域名注册和解析\">6.1 域名注册和解析</span></h3><ul>\n<li>域名注册和解析教程：<a href=\"https://zhuanlan.zhihu.com/p/33921436\">Namesilo 域名购买及使用教程</a></li>\n</ul>\n<p>按上面教程注册并解析域名，在 DNS 设置部分，删除自带的记录，然后添加 CNAME 记录将 www 域名解析指向 <code>用户名.github.io</code>。</p>\n<p><img src=\"/2020/12/22/%E4%BD%BF%E7%94%A8hexo+github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/v2-d5d37c8ad523d8ab5c7c200fabc9585e_720w.jpg\" alt=\"img\"></p>\n<h3><span id=\"62-绑定域名到-hexo-博客\">6.2 绑定域名到 Hexo 博客</span></h3><p>进入本地博客文件夹的 source 目录，打开记事本，里面输入自己的域名，如 <a href=\"http://www.example.com,保存名称为/\">http://www.example.com，保存名称为</a> “CNAME”，格式为 “所有文件”（无 .txt 后缀）。</p>\n<p>清除缓存等文件并重新发布网站：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo clean   # 清除缓存文件等</span><br><span class=\"line\">hexo g       # 生成页面</span><br><span class=\"line\">hexo s       # 启动预览</span><br></pre></td></tr></table></figure>\n<p>现在就可以使用自己的域名访问 Hexo 博客了。</p>\n<h3><span id=\"63-开启-https\">6.3 开启 HTTPS</span></h3><p>配置自己的域名后，需要我们手动开启 HTTPS。打开博客所在 GitHub 仓库，Settings -&gt; 下拉找到 GitHub Pages -&gt; 勾选 Enforce HTTPS。</p>\n<p><img src=\"/2020/12/22/%E4%BD%BF%E7%94%A8hexo+github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/v2-54f8744afc9746884e6b3acecfc5f8cf_720w.jpg\" alt=\"img\"></p>\n<p>HTTPS 证书部署成功需要一定时间，等大概几分钟再访问域名，就可以看到域名前面的小绿锁了，HTTPS 配置完成！</p>\n<h2><span id=\"7-开始使用\">7. 开始使用</span></h2><h3><span id=\"71-发布文章\">7.1 发布文章</span></h3><p>进入博客所在目录，右键打开 Git Bash Here，创建博文：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new &quot;My New Post&quot;</span><br></pre></td></tr></table></figure>\n<p>然后 source 文件夹中会出现一个 My New Post.md 文件，就可以使用 Markdown 编辑器在该文件中撰写文章了。</p>\n<p>写完后运行下面代码将文章渲染并部署到 GitHub Pages 上完成发布。<strong>以后每次发布文章都是这两条命令。</strong></p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo g   # 生成页面</span><br><span class=\"line\">hexo d   # 部署发布</span><br></pre></td></tr></table></figure>\n\n<p>也可以不使用命令自己创建 .md 文件，只需在文件开头手动加入如下格式 Front-matter 即可，写完后运行 <code>hexo g</code> 和 <code>hexo d</code> 发布。</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: Hello World # 标题</span><br><span class=\"line\">date: 2019/3/26 hh:mm:ss # 时间</span><br><span class=\"line\">categories: # 分类</span><br><span class=\"line\">- Diary</span><br><span class=\"line\">tags: # 标签</span><br><span class=\"line\">- PS3</span><br><span class=\"line\">- Games</span><br><span class=\"line\">---</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3><span id=\"72-网站设置\">7.2 网站设置</span></h3><p>包括网站名称、描述、作者、链接样式等，全部在网站目录下的 _config.yml 文件中，参考<a href=\"https://link.zhihu.com/?target=https://hexo.io/zh-cn/docs/configuration\">官方文档</a>按需要编辑。</p>\n<p>注意：冒号后要加一个空格！</p>\n<h3><span id=\"73-更换主题\">7.3 更换主题</span></h3><p>在 <a href=\"https://link.zhihu.com/?target=https://hexo.io/themes/\">Themes | Hexo</a> 选择一个喜欢的主题，比如 <a href=\"https://link.zhihu.com/?target=http://theme-next.iissnan.com/getting-started.html\">NexT</a>，进入网站目录打开 Git Bash Here 下载主题：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone https://github.com/iissnan/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure>\n<p>然后修改 _config.yml 中的 theme 为新主题名称 next，发布。（有的主题需要将 _config.yml 替换为主题自带的，参考主题说明。）</p>\n<h3><span id=\"74-常用命令\">7.4 常用命令</span></h3><figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new &quot;name&quot;       # 新建文章</span><br><span class=\"line\">hexo new page &quot;name&quot;  # 新建页面</span><br><span class=\"line\">hexo g                # 生成页面</span><br><span class=\"line\">hexo d                # 部署</span><br><span class=\"line\">hexo g -d             # 生成页面并部署</span><br><span class=\"line\">hexo s                # 本地预览</span><br><span class=\"line\">hexo clean            # 清除缓存和已生成的静态文件</span><br><span class=\"line\">hexo help             # 帮助</span><br></pre></td></tr></table></figure>\n<h2><span id=\"8-常见问题\">8 常见问题</span></h2><p><strong>1、Hexo 设置显示文章摘要，首页不显示全文</strong></p>\n<p>Hexo 主页文章列表默认会显示文章全文，浏览时很不方便，可以在文章中插入 <code>&lt;!--more--&gt;</code> 进行分段。</p>\n<p>该代码前面的内容会作为摘要显示，而后面的内容会替换为 “Read More” 隐藏起来。</p>\n<p><img src=\"/2020/12/22/%E4%BD%BF%E7%94%A8hexo+github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/v2-45701cf120ca77e6733ad30b40666f33_720w.jpg\" alt=\"img\"></p>\n<p><strong>2、设置网站图标</strong></p>\n<p>进入 themes/主题 文件夹，打开 _config.yml 配置文件，找到 favicon 修改，一般格式为：<code>favicon: 图标地址</code>。（不同主题可能略有差别）</p>\n<p><strong>3、修改并部署后没有效果</strong></p>\n<p>使用 <code>hexo clean</code> 清理后重新部署。</p>\n<p><strong>4、开启 HTTPS 后访问网站显示连接不安全？</strong></p>\n<p>证书还未部署生效，等待一会儿，清除浏览器缓存再试。</p>\n<p><strong>5、Mac 安装 Hexo 报错无法安装</strong></p>\n<p>Mac 用户需要管理员权限运行，使用 <code>sudo npm install -g hexo-cli</code> 命令安装。</p>\n<p><strong>6、npm 下载速度慢，甚至完全没反应</strong></p>\n<p>使用 npm 安装程序等待很久也没反应，或者下载速度很慢，可以更换 npm 源为国内 npm 镜像。</p>\n<p>临时更换方法：在 npm 安装命令后面加上：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--registry https://registry.npm.taobao.org </span><br></pre></td></tr></table></figure>\n<h2><span id=\"结语\">结语</span></h2><p>Hexo 是一种纯静态的博客，我们必须要在本地完成文章的编辑再部署到 GitHub 上，依赖于本地环境。不能像 WordPress 或 Typecho 那样的动态博客一样能直接在浏览器中完成撰文和发布。</p>\n","site":{"data":{}},"excerpt":"<!-- toc -->\n\n<ul>\n<li><a href=\"#%E5%89%8D%E8%A8%80\">前言</a></li>\n<li><a href=\"#%E7%AE%80%E4%BB%8B\">简介</a><ul>\n<li><a href=\"#github-pages-%E6%98%AF%E4%BB%80%E4%B9%88\">GitHub Pages 是什么？</a></li>\n<li><a href=\"#hexo-%E6%98%AF%E4%BB%80%E4%B9%88\">Hexo 是什么？</a></li>\n<li><a href=\"#hexo-github-%E6%96%87%E7%AB%A0%E5%8F%91%E5%B8%83%E5%8E%9F%E7%90%86\">Hexo + GitHub 文章发布原理</a></li>\n<li><a href=\"#%E4%BC%98%E7%82%B9%E5%92%8C%E4%B8%8D%E8%B6%B3\">优点和不足</a></li>\n</ul>\n</li>\n<li><a href=\"#1-%E5%87%86%E5%A4%87\">1. 准备</a><ul>\n<li><a href=\"#%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9\">注意事项</a></li>\n<li><a href=\"#%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA\">环境搭建</a></li>\n</ul>\n</li>\n<li><a href=\"#2-%E8%BF%9E%E6%8E%A5-github\">2. 连接 Github</a></li>\n<li><a href=\"#3-%E5%88%9B%E5%BB%BA-github-pages-%E4%BB%93%E5%BA%93\">3. 创建 Github Pages 仓库</a></li>\n<li><a href=\"#4-%E6%9C%AC%E5%9C%B0%E5%AE%89%E8%A3%85-hexo-%E5%8D%9A%E5%AE%A2%E7%A8%8B%E5%BA%8F\">4. 本地安装 Hexo 博客程序</a><ul>\n<li><a href=\"#41-%E5%AE%89%E8%A3%85-hexo\">4.1 安装 Hexo</a></li>\n<li><a href=\"#42-hexo-%E5%88%9D%E5%A7%8B%E5%8C%96%E5%92%8C%E6%9C%AC%E5%9C%B0%E9%A2%84%E8%A7%88\">4.2 Hexo 初始化和本地预览</a></li>\n</ul>\n</li>\n<li><a href=\"#5-%E9%83%A8%E7%BD%B2-hexo-%E5%88%B0-github-pages\">5. 部署 Hexo 到 GitHub Pages</a></li>\n<li><a href=\"#6-%E7%BB%91%E5%AE%9A%E5%9F%9F%E5%90%8D%E5%8F%AF%E9%80%89\">6. 绑定域名（可选）</a><ul>\n<li><a href=\"#61-%E5%9F%9F%E5%90%8D%E6%B3%A8%E5%86%8C%E5%92%8C%E8%A7%A3%E6%9E%90\">6.1 域名注册和解析</a></li>\n<li><a href=\"#62-%E7%BB%91%E5%AE%9A%E5%9F%9F%E5%90%8D%E5%88%B0-hexo-%E5%8D%9A%E5%AE%A2\">6.2 绑定域名到 Hexo 博客</a></li>\n<li><a href=\"#63-%E5%BC%80%E5%90%AF-https\">6.3 开启 HTTPS</a></li>\n</ul>\n</li>\n<li><a href=\"#7-%E5%BC%80%E5%A7%8B%E4%BD%BF%E7%94%A8\">7. 开始使用</a><ul>\n<li><a href=\"#71-%E5%8F%91%E5%B8%83%E6%96%87%E7%AB%A0\">7.1 发布文章</a></li>\n<li><a href=\"#72-%E7%BD%91%E7%AB%99%E8%AE%BE%E7%BD%AE\">7.2 网站设置</a></li>\n<li><a href=\"#73-%E6%9B%B4%E6%8D%A2%E4%B8%BB%E9%A2%98\">7.3 更换主题</a></li>\n<li><a href=\"#74-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4\">7.4 常用命令</a></li>\n</ul>\n</li>\n<li><a href=\"#8-%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98\">8 常见问题</a></li>\n<li><a href=\"#%E7%BB%93%E8%AF%AD\">结语</a></li>\n</ul>\n<!-- tocstop -->\n\n<p>[TOC]</p>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>近些年来很多用户都喜欢使用 GitHub Pages 来搭建 Hexo 静态博客网站，其最吸引人的莫过于完全免费使用，并且非常稳定。</p>\n<p>虽然搭建时比较麻烦，有点折腾，但是配置完成后，基本不需要操心维护的事，甚至放了几年都忘记了，打开来看文章依然还在。</p>\n<p>本文就详细介绍下如何使用 Hexo + GitHub 搭建免费个人博客网站的教程。</p>\n<hr>\n<p>为了照顾小白用户（第一次使用 GitHub 和 Hexo），尽可能详细，包括常见的坑和问题都有提示说明。下面目录中<strong>第 3~5 步为最重要的步骤</strong>，其他内容如果已经会的可以选择性跳过。</p>\n<p>看起来有点繁杂，捋顺了倒也简单，认真跟教程走，完整操作一遍大概需要 30 分钟。</p>","more":"<p><strong>内容目录：</strong></p>\n<ul>\n<li>简介：GitHub Pages 和 Hexo &amp; 原理</li>\n</ul>\n<ol>\n<li>准备：环境搭建<br>1.1. 注意事项<br>1.2. 环境搭建</li>\n<li>连接 Github</li>\n<li>创建 Github Pages 仓库</li>\n<li>本地安装 Hexo 博客程序<br>4.1. 安装 Hexo<br>4.2. Hexo 初始化和本地预览</li>\n<li>部署 Hexo 到 GitHub Pages</li>\n<li>绑定域名（可选）</li>\n<li>开始使用<br>7.1. 发布文章<br>7.2. 网站设置<br>7.3. 更换主题<br>7.4. 常用代码</li>\n<li>常见问题</li>\n</ol>\n<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><h3 id=\"GitHub-Pages-是什么？\"><a href=\"#GitHub-Pages-是什么？\" class=\"headerlink\" title=\"GitHub Pages 是什么？\"></a>GitHub Pages 是什么？</h3><ul>\n<li><a href=\"https://link.zhihu.com/?target=https://help.github.com/en/articles/what-is-github-pages\">What is GitHub Pages? - GitHub Help</a></li>\n</ul>\n<p>GitHub Pages 是由 GitHub 官方提供的一种免费的静态站点托管服务，让我们可以在 GitHub 仓库里托管和发布自己的静态网站页面。</p>\n<h3 id=\"Hexo-是什么？\"><a href=\"#Hexo-是什么？\" class=\"headerlink\" title=\"Hexo 是什么？\"></a>Hexo 是什么？</h3><ul>\n<li>官网：<a href=\"https://link.zhihu.com/?target=https://hexo.io/zh-cn/\">hexo.io</a></li>\n</ul>\n<p>Hexo 是一个快速、简洁且高效的静态博客框架，它基于 Node.js 运行，可以将我们撰写的 Markdown 文档解析渲染成静态的 HTML 网页。</p>\n<h3 id=\"Hexo-GitHub-文章发布原理\"><a href=\"#Hexo-GitHub-文章发布原理\" class=\"headerlink\" title=\"Hexo + GitHub 文章发布原理\"></a>Hexo + GitHub 文章发布原理</h3><p>在本地撰写 Markdown 格式文章后，通过 Hexo 解析文档，渲染生成具有主题样式的 HTML 静态网页，再推送到 GitHub 上完成博文的发布。</p>\n<p><img src=\"/2020/12/22/%E4%BD%BF%E7%94%A8hexo+github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/v2-a193a47cf70fe6ecf156e5f3d34920ea_720w.jpg\" alt=\"img\"></p>\n<h3 id=\"优点和不足\"><a href=\"#优点和不足\" class=\"headerlink\" title=\"优点和不足\"></a>优点和不足</h3><p><strong>优点：</strong>完全免费；静态站点，轻量快速；可按需求自由定制改造；托管在 GitHub，安全省心；迁移方便……</p>\n<p><strong>不足：</strong>发文不便，依赖于本地环境；更适合个人博客使用；GitHub 在国内访问速度有点不快。</p>\n<h2 id=\"1-准备\"><a href=\"#1-准备\" class=\"headerlink\" title=\"1. 准备\"></a>1. 准备</h2><h3 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h3><ul>\n<li>输入代码时，核对准确，最好切换成英文输入法；</li>\n<li>将文中的 “用户名” 和 “邮箱” 替换为自己的 GitHub 账户名和绑定的邮箱；</li>\n<li>统一使用 Git Bash 进行操作（支持 Win、Mac）；</li>\n<li>小白请严格按步骤进行，不要跳！</li>\n</ul>\n<h3 id=\"环境搭建\"><a href=\"#环境搭建\" class=\"headerlink\" title=\"环境搭建\"></a>环境搭建</h3><p>Hexo 基于 Node.js，搭建过程中还需要使用 npm（Node.js 已带） 和 git，因此先搭建本地操作环境，安装 Node.js 和 Git。</p>\n<ul>\n<li>Node.js：<a href=\"https://link.zhihu.com/?target=https://nodejs.org/zh-cn\">https://nodejs.org/zh-cn</a></li>\n<li>Git：<a href=\"https://link.zhihu.com/?target=https://git-scm.com/downloads\">https://git-scm.com/downloads</a></li>\n</ul>\n<p>下载 Node.js 和 Git 程序并安装，一路点 “下一步” 按默认配置完成安装。</p>\n<p>安装完成后，Win+R 输入 cmd 并打开，依次输入 <code>node -v</code>、<code>npm -v</code> 和 <code>git --version</code> 并回车，如下图出现程序版本号即可。</p>\n<p><img src=\"/2020/12/22/%E4%BD%BF%E7%94%A8hexo+github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/v2-27b47b5ae479ce7987851292a67774b0_720w.jpg\" alt=\"img\"></p>\n<h2 id=\"2-连接-Github\"><a href=\"#2-连接-Github\" class=\"headerlink\" title=\"2. 连接 Github\"></a>2. 连接 Github</h2><p>使用邮箱注册 <a href=\"https://link.zhihu.com/?target=https://github.com/\">GitHub</a> 账户，选择免费账户（Free），并完成邮件验证。</p>\n<p>右键 -&gt; Git Bash Here，<strong>设置用户名和邮箱</strong>：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global user.name &quot;GitHub 用户名&quot;</span><br><span class=\"line\">git config --global user.email &quot;GitHub 邮箱&quot;</span><br></pre></td></tr></table></figure>\n<p><strong>创建 SSH 密匙</strong>：</p>\n<p>输入 <code>ssh-keygen -t rsa -C &quot;GitHub 邮箱&quot;</code>，然后一路回车。</p>\n<p><strong>添加密匙：</strong></p>\n<p>进入 [C:\\Users\\用户名.ssh] 目录（要勾选显示“隐藏的项目”），用记事本打开公钥 id_rsa.pub 文件并复制里面的内容。</p>\n<p>登陆 GitHub ，进入 Settings 页面，选择左边栏的 SSH and GPG keys，点击 New SSH key。</p>\n<p>Title 随便取个名字，粘贴复制的 id_rsa.pub 内容到 Key 中，点击 Add SSH key 完成添加。</p>\n<p><img src=\"/2020/12/22/%E4%BD%BF%E7%94%A8hexo+github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/v2-9125065afd24332d7cd84feb6a350730_720w.jpg\" alt=\"img\"></p>\n<p><strong>验证连接：</strong></p>\n<p>打开 Git Bash，输入 <code>ssh -T git@github.com</code> 出现 “Are you sure……”，输入 yes 回车确认。</p>\n<p><img src=\"/2020/12/22/%E4%BD%BF%E7%94%A8hexo+github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/v2-b4c7524a2451f4ab42f9c22ea3c7b6be_720w.jpg\" alt=\"img\"></p>\n<p>显示 “Hi xxx! You’ve successfully……” 即连接成功。</p>\n<h2 id=\"3-创建-Github-Pages-仓库\"><a href=\"#3-创建-Github-Pages-仓库\" class=\"headerlink\" title=\"3. 创建 Github Pages 仓库\"></a>3. 创建 Github Pages 仓库</h2><p>GitHub 主页右上角加号 -&gt; New repository：</p>\n<ul>\n<li>Repository name 中输入 <code>用户名.github.io</code></li>\n<li>勾选 “Initialize this repository with a README”</li>\n<li>Description 选填</li>\n</ul>\n<p>填好后点击 Create repository 创建。</p>\n<p><img src=\"/2020/12/22/%E4%BD%BF%E7%94%A8hexo+github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/v2-67a8165154f4c5f4a6333e76e78ed815_720w.jpg\" alt=\"img\"></p>\n<p>创建后默认自动启用 HTTPS，博客地址为：<code>https://用户名.github.io</code></p>\n<h2 id=\"4-本地安装-Hexo-博客程序\"><a href=\"#4-本地安装-Hexo-博客程序\" class=\"headerlink\" title=\"4. 本地安装 Hexo 博客程序\"></a>4. 本地安装 Hexo 博客程序</h2><p>新建一个文件夹用来存放 Hexo 的程序文件，如 Hexo-Blog。打开该文件夹，右键 -&gt; Git Bash Here。</p>\n<h3 id=\"4-1-安装-Hexo\"><a href=\"#4-1-安装-Hexo\" class=\"headerlink\" title=\"4.1 安装 Hexo\"></a>4.1 安装 Hexo</h3><p>使用 npm 一键安装 Hexo 博客程序：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>\n<p>Mac 用户需要管理员权限（sudo），运行这条命令：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo npm install -g hexo-cli</span><br></pre></td></tr></table></figure>\n<p>安装时间有点久（真的很慢！），界面也没任何反应，<strong>耐心等待</strong>，安装完成后如下图。</p>\n<p><img src=\"/2020/12/22/%E4%BD%BF%E7%94%A8hexo+github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/v2-01e7fc8bb9280437deb437bf73a190a1_720w.jpg\" alt=\"img\"></p>\n<h3 id=\"4-2-Hexo-初始化和本地预览\"><a href=\"#4-2-Hexo-初始化和本地预览\" class=\"headerlink\" title=\"4.2 Hexo 初始化和本地预览\"></a>4.2 Hexo 初始化和本地预览</h3><p><strong>初始化并安装所需组件：</strong></p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo init      # 初始化</span><br><span class=\"line\">npm install    # 安装组件</span><br></pre></td></tr></table></figure>\n<p>完成后依次输入下面命令，<strong>启动本地服务器进行预览</strong>：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo g   # 生成页面</span><br><span class=\"line\">hexo s   # 启动预览</span><br></pre></td></tr></table></figure>\n<p><strong>访问</strong> <code>http://localhost:4000</code><strong>，出现 Hexo 默认页面，本地博客安装成功！</strong></p>\n<p><img src=\"/2020/12/22/%E4%BD%BF%E7%94%A8hexo+github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/v2-1c3baeecf1ef3bec5c8ef3f14639f68b_720w.jpg\" alt=\"img\"></p>\n<p><strong>Tips：</strong>如果出现页面加载不出来，可能是端口被占用了。Ctrl+C 关闭服务器，运行 <code>hexo server -p 5000</code> 更改端口号后重试。</p>\n<p>Hexo 博客文件夹目录结构如下：</p>\n<p><img src=\"/2020/12/22/%E4%BD%BF%E7%94%A8hexo+github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/v2-264c75c0e493ae8cc5f283567c64ff2c_720w.jpg\" alt=\"img\"></p>\n<h2 id=\"5-部署-Hexo-到-GitHub-Pages\"><a href=\"#5-部署-Hexo-到-GitHub-Pages\" class=\"headerlink\" title=\"5. 部署 Hexo 到 GitHub Pages\"></a>5. 部署 Hexo 到 GitHub Pages</h2><p>本地博客测试成功后，就是上传到 GitHub 进行部署，使其能够在网络上访问。</p>\n<p>首先<strong>安装 hexo-deployer-git</strong>：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>\n<p>然后<strong>修改 _config.yml</strong> 文件末尾的 Deployment 部分，修改成如下：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deploy:</span><br><span class=\"line\">  type: git</span><br><span class=\"line\">  repository: git@github.com:用户名/用户名.github.io.git</span><br><span class=\"line\">  branch: master</span><br></pre></td></tr></table></figure>\n<p>完成后运行 <code>hexo d</code> 将网站上传部署到 GitHub Pages。</p>\n<p>完成！这时访问我们的 GitHub 域名 <code>https://用户名.github.io</code> 就可以看到 Hexo 网站了。</p>\n<h2 id=\"6-绑定域名（可选）\"><a href=\"#6-绑定域名（可选）\" class=\"headerlink\" title=\"6. 绑定域名（可选）\"></a>6. 绑定域名（可选）</h2><p>博客搭建完成使用的是 GitHub 的子域名（用户名.<a href=\"https://link.zhihu.com/?target=http://github.io\">http://github.io</a>），我们可以为 Hexo 博客绑定自己的域名替换 GitHub 域名，更加个性化和专业，也利于 SEO。</p>\n<p>我们使用 <a href=\"https://link.zhihu.com/?target=https://www.namesilo.com/?rid=d27fa32do\">Namesilo</a> 进行注册，便宜好用没啥套路，使用优惠码 <code>okoff</code> 优惠一美元，com 域名大概 50 块一年。</p>\n<h3 id=\"6-1-域名注册和解析\"><a href=\"#6-1-域名注册和解析\" class=\"headerlink\" title=\"6.1 域名注册和解析\"></a>6.1 域名注册和解析</h3><ul>\n<li>域名注册和解析教程：<a href=\"https://zhuanlan.zhihu.com/p/33921436\">Namesilo 域名购买及使用教程</a></li>\n</ul>\n<p>按上面教程注册并解析域名，在 DNS 设置部分，删除自带的记录，然后添加 CNAME 记录将 www 域名解析指向 <code>用户名.github.io</code>。</p>\n<p><img src=\"/2020/12/22/%E4%BD%BF%E7%94%A8hexo+github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/v2-d5d37c8ad523d8ab5c7c200fabc9585e_720w.jpg\" alt=\"img\"></p>\n<h3 id=\"6-2-绑定域名到-Hexo-博客\"><a href=\"#6-2-绑定域名到-Hexo-博客\" class=\"headerlink\" title=\"6.2 绑定域名到 Hexo 博客\"></a>6.2 绑定域名到 Hexo 博客</h3><p>进入本地博客文件夹的 source 目录，打开记事本，里面输入自己的域名，如 <a href=\"http://www.example.com,保存名称为/\">http://www.example.com，保存名称为</a> “CNAME”，格式为 “所有文件”（无 .txt 后缀）。</p>\n<p>清除缓存等文件并重新发布网站：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo clean   # 清除缓存文件等</span><br><span class=\"line\">hexo g       # 生成页面</span><br><span class=\"line\">hexo s       # 启动预览</span><br></pre></td></tr></table></figure>\n<p>现在就可以使用自己的域名访问 Hexo 博客了。</p>\n<h3 id=\"6-3-开启-HTTPS\"><a href=\"#6-3-开启-HTTPS\" class=\"headerlink\" title=\"6.3 开启 HTTPS\"></a>6.3 开启 HTTPS</h3><p>配置自己的域名后，需要我们手动开启 HTTPS。打开博客所在 GitHub 仓库，Settings -&gt; 下拉找到 GitHub Pages -&gt; 勾选 Enforce HTTPS。</p>\n<p><img src=\"/2020/12/22/%E4%BD%BF%E7%94%A8hexo+github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/v2-54f8744afc9746884e6b3acecfc5f8cf_720w.jpg\" alt=\"img\"></p>\n<p>HTTPS 证书部署成功需要一定时间，等大概几分钟再访问域名，就可以看到域名前面的小绿锁了，HTTPS 配置完成！</p>\n<h2 id=\"7-开始使用\"><a href=\"#7-开始使用\" class=\"headerlink\" title=\"7. 开始使用\"></a>7. 开始使用</h2><h3 id=\"7-1-发布文章\"><a href=\"#7-1-发布文章\" class=\"headerlink\" title=\"7.1 发布文章\"></a>7.1 发布文章</h3><p>进入博客所在目录，右键打开 Git Bash Here，创建博文：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new &quot;My New Post&quot;</span><br></pre></td></tr></table></figure>\n<p>然后 source 文件夹中会出现一个 My New Post.md 文件，就可以使用 Markdown 编辑器在该文件中撰写文章了。</p>\n<p>写完后运行下面代码将文章渲染并部署到 GitHub Pages 上完成发布。<strong>以后每次发布文章都是这两条命令。</strong></p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo g   # 生成页面</span><br><span class=\"line\">hexo d   # 部署发布</span><br></pre></td></tr></table></figure>\n\n<p>也可以不使用命令自己创建 .md 文件，只需在文件开头手动加入如下格式 Front-matter 即可，写完后运行 <code>hexo g</code> 和 <code>hexo d</code> 发布。</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: Hello World # 标题</span><br><span class=\"line\">date: 2019/3/26 hh:mm:ss # 时间</span><br><span class=\"line\">categories: # 分类</span><br><span class=\"line\">- Diary</span><br><span class=\"line\">tags: # 标签</span><br><span class=\"line\">- PS3</span><br><span class=\"line\">- Games</span><br><span class=\"line\">---</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"7-2-网站设置\"><a href=\"#7-2-网站设置\" class=\"headerlink\" title=\"7.2 网站设置\"></a>7.2 网站设置</h3><p>包括网站名称、描述、作者、链接样式等，全部在网站目录下的 _config.yml 文件中，参考<a href=\"https://link.zhihu.com/?target=https://hexo.io/zh-cn/docs/configuration\">官方文档</a>按需要编辑。</p>\n<p>注意：冒号后要加一个空格！</p>\n<h3 id=\"7-3-更换主题\"><a href=\"#7-3-更换主题\" class=\"headerlink\" title=\"7.3 更换主题\"></a>7.3 更换主题</h3><p>在 <a href=\"https://link.zhihu.com/?target=https://hexo.io/themes/\">Themes | Hexo</a> 选择一个喜欢的主题，比如 <a href=\"https://link.zhihu.com/?target=http://theme-next.iissnan.com/getting-started.html\">NexT</a>，进入网站目录打开 Git Bash Here 下载主题：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone https://github.com/iissnan/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure>\n<p>然后修改 _config.yml 中的 theme 为新主题名称 next，发布。（有的主题需要将 _config.yml 替换为主题自带的，参考主题说明。）</p>\n<h3 id=\"7-4-常用命令\"><a href=\"#7-4-常用命令\" class=\"headerlink\" title=\"7.4 常用命令\"></a>7.4 常用命令</h3><figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new &quot;name&quot;       # 新建文章</span><br><span class=\"line\">hexo new page &quot;name&quot;  # 新建页面</span><br><span class=\"line\">hexo g                # 生成页面</span><br><span class=\"line\">hexo d                # 部署</span><br><span class=\"line\">hexo g -d             # 生成页面并部署</span><br><span class=\"line\">hexo s                # 本地预览</span><br><span class=\"line\">hexo clean            # 清除缓存和已生成的静态文件</span><br><span class=\"line\">hexo help             # 帮助</span><br></pre></td></tr></table></figure>\n<h2 id=\"8-常见问题\"><a href=\"#8-常见问题\" class=\"headerlink\" title=\"8 常见问题\"></a>8 常见问题</h2><p><strong>1、Hexo 设置显示文章摘要，首页不显示全文</strong></p>\n<p>Hexo 主页文章列表默认会显示文章全文，浏览时很不方便，可以在文章中插入 <code>&lt;!--more--&gt;</code> 进行分段。</p>\n<p>该代码前面的内容会作为摘要显示，而后面的内容会替换为 “Read More” 隐藏起来。</p>\n<p><img src=\"/2020/12/22/%E4%BD%BF%E7%94%A8hexo+github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/v2-45701cf120ca77e6733ad30b40666f33_720w.jpg\" alt=\"img\"></p>\n<p><strong>2、设置网站图标</strong></p>\n<p>进入 themes/主题 文件夹，打开 _config.yml 配置文件，找到 favicon 修改，一般格式为：<code>favicon: 图标地址</code>。（不同主题可能略有差别）</p>\n<p><strong>3、修改并部署后没有效果</strong></p>\n<p>使用 <code>hexo clean</code> 清理后重新部署。</p>\n<p><strong>4、开启 HTTPS 后访问网站显示连接不安全？</strong></p>\n<p>证书还未部署生效，等待一会儿，清除浏览器缓存再试。</p>\n<p><strong>5、Mac 安装 Hexo 报错无法安装</strong></p>\n<p>Mac 用户需要管理员权限运行，使用 <code>sudo npm install -g hexo-cli</code> 命令安装。</p>\n<p><strong>6、npm 下载速度慢，甚至完全没反应</strong></p>\n<p>使用 npm 安装程序等待很久也没反应，或者下载速度很慢，可以更换 npm 源为国内 npm 镜像。</p>\n<p>临时更换方法：在 npm 安装命令后面加上：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--registry https://registry.npm.taobao.org </span><br></pre></td></tr></table></figure>\n<h2 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h2><p>Hexo 是一种纯静态的博客，我们必须要在本地完成文章的编辑再部署到 GitHub 上，依赖于本地环境。不能像 WordPress 或 Typecho 那样的动态博客一样能直接在浏览器中完成撰文和发布。</p>"},{"title":"java基础知识整理","date":"2020-12-24T13:40:50.000Z","_content":"\n# 一、面向对象概念\n\n### 1. 类与对象\n\n##### 1.1 面向过程和面向对象\n\n 面向过程 （Procedural Programming）侧重流程\n 面向对象 （Object-Oriented Programming ）(OOP) 侧重功能\n\n<!--more-->\n\n##### 1.2 类和对象的概念、关系、组成\n\n- 概念：\n\n  - **类**：类是一个模板，它描述一组具有相 同属性和方法的对象\n  - **对象**：最小子系统，有属性和方法。\n\n- 关系：类是对象的抽象，对象是类的实例\n\n- 组成：\n\n  - 成员变量（Attributes）\n  - 构造方法（Constructor） 一个类可以有多个构 造方法\n  - 成员方法（Methods）\n\n##### 1.3 构造函数，对象的初始化、使用\n\n- 构造方法：在创建一个对象的时候，至少要调用一个构造方法。 构造方法的名称必须与类同名，一个类可以有多个构 造方法。\n\n- 对象初始化：\n\n  - 声明：声明一个对象，包括对象名称和对象类型。\n  - 实例化：使用关键字new来创建一个对象。\n  - 初始化：使用new创建对象时，会调用构造方法初始化对象\n\n- 对象的使用：\n\n  \n\n  ```cpp\n  /* 实例化对象 */ ObjectReference = new Constructor();\n  /* 访问成员变量 */ ObjectReference.variableName; \n  /* 访问成员方法 */ ObjectReference.MethodName();\n  ```\n\n### 2.  封装、继承、多态\n\n##### 2.1  封装 Encapsulation\n\n**好处：**\n 从设计上讲，为了实现模块化\n 从使用上讲，减少了复杂度\n 良好的封装能够减少代码的耦合\n\n**实现：**\n\n![img](java基础知识整理/3775272-55dfd603d6e9b95c.jpg)\n\n\n private: 只能被该类的对象访问。\n default: 即不加任何访问修饰符，只允许在同一个包中进行访问。\n protected: 只能被类本身的方法及子类访问，即使子类在不同的包中也可以访问。\n public： 不仅可以跨类访问，而且允许跨包（package）访问。\n\n\n\n一个源文件中只能有一个public类;\n 源文件的名称应该和public类的类名保持一致;\n 如果一个类定义在某个包中，那么package语句应该在源文件的首行;\n\n##### 2.2 继承 Heritage\n\n继承是一种类和类之间的关系，是一种“is a kind of”的关系。\n **好处：**\n 易于修改，容易扩展\n\n**实现：**\n\n\n\n```java\npublic class Parent{   … }  \npublic class Child extends Parent {   … } \n```\n\njava中的继承是单继承的，一个子类只能继承一个父类，使用extends关键字\n 子类继承了父类中所有非private成员方法（除了构造方法）和所有非private的成员变量。\n\n**super：**\n 对于构造函数而言，它只能够被调用，而不能被继承。\n 当我们需要调用父类的构造方法时，只需使用super()即可\n\n**重写（覆盖） override：**\n 子类中有和父类中可访问（可继承到子类）的同名&&同返 回类型&&同参数表的方法，就会重写（覆盖）从父类继承来 的方法。\n\n**重载 overload：**\n 被重载的方法必须改变参数列表(参 数个数或类型或顺序不一样)；\n 被重载的方法可以改变返回类型；\n 被重载的方法可以改变访问修饰符；\n final 关键字声明类可以把类定义为不能继承的，即最终类； 或者用于修饰方法，该方法不能被子类重写：\n\n**向上转型**\n 上转型对象可以操作被子类继承和重写的方法，但不能操作子类新增的成员变量和方法。\n\n##### 2.3 多态 Polymorphism\n\n**多态就是指一种名称定义不同的方法**\n\n**分类**\n 编译时多态 - 方法的重载（overload）\n 运行时多态 - 程序中定义的引用变量所指向的具体类型和通过该引用变量发出的方法调用在编程 时并不确定，而是在程序运行期间才确定，即一个引用变量倒底会指向哪个类的实 例对象，该引用变量发出的方法调用到底是哪个类中实现的方法，必须在由程序运 行期间才能决定。\n\n**实现方法（继承、接口）**\n 以继承实现多态 -向上转型、方法重写，以一般代表特殊，以特殊代替一般\n 以接口实现多态\n\n**如何使用**\n 可以在方法的参数中传入其父类（或接口）类型，在运行时会根据实际的运行时类型来 在方法中进行相应的操作。\n 多态用于返回值，可以在方法的返回值类型上使用其实际返回值的父（接口）类型，不关心返回值的实际类型。\n\n### 3.抽象类和抽象方法，静态方法和静态变量\n\n具体类：可以被实例化的类\n 抽象类：不能被实例化的类\n 定义抽象类的基本目的是提供合适的超类， 使其他类可以继承它，以实现共享。\n\n\n\n```csharp\npublic abstract class Form{   …   public abstract void draw(); } \n```\n\n### 4. 接口\n\n**定义**\n\n\n\n```php\n[public] interface 接口名 [extends 其他的接口名列表] {\n    [public static final] 数据类型 常量名 = 值;\n    [public abstract] 返回类型 方法名（形参列表）;\n}\n```\n\n**实现**\n\n\n\n```dart\n[访问修饰符] class 类名 [extends 超类名] implements 接口名列表 {\n        类体 \n}\n```\n\n**特性**\n 接口中可以含有变量，变量会被隐式的指定为 public static final（用 private 修饰 会报编译错误）\n 接口中的方法会被隐式的指定为 public abstract\n\n**功能**\n\n1. 接口提供了一组功能的命名集合\n2. 接口定义了不同类交互的标准\n    实现了“多继承” ；分离了方法的声明和方法的实现\n\n**接口 v.s. 类**\n 接口不能用于实例化对象。\n 接口没有构造方法。\n 接口中所有的方法必须是抽象方法。\n 接口只能包含static final成员变量。\n 接口不是被类继承了，而是要被类实现。\n 接口支持多继承。\n\n抽象类是对类抽象，而接口是对行为的抽象\n 抽象类是自底向上抽象而来的，接口是自顶向下设计出来的\n\n**接口名作为类型**\n 可以把使用实现了某一接口的类创建的对象的引用赋给该接口声明的接口变量， 那么该接口变量就可以调用被类实现的接口的方法。\n\n# 二、反射及动态代理\n\n反射 一般使用 Class.forName()方法;\n\n动态代理就是实现InvocationHandler 接口；\n\n要想理解反射的原理，首先要了解什么是类型信息。Java让我们在运行时识别对象和类的信息，主要有2种方式：一种是传统的RTTI，它假定我们在编译时已经知道了所有的类型信息；另一种是反射机制，它允许我们在运行时发现和使用类的信息。\n\n### 1、Class对象\n\n　　理解RTTI在Java中的工作原理，首先需要知道类型信息在运行时是如何表示的，这是由Class对象来完成的，它包含了与类有关的信息。Class对象就是用来创建所有“常规”对象的，Java使用Class对象来执行RTTI，即使你正在执行的是类似类型转换这样的操作。\n\n　　每个类都会产生一个对应的Class对象，也就是保存在.class文件。所有类都是在对其第一次使用时，动态加载到JVM的，当程序创建一个对类的静态成员的引用时，就会加载这个类。Class对象仅在需要的时候才会加载，static初始化是在类加载时进行的。 \n\n```\npublic class TestMain {\n    public static void main(String[] args) {\n        System.out.println(XYZ.name);\n    }\n}\n\nclass XYZ {\n    public static String name = \"luoxn28\";\n\n    static {\n        System.out.println(\"xyz静态块\");\n    }\n\n    public XYZ() {\n        System.out.println(\"xyz构造了\");\n    }\n}\n```\n\n输出结果为：\n\n![img](java基础知识整理/772134-20160720003120122-551868817.png)\n\n　　类加载器首先会检查这个类的Class对象是否已被加载过，如果尚未加载，默认的类加载器就会根据类名查找对应的.class文件。\n\n　　想在运行时使用类型信息，必须获取对象(比如类Base对象)的Class对象的引用，使用功能Class.forName(“Base”)可以实现该目的，或者使用base.class。注意，有一点很有趣，使用功能”.class”来创建Class对象的引用时，不会自动初始化该Class对象，使用forName()会自动初始化该Class对象。为了使用类而做的准备工作一般有以下3个步骤：\n\n- 加载：由类加载器完成，找到对应的字节码，创建一个Class对象\n- 链接：验证类中的字节码，为静态域分配空间\n- 初始化：如果该类有超类，则对其初始化，执行静态初始化器和静态初始化块 \n\n```\npublic class Base {\n    static int num = 1;\n    \n    static {\n        System.out.println(\"Base \" + num);\n    }\n}\npublic class Main {\n    public static void main(String[] args) {\n        // 不会初始化静态块\n        Class clazz1 = Base.class;\n        System.out.println(\"------\");\n        // 会初始化\n        Class clazz2 = Class.forName(\"zzz.Base\");\n    }\n}\n```\n\n \n\n### 2、类型转换前先做检查\n\n　　编译器将检查类型向下转型是否合法，如果不合法将抛出异常。向下转换类型前，可以使用instanceof判断。 \n\n[![复制代码](java基础知识整理/copycode.gif)](javascript:void(0);)\n\n```\nclass Base { }\nclass Derived extends Base { }\n\npublic class Main {\n    public static void main(String[] args) {\n        Base base = new Derived();\n        if (base instanceof Derived) {\n            // 这里可以向下转换了\n            System.out.println(\"ok\");\n        }\n        else {\n            System.out.println(\"not ok\");\n        }\n    }\n}\n```\n\n \n\n### 3、反射：运行时类信息\n\n　　如果不知道某个对象的确切类型，RTTI可以告诉你，但是有一个前提：这个类型在编译时必须已知，这样才能使用RTTI来识别它。Class类与java.lang.reflect类库一起对反射进行了支持，该类库包含Field、Method和Constructor类，这些类的对象由JVM在启动时创建，用以表示未知类里对应的成员。这样的话就可以使用Contructor创建新的对象，用get()和set()方法获取和修改类中与Field对象关联的字段，用invoke()方法调用与Method对象关联的方法。另外，还可以调用getFields()、getMethods()和getConstructors()等许多便利的方法，以返回表示字段、方法、以及构造器对象的数组，这样，对象信息可以在运行时被完全确定下来，而在编译时不需要知道关于类的任何事情。\n\n　　反射机制并没有什么神奇之处，当通过反射与一个未知类型的对象打交道时，JVM只是简单地检查这个对象，看它属于哪个特定的类。因此，那个类的`.class`对于JVM来说必须是可获取的，要么在本地机器上，要么从网络获取。所以对于RTTI和反射之间的真正区别只在于：\n\n- RTTI，编译器在编译时打开和检查.class文件\n- 反射，运行时打开和检查.class文件 \n\n```\npublic class Person implements Serializable {\n\n    private String name;\n    private int age;\n// get/set方法\n}\npublic static void main(String[] args) {\n    Person person = new Person(\"luoxn28\", 23);\n    Class clazz = person.getClass();\n\n    Field[] fields = clazz.getDeclaredFields();\n    for (Field field : fields) {\n        String key = field.getName();\n        PropertyDescriptor descriptor = new PropertyDescriptor(key, clazz);\n        Method method = descriptor.getReadMethod();\n        Object value = method.invoke(person);\n\n        System.out.println(key + \":\" + value);\n\n    }\n}\n```\n\n　　以上通过getReadMethod()方法调用类的get函数，可以通过getWriteMethod()方法来调用类的set方法。通常来说，我们不需要使用反射工具，但是它们在创建动态代码会更有用，反射在Java中用来支持其他特性的，例如对象的序列化和JavaBean等。\n\n### 4、动态代理\n\n　　代理模式是为了提供额外或不同的操作，而插入的用来替代”实际”对象的对象，这些操作涉及到与”实际”对象的通信，因此代理通常充当中间人角色。Java的动态代理比代理的思想更前进了一步，它可以动态地创建并代理并动态地处理对所代理方法的调用。在动态代理上所做的所有调用都会被重定向到单一的**调用处理器**上，它的工作是揭示调用的类型并确定相应的策略。 \n\n \n\n**学习Spring的时候，我们知道Spring主要有两大思想，一个是IoC，另一个就是AOP，对于IoC，它利用的是反射机制，依赖注入就不用多说了，而对于Spring的核心AOP来说，使用了动态代理，其实底层也是反射。我们不但要知道怎么通过AOP来满足的我们的功能，我们更需要学习的是其底层是怎么样的一个原理，而AOP的原理就是java的动态代理机制，所以本篇随笔就是对java的动态机制进行一个回顾。**\n\n在java的动态代理机制中，有两个重要的类或接口，一个是 InvocationHandler(Interface)、另一个则是 Proxy(Class)，这一个类和接口是实现我们动态代理所必须用到的。首先我们先来看看java的API帮助文档是怎么样对这两个类进行描述的：\n\nInvocationHandler:\n\n```\nInvocationHandler is the interface implemented by the invocation handler of a proxy instance. \n\nEach proxy instance has an associated invocation handler. When a method is invoked on a proxy instance, the method invocation is encoded and dispatched to the invoke method of its invocation handler.\n```\n\n每一个动态代理类都必须要实现InvocationHandler这个接口，并且每个代理类的实例都关联到了一个handler，当我们通过代理对象调用一个方法的时候，这个方法的调用就会被转发为由InvocationHandler这个接口的 invoke 方法来进行调用。我们来看看InvocationHandler这个接口的唯一一个方法 invoke 方法：\n\n```\nObject invoke(Object proxy, Method method, Object[] args) throws Throwable\n```\n\n我们看到这个方法一共接受三个参数，那么这三个参数分别代表什么呢？\n\n```\nObject invoke(Object proxy, Method method, Object[] args) throws Throwable\n\nproxy:　　指代我们所代理的那个真实对象\nmethod:　　指代的是我们所要调用真实对象的某个方法的Method对象\nargs:　　指代的是调用真实对象某个方法时接受的参数\n```\n\n如果不是很明白，等下通过一个实例会对这几个参数进行更深的讲解。\n\n接下来我们来看看Proxy这个类：\n\n```\nProxy provides static methods for creating dynamic proxy classes and instances, and it is also the superclass of all dynamic proxy classes created by those methods. \n```\n\nProxy这个类的作用就是用来动态创建一个代理对象的类，它提供了许多的方法，但是我们用的最多的就是 newProxyInstance 这个方法：\n\n```\npublic static Object newProxyInstance(ClassLoader loader, Class<?>[] interfaces,  InvocationHandler h)  throws IllegalArgumentException\nReturns an instance of a proxy class for the specified interfaces that dispatches method invocations to the specified invocation handler.\n```\n\n这个方法的作用就是得到一个动态的代理对象，其接收三个参数，我们来看看这三个参数所代表的含义： \n\n```\npublic static Object newProxyInstance(ClassLoader loader, Class<?>[] interfaces, InvocationHandler h) throws IllegalArgumentException\n\nloader:　　一个ClassLoader对象，定义了由哪个ClassLoader对象来对生成的代理对象进行加载\n\ninterfaces:　　一个Interface对象的数组，表示的是我将要给我需要代理的对象提供一组什么接口，如果我提供了一组接口给它，那么这个代理对象就宣称实现了该接口(多态)，这样我就能调用这组接口中的方法了\n\nh:　　一个InvocationHandler对象，表示的是当我这个动态代理对象在调用方法的时候，会关联到哪一个InvocationHandler对象上\n```\n\n好了，在介绍完这两个接口(类)以后，我们来通过一个实例来看看我们的动态代理模式是什么样的：\n\n首先我们定义了一个Subject类型的接口，为其声明了两个方法：\n\n```\npublic interface Subject\n{\n    public void rent();\n    \n    public void hello(String str);\n}\n```\n\n接着，定义了一个类来实现这个接口，这个类就是我们的真实对象，RealSubject类：  \n\n下一步，我们就要定义一个动态代理类了，前面说个，每一个动态代理类都必须要实现 InvocationHandler 这个接口，因此我们这个动态代理类也不例外： \n\n```\npublic class DynamicProxy implements InvocationHandler\n{\n    //　这个就是我们要代理的真实对象\n    private Object subject;\n    \n    //    构造方法，给我们要代理的真实对象赋初值\n    public DynamicProxy(Object subject)\n    {\n        this.subject = subject;\n    }\n    \n    @Override\n    public Object invoke(Object object, Method method, Object[] args)\n            throws Throwable\n    {\n        //　　在代理真实对象前我们可以添加一些自己的操作\n        System.out.println(\"before invoke\");\n        \n        System.out.println(\"Method:\" + method);\n        \n        //    当代理对象调用真实对象的方法时，其会自动的跳转到代理对象关联的handler对象的invoke方法来进行调用\n        method.invoke(subject, args);\n        \n        //　　在代理真实对象后我们也可以添加一些自己的操作\n        System.out.println(\"after invoke\");\n        \n        return null;\n    }\n\n}[![复制代码](java基础知识整理/copycode.gif)](javascript:void(0);\n```\n\n \n\n最后，来看看我们的Client类： \n\n```\npublic class Client\n{\n    public static void main(String[] args)\n    {\n        //    我们要代理的真实对象\n        Subject realSubject = new RealSubject();\n\n        //    我们要代理哪个真实对象，就将该对象传进去，最后是通过该真实对象来调用其方法的\n        InvocationHandler handler = new DynamicProxy(realSubject);\n\n        /*\n         * 通过Proxy的newProxyInstance方法来创建我们的代理对象，我们来看看其三个参数\n         * 第一个参数 handler.getClass().getClassLoader() ，我们这里使用handler这个类的ClassLoader对象来加载我们的代理对象\n         * 第二个参数realSubject.getClass().getInterfaces()，我们这里为代理对象提供的接口是真实对象所实行的接口，表示我要代理的是该真实对象，这样我就能调用这组接口中的方法了\n         * 第三个参数handler， 我们这里将这个代理对象关联到了上方的 InvocationHandler 这个对象上\n         */\n        Subject subject = (Subject)Proxy.newProxyInstance(handler.getClass().getClassLoader(), realSubject\n                .getClass().getInterfaces(), handler);\n        \n        System.out.println(subject.getClass().getName());\n        subject.rent();\n        subject.hello(\"world\");\n    }\n}\n```\n\n我们先来看看控制台的输出： \n\n```\n$Proxy0\n\nbefore invoke\nMethod:public abstract void com.xiaoluo.dynamicproxy.Subject.rent()\nI want to rent my house\nafter invoke\n\nbefore invoke\nMethod:public abstract void com.xiaoluo.dynamicproxy.Subject.hello(java.lang.String)\nhello: world\nafter invoke\n```\n\n当调试的时候，如果把鼠标放在subject 上面，会自动的执行toString()方法，也就是\n\n```\nbefore invoke\nMethod:public abstract void com.xiaoluo.dynamicproxy.Subject.toString()\n \nafter invoke\n```\n\n \n\n我们首先来看看 $Proxy0 这东西，我们看到，这个东西是由 System.out.println(subject.getClass().getName()); 这条语句打印出来的，那么为什么我们返回的这个代理对象的类名是这样的呢？\n\n```\nSubject subject = (Subject)Proxy.newProxyInstance(handler.getClass().getClassLoader(), realSubject\n                .getClass().getInterfaces(), handler);\n```\n\n可能我以为返回的这个代理对象会是Subject类型的对象，或者是InvocationHandler的对象，结果却不是**，首先我们解释一下为什么我们这里可以将其转化为Subject类型的对象？原因就是在newProxyInstance这个方法的第二个参数上，我们给这个代理对象提供了一组什么接口，那么我这个代理对象就会实现了这组接口，这个时候我们当然可以将这个代理对象强制类型转化为这组接口中的任意一个，因为这里的接口是Subject类型，所以就可以将其转化为Subject类型了**。\n\n**同时我们一定要记住，通过 Proxy.newProxyInstance 创建的代理对象是在jvm运行时动态生成的一个对象，它并不是我们的InvocationHandler类型，也不是我们定义的那组接口的类型，而是在运行是动态生成的一个对象，并且命名方式都是这样的形式，以$开头，proxy为中，最后一个数字表示对象的标号**。\n\n接着我们来看看这两句 \n\nsubject.rent();\nsubject.hello(\"world\");\n\n这里是通过代理对象来调用实现的那种接口中的方法，这个时候程序就会跳转到由这个代理对象关联到的 handler 中的invoke方法去执行，而我们的这个 handler 对象又接受了一个 RealSubject类型的参数，表示我要代理的就是这个真实对象，所以此时就会调用 handler 中的invoke方法去执行： \n\n```\npublic Object invoke(Object object, Method method, Object[] args)\n            throws Throwable\n    {\n        //　　在代理真实对象前我们可以添加一些自己的操作\n        System.out.println(\"before invoke\");\n        \n        System.out.println(\"Method:\" + method);\n        \n        //    当代理对象调用真实对象的方法时，其会自动的跳转到代理对象关联的handler对象的invoke方法来进行调用\n        method.invoke(subject, args);\n        \n        //　　在代理真实对象后我们也可以添加一些自己的操作\n        System.out.println(\"after invoke\");\n        \n        return null;\n    }\n```\n\n我们看到，在真正通过代理对象来调用真实对象的方法的时候，我们可以在该方法前后添加自己的一些操作，同时我们看到我们的这个 method 对象是这样的：\n\n```\npublic abstract void com.xiaoluo.dynamicproxy.Subject.rent()\n\npublic abstract void com.xiaoluo.dynamicproxy.Subject.hello(java.lang.String)\n```\n\n正好就是我们的Subject接口中的两个方法，这也就证明了当我通过代理对象来调用方法的时候，起实际就是委托由其关联到的 handler 对象的invoke方法中来调用，并不是自己来真实调用，而是通过代理的方式来调用的。\n\n这就是我们的java动态代理机制\n\n# 三、java集合\n\n### 1、java中的集合类结构\n\n![集合结构](java基础知识整理/20160624152602394)\n\n### 2、List、Set和Map：\n\n​    List是有序的集合，Set是无序的集合。Map是无序的键值对。\n\n#### 1.集合和数组的区别：\n\n![这里写图片描述](java基础知识整理/20180803193134355)\n\n#### 2.Collection集合的方法：\n\n![这里写图片描述](java基础知识整理/20180803193423722)\n\n### 3、HashMap详解：\n\n​    HashMap有两个参数影响其性能：初始容量和加载因子。默认初始容量是16，加载因子是0.75。容量是哈希表中桶(Entry数组)的数量，初始容量只是哈希表在创建时的容量。加载因子是哈希表在其容量自动增加之前可以达到多满的一种尺度。当哈希表中的条目数超出了加载因子与当前容量的乘积时，通过调用 rehash 方法将容量翻倍。\n\n### 4、ArrayList和Vector对比：\n\n​    都是List的实现类。他们都是有序集合，即存储在这两个集合中的元素的位置都是有顺序的，相当于一种动态的数组，我们以后可以按位置索引号取出某个元素\n​    Vector是线程安全的，也就是说是它的方法之间是线程同步的，而ArrayList是线程序不安全的，它的方法之间是线程不同步的。如果只有一个线程会访问到集合，那最好是使用ArrayList，因为它不考虑线程安全，效率会高些；如果有多个线程会访问到集合，那最好是使用Vector，因为不需要我们自己再去考虑和编写线程安全的代码\n\n### 5、ArrayList和LinkedList对比：\n\n​    1.ArrayList是实现了基于动态数组的数据结构，LinkedList基于链表的数据结构。\n​    2.对于随机访问get和set，ArrayList觉得优于LinkedList，因为LinkedList要移动指针。\n​    3.对于新增和删除操作add和remove，LinedList比较占优势，因为ArrayList要移动数据。\n\n### 6、HashSet和TreeSet对比：\n\n​    HashSet比TreeSet的性能要好，因为TreeSet需要额外的红黑树算法来维护集合的次序。所以只有当需要保持排序的Set时候，才会使用TreeSet，否则都应该使用HashSet。\n\n### 7、HashSet和HashMap对比：\n\n​    都是采用Hash算法来决定元素的存储位置，并通过hash算法来增加集合大小的。其中最大的区别就是，HashSet实现的Set接口，他不允许有重复的值。HashMap实现的是Map接口，里面存储的是键值对，map中不允许存在重复的key。\n\n### 8、HashMap和HashTable对比：\n\n​    HashTable是一个线程安全的Map实现，但HashMap是线程不安全的实现，所以HashMap比HashTable的性能高一些；但是如果有多个线程访问同一个Map对象时候，应该使用HashTable。\n​    HashTable不允许使用null作为key和value，如果视图把null值放入HashTable中会引发NullPointerException异常，但是HashMap可以使用null作为key或value。null可以作为键，这样的键只有一个；可以有一个或多个键所对应的值为null。当get()方法返回null值时，即可以表示 HashMap中没有该键，也可以表示该键所对应的值为null。因此，在HashMap中不能由get()方法来判断HashMap中是否存在某个键，而应该用containsKey()方法来判断。\n\n## 各集合对比：\n\n![集合对比](java基础知识整理/20160624152704286)","source":"_posts/java基础知识整理.md","raw":"---\ntitle: java基础知识整理\ndate: 2020-12-24 21:40:50\ntags:\n- java\n- 随笔\ncategories:\n - 复习\n---\n\n# 一、面向对象概念\n\n### 1. 类与对象\n\n##### 1.1 面向过程和面向对象\n\n 面向过程 （Procedural Programming）侧重流程\n 面向对象 （Object-Oriented Programming ）(OOP) 侧重功能\n\n<!--more-->\n\n##### 1.2 类和对象的概念、关系、组成\n\n- 概念：\n\n  - **类**：类是一个模板，它描述一组具有相 同属性和方法的对象\n  - **对象**：最小子系统，有属性和方法。\n\n- 关系：类是对象的抽象，对象是类的实例\n\n- 组成：\n\n  - 成员变量（Attributes）\n  - 构造方法（Constructor） 一个类可以有多个构 造方法\n  - 成员方法（Methods）\n\n##### 1.3 构造函数，对象的初始化、使用\n\n- 构造方法：在创建一个对象的时候，至少要调用一个构造方法。 构造方法的名称必须与类同名，一个类可以有多个构 造方法。\n\n- 对象初始化：\n\n  - 声明：声明一个对象，包括对象名称和对象类型。\n  - 实例化：使用关键字new来创建一个对象。\n  - 初始化：使用new创建对象时，会调用构造方法初始化对象\n\n- 对象的使用：\n\n  \n\n  ```cpp\n  /* 实例化对象 */ ObjectReference = new Constructor();\n  /* 访问成员变量 */ ObjectReference.variableName; \n  /* 访问成员方法 */ ObjectReference.MethodName();\n  ```\n\n### 2.  封装、继承、多态\n\n##### 2.1  封装 Encapsulation\n\n**好处：**\n 从设计上讲，为了实现模块化\n 从使用上讲，减少了复杂度\n 良好的封装能够减少代码的耦合\n\n**实现：**\n\n![img](java基础知识整理/3775272-55dfd603d6e9b95c.jpg)\n\n\n private: 只能被该类的对象访问。\n default: 即不加任何访问修饰符，只允许在同一个包中进行访问。\n protected: 只能被类本身的方法及子类访问，即使子类在不同的包中也可以访问。\n public： 不仅可以跨类访问，而且允许跨包（package）访问。\n\n\n\n一个源文件中只能有一个public类;\n 源文件的名称应该和public类的类名保持一致;\n 如果一个类定义在某个包中，那么package语句应该在源文件的首行;\n\n##### 2.2 继承 Heritage\n\n继承是一种类和类之间的关系，是一种“is a kind of”的关系。\n **好处：**\n 易于修改，容易扩展\n\n**实现：**\n\n\n\n```java\npublic class Parent{   … }  \npublic class Child extends Parent {   … } \n```\n\njava中的继承是单继承的，一个子类只能继承一个父类，使用extends关键字\n 子类继承了父类中所有非private成员方法（除了构造方法）和所有非private的成员变量。\n\n**super：**\n 对于构造函数而言，它只能够被调用，而不能被继承。\n 当我们需要调用父类的构造方法时，只需使用super()即可\n\n**重写（覆盖） override：**\n 子类中有和父类中可访问（可继承到子类）的同名&&同返 回类型&&同参数表的方法，就会重写（覆盖）从父类继承来 的方法。\n\n**重载 overload：**\n 被重载的方法必须改变参数列表(参 数个数或类型或顺序不一样)；\n 被重载的方法可以改变返回类型；\n 被重载的方法可以改变访问修饰符；\n final 关键字声明类可以把类定义为不能继承的，即最终类； 或者用于修饰方法，该方法不能被子类重写：\n\n**向上转型**\n 上转型对象可以操作被子类继承和重写的方法，但不能操作子类新增的成员变量和方法。\n\n##### 2.3 多态 Polymorphism\n\n**多态就是指一种名称定义不同的方法**\n\n**分类**\n 编译时多态 - 方法的重载（overload）\n 运行时多态 - 程序中定义的引用变量所指向的具体类型和通过该引用变量发出的方法调用在编程 时并不确定，而是在程序运行期间才确定，即一个引用变量倒底会指向哪个类的实 例对象，该引用变量发出的方法调用到底是哪个类中实现的方法，必须在由程序运 行期间才能决定。\n\n**实现方法（继承、接口）**\n 以继承实现多态 -向上转型、方法重写，以一般代表特殊，以特殊代替一般\n 以接口实现多态\n\n**如何使用**\n 可以在方法的参数中传入其父类（或接口）类型，在运行时会根据实际的运行时类型来 在方法中进行相应的操作。\n 多态用于返回值，可以在方法的返回值类型上使用其实际返回值的父（接口）类型，不关心返回值的实际类型。\n\n### 3.抽象类和抽象方法，静态方法和静态变量\n\n具体类：可以被实例化的类\n 抽象类：不能被实例化的类\n 定义抽象类的基本目的是提供合适的超类， 使其他类可以继承它，以实现共享。\n\n\n\n```csharp\npublic abstract class Form{   …   public abstract void draw(); } \n```\n\n### 4. 接口\n\n**定义**\n\n\n\n```php\n[public] interface 接口名 [extends 其他的接口名列表] {\n    [public static final] 数据类型 常量名 = 值;\n    [public abstract] 返回类型 方法名（形参列表）;\n}\n```\n\n**实现**\n\n\n\n```dart\n[访问修饰符] class 类名 [extends 超类名] implements 接口名列表 {\n        类体 \n}\n```\n\n**特性**\n 接口中可以含有变量，变量会被隐式的指定为 public static final（用 private 修饰 会报编译错误）\n 接口中的方法会被隐式的指定为 public abstract\n\n**功能**\n\n1. 接口提供了一组功能的命名集合\n2. 接口定义了不同类交互的标准\n    实现了“多继承” ；分离了方法的声明和方法的实现\n\n**接口 v.s. 类**\n 接口不能用于实例化对象。\n 接口没有构造方法。\n 接口中所有的方法必须是抽象方法。\n 接口只能包含static final成员变量。\n 接口不是被类继承了，而是要被类实现。\n 接口支持多继承。\n\n抽象类是对类抽象，而接口是对行为的抽象\n 抽象类是自底向上抽象而来的，接口是自顶向下设计出来的\n\n**接口名作为类型**\n 可以把使用实现了某一接口的类创建的对象的引用赋给该接口声明的接口变量， 那么该接口变量就可以调用被类实现的接口的方法。\n\n# 二、反射及动态代理\n\n反射 一般使用 Class.forName()方法;\n\n动态代理就是实现InvocationHandler 接口；\n\n要想理解反射的原理，首先要了解什么是类型信息。Java让我们在运行时识别对象和类的信息，主要有2种方式：一种是传统的RTTI，它假定我们在编译时已经知道了所有的类型信息；另一种是反射机制，它允许我们在运行时发现和使用类的信息。\n\n### 1、Class对象\n\n　　理解RTTI在Java中的工作原理，首先需要知道类型信息在运行时是如何表示的，这是由Class对象来完成的，它包含了与类有关的信息。Class对象就是用来创建所有“常规”对象的，Java使用Class对象来执行RTTI，即使你正在执行的是类似类型转换这样的操作。\n\n　　每个类都会产生一个对应的Class对象，也就是保存在.class文件。所有类都是在对其第一次使用时，动态加载到JVM的，当程序创建一个对类的静态成员的引用时，就会加载这个类。Class对象仅在需要的时候才会加载，static初始化是在类加载时进行的。 \n\n```\npublic class TestMain {\n    public static void main(String[] args) {\n        System.out.println(XYZ.name);\n    }\n}\n\nclass XYZ {\n    public static String name = \"luoxn28\";\n\n    static {\n        System.out.println(\"xyz静态块\");\n    }\n\n    public XYZ() {\n        System.out.println(\"xyz构造了\");\n    }\n}\n```\n\n输出结果为：\n\n![img](java基础知识整理/772134-20160720003120122-551868817.png)\n\n　　类加载器首先会检查这个类的Class对象是否已被加载过，如果尚未加载，默认的类加载器就会根据类名查找对应的.class文件。\n\n　　想在运行时使用类型信息，必须获取对象(比如类Base对象)的Class对象的引用，使用功能Class.forName(“Base”)可以实现该目的，或者使用base.class。注意，有一点很有趣，使用功能”.class”来创建Class对象的引用时，不会自动初始化该Class对象，使用forName()会自动初始化该Class对象。为了使用类而做的准备工作一般有以下3个步骤：\n\n- 加载：由类加载器完成，找到对应的字节码，创建一个Class对象\n- 链接：验证类中的字节码，为静态域分配空间\n- 初始化：如果该类有超类，则对其初始化，执行静态初始化器和静态初始化块 \n\n```\npublic class Base {\n    static int num = 1;\n    \n    static {\n        System.out.println(\"Base \" + num);\n    }\n}\npublic class Main {\n    public static void main(String[] args) {\n        // 不会初始化静态块\n        Class clazz1 = Base.class;\n        System.out.println(\"------\");\n        // 会初始化\n        Class clazz2 = Class.forName(\"zzz.Base\");\n    }\n}\n```\n\n \n\n### 2、类型转换前先做检查\n\n　　编译器将检查类型向下转型是否合法，如果不合法将抛出异常。向下转换类型前，可以使用instanceof判断。 \n\n[![复制代码](java基础知识整理/copycode.gif)](javascript:void(0);)\n\n```\nclass Base { }\nclass Derived extends Base { }\n\npublic class Main {\n    public static void main(String[] args) {\n        Base base = new Derived();\n        if (base instanceof Derived) {\n            // 这里可以向下转换了\n            System.out.println(\"ok\");\n        }\n        else {\n            System.out.println(\"not ok\");\n        }\n    }\n}\n```\n\n \n\n### 3、反射：运行时类信息\n\n　　如果不知道某个对象的确切类型，RTTI可以告诉你，但是有一个前提：这个类型在编译时必须已知，这样才能使用RTTI来识别它。Class类与java.lang.reflect类库一起对反射进行了支持，该类库包含Field、Method和Constructor类，这些类的对象由JVM在启动时创建，用以表示未知类里对应的成员。这样的话就可以使用Contructor创建新的对象，用get()和set()方法获取和修改类中与Field对象关联的字段，用invoke()方法调用与Method对象关联的方法。另外，还可以调用getFields()、getMethods()和getConstructors()等许多便利的方法，以返回表示字段、方法、以及构造器对象的数组，这样，对象信息可以在运行时被完全确定下来，而在编译时不需要知道关于类的任何事情。\n\n　　反射机制并没有什么神奇之处，当通过反射与一个未知类型的对象打交道时，JVM只是简单地检查这个对象，看它属于哪个特定的类。因此，那个类的`.class`对于JVM来说必须是可获取的，要么在本地机器上，要么从网络获取。所以对于RTTI和反射之间的真正区别只在于：\n\n- RTTI，编译器在编译时打开和检查.class文件\n- 反射，运行时打开和检查.class文件 \n\n```\npublic class Person implements Serializable {\n\n    private String name;\n    private int age;\n// get/set方法\n}\npublic static void main(String[] args) {\n    Person person = new Person(\"luoxn28\", 23);\n    Class clazz = person.getClass();\n\n    Field[] fields = clazz.getDeclaredFields();\n    for (Field field : fields) {\n        String key = field.getName();\n        PropertyDescriptor descriptor = new PropertyDescriptor(key, clazz);\n        Method method = descriptor.getReadMethod();\n        Object value = method.invoke(person);\n\n        System.out.println(key + \":\" + value);\n\n    }\n}\n```\n\n　　以上通过getReadMethod()方法调用类的get函数，可以通过getWriteMethod()方法来调用类的set方法。通常来说，我们不需要使用反射工具，但是它们在创建动态代码会更有用，反射在Java中用来支持其他特性的，例如对象的序列化和JavaBean等。\n\n### 4、动态代理\n\n　　代理模式是为了提供额外或不同的操作，而插入的用来替代”实际”对象的对象，这些操作涉及到与”实际”对象的通信，因此代理通常充当中间人角色。Java的动态代理比代理的思想更前进了一步，它可以动态地创建并代理并动态地处理对所代理方法的调用。在动态代理上所做的所有调用都会被重定向到单一的**调用处理器**上，它的工作是揭示调用的类型并确定相应的策略。 \n\n \n\n**学习Spring的时候，我们知道Spring主要有两大思想，一个是IoC，另一个就是AOP，对于IoC，它利用的是反射机制，依赖注入就不用多说了，而对于Spring的核心AOP来说，使用了动态代理，其实底层也是反射。我们不但要知道怎么通过AOP来满足的我们的功能，我们更需要学习的是其底层是怎么样的一个原理，而AOP的原理就是java的动态代理机制，所以本篇随笔就是对java的动态机制进行一个回顾。**\n\n在java的动态代理机制中，有两个重要的类或接口，一个是 InvocationHandler(Interface)、另一个则是 Proxy(Class)，这一个类和接口是实现我们动态代理所必须用到的。首先我们先来看看java的API帮助文档是怎么样对这两个类进行描述的：\n\nInvocationHandler:\n\n```\nInvocationHandler is the interface implemented by the invocation handler of a proxy instance. \n\nEach proxy instance has an associated invocation handler. When a method is invoked on a proxy instance, the method invocation is encoded and dispatched to the invoke method of its invocation handler.\n```\n\n每一个动态代理类都必须要实现InvocationHandler这个接口，并且每个代理类的实例都关联到了一个handler，当我们通过代理对象调用一个方法的时候，这个方法的调用就会被转发为由InvocationHandler这个接口的 invoke 方法来进行调用。我们来看看InvocationHandler这个接口的唯一一个方法 invoke 方法：\n\n```\nObject invoke(Object proxy, Method method, Object[] args) throws Throwable\n```\n\n我们看到这个方法一共接受三个参数，那么这三个参数分别代表什么呢？\n\n```\nObject invoke(Object proxy, Method method, Object[] args) throws Throwable\n\nproxy:　　指代我们所代理的那个真实对象\nmethod:　　指代的是我们所要调用真实对象的某个方法的Method对象\nargs:　　指代的是调用真实对象某个方法时接受的参数\n```\n\n如果不是很明白，等下通过一个实例会对这几个参数进行更深的讲解。\n\n接下来我们来看看Proxy这个类：\n\n```\nProxy provides static methods for creating dynamic proxy classes and instances, and it is also the superclass of all dynamic proxy classes created by those methods. \n```\n\nProxy这个类的作用就是用来动态创建一个代理对象的类，它提供了许多的方法，但是我们用的最多的就是 newProxyInstance 这个方法：\n\n```\npublic static Object newProxyInstance(ClassLoader loader, Class<?>[] interfaces,  InvocationHandler h)  throws IllegalArgumentException\nReturns an instance of a proxy class for the specified interfaces that dispatches method invocations to the specified invocation handler.\n```\n\n这个方法的作用就是得到一个动态的代理对象，其接收三个参数，我们来看看这三个参数所代表的含义： \n\n```\npublic static Object newProxyInstance(ClassLoader loader, Class<?>[] interfaces, InvocationHandler h) throws IllegalArgumentException\n\nloader:　　一个ClassLoader对象，定义了由哪个ClassLoader对象来对生成的代理对象进行加载\n\ninterfaces:　　一个Interface对象的数组，表示的是我将要给我需要代理的对象提供一组什么接口，如果我提供了一组接口给它，那么这个代理对象就宣称实现了该接口(多态)，这样我就能调用这组接口中的方法了\n\nh:　　一个InvocationHandler对象，表示的是当我这个动态代理对象在调用方法的时候，会关联到哪一个InvocationHandler对象上\n```\n\n好了，在介绍完这两个接口(类)以后，我们来通过一个实例来看看我们的动态代理模式是什么样的：\n\n首先我们定义了一个Subject类型的接口，为其声明了两个方法：\n\n```\npublic interface Subject\n{\n    public void rent();\n    \n    public void hello(String str);\n}\n```\n\n接着，定义了一个类来实现这个接口，这个类就是我们的真实对象，RealSubject类：  \n\n下一步，我们就要定义一个动态代理类了，前面说个，每一个动态代理类都必须要实现 InvocationHandler 这个接口，因此我们这个动态代理类也不例外： \n\n```\npublic class DynamicProxy implements InvocationHandler\n{\n    //　这个就是我们要代理的真实对象\n    private Object subject;\n    \n    //    构造方法，给我们要代理的真实对象赋初值\n    public DynamicProxy(Object subject)\n    {\n        this.subject = subject;\n    }\n    \n    @Override\n    public Object invoke(Object object, Method method, Object[] args)\n            throws Throwable\n    {\n        //　　在代理真实对象前我们可以添加一些自己的操作\n        System.out.println(\"before invoke\");\n        \n        System.out.println(\"Method:\" + method);\n        \n        //    当代理对象调用真实对象的方法时，其会自动的跳转到代理对象关联的handler对象的invoke方法来进行调用\n        method.invoke(subject, args);\n        \n        //　　在代理真实对象后我们也可以添加一些自己的操作\n        System.out.println(\"after invoke\");\n        \n        return null;\n    }\n\n}[![复制代码](java基础知识整理/copycode.gif)](javascript:void(0);\n```\n\n \n\n最后，来看看我们的Client类： \n\n```\npublic class Client\n{\n    public static void main(String[] args)\n    {\n        //    我们要代理的真实对象\n        Subject realSubject = new RealSubject();\n\n        //    我们要代理哪个真实对象，就将该对象传进去，最后是通过该真实对象来调用其方法的\n        InvocationHandler handler = new DynamicProxy(realSubject);\n\n        /*\n         * 通过Proxy的newProxyInstance方法来创建我们的代理对象，我们来看看其三个参数\n         * 第一个参数 handler.getClass().getClassLoader() ，我们这里使用handler这个类的ClassLoader对象来加载我们的代理对象\n         * 第二个参数realSubject.getClass().getInterfaces()，我们这里为代理对象提供的接口是真实对象所实行的接口，表示我要代理的是该真实对象，这样我就能调用这组接口中的方法了\n         * 第三个参数handler， 我们这里将这个代理对象关联到了上方的 InvocationHandler 这个对象上\n         */\n        Subject subject = (Subject)Proxy.newProxyInstance(handler.getClass().getClassLoader(), realSubject\n                .getClass().getInterfaces(), handler);\n        \n        System.out.println(subject.getClass().getName());\n        subject.rent();\n        subject.hello(\"world\");\n    }\n}\n```\n\n我们先来看看控制台的输出： \n\n```\n$Proxy0\n\nbefore invoke\nMethod:public abstract void com.xiaoluo.dynamicproxy.Subject.rent()\nI want to rent my house\nafter invoke\n\nbefore invoke\nMethod:public abstract void com.xiaoluo.dynamicproxy.Subject.hello(java.lang.String)\nhello: world\nafter invoke\n```\n\n当调试的时候，如果把鼠标放在subject 上面，会自动的执行toString()方法，也就是\n\n```\nbefore invoke\nMethod:public abstract void com.xiaoluo.dynamicproxy.Subject.toString()\n \nafter invoke\n```\n\n \n\n我们首先来看看 $Proxy0 这东西，我们看到，这个东西是由 System.out.println(subject.getClass().getName()); 这条语句打印出来的，那么为什么我们返回的这个代理对象的类名是这样的呢？\n\n```\nSubject subject = (Subject)Proxy.newProxyInstance(handler.getClass().getClassLoader(), realSubject\n                .getClass().getInterfaces(), handler);\n```\n\n可能我以为返回的这个代理对象会是Subject类型的对象，或者是InvocationHandler的对象，结果却不是**，首先我们解释一下为什么我们这里可以将其转化为Subject类型的对象？原因就是在newProxyInstance这个方法的第二个参数上，我们给这个代理对象提供了一组什么接口，那么我这个代理对象就会实现了这组接口，这个时候我们当然可以将这个代理对象强制类型转化为这组接口中的任意一个，因为这里的接口是Subject类型，所以就可以将其转化为Subject类型了**。\n\n**同时我们一定要记住，通过 Proxy.newProxyInstance 创建的代理对象是在jvm运行时动态生成的一个对象，它并不是我们的InvocationHandler类型，也不是我们定义的那组接口的类型，而是在运行是动态生成的一个对象，并且命名方式都是这样的形式，以$开头，proxy为中，最后一个数字表示对象的标号**。\n\n接着我们来看看这两句 \n\nsubject.rent();\nsubject.hello(\"world\");\n\n这里是通过代理对象来调用实现的那种接口中的方法，这个时候程序就会跳转到由这个代理对象关联到的 handler 中的invoke方法去执行，而我们的这个 handler 对象又接受了一个 RealSubject类型的参数，表示我要代理的就是这个真实对象，所以此时就会调用 handler 中的invoke方法去执行： \n\n```\npublic Object invoke(Object object, Method method, Object[] args)\n            throws Throwable\n    {\n        //　　在代理真实对象前我们可以添加一些自己的操作\n        System.out.println(\"before invoke\");\n        \n        System.out.println(\"Method:\" + method);\n        \n        //    当代理对象调用真实对象的方法时，其会自动的跳转到代理对象关联的handler对象的invoke方法来进行调用\n        method.invoke(subject, args);\n        \n        //　　在代理真实对象后我们也可以添加一些自己的操作\n        System.out.println(\"after invoke\");\n        \n        return null;\n    }\n```\n\n我们看到，在真正通过代理对象来调用真实对象的方法的时候，我们可以在该方法前后添加自己的一些操作，同时我们看到我们的这个 method 对象是这样的：\n\n```\npublic abstract void com.xiaoluo.dynamicproxy.Subject.rent()\n\npublic abstract void com.xiaoluo.dynamicproxy.Subject.hello(java.lang.String)\n```\n\n正好就是我们的Subject接口中的两个方法，这也就证明了当我通过代理对象来调用方法的时候，起实际就是委托由其关联到的 handler 对象的invoke方法中来调用，并不是自己来真实调用，而是通过代理的方式来调用的。\n\n这就是我们的java动态代理机制\n\n# 三、java集合\n\n### 1、java中的集合类结构\n\n![集合结构](java基础知识整理/20160624152602394)\n\n### 2、List、Set和Map：\n\n​    List是有序的集合，Set是无序的集合。Map是无序的键值对。\n\n#### 1.集合和数组的区别：\n\n![这里写图片描述](java基础知识整理/20180803193134355)\n\n#### 2.Collection集合的方法：\n\n![这里写图片描述](java基础知识整理/20180803193423722)\n\n### 3、HashMap详解：\n\n​    HashMap有两个参数影响其性能：初始容量和加载因子。默认初始容量是16，加载因子是0.75。容量是哈希表中桶(Entry数组)的数量，初始容量只是哈希表在创建时的容量。加载因子是哈希表在其容量自动增加之前可以达到多满的一种尺度。当哈希表中的条目数超出了加载因子与当前容量的乘积时，通过调用 rehash 方法将容量翻倍。\n\n### 4、ArrayList和Vector对比：\n\n​    都是List的实现类。他们都是有序集合，即存储在这两个集合中的元素的位置都是有顺序的，相当于一种动态的数组，我们以后可以按位置索引号取出某个元素\n​    Vector是线程安全的，也就是说是它的方法之间是线程同步的，而ArrayList是线程序不安全的，它的方法之间是线程不同步的。如果只有一个线程会访问到集合，那最好是使用ArrayList，因为它不考虑线程安全，效率会高些；如果有多个线程会访问到集合，那最好是使用Vector，因为不需要我们自己再去考虑和编写线程安全的代码\n\n### 5、ArrayList和LinkedList对比：\n\n​    1.ArrayList是实现了基于动态数组的数据结构，LinkedList基于链表的数据结构。\n​    2.对于随机访问get和set，ArrayList觉得优于LinkedList，因为LinkedList要移动指针。\n​    3.对于新增和删除操作add和remove，LinedList比较占优势，因为ArrayList要移动数据。\n\n### 6、HashSet和TreeSet对比：\n\n​    HashSet比TreeSet的性能要好，因为TreeSet需要额外的红黑树算法来维护集合的次序。所以只有当需要保持排序的Set时候，才会使用TreeSet，否则都应该使用HashSet。\n\n### 7、HashSet和HashMap对比：\n\n​    都是采用Hash算法来决定元素的存储位置，并通过hash算法来增加集合大小的。其中最大的区别就是，HashSet实现的Set接口，他不允许有重复的值。HashMap实现的是Map接口，里面存储的是键值对，map中不允许存在重复的key。\n\n### 8、HashMap和HashTable对比：\n\n​    HashTable是一个线程安全的Map实现，但HashMap是线程不安全的实现，所以HashMap比HashTable的性能高一些；但是如果有多个线程访问同一个Map对象时候，应该使用HashTable。\n​    HashTable不允许使用null作为key和value，如果视图把null值放入HashTable中会引发NullPointerException异常，但是HashMap可以使用null作为key或value。null可以作为键，这样的键只有一个；可以有一个或多个键所对应的值为null。当get()方法返回null值时，即可以表示 HashMap中没有该键，也可以表示该键所对应的值为null。因此，在HashMap中不能由get()方法来判断HashMap中是否存在某个键，而应该用containsKey()方法来判断。\n\n## 各集合对比：\n\n![集合对比](java基础知识整理/20160624152704286)","slug":"java基础知识整理","published":1,"updated":"2020-12-30T14:17:30.947Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cklgjm1vk000mikvuc2fzeyio","content":"<h1><span id=\"一-面向对象概念\">一、面向对象概念</span></h1><h3><span id=\"1-类与对象\">1. 类与对象</span></h3><h5><span id=\"11-面向过程和面向对象\">1.1 面向过程和面向对象</span></h5><p> 面向过程 （Procedural Programming）侧重流程<br> 面向对象 （Object-Oriented Programming ）(OOP) 侧重功能</p>\n<a id=\"more\"></a>\n\n<h5><span id=\"12-类和对象的概念-关系-组成\">1.2 类和对象的概念、关系、组成</span></h5><ul>\n<li><p>概念：</p>\n<ul>\n<li><strong>类</strong>：类是一个模板，它描述一组具有相 同属性和方法的对象</li>\n<li><strong>对象</strong>：最小子系统，有属性和方法。</li>\n</ul>\n</li>\n<li><p>关系：类是对象的抽象，对象是类的实例</p>\n</li>\n<li><p>组成：</p>\n<ul>\n<li>成员变量（Attributes）</li>\n<li>构造方法（Constructor） 一个类可以有多个构 造方法</li>\n<li>成员方法（Methods）</li>\n</ul>\n</li>\n</ul>\n<h5><span id=\"13-构造函数对象的初始化-使用\">1.3 构造函数，对象的初始化、使用</span></h5><ul>\n<li><p>构造方法：在创建一个对象的时候，至少要调用一个构造方法。 构造方法的名称必须与类同名，一个类可以有多个构 造方法。</p>\n</li>\n<li><p>对象初始化：</p>\n<ul>\n<li>声明：声明一个对象，包括对象名称和对象类型。</li>\n<li>实例化：使用关键字new来创建一个对象。</li>\n<li>初始化：使用new创建对象时，会调用构造方法初始化对象</li>\n</ul>\n</li>\n<li><p>对象的使用：</p>\n</li>\n</ul>\n  <figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 实例化对象 */</span> ObjectReference = <span class=\"keyword\">new</span> Constructor();</span><br><span class=\"line\"><span class=\"comment\">/* 访问成员变量 */</span> ObjectReference.variableName; </span><br><span class=\"line\"><span class=\"comment\">/* 访问成员方法 */</span> ObjectReference.MethodName();</span><br></pre></td></tr></table></figure>\n<h3><span id=\"2-封装-继承-多态\">2.  封装、继承、多态</span></h3><h5><span id=\"21-封装-encapsulation\">2.1  封装 Encapsulation</span></h5><p><strong>好处：</strong><br> 从设计上讲，为了实现模块化<br> 从使用上讲，减少了复杂度<br> 良好的封装能够减少代码的耦合</p>\n<p><strong>实现：</strong></p>\n<p><img src=\"/2020/12/24/java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E6%95%B4%E7%90%86/3775272-55dfd603d6e9b95c.jpg\" alt=\"img\"></p>\n<p> private: 只能被该类的对象访问。<br> default: 即不加任何访问修饰符，只允许在同一个包中进行访问。<br> protected: 只能被类本身的方法及子类访问，即使子类在不同的包中也可以访问。<br> public： 不仅可以跨类访问，而且允许跨包（package）访问。</p>\n<p>一个源文件中只能有一个public类;<br> 源文件的名称应该和public类的类名保持一致;<br> 如果一个类定义在某个包中，那么package语句应该在源文件的首行;</p>\n<h5><span id=\"22-继承-heritage\">2.2 继承 Heritage</span></h5><p>继承是一种类和类之间的关系，是一种“is a kind of”的关系。<br> <strong>好处：</strong><br> 易于修改，容易扩展</p>\n<p><strong>实现：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Parent</span></span>&#123;   … &#125;  </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Child</span> <span class=\"keyword\">extends</span> <span class=\"title\">Parent</span> </span>&#123;   … &#125; </span><br></pre></td></tr></table></figure>\n<p>java中的继承是单继承的，一个子类只能继承一个父类，使用extends关键字<br> 子类继承了父类中所有非private成员方法（除了构造方法）和所有非private的成员变量。</p>\n<p><strong>super：</strong><br> 对于构造函数而言，它只能够被调用，而不能被继承。<br> 当我们需要调用父类的构造方法时，只需使用super()即可</p>\n<p><strong>重写（覆盖） override：</strong><br> 子类中有和父类中可访问（可继承到子类）的同名&amp;&amp;同返 回类型&amp;&amp;同参数表的方法，就会重写（覆盖）从父类继承来 的方法。</p>\n<p><strong>重载 overload：</strong><br> 被重载的方法必须改变参数列表(参 数个数或类型或顺序不一样)；<br> 被重载的方法可以改变返回类型；<br> 被重载的方法可以改变访问修饰符；<br> final 关键字声明类可以把类定义为不能继承的，即最终类； 或者用于修饰方法，该方法不能被子类重写：</p>\n<p><strong>向上转型</strong><br> 上转型对象可以操作被子类继承和重写的方法，但不能操作子类新增的成员变量和方法。</p>\n<h5><span id=\"23-多态-polymorphism\">2.3 多态 Polymorphism</span></h5><p><strong>多态就是指一种名称定义不同的方法</strong></p>\n<p><strong>分类</strong><br> 编译时多态 - 方法的重载（overload）<br> 运行时多态 - 程序中定义的引用变量所指向的具体类型和通过该引用变量发出的方法调用在编程 时并不确定，而是在程序运行期间才确定，即一个引用变量倒底会指向哪个类的实 例对象，该引用变量发出的方法调用到底是哪个类中实现的方法，必须在由程序运 行期间才能决定。</p>\n<p><strong>实现方法（继承、接口）</strong><br> 以继承实现多态 -向上转型、方法重写，以一般代表特殊，以特殊代替一般<br> 以接口实现多态</p>\n<p><strong>如何使用</strong><br> 可以在方法的参数中传入其父类（或接口）类型，在运行时会根据实际的运行时类型来 在方法中进行相应的操作。<br> 多态用于返回值，可以在方法的返回值类型上使用其实际返回值的父（接口）类型，不关心返回值的实际类型。</p>\n<h3><span id=\"3抽象类和抽象方法静态方法和静态变量\">3.抽象类和抽象方法，静态方法和静态变量</span></h3><p>具体类：可以被实例化的类<br> 抽象类：不能被实例化的类<br> 定义抽象类的基本目的是提供合适的超类， 使其他类可以继承它，以实现共享。</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title\">Form</span>&#123;   …   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">draw</span>(<span class=\"params\"></span>)</span>; &#125; </span><br></pre></td></tr></table></figure>\n<h3><span id=\"4-接口\">4. 接口</span></h3><p><strong>定义</strong></p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"keyword\">public</span>] <span class=\"class\"><span class=\"keyword\">interface</span> 接口名 [<span class=\"keyword\">extends</span> 其他的接口名列表] </span>&#123;</span><br><span class=\"line\">    [<span class=\"keyword\">public</span> <span class=\"built_in\">static</span> <span class=\"keyword\">final</span>] 数据类型 常量名 = 值;</span><br><span class=\"line\">    [<span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span>] 返回类型 方法名（形参列表）;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>实现</strong></p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[访问修饰符] <span class=\"class\"><span class=\"keyword\">class</span> 类名 [<span class=\"keyword\">extends</span> 超类名] <span class=\"keyword\">implements</span> 接口名列表 </span>&#123;</span><br><span class=\"line\">        类体 </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>特性</strong><br> 接口中可以含有变量，变量会被隐式的指定为 public static final（用 private 修饰 会报编译错误）<br> 接口中的方法会被隐式的指定为 public abstract</p>\n<p><strong>功能</strong></p>\n<ol>\n<li>接口提供了一组功能的命名集合</li>\n<li>接口定义了不同类交互的标准<br> 实现了“多继承” ；分离了方法的声明和方法的实现</li>\n</ol>\n<p><strong>接口 v.s. 类</strong><br> 接口不能用于实例化对象。<br> 接口没有构造方法。<br> 接口中所有的方法必须是抽象方法。<br> 接口只能包含static final成员变量。<br> 接口不是被类继承了，而是要被类实现。<br> 接口支持多继承。</p>\n<p>抽象类是对类抽象，而接口是对行为的抽象<br> 抽象类是自底向上抽象而来的，接口是自顶向下设计出来的</p>\n<p><strong>接口名作为类型</strong><br> 可以把使用实现了某一接口的类创建的对象的引用赋给该接口声明的接口变量， 那么该接口变量就可以调用被类实现的接口的方法。</p>\n<h1><span id=\"二-反射及动态代理\">二、反射及动态代理</span></h1><p>反射 一般使用 Class.forName()方法;</p>\n<p>动态代理就是实现InvocationHandler 接口；</p>\n<p>要想理解反射的原理，首先要了解什么是类型信息。Java让我们在运行时识别对象和类的信息，主要有2种方式：一种是传统的RTTI，它假定我们在编译时已经知道了所有的类型信息；另一种是反射机制，它允许我们在运行时发现和使用类的信息。</p>\n<h3><span id=\"1-class对象\">1、Class对象</span></h3><p>　　理解RTTI在Java中的工作原理，首先需要知道类型信息在运行时是如何表示的，这是由Class对象来完成的，它包含了与类有关的信息。Class对象就是用来创建所有“常规”对象的，Java使用Class对象来执行RTTI，即使你正在执行的是类似类型转换这样的操作。</p>\n<p>　　每个类都会产生一个对应的Class对象，也就是保存在.class文件。所有类都是在对其第一次使用时，动态加载到JVM的，当程序创建一个对类的静态成员的引用时，就会加载这个类。Class对象仅在需要的时候才会加载，static初始化是在类加载时进行的。 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class TestMain &#123;</span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        System.out.println(XYZ.name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class XYZ &#123;</span><br><span class=\"line\">    public static String name &#x3D; &quot;luoxn28&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">    static &#123;</span><br><span class=\"line\">        System.out.println(&quot;xyz静态块&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public XYZ() &#123;</span><br><span class=\"line\">        System.out.println(&quot;xyz构造了&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出结果为：</p>\n<p><img src=\"/2020/12/24/java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E6%95%B4%E7%90%86/772134-20160720003120122-551868817.png\" alt=\"img\"></p>\n<p>　　类加载器首先会检查这个类的Class对象是否已被加载过，如果尚未加载，默认的类加载器就会根据类名查找对应的.class文件。</p>\n<p>　　想在运行时使用类型信息，必须获取对象(比如类Base对象)的Class对象的引用，使用功能Class.forName(“Base”)可以实现该目的，或者使用base.class。注意，有一点很有趣，使用功能”.class”来创建Class对象的引用时，不会自动初始化该Class对象，使用forName()会自动初始化该Class对象。为了使用类而做的准备工作一般有以下3个步骤：</p>\n<ul>\n<li>加载：由类加载器完成，找到对应的字节码，创建一个Class对象</li>\n<li>链接：验证类中的字节码，为静态域分配空间</li>\n<li>初始化：如果该类有超类，则对其初始化，执行静态初始化器和静态初始化块 </li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Base &#123;</span><br><span class=\"line\">    static int num &#x3D; 1;</span><br><span class=\"line\">    </span><br><span class=\"line\">    static &#123;</span><br><span class=\"line\">        System.out.println(&quot;Base &quot; + num);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">public class Main &#123;</span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        &#x2F;&#x2F; 不会初始化静态块</span><br><span class=\"line\">        Class clazz1 &#x3D; Base.class;</span><br><span class=\"line\">        System.out.println(&quot;------&quot;);</span><br><span class=\"line\">        &#x2F;&#x2F; 会初始化</span><br><span class=\"line\">        Class clazz2 &#x3D; Class.forName(&quot;zzz.Base&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h3><span id=\"2-类型转换前先做检查\">2、类型转换前先做检查</span></h3><p>　　编译器将检查类型向下转型是否合法，如果不合法将抛出异常。向下转换类型前，可以使用instanceof判断。 </p>\n<p><a href=\"javascript:void(0);\"><img src=\"/2020/12/24/java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E6%95%B4%E7%90%86/copycode.gif\" alt=\"复制代码\"></a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Base &#123; &#125;</span><br><span class=\"line\">class Derived extends Base &#123; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">public class Main &#123;</span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        Base base &#x3D; new Derived();</span><br><span class=\"line\">        if (base instanceof Derived) &#123;</span><br><span class=\"line\">            &#x2F;&#x2F; 这里可以向下转换了</span><br><span class=\"line\">            System.out.println(&quot;ok&quot;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        else &#123;</span><br><span class=\"line\">            System.out.println(&quot;not ok&quot;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h3><span id=\"3-反射运行时类信息\">3、反射：运行时类信息</span></h3><p>　　如果不知道某个对象的确切类型，RTTI可以告诉你，但是有一个前提：这个类型在编译时必须已知，这样才能使用RTTI来识别它。Class类与java.lang.reflect类库一起对反射进行了支持，该类库包含Field、Method和Constructor类，这些类的对象由JVM在启动时创建，用以表示未知类里对应的成员。这样的话就可以使用Contructor创建新的对象，用get()和set()方法获取和修改类中与Field对象关联的字段，用invoke()方法调用与Method对象关联的方法。另外，还可以调用getFields()、getMethods()和getConstructors()等许多便利的方法，以返回表示字段、方法、以及构造器对象的数组，这样，对象信息可以在运行时被完全确定下来，而在编译时不需要知道关于类的任何事情。</p>\n<p>　　反射机制并没有什么神奇之处，当通过反射与一个未知类型的对象打交道时，JVM只是简单地检查这个对象，看它属于哪个特定的类。因此，那个类的<code>.class</code>对于JVM来说必须是可获取的，要么在本地机器上，要么从网络获取。所以对于RTTI和反射之间的真正区别只在于：</p>\n<ul>\n<li>RTTI，编译器在编译时打开和检查.class文件</li>\n<li>反射，运行时打开和检查.class文件 </li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Person implements Serializable &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    private String name;</span><br><span class=\"line\">    private int age;</span><br><span class=\"line\">&#x2F;&#x2F; get&#x2F;set方法</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">public static void main(String[] args) &#123;</span><br><span class=\"line\">    Person person &#x3D; new Person(&quot;luoxn28&quot;, 23);</span><br><span class=\"line\">    Class clazz &#x3D; person.getClass();</span><br><span class=\"line\"></span><br><span class=\"line\">    Field[] fields &#x3D; clazz.getDeclaredFields();</span><br><span class=\"line\">    for (Field field : fields) &#123;</span><br><span class=\"line\">        String key &#x3D; field.getName();</span><br><span class=\"line\">        PropertyDescriptor descriptor &#x3D; new PropertyDescriptor(key, clazz);</span><br><span class=\"line\">        Method method &#x3D; descriptor.getReadMethod();</span><br><span class=\"line\">        Object value &#x3D; method.invoke(person);</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(key + &quot;:&quot; + value);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>　　以上通过getReadMethod()方法调用类的get函数，可以通过getWriteMethod()方法来调用类的set方法。通常来说，我们不需要使用反射工具，但是它们在创建动态代码会更有用，反射在Java中用来支持其他特性的，例如对象的序列化和JavaBean等。</p>\n<h3><span id=\"4-动态代理\">4、动态代理</span></h3><p>　　代理模式是为了提供额外或不同的操作，而插入的用来替代”实际”对象的对象，这些操作涉及到与”实际”对象的通信，因此代理通常充当中间人角色。Java的动态代理比代理的思想更前进了一步，它可以动态地创建并代理并动态地处理对所代理方法的调用。在动态代理上所做的所有调用都会被重定向到单一的<strong>调用处理器</strong>上，它的工作是揭示调用的类型并确定相应的策略。 </p>\n<p><strong>学习Spring的时候，我们知道Spring主要有两大思想，一个是IoC，另一个就是AOP，对于IoC，它利用的是反射机制，依赖注入就不用多说了，而对于Spring的核心AOP来说，使用了动态代理，其实底层也是反射。我们不但要知道怎么通过AOP来满足的我们的功能，我们更需要学习的是其底层是怎么样的一个原理，而AOP的原理就是java的动态代理机制，所以本篇随笔就是对java的动态机制进行一个回顾。</strong></p>\n<p>在java的动态代理机制中，有两个重要的类或接口，一个是 InvocationHandler(Interface)、另一个则是 Proxy(Class)，这一个类和接口是实现我们动态代理所必须用到的。首先我们先来看看java的API帮助文档是怎么样对这两个类进行描述的：</p>\n<p>InvocationHandler:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">InvocationHandler is the interface implemented by the invocation handler of a proxy instance. </span><br><span class=\"line\"></span><br><span class=\"line\">Each proxy instance has an associated invocation handler. When a method is invoked on a proxy instance, the method invocation is encoded and dispatched to the invoke method of its invocation handler.</span><br></pre></td></tr></table></figure>\n<p>每一个动态代理类都必须要实现InvocationHandler这个接口，并且每个代理类的实例都关联到了一个handler，当我们通过代理对象调用一个方法的时候，这个方法的调用就会被转发为由InvocationHandler这个接口的 invoke 方法来进行调用。我们来看看InvocationHandler这个接口的唯一一个方法 invoke 方法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Object invoke(Object proxy, Method method, Object[] args) throws Throwable</span><br></pre></td></tr></table></figure>\n<p>我们看到这个方法一共接受三个参数，那么这三个参数分别代表什么呢？</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Object invoke(Object proxy, Method method, Object[] args) throws Throwable</span><br><span class=\"line\"></span><br><span class=\"line\">proxy:　　指代我们所代理的那个真实对象</span><br><span class=\"line\">method:　　指代的是我们所要调用真实对象的某个方法的Method对象</span><br><span class=\"line\">args:　　指代的是调用真实对象某个方法时接受的参数</span><br></pre></td></tr></table></figure>\n<p>如果不是很明白，等下通过一个实例会对这几个参数进行更深的讲解。</p>\n<p>接下来我们来看看Proxy这个类：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Proxy provides static methods for creating dynamic proxy classes and instances, and it is also the superclass of all dynamic proxy classes created by those methods. </span><br></pre></td></tr></table></figure>\n<p>Proxy这个类的作用就是用来动态创建一个代理对象的类，它提供了许多的方法，但是我们用的最多的就是 newProxyInstance 这个方法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static Object newProxyInstance(ClassLoader loader, Class&lt;?&gt;[] interfaces,  InvocationHandler h)  throws IllegalArgumentException</span><br><span class=\"line\">Returns an instance of a proxy class for the specified interfaces that dispatches method invocations to the specified invocation handler.</span><br></pre></td></tr></table></figure>\n<p>这个方法的作用就是得到一个动态的代理对象，其接收三个参数，我们来看看这三个参数所代表的含义： </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static Object newProxyInstance(ClassLoader loader, Class&lt;?&gt;[] interfaces, InvocationHandler h) throws IllegalArgumentException</span><br><span class=\"line\"></span><br><span class=\"line\">loader:　　一个ClassLoader对象，定义了由哪个ClassLoader对象来对生成的代理对象进行加载</span><br><span class=\"line\"></span><br><span class=\"line\">interfaces:　　一个Interface对象的数组，表示的是我将要给我需要代理的对象提供一组什么接口，如果我提供了一组接口给它，那么这个代理对象就宣称实现了该接口(多态)，这样我就能调用这组接口中的方法了</span><br><span class=\"line\"></span><br><span class=\"line\">h:　　一个InvocationHandler对象，表示的是当我这个动态代理对象在调用方法的时候，会关联到哪一个InvocationHandler对象上</span><br></pre></td></tr></table></figure>\n<p>好了，在介绍完这两个接口(类)以后，我们来通过一个实例来看看我们的动态代理模式是什么样的：</p>\n<p>首先我们定义了一个Subject类型的接口，为其声明了两个方法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public interface Subject</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public void rent();</span><br><span class=\"line\">    </span><br><span class=\"line\">    public void hello(String str);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>接着，定义了一个类来实现这个接口，这个类就是我们的真实对象，RealSubject类：  </p>\n<p>下一步，我们就要定义一个动态代理类了，前面说个，每一个动态代理类都必须要实现 InvocationHandler 这个接口，因此我们这个动态代理类也不例外： </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class DynamicProxy implements InvocationHandler</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    &#x2F;&#x2F;　这个就是我们要代理的真实对象</span><br><span class=\"line\">    private Object subject;</span><br><span class=\"line\">    </span><br><span class=\"line\">    &#x2F;&#x2F;    构造方法，给我们要代理的真实对象赋初值</span><br><span class=\"line\">    public DynamicProxy(Object subject)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        this.subject &#x3D; subject;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public Object invoke(Object object, Method method, Object[] args)</span><br><span class=\"line\">            throws Throwable</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        &#x2F;&#x2F;　　在代理真实对象前我们可以添加一些自己的操作</span><br><span class=\"line\">        System.out.println(&quot;before invoke&quot;);</span><br><span class=\"line\">        </span><br><span class=\"line\">        System.out.println(&quot;Method:&quot; + method);</span><br><span class=\"line\">        </span><br><span class=\"line\">        &#x2F;&#x2F;    当代理对象调用真实对象的方法时，其会自动的跳转到代理对象关联的handler对象的invoke方法来进行调用</span><br><span class=\"line\">        method.invoke(subject, args);</span><br><span class=\"line\">        </span><br><span class=\"line\">        &#x2F;&#x2F;　　在代理真实对象后我们也可以添加一些自己的操作</span><br><span class=\"line\">        System.out.println(&quot;after invoke&quot;);</span><br><span class=\"line\">        </span><br><span class=\"line\">        return null;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;[![复制代码](java基础知识整理&#x2F;copycode.gif)](javascript:void(0);</span><br></pre></td></tr></table></figure>\n\n\n<p>最后，来看看我们的Client类： </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Client</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public static void main(String[] args)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        &#x2F;&#x2F;    我们要代理的真实对象</span><br><span class=\"line\">        Subject realSubject &#x3D; new RealSubject();</span><br><span class=\"line\"></span><br><span class=\"line\">        &#x2F;&#x2F;    我们要代理哪个真实对象，就将该对象传进去，最后是通过该真实对象来调用其方法的</span><br><span class=\"line\">        InvocationHandler handler &#x3D; new DynamicProxy(realSubject);</span><br><span class=\"line\"></span><br><span class=\"line\">        &#x2F;*</span><br><span class=\"line\">         * 通过Proxy的newProxyInstance方法来创建我们的代理对象，我们来看看其三个参数</span><br><span class=\"line\">         * 第一个参数 handler.getClass().getClassLoader() ，我们这里使用handler这个类的ClassLoader对象来加载我们的代理对象</span><br><span class=\"line\">         * 第二个参数realSubject.getClass().getInterfaces()，我们这里为代理对象提供的接口是真实对象所实行的接口，表示我要代理的是该真实对象，这样我就能调用这组接口中的方法了</span><br><span class=\"line\">         * 第三个参数handler， 我们这里将这个代理对象关联到了上方的 InvocationHandler 这个对象上</span><br><span class=\"line\">         *&#x2F;</span><br><span class=\"line\">        Subject subject &#x3D; (Subject)Proxy.newProxyInstance(handler.getClass().getClassLoader(), realSubject</span><br><span class=\"line\">                .getClass().getInterfaces(), handler);</span><br><span class=\"line\">        </span><br><span class=\"line\">        System.out.println(subject.getClass().getName());</span><br><span class=\"line\">        subject.rent();</span><br><span class=\"line\">        subject.hello(&quot;world&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们先来看看控制台的输出： </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$Proxy0</span><br><span class=\"line\"></span><br><span class=\"line\">before invoke</span><br><span class=\"line\">Method:public abstract void com.xiaoluo.dynamicproxy.Subject.rent()</span><br><span class=\"line\">I want to rent my house</span><br><span class=\"line\">after invoke</span><br><span class=\"line\"></span><br><span class=\"line\">before invoke</span><br><span class=\"line\">Method:public abstract void com.xiaoluo.dynamicproxy.Subject.hello(java.lang.String)</span><br><span class=\"line\">hello: world</span><br><span class=\"line\">after invoke</span><br></pre></td></tr></table></figure>\n<p>当调试的时候，如果把鼠标放在subject 上面，会自动的执行toString()方法，也就是</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">before invoke</span><br><span class=\"line\">Method:public abstract void com.xiaoluo.dynamicproxy.Subject.toString()</span><br><span class=\"line\"> </span><br><span class=\"line\">after invoke</span><br></pre></td></tr></table></figure>\n\n\n<p>我们首先来看看 $Proxy0 这东西，我们看到，这个东西是由 System.out.println(subject.getClass().getName()); 这条语句打印出来的，那么为什么我们返回的这个代理对象的类名是这样的呢？</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Subject subject &#x3D; (Subject)Proxy.newProxyInstance(handler.getClass().getClassLoader(), realSubject</span><br><span class=\"line\">                .getClass().getInterfaces(), handler);</span><br></pre></td></tr></table></figure>\n<p>可能我以为返回的这个代理对象会是Subject类型的对象，或者是InvocationHandler的对象，结果却不是<strong>，首先我们解释一下为什么我们这里可以将其转化为Subject类型的对象？原因就是在newProxyInstance这个方法的第二个参数上，我们给这个代理对象提供了一组什么接口，那么我这个代理对象就会实现了这组接口，这个时候我们当然可以将这个代理对象强制类型转化为这组接口中的任意一个，因为这里的接口是Subject类型，所以就可以将其转化为Subject类型了</strong>。</p>\n<p><strong>同时我们一定要记住，通过 Proxy.newProxyInstance 创建的代理对象是在jvm运行时动态生成的一个对象，它并不是我们的InvocationHandler类型，也不是我们定义的那组接口的类型，而是在运行是动态生成的一个对象，并且命名方式都是这样的形式，以$开头，proxy为中，最后一个数字表示对象的标号</strong>。</p>\n<p>接着我们来看看这两句 </p>\n<p>subject.rent();<br>subject.hello(“world”);</p>\n<p>这里是通过代理对象来调用实现的那种接口中的方法，这个时候程序就会跳转到由这个代理对象关联到的 handler 中的invoke方法去执行，而我们的这个 handler 对象又接受了一个 RealSubject类型的参数，表示我要代理的就是这个真实对象，所以此时就会调用 handler 中的invoke方法去执行： </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public Object invoke(Object object, Method method, Object[] args)</span><br><span class=\"line\">            throws Throwable</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        &#x2F;&#x2F;　　在代理真实对象前我们可以添加一些自己的操作</span><br><span class=\"line\">        System.out.println(&quot;before invoke&quot;);</span><br><span class=\"line\">        </span><br><span class=\"line\">        System.out.println(&quot;Method:&quot; + method);</span><br><span class=\"line\">        </span><br><span class=\"line\">        &#x2F;&#x2F;    当代理对象调用真实对象的方法时，其会自动的跳转到代理对象关联的handler对象的invoke方法来进行调用</span><br><span class=\"line\">        method.invoke(subject, args);</span><br><span class=\"line\">        </span><br><span class=\"line\">        &#x2F;&#x2F;　　在代理真实对象后我们也可以添加一些自己的操作</span><br><span class=\"line\">        System.out.println(&quot;after invoke&quot;);</span><br><span class=\"line\">        </span><br><span class=\"line\">        return null;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>我们看到，在真正通过代理对象来调用真实对象的方法的时候，我们可以在该方法前后添加自己的一些操作，同时我们看到我们的这个 method 对象是这样的：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public abstract void com.xiaoluo.dynamicproxy.Subject.rent()</span><br><span class=\"line\"></span><br><span class=\"line\">public abstract void com.xiaoluo.dynamicproxy.Subject.hello(java.lang.String)</span><br></pre></td></tr></table></figure>\n<p>正好就是我们的Subject接口中的两个方法，这也就证明了当我通过代理对象来调用方法的时候，起实际就是委托由其关联到的 handler 对象的invoke方法中来调用，并不是自己来真实调用，而是通过代理的方式来调用的。</p>\n<p>这就是我们的java动态代理机制</p>\n<h1><span id=\"三-java集合\">三、java集合</span></h1><h3><span id=\"1-java中的集合类结构\">1、java中的集合类结构</span></h3><p><img src=\"/2020/12/24/java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E6%95%B4%E7%90%86/20160624152602394\" alt=\"集合结构\"></p>\n<h3><span id=\"2-list-set和map\">2、List、Set和Map：</span></h3><p>​    List是有序的集合，Set是无序的集合。Map是无序的键值对。</p>\n<h4><span id=\"1集合和数组的区别\">1.集合和数组的区别：</span></h4><p><img src=\"/2020/12/24/java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E6%95%B4%E7%90%86/20180803193134355\" alt=\"这里写图片描述\"></p>\n<h4><span id=\"2collection集合的方法\">2.Collection集合的方法：</span></h4><p><img src=\"/2020/12/24/java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E6%95%B4%E7%90%86/20180803193423722\" alt=\"这里写图片描述\"></p>\n<h3><span id=\"3-hashmap详解\">3、HashMap详解：</span></h3><p>​    HashMap有两个参数影响其性能：初始容量和加载因子。默认初始容量是16，加载因子是0.75。容量是哈希表中桶(Entry数组)的数量，初始容量只是哈希表在创建时的容量。加载因子是哈希表在其容量自动增加之前可以达到多满的一种尺度。当哈希表中的条目数超出了加载因子与当前容量的乘积时，通过调用 rehash 方法将容量翻倍。</p>\n<h3><span id=\"4-arraylist和vector对比\">4、ArrayList和Vector对比：</span></h3><p>​    都是List的实现类。他们都是有序集合，即存储在这两个集合中的元素的位置都是有顺序的，相当于一种动态的数组，我们以后可以按位置索引号取出某个元素<br>​    Vector是线程安全的，也就是说是它的方法之间是线程同步的，而ArrayList是线程序不安全的，它的方法之间是线程不同步的。如果只有一个线程会访问到集合，那最好是使用ArrayList，因为它不考虑线程安全，效率会高些；如果有多个线程会访问到集合，那最好是使用Vector，因为不需要我们自己再去考虑和编写线程安全的代码</p>\n<h3><span id=\"5-arraylist和linkedlist对比\">5、ArrayList和LinkedList对比：</span></h3><p>​    1.ArrayList是实现了基于动态数组的数据结构，LinkedList基于链表的数据结构。<br>​    2.对于随机访问get和set，ArrayList觉得优于LinkedList，因为LinkedList要移动指针。<br>​    3.对于新增和删除操作add和remove，LinedList比较占优势，因为ArrayList要移动数据。</p>\n<h3><span id=\"6-hashset和treeset对比\">6、HashSet和TreeSet对比：</span></h3><p>​    HashSet比TreeSet的性能要好，因为TreeSet需要额外的红黑树算法来维护集合的次序。所以只有当需要保持排序的Set时候，才会使用TreeSet，否则都应该使用HashSet。</p>\n<h3><span id=\"7-hashset和hashmap对比\">7、HashSet和HashMap对比：</span></h3><p>​    都是采用Hash算法来决定元素的存储位置，并通过hash算法来增加集合大小的。其中最大的区别就是，HashSet实现的Set接口，他不允许有重复的值。HashMap实现的是Map接口，里面存储的是键值对，map中不允许存在重复的key。</p>\n<h3><span id=\"8-hashmap和hashtable对比\">8、HashMap和HashTable对比：</span></h3><p>​    HashTable是一个线程安全的Map实现，但HashMap是线程不安全的实现，所以HashMap比HashTable的性能高一些；但是如果有多个线程访问同一个Map对象时候，应该使用HashTable。<br>​    HashTable不允许使用null作为key和value，如果视图把null值放入HashTable中会引发NullPointerException异常，但是HashMap可以使用null作为key或value。null可以作为键，这样的键只有一个；可以有一个或多个键所对应的值为null。当get()方法返回null值时，即可以表示 HashMap中没有该键，也可以表示该键所对应的值为null。因此，在HashMap中不能由get()方法来判断HashMap中是否存在某个键，而应该用containsKey()方法来判断。</p>\n<h2><span id=\"各集合对比\">各集合对比：</span></h2><p><img src=\"/2020/12/24/java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E6%95%B4%E7%90%86/20160624152704286\" alt=\"集合对比\"></p>\n","site":{"data":{}},"excerpt":"<h1 id=\"一、面向对象概念\"><a href=\"#一、面向对象概念\" class=\"headerlink\" title=\"一、面向对象概念\"></a>一、面向对象概念</h1><h3 id=\"1-类与对象\"><a href=\"#1-类与对象\" class=\"headerlink\" title=\"1. 类与对象\"></a>1. 类与对象</h3><h5 id=\"1-1-面向过程和面向对象\"><a href=\"#1-1-面向过程和面向对象\" class=\"headerlink\" title=\"1.1 面向过程和面向对象\"></a>1.1 面向过程和面向对象</h5><p> 面向过程 （Procedural Programming）侧重流程<br> 面向对象 （Object-Oriented Programming ）(OOP) 侧重功能</p>","more":"<h5 id=\"1-2-类和对象的概念、关系、组成\"><a href=\"#1-2-类和对象的概念、关系、组成\" class=\"headerlink\" title=\"1.2 类和对象的概念、关系、组成\"></a>1.2 类和对象的概念、关系、组成</h5><ul>\n<li><p>概念：</p>\n<ul>\n<li><strong>类</strong>：类是一个模板，它描述一组具有相 同属性和方法的对象</li>\n<li><strong>对象</strong>：最小子系统，有属性和方法。</li>\n</ul>\n</li>\n<li><p>关系：类是对象的抽象，对象是类的实例</p>\n</li>\n<li><p>组成：</p>\n<ul>\n<li>成员变量（Attributes）</li>\n<li>构造方法（Constructor） 一个类可以有多个构 造方法</li>\n<li>成员方法（Methods）</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"1-3-构造函数，对象的初始化、使用\"><a href=\"#1-3-构造函数，对象的初始化、使用\" class=\"headerlink\" title=\"1.3 构造函数，对象的初始化、使用\"></a>1.3 构造函数，对象的初始化、使用</h5><ul>\n<li><p>构造方法：在创建一个对象的时候，至少要调用一个构造方法。 构造方法的名称必须与类同名，一个类可以有多个构 造方法。</p>\n</li>\n<li><p>对象初始化：</p>\n<ul>\n<li>声明：声明一个对象，包括对象名称和对象类型。</li>\n<li>实例化：使用关键字new来创建一个对象。</li>\n<li>初始化：使用new创建对象时，会调用构造方法初始化对象</li>\n</ul>\n</li>\n<li><p>对象的使用：</p>\n</li>\n</ul>\n  <figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 实例化对象 */</span> ObjectReference = <span class=\"keyword\">new</span> Constructor();</span><br><span class=\"line\"><span class=\"comment\">/* 访问成员变量 */</span> ObjectReference.variableName; </span><br><span class=\"line\"><span class=\"comment\">/* 访问成员方法 */</span> ObjectReference.MethodName();</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-封装、继承、多态\"><a href=\"#2-封装、继承、多态\" class=\"headerlink\" title=\"2.  封装、继承、多态\"></a>2.  封装、继承、多态</h3><h5 id=\"2-1-封装-Encapsulation\"><a href=\"#2-1-封装-Encapsulation\" class=\"headerlink\" title=\"2.1  封装 Encapsulation\"></a>2.1  封装 Encapsulation</h5><p><strong>好处：</strong><br> 从设计上讲，为了实现模块化<br> 从使用上讲，减少了复杂度<br> 良好的封装能够减少代码的耦合</p>\n<p><strong>实现：</strong></p>\n<p><img src=\"/2020/12/24/java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E6%95%B4%E7%90%86/3775272-55dfd603d6e9b95c.jpg\" alt=\"img\"></p>\n<p> private: 只能被该类的对象访问。<br> default: 即不加任何访问修饰符，只允许在同一个包中进行访问。<br> protected: 只能被类本身的方法及子类访问，即使子类在不同的包中也可以访问。<br> public： 不仅可以跨类访问，而且允许跨包（package）访问。</p>\n<p>一个源文件中只能有一个public类;<br> 源文件的名称应该和public类的类名保持一致;<br> 如果一个类定义在某个包中，那么package语句应该在源文件的首行;</p>\n<h5 id=\"2-2-继承-Heritage\"><a href=\"#2-2-继承-Heritage\" class=\"headerlink\" title=\"2.2 继承 Heritage\"></a>2.2 继承 Heritage</h5><p>继承是一种类和类之间的关系，是一种“is a kind of”的关系。<br> <strong>好处：</strong><br> 易于修改，容易扩展</p>\n<p><strong>实现：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Parent</span></span>&#123;   … &#125;  </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Child</span> <span class=\"keyword\">extends</span> <span class=\"title\">Parent</span> </span>&#123;   … &#125; </span><br></pre></td></tr></table></figure>\n<p>java中的继承是单继承的，一个子类只能继承一个父类，使用extends关键字<br> 子类继承了父类中所有非private成员方法（除了构造方法）和所有非private的成员变量。</p>\n<p><strong>super：</strong><br> 对于构造函数而言，它只能够被调用，而不能被继承。<br> 当我们需要调用父类的构造方法时，只需使用super()即可</p>\n<p><strong>重写（覆盖） override：</strong><br> 子类中有和父类中可访问（可继承到子类）的同名&amp;&amp;同返 回类型&amp;&amp;同参数表的方法，就会重写（覆盖）从父类继承来 的方法。</p>\n<p><strong>重载 overload：</strong><br> 被重载的方法必须改变参数列表(参 数个数或类型或顺序不一样)；<br> 被重载的方法可以改变返回类型；<br> 被重载的方法可以改变访问修饰符；<br> final 关键字声明类可以把类定义为不能继承的，即最终类； 或者用于修饰方法，该方法不能被子类重写：</p>\n<p><strong>向上转型</strong><br> 上转型对象可以操作被子类继承和重写的方法，但不能操作子类新增的成员变量和方法。</p>\n<h5 id=\"2-3-多态-Polymorphism\"><a href=\"#2-3-多态-Polymorphism\" class=\"headerlink\" title=\"2.3 多态 Polymorphism\"></a>2.3 多态 Polymorphism</h5><p><strong>多态就是指一种名称定义不同的方法</strong></p>\n<p><strong>分类</strong><br> 编译时多态 - 方法的重载（overload）<br> 运行时多态 - 程序中定义的引用变量所指向的具体类型和通过该引用变量发出的方法调用在编程 时并不确定，而是在程序运行期间才确定，即一个引用变量倒底会指向哪个类的实 例对象，该引用变量发出的方法调用到底是哪个类中实现的方法，必须在由程序运 行期间才能决定。</p>\n<p><strong>实现方法（继承、接口）</strong><br> 以继承实现多态 -向上转型、方法重写，以一般代表特殊，以特殊代替一般<br> 以接口实现多态</p>\n<p><strong>如何使用</strong><br> 可以在方法的参数中传入其父类（或接口）类型，在运行时会根据实际的运行时类型来 在方法中进行相应的操作。<br> 多态用于返回值，可以在方法的返回值类型上使用其实际返回值的父（接口）类型，不关心返回值的实际类型。</p>\n<h3 id=\"3-抽象类和抽象方法，静态方法和静态变量\"><a href=\"#3-抽象类和抽象方法，静态方法和静态变量\" class=\"headerlink\" title=\"3.抽象类和抽象方法，静态方法和静态变量\"></a>3.抽象类和抽象方法，静态方法和静态变量</h3><p>具体类：可以被实例化的类<br> 抽象类：不能被实例化的类<br> 定义抽象类的基本目的是提供合适的超类， 使其他类可以继承它，以实现共享。</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title\">Form</span>&#123;   …   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">draw</span>(<span class=\"params\"></span>)</span>; &#125; </span><br></pre></td></tr></table></figure>\n<h3 id=\"4-接口\"><a href=\"#4-接口\" class=\"headerlink\" title=\"4. 接口\"></a>4. 接口</h3><p><strong>定义</strong></p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"keyword\">public</span>] <span class=\"class\"><span class=\"keyword\">interface</span> 接口名 [<span class=\"keyword\">extends</span> 其他的接口名列表] </span>&#123;</span><br><span class=\"line\">    [<span class=\"keyword\">public</span> <span class=\"built_in\">static</span> <span class=\"keyword\">final</span>] 数据类型 常量名 = 值;</span><br><span class=\"line\">    [<span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span>] 返回类型 方法名（形参列表）;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>实现</strong></p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[访问修饰符] <span class=\"class\"><span class=\"keyword\">class</span> 类名 [<span class=\"keyword\">extends</span> 超类名] <span class=\"keyword\">implements</span> 接口名列表 </span>&#123;</span><br><span class=\"line\">        类体 </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>特性</strong><br> 接口中可以含有变量，变量会被隐式的指定为 public static final（用 private 修饰 会报编译错误）<br> 接口中的方法会被隐式的指定为 public abstract</p>\n<p><strong>功能</strong></p>\n<ol>\n<li>接口提供了一组功能的命名集合</li>\n<li>接口定义了不同类交互的标准<br> 实现了“多继承” ；分离了方法的声明和方法的实现</li>\n</ol>\n<p><strong>接口 v.s. 类</strong><br> 接口不能用于实例化对象。<br> 接口没有构造方法。<br> 接口中所有的方法必须是抽象方法。<br> 接口只能包含static final成员变量。<br> 接口不是被类继承了，而是要被类实现。<br> 接口支持多继承。</p>\n<p>抽象类是对类抽象，而接口是对行为的抽象<br> 抽象类是自底向上抽象而来的，接口是自顶向下设计出来的</p>\n<p><strong>接口名作为类型</strong><br> 可以把使用实现了某一接口的类创建的对象的引用赋给该接口声明的接口变量， 那么该接口变量就可以调用被类实现的接口的方法。</p>\n<h1 id=\"二、反射及动态代理\"><a href=\"#二、反射及动态代理\" class=\"headerlink\" title=\"二、反射及动态代理\"></a>二、反射及动态代理</h1><p>反射 一般使用 Class.forName()方法;</p>\n<p>动态代理就是实现InvocationHandler 接口；</p>\n<p>要想理解反射的原理，首先要了解什么是类型信息。Java让我们在运行时识别对象和类的信息，主要有2种方式：一种是传统的RTTI，它假定我们在编译时已经知道了所有的类型信息；另一种是反射机制，它允许我们在运行时发现和使用类的信息。</p>\n<h3 id=\"1、Class对象\"><a href=\"#1、Class对象\" class=\"headerlink\" title=\"1、Class对象\"></a>1、Class对象</h3><p>　　理解RTTI在Java中的工作原理，首先需要知道类型信息在运行时是如何表示的，这是由Class对象来完成的，它包含了与类有关的信息。Class对象就是用来创建所有“常规”对象的，Java使用Class对象来执行RTTI，即使你正在执行的是类似类型转换这样的操作。</p>\n<p>　　每个类都会产生一个对应的Class对象，也就是保存在.class文件。所有类都是在对其第一次使用时，动态加载到JVM的，当程序创建一个对类的静态成员的引用时，就会加载这个类。Class对象仅在需要的时候才会加载，static初始化是在类加载时进行的。 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class TestMain &#123;</span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        System.out.println(XYZ.name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class XYZ &#123;</span><br><span class=\"line\">    public static String name &#x3D; &quot;luoxn28&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">    static &#123;</span><br><span class=\"line\">        System.out.println(&quot;xyz静态块&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public XYZ() &#123;</span><br><span class=\"line\">        System.out.println(&quot;xyz构造了&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出结果为：</p>\n<p><img src=\"/2020/12/24/java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E6%95%B4%E7%90%86/772134-20160720003120122-551868817.png\" alt=\"img\"></p>\n<p>　　类加载器首先会检查这个类的Class对象是否已被加载过，如果尚未加载，默认的类加载器就会根据类名查找对应的.class文件。</p>\n<p>　　想在运行时使用类型信息，必须获取对象(比如类Base对象)的Class对象的引用，使用功能Class.forName(“Base”)可以实现该目的，或者使用base.class。注意，有一点很有趣，使用功能”.class”来创建Class对象的引用时，不会自动初始化该Class对象，使用forName()会自动初始化该Class对象。为了使用类而做的准备工作一般有以下3个步骤：</p>\n<ul>\n<li>加载：由类加载器完成，找到对应的字节码，创建一个Class对象</li>\n<li>链接：验证类中的字节码，为静态域分配空间</li>\n<li>初始化：如果该类有超类，则对其初始化，执行静态初始化器和静态初始化块 </li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Base &#123;</span><br><span class=\"line\">    static int num &#x3D; 1;</span><br><span class=\"line\">    </span><br><span class=\"line\">    static &#123;</span><br><span class=\"line\">        System.out.println(&quot;Base &quot; + num);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">public class Main &#123;</span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        &#x2F;&#x2F; 不会初始化静态块</span><br><span class=\"line\">        Class clazz1 &#x3D; Base.class;</span><br><span class=\"line\">        System.out.println(&quot;------&quot;);</span><br><span class=\"line\">        &#x2F;&#x2F; 会初始化</span><br><span class=\"line\">        Class clazz2 &#x3D; Class.forName(&quot;zzz.Base&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"2、类型转换前先做检查\"><a href=\"#2、类型转换前先做检查\" class=\"headerlink\" title=\"2、类型转换前先做检查\"></a>2、类型转换前先做检查</h3><p>　　编译器将检查类型向下转型是否合法，如果不合法将抛出异常。向下转换类型前，可以使用instanceof判断。 </p>\n<p><a href=\"javascript:void(0);\"><img src=\"/2020/12/24/java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E6%95%B4%E7%90%86/copycode.gif\" alt=\"复制代码\"></a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Base &#123; &#125;</span><br><span class=\"line\">class Derived extends Base &#123; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">public class Main &#123;</span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        Base base &#x3D; new Derived();</span><br><span class=\"line\">        if (base instanceof Derived) &#123;</span><br><span class=\"line\">            &#x2F;&#x2F; 这里可以向下转换了</span><br><span class=\"line\">            System.out.println(&quot;ok&quot;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        else &#123;</span><br><span class=\"line\">            System.out.println(&quot;not ok&quot;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"3、反射：运行时类信息\"><a href=\"#3、反射：运行时类信息\" class=\"headerlink\" title=\"3、反射：运行时类信息\"></a>3、反射：运行时类信息</h3><p>　　如果不知道某个对象的确切类型，RTTI可以告诉你，但是有一个前提：这个类型在编译时必须已知，这样才能使用RTTI来识别它。Class类与java.lang.reflect类库一起对反射进行了支持，该类库包含Field、Method和Constructor类，这些类的对象由JVM在启动时创建，用以表示未知类里对应的成员。这样的话就可以使用Contructor创建新的对象，用get()和set()方法获取和修改类中与Field对象关联的字段，用invoke()方法调用与Method对象关联的方法。另外，还可以调用getFields()、getMethods()和getConstructors()等许多便利的方法，以返回表示字段、方法、以及构造器对象的数组，这样，对象信息可以在运行时被完全确定下来，而在编译时不需要知道关于类的任何事情。</p>\n<p>　　反射机制并没有什么神奇之处，当通过反射与一个未知类型的对象打交道时，JVM只是简单地检查这个对象，看它属于哪个特定的类。因此，那个类的<code>.class</code>对于JVM来说必须是可获取的，要么在本地机器上，要么从网络获取。所以对于RTTI和反射之间的真正区别只在于：</p>\n<ul>\n<li>RTTI，编译器在编译时打开和检查.class文件</li>\n<li>反射，运行时打开和检查.class文件 </li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Person implements Serializable &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    private String name;</span><br><span class=\"line\">    private int age;</span><br><span class=\"line\">&#x2F;&#x2F; get&#x2F;set方法</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">public static void main(String[] args) &#123;</span><br><span class=\"line\">    Person person &#x3D; new Person(&quot;luoxn28&quot;, 23);</span><br><span class=\"line\">    Class clazz &#x3D; person.getClass();</span><br><span class=\"line\"></span><br><span class=\"line\">    Field[] fields &#x3D; clazz.getDeclaredFields();</span><br><span class=\"line\">    for (Field field : fields) &#123;</span><br><span class=\"line\">        String key &#x3D; field.getName();</span><br><span class=\"line\">        PropertyDescriptor descriptor &#x3D; new PropertyDescriptor(key, clazz);</span><br><span class=\"line\">        Method method &#x3D; descriptor.getReadMethod();</span><br><span class=\"line\">        Object value &#x3D; method.invoke(person);</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(key + &quot;:&quot; + value);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>　　以上通过getReadMethod()方法调用类的get函数，可以通过getWriteMethod()方法来调用类的set方法。通常来说，我们不需要使用反射工具，但是它们在创建动态代码会更有用，反射在Java中用来支持其他特性的，例如对象的序列化和JavaBean等。</p>\n<h3 id=\"4、动态代理\"><a href=\"#4、动态代理\" class=\"headerlink\" title=\"4、动态代理\"></a>4、动态代理</h3><p>　　代理模式是为了提供额外或不同的操作，而插入的用来替代”实际”对象的对象，这些操作涉及到与”实际”对象的通信，因此代理通常充当中间人角色。Java的动态代理比代理的思想更前进了一步，它可以动态地创建并代理并动态地处理对所代理方法的调用。在动态代理上所做的所有调用都会被重定向到单一的<strong>调用处理器</strong>上，它的工作是揭示调用的类型并确定相应的策略。 </p>\n<p><strong>学习Spring的时候，我们知道Spring主要有两大思想，一个是IoC，另一个就是AOP，对于IoC，它利用的是反射机制，依赖注入就不用多说了，而对于Spring的核心AOP来说，使用了动态代理，其实底层也是反射。我们不但要知道怎么通过AOP来满足的我们的功能，我们更需要学习的是其底层是怎么样的一个原理，而AOP的原理就是java的动态代理机制，所以本篇随笔就是对java的动态机制进行一个回顾。</strong></p>\n<p>在java的动态代理机制中，有两个重要的类或接口，一个是 InvocationHandler(Interface)、另一个则是 Proxy(Class)，这一个类和接口是实现我们动态代理所必须用到的。首先我们先来看看java的API帮助文档是怎么样对这两个类进行描述的：</p>\n<p>InvocationHandler:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">InvocationHandler is the interface implemented by the invocation handler of a proxy instance. </span><br><span class=\"line\"></span><br><span class=\"line\">Each proxy instance has an associated invocation handler. When a method is invoked on a proxy instance, the method invocation is encoded and dispatched to the invoke method of its invocation handler.</span><br></pre></td></tr></table></figure>\n<p>每一个动态代理类都必须要实现InvocationHandler这个接口，并且每个代理类的实例都关联到了一个handler，当我们通过代理对象调用一个方法的时候，这个方法的调用就会被转发为由InvocationHandler这个接口的 invoke 方法来进行调用。我们来看看InvocationHandler这个接口的唯一一个方法 invoke 方法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Object invoke(Object proxy, Method method, Object[] args) throws Throwable</span><br></pre></td></tr></table></figure>\n<p>我们看到这个方法一共接受三个参数，那么这三个参数分别代表什么呢？</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Object invoke(Object proxy, Method method, Object[] args) throws Throwable</span><br><span class=\"line\"></span><br><span class=\"line\">proxy:　　指代我们所代理的那个真实对象</span><br><span class=\"line\">method:　　指代的是我们所要调用真实对象的某个方法的Method对象</span><br><span class=\"line\">args:　　指代的是调用真实对象某个方法时接受的参数</span><br></pre></td></tr></table></figure>\n<p>如果不是很明白，等下通过一个实例会对这几个参数进行更深的讲解。</p>\n<p>接下来我们来看看Proxy这个类：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Proxy provides static methods for creating dynamic proxy classes and instances, and it is also the superclass of all dynamic proxy classes created by those methods. </span><br></pre></td></tr></table></figure>\n<p>Proxy这个类的作用就是用来动态创建一个代理对象的类，它提供了许多的方法，但是我们用的最多的就是 newProxyInstance 这个方法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static Object newProxyInstance(ClassLoader loader, Class&lt;?&gt;[] interfaces,  InvocationHandler h)  throws IllegalArgumentException</span><br><span class=\"line\">Returns an instance of a proxy class for the specified interfaces that dispatches method invocations to the specified invocation handler.</span><br></pre></td></tr></table></figure>\n<p>这个方法的作用就是得到一个动态的代理对象，其接收三个参数，我们来看看这三个参数所代表的含义： </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static Object newProxyInstance(ClassLoader loader, Class&lt;?&gt;[] interfaces, InvocationHandler h) throws IllegalArgumentException</span><br><span class=\"line\"></span><br><span class=\"line\">loader:　　一个ClassLoader对象，定义了由哪个ClassLoader对象来对生成的代理对象进行加载</span><br><span class=\"line\"></span><br><span class=\"line\">interfaces:　　一个Interface对象的数组，表示的是我将要给我需要代理的对象提供一组什么接口，如果我提供了一组接口给它，那么这个代理对象就宣称实现了该接口(多态)，这样我就能调用这组接口中的方法了</span><br><span class=\"line\"></span><br><span class=\"line\">h:　　一个InvocationHandler对象，表示的是当我这个动态代理对象在调用方法的时候，会关联到哪一个InvocationHandler对象上</span><br></pre></td></tr></table></figure>\n<p>好了，在介绍完这两个接口(类)以后，我们来通过一个实例来看看我们的动态代理模式是什么样的：</p>\n<p>首先我们定义了一个Subject类型的接口，为其声明了两个方法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public interface Subject</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public void rent();</span><br><span class=\"line\">    </span><br><span class=\"line\">    public void hello(String str);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>接着，定义了一个类来实现这个接口，这个类就是我们的真实对象，RealSubject类：  </p>\n<p>下一步，我们就要定义一个动态代理类了，前面说个，每一个动态代理类都必须要实现 InvocationHandler 这个接口，因此我们这个动态代理类也不例外： </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class DynamicProxy implements InvocationHandler</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    &#x2F;&#x2F;　这个就是我们要代理的真实对象</span><br><span class=\"line\">    private Object subject;</span><br><span class=\"line\">    </span><br><span class=\"line\">    &#x2F;&#x2F;    构造方法，给我们要代理的真实对象赋初值</span><br><span class=\"line\">    public DynamicProxy(Object subject)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        this.subject &#x3D; subject;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public Object invoke(Object object, Method method, Object[] args)</span><br><span class=\"line\">            throws Throwable</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        &#x2F;&#x2F;　　在代理真实对象前我们可以添加一些自己的操作</span><br><span class=\"line\">        System.out.println(&quot;before invoke&quot;);</span><br><span class=\"line\">        </span><br><span class=\"line\">        System.out.println(&quot;Method:&quot; + method);</span><br><span class=\"line\">        </span><br><span class=\"line\">        &#x2F;&#x2F;    当代理对象调用真实对象的方法时，其会自动的跳转到代理对象关联的handler对象的invoke方法来进行调用</span><br><span class=\"line\">        method.invoke(subject, args);</span><br><span class=\"line\">        </span><br><span class=\"line\">        &#x2F;&#x2F;　　在代理真实对象后我们也可以添加一些自己的操作</span><br><span class=\"line\">        System.out.println(&quot;after invoke&quot;);</span><br><span class=\"line\">        </span><br><span class=\"line\">        return null;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;[![复制代码](java基础知识整理&#x2F;copycode.gif)](javascript:void(0);</span><br></pre></td></tr></table></figure>\n\n\n<p>最后，来看看我们的Client类： </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Client</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public static void main(String[] args)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        &#x2F;&#x2F;    我们要代理的真实对象</span><br><span class=\"line\">        Subject realSubject &#x3D; new RealSubject();</span><br><span class=\"line\"></span><br><span class=\"line\">        &#x2F;&#x2F;    我们要代理哪个真实对象，就将该对象传进去，最后是通过该真实对象来调用其方法的</span><br><span class=\"line\">        InvocationHandler handler &#x3D; new DynamicProxy(realSubject);</span><br><span class=\"line\"></span><br><span class=\"line\">        &#x2F;*</span><br><span class=\"line\">         * 通过Proxy的newProxyInstance方法来创建我们的代理对象，我们来看看其三个参数</span><br><span class=\"line\">         * 第一个参数 handler.getClass().getClassLoader() ，我们这里使用handler这个类的ClassLoader对象来加载我们的代理对象</span><br><span class=\"line\">         * 第二个参数realSubject.getClass().getInterfaces()，我们这里为代理对象提供的接口是真实对象所实行的接口，表示我要代理的是该真实对象，这样我就能调用这组接口中的方法了</span><br><span class=\"line\">         * 第三个参数handler， 我们这里将这个代理对象关联到了上方的 InvocationHandler 这个对象上</span><br><span class=\"line\">         *&#x2F;</span><br><span class=\"line\">        Subject subject &#x3D; (Subject)Proxy.newProxyInstance(handler.getClass().getClassLoader(), realSubject</span><br><span class=\"line\">                .getClass().getInterfaces(), handler);</span><br><span class=\"line\">        </span><br><span class=\"line\">        System.out.println(subject.getClass().getName());</span><br><span class=\"line\">        subject.rent();</span><br><span class=\"line\">        subject.hello(&quot;world&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们先来看看控制台的输出： </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$Proxy0</span><br><span class=\"line\"></span><br><span class=\"line\">before invoke</span><br><span class=\"line\">Method:public abstract void com.xiaoluo.dynamicproxy.Subject.rent()</span><br><span class=\"line\">I want to rent my house</span><br><span class=\"line\">after invoke</span><br><span class=\"line\"></span><br><span class=\"line\">before invoke</span><br><span class=\"line\">Method:public abstract void com.xiaoluo.dynamicproxy.Subject.hello(java.lang.String)</span><br><span class=\"line\">hello: world</span><br><span class=\"line\">after invoke</span><br></pre></td></tr></table></figure>\n<p>当调试的时候，如果把鼠标放在subject 上面，会自动的执行toString()方法，也就是</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">before invoke</span><br><span class=\"line\">Method:public abstract void com.xiaoluo.dynamicproxy.Subject.toString()</span><br><span class=\"line\"> </span><br><span class=\"line\">after invoke</span><br></pre></td></tr></table></figure>\n\n\n<p>我们首先来看看 $Proxy0 这东西，我们看到，这个东西是由 System.out.println(subject.getClass().getName()); 这条语句打印出来的，那么为什么我们返回的这个代理对象的类名是这样的呢？</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Subject subject &#x3D; (Subject)Proxy.newProxyInstance(handler.getClass().getClassLoader(), realSubject</span><br><span class=\"line\">                .getClass().getInterfaces(), handler);</span><br></pre></td></tr></table></figure>\n<p>可能我以为返回的这个代理对象会是Subject类型的对象，或者是InvocationHandler的对象，结果却不是<strong>，首先我们解释一下为什么我们这里可以将其转化为Subject类型的对象？原因就是在newProxyInstance这个方法的第二个参数上，我们给这个代理对象提供了一组什么接口，那么我这个代理对象就会实现了这组接口，这个时候我们当然可以将这个代理对象强制类型转化为这组接口中的任意一个，因为这里的接口是Subject类型，所以就可以将其转化为Subject类型了</strong>。</p>\n<p><strong>同时我们一定要记住，通过 Proxy.newProxyInstance 创建的代理对象是在jvm运行时动态生成的一个对象，它并不是我们的InvocationHandler类型，也不是我们定义的那组接口的类型，而是在运行是动态生成的一个对象，并且命名方式都是这样的形式，以$开头，proxy为中，最后一个数字表示对象的标号</strong>。</p>\n<p>接着我们来看看这两句 </p>\n<p>subject.rent();<br>subject.hello(“world”);</p>\n<p>这里是通过代理对象来调用实现的那种接口中的方法，这个时候程序就会跳转到由这个代理对象关联到的 handler 中的invoke方法去执行，而我们的这个 handler 对象又接受了一个 RealSubject类型的参数，表示我要代理的就是这个真实对象，所以此时就会调用 handler 中的invoke方法去执行： </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public Object invoke(Object object, Method method, Object[] args)</span><br><span class=\"line\">            throws Throwable</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        &#x2F;&#x2F;　　在代理真实对象前我们可以添加一些自己的操作</span><br><span class=\"line\">        System.out.println(&quot;before invoke&quot;);</span><br><span class=\"line\">        </span><br><span class=\"line\">        System.out.println(&quot;Method:&quot; + method);</span><br><span class=\"line\">        </span><br><span class=\"line\">        &#x2F;&#x2F;    当代理对象调用真实对象的方法时，其会自动的跳转到代理对象关联的handler对象的invoke方法来进行调用</span><br><span class=\"line\">        method.invoke(subject, args);</span><br><span class=\"line\">        </span><br><span class=\"line\">        &#x2F;&#x2F;　　在代理真实对象后我们也可以添加一些自己的操作</span><br><span class=\"line\">        System.out.println(&quot;after invoke&quot;);</span><br><span class=\"line\">        </span><br><span class=\"line\">        return null;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>我们看到，在真正通过代理对象来调用真实对象的方法的时候，我们可以在该方法前后添加自己的一些操作，同时我们看到我们的这个 method 对象是这样的：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public abstract void com.xiaoluo.dynamicproxy.Subject.rent()</span><br><span class=\"line\"></span><br><span class=\"line\">public abstract void com.xiaoluo.dynamicproxy.Subject.hello(java.lang.String)</span><br></pre></td></tr></table></figure>\n<p>正好就是我们的Subject接口中的两个方法，这也就证明了当我通过代理对象来调用方法的时候，起实际就是委托由其关联到的 handler 对象的invoke方法中来调用，并不是自己来真实调用，而是通过代理的方式来调用的。</p>\n<p>这就是我们的java动态代理机制</p>\n<h1 id=\"三、java集合\"><a href=\"#三、java集合\" class=\"headerlink\" title=\"三、java集合\"></a>三、java集合</h1><h3 id=\"1、java中的集合类结构\"><a href=\"#1、java中的集合类结构\" class=\"headerlink\" title=\"1、java中的集合类结构\"></a>1、java中的集合类结构</h3><p><img src=\"/2020/12/24/java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E6%95%B4%E7%90%86/20160624152602394\" alt=\"集合结构\"></p>\n<h3 id=\"2、List、Set和Map：\"><a href=\"#2、List、Set和Map：\" class=\"headerlink\" title=\"2、List、Set和Map：\"></a>2、List、Set和Map：</h3><p>​    List是有序的集合，Set是无序的集合。Map是无序的键值对。</p>\n<h4 id=\"1-集合和数组的区别：\"><a href=\"#1-集合和数组的区别：\" class=\"headerlink\" title=\"1.集合和数组的区别：\"></a>1.集合和数组的区别：</h4><p><img src=\"/2020/12/24/java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E6%95%B4%E7%90%86/20180803193134355\" alt=\"这里写图片描述\"></p>\n<h4 id=\"2-Collection集合的方法：\"><a href=\"#2-Collection集合的方法：\" class=\"headerlink\" title=\"2.Collection集合的方法：\"></a>2.Collection集合的方法：</h4><p><img src=\"/2020/12/24/java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E6%95%B4%E7%90%86/20180803193423722\" alt=\"这里写图片描述\"></p>\n<h3 id=\"3、HashMap详解：\"><a href=\"#3、HashMap详解：\" class=\"headerlink\" title=\"3、HashMap详解：\"></a>3、HashMap详解：</h3><p>​    HashMap有两个参数影响其性能：初始容量和加载因子。默认初始容量是16，加载因子是0.75。容量是哈希表中桶(Entry数组)的数量，初始容量只是哈希表在创建时的容量。加载因子是哈希表在其容量自动增加之前可以达到多满的一种尺度。当哈希表中的条目数超出了加载因子与当前容量的乘积时，通过调用 rehash 方法将容量翻倍。</p>\n<h3 id=\"4、ArrayList和Vector对比：\"><a href=\"#4、ArrayList和Vector对比：\" class=\"headerlink\" title=\"4、ArrayList和Vector对比：\"></a>4、ArrayList和Vector对比：</h3><p>​    都是List的实现类。他们都是有序集合，即存储在这两个集合中的元素的位置都是有顺序的，相当于一种动态的数组，我们以后可以按位置索引号取出某个元素<br>​    Vector是线程安全的，也就是说是它的方法之间是线程同步的，而ArrayList是线程序不安全的，它的方法之间是线程不同步的。如果只有一个线程会访问到集合，那最好是使用ArrayList，因为它不考虑线程安全，效率会高些；如果有多个线程会访问到集合，那最好是使用Vector，因为不需要我们自己再去考虑和编写线程安全的代码</p>\n<h3 id=\"5、ArrayList和LinkedList对比：\"><a href=\"#5、ArrayList和LinkedList对比：\" class=\"headerlink\" title=\"5、ArrayList和LinkedList对比：\"></a>5、ArrayList和LinkedList对比：</h3><p>​    1.ArrayList是实现了基于动态数组的数据结构，LinkedList基于链表的数据结构。<br>​    2.对于随机访问get和set，ArrayList觉得优于LinkedList，因为LinkedList要移动指针。<br>​    3.对于新增和删除操作add和remove，LinedList比较占优势，因为ArrayList要移动数据。</p>\n<h3 id=\"6、HashSet和TreeSet对比：\"><a href=\"#6、HashSet和TreeSet对比：\" class=\"headerlink\" title=\"6、HashSet和TreeSet对比：\"></a>6、HashSet和TreeSet对比：</h3><p>​    HashSet比TreeSet的性能要好，因为TreeSet需要额外的红黑树算法来维护集合的次序。所以只有当需要保持排序的Set时候，才会使用TreeSet，否则都应该使用HashSet。</p>\n<h3 id=\"7、HashSet和HashMap对比：\"><a href=\"#7、HashSet和HashMap对比：\" class=\"headerlink\" title=\"7、HashSet和HashMap对比：\"></a>7、HashSet和HashMap对比：</h3><p>​    都是采用Hash算法来决定元素的存储位置，并通过hash算法来增加集合大小的。其中最大的区别就是，HashSet实现的Set接口，他不允许有重复的值。HashMap实现的是Map接口，里面存储的是键值对，map中不允许存在重复的key。</p>\n<h3 id=\"8、HashMap和HashTable对比：\"><a href=\"#8、HashMap和HashTable对比：\" class=\"headerlink\" title=\"8、HashMap和HashTable对比：\"></a>8、HashMap和HashTable对比：</h3><p>​    HashTable是一个线程安全的Map实现，但HashMap是线程不安全的实现，所以HashMap比HashTable的性能高一些；但是如果有多个线程访问同一个Map对象时候，应该使用HashTable。<br>​    HashTable不允许使用null作为key和value，如果视图把null值放入HashTable中会引发NullPointerException异常，但是HashMap可以使用null作为key或value。null可以作为键，这样的键只有一个；可以有一个或多个键所对应的值为null。当get()方法返回null值时，即可以表示 HashMap中没有该键，也可以表示该键所对应的值为null。因此，在HashMap中不能由get()方法来判断HashMap中是否存在某个键，而应该用containsKey()方法来判断。</p>\n<h2 id=\"各集合对比：\"><a href=\"#各集合对比：\" class=\"headerlink\" title=\"各集合对比：\"></a>各集合对比：</h2><p><img src=\"/2020/12/24/java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E6%95%B4%E7%90%86/20160624152704286\" alt=\"集合对比\"></p>"},{"title":"dataworks命令","date":"2020-12-24T14:27:32.000Z","_content":"\n<!-- toc -->\n\n[TOC]\n\n# 一、DDL语句\n\n```sql\n\nalter table table_name1 rename to table_name2;   -- 修改表名\nalter table table_name1 changeowner to 'ALIYUN$xxx@aliyun.com'; --修改表的所有人\nalter table table_name1 set COMMENT 'tbl comment'; --修改表注释\nALTER TABLE sale_detail CHANGE COLUMN customer_name RENAME TO customer; --修改字段名 \nALTER TABLE sale_detail CHANGE COLUMN customer COMMENT 'customer';--修改字段注释\nALTER TABLE table_name CHANGE COLUMN old_col_name new_col_name column_type COMMENT 'column_comment';--同时修改列名和注释\nALTER TABLE table_name ADD COLUMNS (col_name1 type1 comment 'XXX',col_name2 type2 comment 'XXX');--添加列和注释\n\n```\n\n# 二、分库分表采集\n\n```xml\n{\n    \"type\": \"job\",\n    \"steps\": [\n        {\n            \"stepType\": \"mysql\",\n            \"parameter\": {\n                \"datasource\": \"mysql_frog_m1_frog_001\",\n                \"column\": [\n                    \"seller_account_id\",\n                    \"reply_guard_flag\",\n                    \"topping_flag\",\n                    \"guard_rule\",\n                    \"plat_form\",\n                    \"feature\",\n                    \"remind_status\",\n                    \"status\",\n                    \"gmt_modified\",\n                    \"gmt_create\",\n                    \"score\",\n                    \"deduction\",\n                    \"buyer_abnormal_emotion\",\n                    \"flag\",\n                    \"msg_alarm_type\",\n                    \"rule_name\",\n                    \"rule_id\",\n                    \"msg_time\",\n                    \"msg_id\",\n                    \"msg_content\",\n                    \"context_id\",\n                    \"buyer_nick\",\n                    \"sub_nick\",\n                    \"main_account\",\n                    \"shop_id_hash\",\n                    \"shop_id\",\n                    \"id\"\n                ],\n                \"connection\": [\n                    {\n                        \"datasource\": \"mysql_frog_m1_frog_001\",\n                        \"table\": [\n                            \"quality_guard_market_alarm_record_[0-127]\"\n                        ]\n                    }\n                ],\n                \"where\": \" date_format(msg_time,'%Y%m%d')='${bizdate}'    \",\n                \"splitPk\": \"id\",\n                \"encoding\": \"UTF-8\"\n            },\n            \"name\": \"Reader\",\n            \"category\": \"reader\"\n        },\n        {\n            \"stepType\": \"odps\",\n            \"parameter\": {\n                \"partition\": \"ds=${bizdate},db=${db}\",\n                \"truncate\": true,\n                \"datasource\": \"odps_first\",\n                \"column\": [\n                    \"seller_account_id\",\n                    \"reply_guard_flag\",\n                    \"topping_flag\",\n                    \"guard_rule\",\n                    \"plat_form\",\n                    \"feature\",\n                    \"remind_status\",\n                    \"status\",\n                    \"gmt_modified\",\n                    \"gmt_create\",\n                    \"score\",\n                    \"deduction\",\n                    \"buyer_abnormal_emotion\",\n                    \"flag\",\n                    \"msg_alarm_type\",\n                    \"rule_name\",\n                    \"rule_id\",\n                    \"msg_time\",\n                    \"msg_id\",\n                    \"msg_content\",\n                    \"context_id\",\n                    \"buyer_nick\",\n                    \"sub_nick\",\n                    \"main_account\",\n                    \"shop_id_hash\",\n                    \"shop_id\",\n                    \"id\"\n                ],\n                \"emptyAsNull\": true,\n                \"table\": \"ods_frog_quality_guard_market_alarm_record_di\"\n            },\n            \"name\": \"Writer\",\n            \"category\": \"writer\"\n        }\n    ],\n    \"version\": \"2.0\",\n    \"order\": {\n        \"hops\": [\n            {\n                \"from\": \"Reader\",\n                \"to\": \"Writer\"\n            }\n        ]\n    },\n    \"setting\": {\n        \"errorLimit\": {\n            \"record\": \"\"\n        },\n        \"speed\": {\n            \"throttle\": false,\n            \"concurrent\": 2\n        }\n    }\n}\n```\n\n# 三、dataworks离线同步到es\n\n```xml\n{\n    \"type\": \"job\",\n    \"steps\": [\n        {\n            \"stepType\": \"odps\",\n            \"parameter\": {\n                \"partition\": [\n                    \"ds=${bizdate}\"\n                ],\n                \"datasource\": \"odps_first\",\n                \"column\": [\n                    \"es_id\",\n                    \"pay_product_td_num\",\n                    \"pay_order_td_num\",\n                    \"pay_first_gmt\",\n                    \"pay_single_max_amt\",\n                    \"pay_payment_td_amt\",\n                    \"buyer_phone\",\n                    \"app\",\n                    \"shop_id\",\n                    \"shop_name\"\n                ],\n                \"tableComment\": \"私域星球全平台用户消费统计表(json数据)\",\n                \"table\": \"ads_sy_shop_phone_du\"\n            },\n            \"name\": \"Reader\",\n            \"category\": \"reader\"\n        },\n        {\n            \"stepType\": \"elasticsearch\",\n            \"parameter\": {\n                \"column\": [\n                    {\n                        \"name\": \"es_id\",\n                        \"type\": \"id\"\n                    },\n                    {\n                        \"name\": \"consumeGoodsTotal\",\n                        \"type\": \"long\"\n                    },\n                    {\n                        \"name\": \"consumeOrderTotal\",\n                        \"type\": \"long\"\n                    },\n                    {\n                        \"origin\": true,\n                        \"format\": \"yyyy-MM-dd HH:mm:ss\",\n                        \"name\": \"firstConsumeTime\",\n                        \"type\": \"date\"\n                    },\n                    {\n                        \"name\": \"maxSinglePayedAmt\",\n                        \"type\": \"long\"\n                    },\n                    {\n                        \"name\": \"payedAmt\",\n                        \"type\": \"long\"\n                    },\n                    {\n                        \"name\": \"phoneNo\",\n                        \"type\": \"keyword\"\n                    },\n                    {\n                        \"name\": \"platformType\",\n                        \"type\": \"keyword\"\n                    },\n                    {\n                        \"name\": \"shopId\",\n                        \"type\": \"keyword\"\n                    },\n                    {\n                        \"name\": \"shopName\",\n                        \"type\": \"keyword\"\n                    }\n                ],\n                \"aliasMode\": \"append\",\n                \"index\": \"all_platform_consume_total_3\",\n                \"type\": \"_doc\",\n                \"splitter\": \",\",\n                \"timeout\": 600000,\n                \"multiThread\": true,\n                \"actionType\": \"index\",\n                \"indexType\": \"\",\n                \"cleanup\": false,\n                \"datasource\": \"es_siyuxingqiu\",\n                \"discovery\": false,\n                \"trySize\": 30,\n                \"alias\": \"\",\n                \"dynamic\": false,\n                \"ignoreParseError\": false,\n                \"batchSize\": 1000,\n                \"compression\": true,\n                \"ignoreWriteError\": false\n            },\n            \"name\": \"Writer\",\n            \"category\": \"writer\"\n        }\n    ],\n    \"version\": \"2.0\",\n    \"order\": {\n        \"hops\": [\n            {\n                \"from\": \"Reader\",\n                \"to\": \"Writer\"\n            }\n        ]\n    },\n    \"setting\": {\n        \"errorLimit\": {\n            \"record\": \"\"\n        },\n        \"speed\": {\n            \"throttle\": false,\n            \"concurrent\": 2\n        }\n    }\n}\n```\n\n# 四、dataworks实时同步到kafka\n\n```xml\n{\n  \"type\": \"job\",\n  \"steps\": [\n    {\n      \"stepType\": \"mysqlbinlog\",\n      \"parameter\": {\n        \"column\": [\n          \"_sequence_id_\",\n          \"_operation_type_\",\n          \"_execute_time_\",\n          \"_before_image_\",\n          \"_after_image_\",\n          \"id\",\n          \"chat_log_id\",\n          \"context_id\",\n          \"msg_id\",\n          \"msg_time\",\n          \"msg_type\",\n          \"main_account\",\n          \"main_account_hash\",\n          \"app_key\",\n          \"cid\",\n          \"from_id\",\n          \"to_id\",\n          \"content\",\n          \"content_type\",\n          \"person_type\",\n          \"is_correct\",\n          \"need_human\",\n          \"error_reason\",\n          \"remark\",\n          \"updated_at\",\n          \"created_at\",\n          \"question\",\n          \"ask_method_name\",\n          \"is_matched\",\n          \"ai_label_id\",\n          \"is_default\",\n          \"inner_msg_type\",\n          \"order_status\",\n          \"has_answer_timeout\",\n          \"is_deleted\",\n          \"remind_type\",\n          \"need_human_reason\",\n          \"replay_scene\",\n          \"replay_scene_type\",\n          \"feature\",\n          \"chat_msg_type\",\n          \"mq_msg_id\",\n          \"mq_msg_text\"\n        ],\n        \"connection\": [\n          {\n            \"datasource\": \"binlog_chatlog_m0\",\n            \"table\": [\n              \"chat_log_detail_0\",\n              \"chat_log_detail_1\",\n              \"chat_log_detail_2\",\n              \"chat_log_detail_3\",\n              \"chat_log_detail_4\",\n              \"chat_log_detail_5\",\n              \"chat_log_detail_6\",\n              \"chat_log_detail_7\",\n              \"chat_log_detail_8\",\n              \"chat_log_detail_9\",\n              \"chat_log_detail_10\",\n              \"chat_log_detail_11\",\n              \"chat_log_detail_12\",\n              \"chat_log_detail_13\",\n              \"chat_log_detail_14\",\n              \"chat_log_detail_15\",\n              \"chat_log_detail_16\",\n              \"chat_log_detail_17\",\n              \"chat_log_detail_18\",\n              \"chat_log_detail_19\",\n              \"chat_log_detail_20\",\n              \"chat_log_detail_21\",\n              \"chat_log_detail_22\",\n              \"chat_log_detail_23\",\n              \"chat_log_detail_24\",\n              \"chat_log_detail_25\",\n              \"chat_log_detail_26\",\n              \"chat_log_detail_27\",\n              \"chat_log_detail_28\",\n              \"chat_log_detail_29\",\n              \"chat_log_detail_30\",\n              \"chat_log_detail_31\",\n              \"chat_log_detail_32\",\n              \"chat_log_detail_33\",\n              \"chat_log_detail_34\",\n              \"chat_log_detail_35\",\n              \"chat_log_detail_36\",\n              \"chat_log_detail_37\",\n              \"chat_log_detail_38\",\n              \"chat_log_detail_39\",\n              \"chat_log_detail_40\",\n              \"chat_log_detail_41\",\n              \"chat_log_detail_42\",\n              \"chat_log_detail_43\",\n              \"chat_log_detail_44\",\n              \"chat_log_detail_45\",\n              \"chat_log_detail_46\",\n              \"chat_log_detail_47\",\n              \"chat_log_detail_48\",\n              \"chat_log_detail_49\",\n              \"chat_log_detail_50\",\n              \"chat_log_detail_51\",\n              \"chat_log_detail_52\",\n              \"chat_log_detail_53\",\n              \"chat_log_detail_54\",\n              \"chat_log_detail_55\",\n              \"chat_log_detail_56\",\n              \"chat_log_detail_57\",\n              \"chat_log_detail_58\",\n              \"chat_log_detail_59\",\n              \"chat_log_detail_60\",\n              \"chat_log_detail_61\",\n              \"chat_log_detail_62\",\n              \"chat_log_detail_63\",\n              \"chat_log_detail_64\",\n              \"chat_log_detail_65\",\n              \"chat_log_detail_66\",\n              \"chat_log_detail_67\",\n              \"chat_log_detail_68\",\n              \"chat_log_detail_69\",\n              \"chat_log_detail_70\",\n              \"chat_log_detail_71\",\n              \"chat_log_detail_72\",\n              \"chat_log_detail_73\",\n              \"chat_log_detail_74\",\n              \"chat_log_detail_75\",\n              \"chat_log_detail_76\",\n              \"chat_log_detail_77\",\n              \"chat_log_detail_78\",\n              \"chat_log_detail_79\",\n              \"chat_log_detail_80\",\n              \"chat_log_detail_81\",\n              \"chat_log_detail_82\",\n              \"chat_log_detail_83\",\n              \"chat_log_detail_84\",\n              \"chat_log_detail_85\",\n              \"chat_log_detail_86\",\n              \"chat_log_detail_87\",\n              \"chat_log_detail_88\",\n              \"chat_log_detail_89\",\n              \"chat_log_detail_90\",\n              \"chat_log_detail_91\",\n              \"chat_log_detail_92\",\n              \"chat_log_detail_93\",\n              \"chat_log_detail_94\",\n              \"chat_log_detail_95\",\n              \"chat_log_detail_96\",\n              \"chat_log_detail_97\",\n              \"chat_log_detail_98\",\n              \"chat_log_detail_99\",\n              \"chat_log_detail_100\",\n              \"chat_log_detail_101\",\n              \"chat_log_detail_102\",\n              \"chat_log_detail_103\",\n              \"chat_log_detail_104\",\n              \"chat_log_detail_105\",\n              \"chat_log_detail_106\",\n              \"chat_log_detail_107\",\n              \"chat_log_detail_108\",\n              \"chat_log_detail_109\",\n              \"chat_log_detail_110\",\n              \"chat_log_detail_111\",\n              \"chat_log_detail_112\",\n              \"chat_log_detail_113\",\n              \"chat_log_detail_114\",\n              \"chat_log_detail_115\",\n              \"chat_log_detail_116\",\n              \"chat_log_detail_117\",\n              \"chat_log_detail_118\",\n              \"chat_log_detail_119\",\n              \"chat_log_detail_120\",\n              \"chat_log_detail_121\",\n              \"chat_log_detail_122\",\n              \"chat_log_detail_123\",\n              \"chat_log_detail_124\",\n              \"chat_log_detail_125\",\n              \"chat_log_detail_126\",\n              \"chat_log_detail_127\"\n            ]\n          },\n          {\n            \"datasource\": \"binlog_chatlog_m1\",\n            \"table\": [\n              \"chat_log_detail_128\",\n              \"chat_log_detail_129\",\n              \"chat_log_detail_130\",\n              \"chat_log_detail_131\",\n              \"chat_log_detail_132\",\n              \"chat_log_detail_133\",\n              \"chat_log_detail_134\",\n              \"chat_log_detail_135\",\n              \"chat_log_detail_136\",\n              \"chat_log_detail_137\",\n              \"chat_log_detail_138\",\n              \"chat_log_detail_139\",\n              \"chat_log_detail_140\",\n              \"chat_log_detail_141\",\n              \"chat_log_detail_142\",\n              \"chat_log_detail_143\",\n              \"chat_log_detail_144\",\n              \"chat_log_detail_145\",\n              \"chat_log_detail_146\",\n              \"chat_log_detail_147\",\n              \"chat_log_detail_148\",\n              \"chat_log_detail_149\",\n              \"chat_log_detail_150\",\n              \"chat_log_detail_151\",\n              \"chat_log_detail_152\",\n              \"chat_log_detail_153\",\n              \"chat_log_detail_154\",\n              \"chat_log_detail_155\",\n              \"chat_log_detail_156\",\n              \"chat_log_detail_157\",\n              \"chat_log_detail_158\",\n              \"chat_log_detail_159\",\n              \"chat_log_detail_160\",\n              \"chat_log_detail_161\",\n              \"chat_log_detail_162\",\n              \"chat_log_detail_163\",\n              \"chat_log_detail_164\",\n              \"chat_log_detail_165\",\n              \"chat_log_detail_166\",\n              \"chat_log_detail_167\",\n              \"chat_log_detail_168\",\n              \"chat_log_detail_169\",\n              \"chat_log_detail_170\",\n              \"chat_log_detail_171\",\n              \"chat_log_detail_172\",\n              \"chat_log_detail_173\",\n              \"chat_log_detail_174\",\n              \"chat_log_detail_175\",\n              \"chat_log_detail_176\",\n              \"chat_log_detail_177\",\n              \"chat_log_detail_178\",\n              \"chat_log_detail_179\",\n              \"chat_log_detail_180\",\n              \"chat_log_detail_181\",\n              \"chat_log_detail_182\",\n              \"chat_log_detail_183\",\n              \"chat_log_detail_184\",\n              \"chat_log_detail_185\",\n              \"chat_log_detail_186\",\n              \"chat_log_detail_187\",\n              \"chat_log_detail_188\",\n              \"chat_log_detail_189\",\n              \"chat_log_detail_190\",\n              \"chat_log_detail_191\",\n              \"chat_log_detail_192\",\n              \"chat_log_detail_193\",\n              \"chat_log_detail_194\",\n              \"chat_log_detail_195\",\n              \"chat_log_detail_196\",\n              \"chat_log_detail_197\",\n              \"chat_log_detail_198\",\n              \"chat_log_detail_199\",\n              \"chat_log_detail_200\",\n              \"chat_log_detail_201\",\n              \"chat_log_detail_202\",\n              \"chat_log_detail_203\",\n              \"chat_log_detail_204\",\n              \"chat_log_detail_205\",\n              \"chat_log_detail_206\",\n              \"chat_log_detail_207\",\n              \"chat_log_detail_208\",\n              \"chat_log_detail_209\",\n              \"chat_log_detail_210\",\n              \"chat_log_detail_211\",\n              \"chat_log_detail_212\",\n              \"chat_log_detail_213\",\n              \"chat_log_detail_214\",\n              \"chat_log_detail_215\",\n              \"chat_log_detail_216\",\n              \"chat_log_detail_217\",\n              \"chat_log_detail_218\",\n              \"chat_log_detail_219\",\n              \"chat_log_detail_220\",\n              \"chat_log_detail_221\",\n              \"chat_log_detail_222\",\n              \"chat_log_detail_223\",\n              \"chat_log_detail_224\",\n              \"chat_log_detail_225\",\n              \"chat_log_detail_226\",\n              \"chat_log_detail_227\",\n              \"chat_log_detail_228\",\n              \"chat_log_detail_229\",\n              \"chat_log_detail_230\",\n              \"chat_log_detail_231\",\n              \"chat_log_detail_232\",\n              \"chat_log_detail_233\",\n              \"chat_log_detail_234\",\n              \"chat_log_detail_235\",\n              \"chat_log_detail_236\",\n              \"chat_log_detail_237\",\n              \"chat_log_detail_238\",\n              \"chat_log_detail_239\",\n              \"chat_log_detail_240\",\n              \"chat_log_detail_241\",\n              \"chat_log_detail_242\",\n              \"chat_log_detail_243\",\n              \"chat_log_detail_244\",\n              \"chat_log_detail_245\",\n              \"chat_log_detail_246\",\n              \"chat_log_detail_247\",\n              \"chat_log_detail_248\",\n              \"chat_log_detail_249\",\n              \"chat_log_detail_250\",\n              \"chat_log_detail_251\",\n              \"chat_log_detail_252\",\n              \"chat_log_detail_253\",\n              \"chat_log_detail_254\",\n              \"chat_log_detail_255\"\n            ]\n          },\n          {\n            \"datasource\": \"binlog_chatlog_m2\",\n            \"table\": [\n              \"chat_log_detail_256\",\n              \"chat_log_detail_257\",\n              \"chat_log_detail_258\",\n              \"chat_log_detail_259\",\n              \"chat_log_detail_260\",\n              \"chat_log_detail_261\",\n              \"chat_log_detail_262\",\n              \"chat_log_detail_263\",\n              \"chat_log_detail_264\",\n              \"chat_log_detail_265\",\n              \"chat_log_detail_266\",\n              \"chat_log_detail_267\",\n              \"chat_log_detail_268\",\n              \"chat_log_detail_269\",\n              \"chat_log_detail_270\",\n              \"chat_log_detail_271\",\n              \"chat_log_detail_272\",\n              \"chat_log_detail_273\",\n              \"chat_log_detail_274\",\n              \"chat_log_detail_275\",\n              \"chat_log_detail_276\",\n              \"chat_log_detail_277\",\n              \"chat_log_detail_278\",\n              \"chat_log_detail_279\",\n              \"chat_log_detail_280\",\n              \"chat_log_detail_281\",\n              \"chat_log_detail_282\",\n              \"chat_log_detail_283\",\n              \"chat_log_detail_284\",\n              \"chat_log_detail_285\",\n              \"chat_log_detail_286\",\n              \"chat_log_detail_287\",\n              \"chat_log_detail_288\",\n              \"chat_log_detail_289\",\n              \"chat_log_detail_290\",\n              \"chat_log_detail_291\",\n              \"chat_log_detail_292\",\n              \"chat_log_detail_293\",\n              \"chat_log_detail_294\",\n              \"chat_log_detail_295\",\n              \"chat_log_detail_296\",\n              \"chat_log_detail_297\",\n              \"chat_log_detail_298\",\n              \"chat_log_detail_299\",\n              \"chat_log_detail_300\",\n              \"chat_log_detail_301\",\n              \"chat_log_detail_302\",\n              \"chat_log_detail_303\",\n              \"chat_log_detail_304\",\n              \"chat_log_detail_305\",\n              \"chat_log_detail_306\",\n              \"chat_log_detail_307\",\n              \"chat_log_detail_308\",\n              \"chat_log_detail_309\",\n              \"chat_log_detail_310\",\n              \"chat_log_detail_311\",\n              \"chat_log_detail_312\",\n              \"chat_log_detail_313\",\n              \"chat_log_detail_314\",\n              \"chat_log_detail_315\",\n              \"chat_log_detail_316\",\n              \"chat_log_detail_317\",\n              \"chat_log_detail_318\",\n              \"chat_log_detail_319\",\n              \"chat_log_detail_320\",\n              \"chat_log_detail_321\",\n              \"chat_log_detail_322\",\n              \"chat_log_detail_323\",\n              \"chat_log_detail_324\",\n              \"chat_log_detail_325\",\n              \"chat_log_detail_326\",\n              \"chat_log_detail_327\",\n              \"chat_log_detail_328\",\n              \"chat_log_detail_329\",\n              \"chat_log_detail_330\",\n              \"chat_log_detail_331\",\n              \"chat_log_detail_332\",\n              \"chat_log_detail_333\",\n              \"chat_log_detail_334\",\n              \"chat_log_detail_335\",\n              \"chat_log_detail_336\",\n              \"chat_log_detail_337\",\n              \"chat_log_detail_338\",\n              \"chat_log_detail_339\",\n              \"chat_log_detail_340\",\n              \"chat_log_detail_341\",\n              \"chat_log_detail_342\",\n              \"chat_log_detail_343\",\n              \"chat_log_detail_344\",\n              \"chat_log_detail_345\",\n              \"chat_log_detail_346\",\n              \"chat_log_detail_347\",\n              \"chat_log_detail_348\",\n              \"chat_log_detail_349\",\n              \"chat_log_detail_350\",\n              \"chat_log_detail_351\",\n              \"chat_log_detail_352\",\n              \"chat_log_detail_353\",\n              \"chat_log_detail_354\",\n              \"chat_log_detail_355\",\n              \"chat_log_detail_356\",\n              \"chat_log_detail_357\",\n              \"chat_log_detail_358\",\n              \"chat_log_detail_359\",\n              \"chat_log_detail_360\",\n              \"chat_log_detail_361\",\n              \"chat_log_detail_362\",\n              \"chat_log_detail_363\",\n              \"chat_log_detail_364\",\n              \"chat_log_detail_365\",\n              \"chat_log_detail_366\",\n              \"chat_log_detail_367\",\n              \"chat_log_detail_368\",\n              \"chat_log_detail_369\",\n              \"chat_log_detail_370\",\n              \"chat_log_detail_371\",\n              \"chat_log_detail_372\",\n              \"chat_log_detail_373\",\n              \"chat_log_detail_374\",\n              \"chat_log_detail_375\",\n              \"chat_log_detail_376\",\n              \"chat_log_detail_377\",\n              \"chat_log_detail_378\",\n              \"chat_log_detail_379\",\n              \"chat_log_detail_380\",\n              \"chat_log_detail_381\",\n              \"chat_log_detail_382\",\n              \"chat_log_detail_383\"\n            ]\n          },\n          {\n            \"datasource\": \"binlog_chatlog_m3\",\n            \"table\": [\n              \"chat_log_detail_384\",\n              \"chat_log_detail_385\",\n              \"chat_log_detail_386\",\n              \"chat_log_detail_387\",\n              \"chat_log_detail_388\",\n              \"chat_log_detail_389\",\n              \"chat_log_detail_390\",\n              \"chat_log_detail_391\",\n              \"chat_log_detail_392\",\n              \"chat_log_detail_393\",\n              \"chat_log_detail_394\",\n              \"chat_log_detail_395\",\n              \"chat_log_detail_396\",\n              \"chat_log_detail_397\",\n              \"chat_log_detail_398\",\n              \"chat_log_detail_399\",\n              \"chat_log_detail_400\",\n              \"chat_log_detail_401\",\n              \"chat_log_detail_402\",\n              \"chat_log_detail_403\",\n              \"chat_log_detail_404\",\n              \"chat_log_detail_405\",\n              \"chat_log_detail_406\",\n              \"chat_log_detail_407\",\n              \"chat_log_detail_408\",\n              \"chat_log_detail_409\",\n              \"chat_log_detail_410\",\n              \"chat_log_detail_411\",\n              \"chat_log_detail_412\",\n              \"chat_log_detail_413\",\n              \"chat_log_detail_414\",\n              \"chat_log_detail_415\",\n              \"chat_log_detail_416\",\n              \"chat_log_detail_417\",\n              \"chat_log_detail_418\",\n              \"chat_log_detail_419\",\n              \"chat_log_detail_420\",\n              \"chat_log_detail_421\",\n              \"chat_log_detail_422\",\n              \"chat_log_detail_423\",\n              \"chat_log_detail_424\",\n              \"chat_log_detail_425\",\n              \"chat_log_detail_426\",\n              \"chat_log_detail_427\",\n              \"chat_log_detail_428\",\n              \"chat_log_detail_429\",\n              \"chat_log_detail_430\",\n              \"chat_log_detail_431\",\n              \"chat_log_detail_432\",\n              \"chat_log_detail_433\",\n              \"chat_log_detail_434\",\n              \"chat_log_detail_435\",\n              \"chat_log_detail_436\",\n              \"chat_log_detail_437\",\n              \"chat_log_detail_438\",\n              \"chat_log_detail_439\",\n              \"chat_log_detail_440\",\n              \"chat_log_detail_441\",\n              \"chat_log_detail_442\",\n              \"chat_log_detail_443\",\n              \"chat_log_detail_444\",\n              \"chat_log_detail_445\",\n              \"chat_log_detail_446\",\n              \"chat_log_detail_447\",\n              \"chat_log_detail_448\",\n              \"chat_log_detail_449\",\n              \"chat_log_detail_450\",\n              \"chat_log_detail_451\",\n              \"chat_log_detail_452\",\n              \"chat_log_detail_453\",\n              \"chat_log_detail_454\",\n              \"chat_log_detail_455\",\n              \"chat_log_detail_456\",\n              \"chat_log_detail_457\",\n              \"chat_log_detail_458\",\n              \"chat_log_detail_459\",\n              \"chat_log_detail_460\",\n              \"chat_log_detail_461\",\n              \"chat_log_detail_462\",\n              \"chat_log_detail_463\",\n              \"chat_log_detail_464\",\n              \"chat_log_detail_465\",\n              \"chat_log_detail_466\",\n              \"chat_log_detail_467\",\n              \"chat_log_detail_468\",\n              \"chat_log_detail_469\",\n              \"chat_log_detail_470\",\n              \"chat_log_detail_471\",\n              \"chat_log_detail_472\",\n              \"chat_log_detail_473\",\n              \"chat_log_detail_474\",\n              \"chat_log_detail_475\",\n              \"chat_log_detail_476\",\n              \"chat_log_detail_477\",\n              \"chat_log_detail_478\",\n              \"chat_log_detail_479\",\n              \"chat_log_detail_480\",\n              \"chat_log_detail_481\",\n              \"chat_log_detail_482\",\n              \"chat_log_detail_483\",\n              \"chat_log_detail_484\",\n              \"chat_log_detail_485\",\n              \"chat_log_detail_486\",\n              \"chat_log_detail_487\",\n              \"chat_log_detail_488\",\n              \"chat_log_detail_489\",\n              \"chat_log_detail_490\",\n              \"chat_log_detail_491\",\n              \"chat_log_detail_492\",\n              \"chat_log_detail_493\",\n              \"chat_log_detail_494\",\n              \"chat_log_detail_495\",\n              \"chat_log_detail_496\",\n              \"chat_log_detail_497\",\n              \"chat_log_detail_498\",\n              \"chat_log_detail_499\",\n              \"chat_log_detail_500\",\n              \"chat_log_detail_501\",\n              \"chat_log_detail_502\",\n              \"chat_log_detail_503\",\n              \"chat_log_detail_504\",\n              \"chat_log_detail_505\",\n              \"chat_log_detail_506\",\n              \"chat_log_detail_507\",\n              \"chat_log_detail_508\",\n              \"chat_log_detail_509\",\n              \"chat_log_detail_510\",\n              \"chat_log_detail_511\"\n            ]\n          },\n          {\n            \"datasource\": \"binlog_chatlog_m4\",\n            \"table\": [\n              \"chat_log_detail_512\",\n              \"chat_log_detail_513\",\n              \"chat_log_detail_514\",\n              \"chat_log_detail_515\",\n              \"chat_log_detail_516\",\n              \"chat_log_detail_517\",\n              \"chat_log_detail_518\",\n              \"chat_log_detail_519\",\n              \"chat_log_detail_520\",\n              \"chat_log_detail_521\",\n              \"chat_log_detail_522\",\n              \"chat_log_detail_523\",\n              \"chat_log_detail_524\",\n              \"chat_log_detail_525\",\n              \"chat_log_detail_526\",\n              \"chat_log_detail_527\",\n              \"chat_log_detail_528\",\n              \"chat_log_detail_529\",\n              \"chat_log_detail_530\",\n              \"chat_log_detail_531\",\n              \"chat_log_detail_532\",\n              \"chat_log_detail_533\",\n              \"chat_log_detail_534\",\n              \"chat_log_detail_535\",\n              \"chat_log_detail_536\",\n              \"chat_log_detail_537\",\n              \"chat_log_detail_538\",\n              \"chat_log_detail_539\",\n              \"chat_log_detail_540\",\n              \"chat_log_detail_541\",\n              \"chat_log_detail_542\",\n              \"chat_log_detail_543\",\n              \"chat_log_detail_544\",\n              \"chat_log_detail_545\",\n              \"chat_log_detail_546\",\n              \"chat_log_detail_547\",\n              \"chat_log_detail_548\",\n              \"chat_log_detail_549\",\n              \"chat_log_detail_550\",\n              \"chat_log_detail_551\",\n              \"chat_log_detail_552\",\n              \"chat_log_detail_553\",\n              \"chat_log_detail_554\",\n              \"chat_log_detail_555\",\n              \"chat_log_detail_556\",\n              \"chat_log_detail_557\",\n              \"chat_log_detail_558\",\n              \"chat_log_detail_559\",\n              \"chat_log_detail_560\",\n              \"chat_log_detail_561\",\n              \"chat_log_detail_562\",\n              \"chat_log_detail_563\",\n              \"chat_log_detail_564\",\n              \"chat_log_detail_565\",\n              \"chat_log_detail_566\",\n              \"chat_log_detail_567\",\n              \"chat_log_detail_568\",\n              \"chat_log_detail_569\",\n              \"chat_log_detail_570\",\n              \"chat_log_detail_571\",\n              \"chat_log_detail_572\",\n              \"chat_log_detail_573\",\n              \"chat_log_detail_574\",\n              \"chat_log_detail_575\",\n              \"chat_log_detail_576\",\n              \"chat_log_detail_577\",\n              \"chat_log_detail_578\",\n              \"chat_log_detail_579\",\n              \"chat_log_detail_580\",\n              \"chat_log_detail_581\",\n              \"chat_log_detail_582\",\n              \"chat_log_detail_583\",\n              \"chat_log_detail_584\",\n              \"chat_log_detail_585\",\n              \"chat_log_detail_586\",\n              \"chat_log_detail_587\",\n              \"chat_log_detail_588\",\n              \"chat_log_detail_589\",\n              \"chat_log_detail_590\",\n              \"chat_log_detail_591\",\n              \"chat_log_detail_592\",\n              \"chat_log_detail_593\",\n              \"chat_log_detail_594\",\n              \"chat_log_detail_595\",\n              \"chat_log_detail_596\",\n              \"chat_log_detail_597\",\n              \"chat_log_detail_598\",\n              \"chat_log_detail_599\",\n              \"chat_log_detail_600\",\n              \"chat_log_detail_601\",\n              \"chat_log_detail_602\",\n              \"chat_log_detail_603\",\n              \"chat_log_detail_604\",\n              \"chat_log_detail_605\",\n              \"chat_log_detail_606\",\n              \"chat_log_detail_607\",\n              \"chat_log_detail_608\",\n              \"chat_log_detail_609\",\n              \"chat_log_detail_610\",\n              \"chat_log_detail_611\",\n              \"chat_log_detail_612\",\n              \"chat_log_detail_613\",\n              \"chat_log_detail_614\",\n              \"chat_log_detail_615\",\n              \"chat_log_detail_616\",\n              \"chat_log_detail_617\",\n              \"chat_log_detail_618\",\n              \"chat_log_detail_619\",\n              \"chat_log_detail_620\",\n              \"chat_log_detail_621\",\n              \"chat_log_detail_622\",\n              \"chat_log_detail_623\",\n              \"chat_log_detail_624\",\n              \"chat_log_detail_625\",\n              \"chat_log_detail_626\",\n              \"chat_log_detail_627\",\n              \"chat_log_detail_628\",\n              \"chat_log_detail_629\",\n              \"chat_log_detail_630\",\n              \"chat_log_detail_631\",\n              \"chat_log_detail_632\",\n              \"chat_log_detail_633\",\n              \"chat_log_detail_634\",\n              \"chat_log_detail_635\",\n              \"chat_log_detail_636\",\n              \"chat_log_detail_637\",\n              \"chat_log_detail_638\",\n              \"chat_log_detail_639\"\n            ]\n          },\n          {\n            \"datasource\": \"binlog_chatlog_m5\",\n            \"table\": [\n              \"chat_log_detail_640\",\n              \"chat_log_detail_641\",\n              \"chat_log_detail_642\",\n              \"chat_log_detail_643\",\n              \"chat_log_detail_644\",\n              \"chat_log_detail_645\",\n              \"chat_log_detail_646\",\n              \"chat_log_detail_647\",\n              \"chat_log_detail_648\",\n              \"chat_log_detail_649\",\n              \"chat_log_detail_650\",\n              \"chat_log_detail_651\",\n              \"chat_log_detail_652\",\n              \"chat_log_detail_653\",\n              \"chat_log_detail_654\",\n              \"chat_log_detail_655\",\n              \"chat_log_detail_656\",\n              \"chat_log_detail_657\",\n              \"chat_log_detail_658\",\n              \"chat_log_detail_659\",\n              \"chat_log_detail_660\",\n              \"chat_log_detail_661\",\n              \"chat_log_detail_662\",\n              \"chat_log_detail_663\",\n              \"chat_log_detail_664\",\n              \"chat_log_detail_665\",\n              \"chat_log_detail_666\",\n              \"chat_log_detail_667\",\n              \"chat_log_detail_668\",\n              \"chat_log_detail_669\",\n              \"chat_log_detail_670\",\n              \"chat_log_detail_671\",\n              \"chat_log_detail_672\",\n              \"chat_log_detail_673\",\n              \"chat_log_detail_674\",\n              \"chat_log_detail_675\",\n              \"chat_log_detail_676\",\n              \"chat_log_detail_677\",\n              \"chat_log_detail_678\",\n              \"chat_log_detail_679\",\n              \"chat_log_detail_680\",\n              \"chat_log_detail_681\",\n              \"chat_log_detail_682\",\n              \"chat_log_detail_683\",\n              \"chat_log_detail_684\",\n              \"chat_log_detail_685\",\n              \"chat_log_detail_686\",\n              \"chat_log_detail_687\",\n              \"chat_log_detail_688\",\n              \"chat_log_detail_689\",\n              \"chat_log_detail_690\",\n              \"chat_log_detail_691\",\n              \"chat_log_detail_692\",\n              \"chat_log_detail_693\",\n              \"chat_log_detail_694\",\n              \"chat_log_detail_695\",\n              \"chat_log_detail_696\",\n              \"chat_log_detail_697\",\n              \"chat_log_detail_698\",\n              \"chat_log_detail_699\",\n              \"chat_log_detail_700\",\n              \"chat_log_detail_701\",\n              \"chat_log_detail_702\",\n              \"chat_log_detail_703\",\n              \"chat_log_detail_704\",\n              \"chat_log_detail_705\",\n              \"chat_log_detail_706\",\n              \"chat_log_detail_707\",\n              \"chat_log_detail_708\",\n              \"chat_log_detail_709\",\n              \"chat_log_detail_710\",\n              \"chat_log_detail_711\",\n              \"chat_log_detail_712\",\n              \"chat_log_detail_713\",\n              \"chat_log_detail_714\",\n              \"chat_log_detail_715\",\n              \"chat_log_detail_716\",\n              \"chat_log_detail_717\",\n              \"chat_log_detail_718\",\n              \"chat_log_detail_719\",\n              \"chat_log_detail_720\",\n              \"chat_log_detail_721\",\n              \"chat_log_detail_722\",\n              \"chat_log_detail_723\",\n              \"chat_log_detail_724\",\n              \"chat_log_detail_725\",\n              \"chat_log_detail_726\",\n              \"chat_log_detail_727\",\n              \"chat_log_detail_728\",\n              \"chat_log_detail_729\",\n              \"chat_log_detail_730\",\n              \"chat_log_detail_731\",\n              \"chat_log_detail_732\",\n              \"chat_log_detail_733\",\n              \"chat_log_detail_734\",\n              \"chat_log_detail_735\",\n              \"chat_log_detail_736\",\n              \"chat_log_detail_737\",\n              \"chat_log_detail_738\",\n              \"chat_log_detail_739\",\n              \"chat_log_detail_740\",\n              \"chat_log_detail_741\",\n              \"chat_log_detail_742\",\n              \"chat_log_detail_743\",\n              \"chat_log_detail_744\",\n              \"chat_log_detail_745\",\n              \"chat_log_detail_746\",\n              \"chat_log_detail_747\",\n              \"chat_log_detail_748\",\n              \"chat_log_detail_749\",\n              \"chat_log_detail_750\",\n              \"chat_log_detail_751\",\n              \"chat_log_detail_752\",\n              \"chat_log_detail_753\",\n              \"chat_log_detail_754\",\n              \"chat_log_detail_755\",\n              \"chat_log_detail_756\",\n              \"chat_log_detail_757\",\n              \"chat_log_detail_758\",\n              \"chat_log_detail_759\",\n              \"chat_log_detail_760\",\n              \"chat_log_detail_761\",\n              \"chat_log_detail_762\",\n              \"chat_log_detail_763\",\n              \"chat_log_detail_764\",\n              \"chat_log_detail_765\",\n              \"chat_log_detail_766\",\n              \"chat_log_detail_767\"\n            ]\n          },\n          {\n            \"datasource\": \"binlog_chatlog_m6\",\n            \"table\": [\n              \"chat_log_detail_768\",\n              \"chat_log_detail_769\",\n              \"chat_log_detail_770\",\n              \"chat_log_detail_771\",\n              \"chat_log_detail_772\",\n              \"chat_log_detail_773\",\n              \"chat_log_detail_774\",\n              \"chat_log_detail_775\",\n              \"chat_log_detail_776\",\n              \"chat_log_detail_777\",\n              \"chat_log_detail_778\",\n              \"chat_log_detail_779\",\n              \"chat_log_detail_780\",\n              \"chat_log_detail_781\",\n              \"chat_log_detail_782\",\n              \"chat_log_detail_783\",\n              \"chat_log_detail_784\",\n              \"chat_log_detail_785\",\n              \"chat_log_detail_786\",\n              \"chat_log_detail_787\",\n              \"chat_log_detail_788\",\n              \"chat_log_detail_789\",\n              \"chat_log_detail_790\",\n              \"chat_log_detail_791\",\n              \"chat_log_detail_792\",\n              \"chat_log_detail_793\",\n              \"chat_log_detail_794\",\n              \"chat_log_detail_795\",\n              \"chat_log_detail_796\",\n              \"chat_log_detail_797\",\n              \"chat_log_detail_798\",\n              \"chat_log_detail_799\",\n              \"chat_log_detail_800\",\n              \"chat_log_detail_801\",\n              \"chat_log_detail_802\",\n              \"chat_log_detail_803\",\n              \"chat_log_detail_804\",\n              \"chat_log_detail_805\",\n              \"chat_log_detail_806\",\n              \"chat_log_detail_807\",\n              \"chat_log_detail_808\",\n              \"chat_log_detail_809\",\n              \"chat_log_detail_810\",\n              \"chat_log_detail_811\",\n              \"chat_log_detail_812\",\n              \"chat_log_detail_813\",\n              \"chat_log_detail_814\",\n              \"chat_log_detail_815\",\n              \"chat_log_detail_816\",\n              \"chat_log_detail_817\",\n              \"chat_log_detail_818\",\n              \"chat_log_detail_819\",\n              \"chat_log_detail_820\",\n              \"chat_log_detail_821\",\n              \"chat_log_detail_822\",\n              \"chat_log_detail_823\",\n              \"chat_log_detail_824\",\n              \"chat_log_detail_825\",\n              \"chat_log_detail_826\",\n              \"chat_log_detail_827\",\n              \"chat_log_detail_828\",\n              \"chat_log_detail_829\",\n              \"chat_log_detail_830\",\n              \"chat_log_detail_831\",\n              \"chat_log_detail_832\",\n              \"chat_log_detail_833\",\n              \"chat_log_detail_834\",\n              \"chat_log_detail_835\",\n              \"chat_log_detail_836\",\n              \"chat_log_detail_837\",\n              \"chat_log_detail_838\",\n              \"chat_log_detail_839\",\n              \"chat_log_detail_840\",\n              \"chat_log_detail_841\",\n              \"chat_log_detail_842\",\n              \"chat_log_detail_843\",\n              \"chat_log_detail_844\",\n              \"chat_log_detail_845\",\n              \"chat_log_detail_846\",\n              \"chat_log_detail_847\",\n              \"chat_log_detail_848\",\n              \"chat_log_detail_849\",\n              \"chat_log_detail_850\",\n              \"chat_log_detail_851\",\n              \"chat_log_detail_852\",\n              \"chat_log_detail_853\",\n              \"chat_log_detail_854\",\n              \"chat_log_detail_855\",\n              \"chat_log_detail_856\",\n              \"chat_log_detail_857\",\n              \"chat_log_detail_858\",\n              \"chat_log_detail_859\",\n              \"chat_log_detail_860\",\n              \"chat_log_detail_861\",\n              \"chat_log_detail_862\",\n              \"chat_log_detail_863\",\n              \"chat_log_detail_864\",\n              \"chat_log_detail_865\",\n              \"chat_log_detail_866\",\n              \"chat_log_detail_867\",\n              \"chat_log_detail_868\",\n              \"chat_log_detail_869\",\n              \"chat_log_detail_870\",\n              \"chat_log_detail_871\",\n              \"chat_log_detail_872\",\n              \"chat_log_detail_873\",\n              \"chat_log_detail_874\",\n              \"chat_log_detail_875\",\n              \"chat_log_detail_876\",\n              \"chat_log_detail_877\",\n              \"chat_log_detail_878\",\n              \"chat_log_detail_879\",\n              \"chat_log_detail_880\",\n              \"chat_log_detail_881\",\n              \"chat_log_detail_882\",\n              \"chat_log_detail_883\",\n              \"chat_log_detail_884\",\n              \"chat_log_detail_885\",\n              \"chat_log_detail_886\",\n              \"chat_log_detail_887\",\n              \"chat_log_detail_888\",\n              \"chat_log_detail_889\",\n              \"chat_log_detail_890\",\n              \"chat_log_detail_891\",\n              \"chat_log_detail_892\",\n              \"chat_log_detail_893\",\n              \"chat_log_detail_894\",\n              \"chat_log_detail_895\"\n            ]\n          },\n          {\n            \"datasource\": \"binlog_chatlog_m7\",\n            \"table\": [\n              \"chat_log_detail_896\",\n              \"chat_log_detail_897\",\n              \"chat_log_detail_898\",\n              \"chat_log_detail_899\",\n              \"chat_log_detail_900\",\n              \"chat_log_detail_901\",\n              \"chat_log_detail_902\",\n              \"chat_log_detail_903\",\n              \"chat_log_detail_904\",\n              \"chat_log_detail_905\",\n              \"chat_log_detail_906\",\n              \"chat_log_detail_907\",\n              \"chat_log_detail_908\",\n              \"chat_log_detail_909\",\n              \"chat_log_detail_910\",\n              \"chat_log_detail_911\",\n              \"chat_log_detail_912\",\n              \"chat_log_detail_913\",\n              \"chat_log_detail_914\",\n              \"chat_log_detail_915\",\n              \"chat_log_detail_916\",\n              \"chat_log_detail_917\",\n              \"chat_log_detail_918\",\n              \"chat_log_detail_919\",\n              \"chat_log_detail_920\",\n              \"chat_log_detail_921\",\n              \"chat_log_detail_922\",\n              \"chat_log_detail_923\",\n              \"chat_log_detail_924\",\n              \"chat_log_detail_925\",\n              \"chat_log_detail_926\",\n              \"chat_log_detail_927\",\n              \"chat_log_detail_928\",\n              \"chat_log_detail_929\",\n              \"chat_log_detail_930\",\n              \"chat_log_detail_931\",\n              \"chat_log_detail_932\",\n              \"chat_log_detail_933\",\n              \"chat_log_detail_934\",\n              \"chat_log_detail_935\",\n              \"chat_log_detail_936\",\n              \"chat_log_detail_937\",\n              \"chat_log_detail_938\",\n              \"chat_log_detail_939\",\n              \"chat_log_detail_940\",\n              \"chat_log_detail_941\",\n              \"chat_log_detail_942\",\n              \"chat_log_detail_943\",\n              \"chat_log_detail_944\",\n              \"chat_log_detail_945\",\n              \"chat_log_detail_946\",\n              \"chat_log_detail_947\",\n              \"chat_log_detail_948\",\n              \"chat_log_detail_949\",\n              \"chat_log_detail_950\",\n              \"chat_log_detail_951\",\n              \"chat_log_detail_952\",\n              \"chat_log_detail_953\",\n              \"chat_log_detail_954\",\n              \"chat_log_detail_955\",\n              \"chat_log_detail_956\",\n              \"chat_log_detail_957\",\n              \"chat_log_detail_958\",\n              \"chat_log_detail_959\",\n              \"chat_log_detail_960\",\n              \"chat_log_detail_961\",\n              \"chat_log_detail_962\",\n              \"chat_log_detail_963\",\n              \"chat_log_detail_964\",\n              \"chat_log_detail_965\",\n              \"chat_log_detail_966\",\n              \"chat_log_detail_967\",\n              \"chat_log_detail_968\",\n              \"chat_log_detail_969\",\n              \"chat_log_detail_970\",\n              \"chat_log_detail_971\",\n              \"chat_log_detail_972\",\n              \"chat_log_detail_973\",\n              \"chat_log_detail_974\",\n              \"chat_log_detail_975\",\n              \"chat_log_detail_976\",\n              \"chat_log_detail_977\",\n              \"chat_log_detail_978\",\n              \"chat_log_detail_979\",\n              \"chat_log_detail_980\",\n              \"chat_log_detail_981\",\n              \"chat_log_detail_982\",\n              \"chat_log_detail_983\",\n              \"chat_log_detail_984\",\n              \"chat_log_detail_985\",\n              \"chat_log_detail_986\",\n              \"chat_log_detail_987\",\n              \"chat_log_detail_988\",\n              \"chat_log_detail_989\",\n              \"chat_log_detail_990\",\n              \"chat_log_detail_991\",\n              \"chat_log_detail_992\",\n              \"chat_log_detail_993\",\n              \"chat_log_detail_994\",\n              \"chat_log_detail_995\",\n              \"chat_log_detail_996\",\n              \"chat_log_detail_997\",\n              \"chat_log_detail_998\",\n              \"chat_log_detail_999\",\n              \"chat_log_detail_1000\",\n              \"chat_log_detail_1001\",\n              \"chat_log_detail_1002\",\n              \"chat_log_detail_1003\",\n              \"chat_log_detail_1004\",\n              \"chat_log_detail_1005\",\n              \"chat_log_detail_1006\",\n              \"chat_log_detail_1007\",\n              \"chat_log_detail_1008\",\n              \"chat_log_detail_1009\",\n              \"chat_log_detail_1010\",\n              \"chat_log_detail_1011\",\n              \"chat_log_detail_1012\",\n              \"chat_log_detail_1013\",\n              \"chat_log_detail_1014\",\n              \"chat_log_detail_1015\",\n              \"chat_log_detail_1016\",\n              \"chat_log_detail_1017\",\n              \"chat_log_detail_1018\",\n              \"chat_log_detail_1019\",\n              \"chat_log_detail_1020\",\n              \"chat_log_detail_1021\",\n              \"chat_log_detail_1022\",\n              \"chat_log_detail_1023\"\n            ]\n          }\n        ]\n      },\n      \"name\": \"Reader\",\n      \"category\": \"reader\"\n    },\n    {\n      \"stepType\": \"kafka\",\n      \"parameter\": {\n        \"server\": \"172.16.87.246:9092,172.16.87.247:9092,172.16.87.248:9092\",\n        \"keyColumn\": \"id\",\n        \"valueType\": \"ByteArray\",\n        \"topic\": \"weier-chat-detail-info-qa\",\n        \"batchSize\": 1024,\n        \"fieldDelimiter\": \"膼\",\n        \"keyType\": \"ByteArray\"\n      },\n      \"name\": \"Writer\",\n      \"category\": \"writer\"\n    }\n  ],\n  \"version\": \"2.0\",\n  \"order\": {\n    \"hops\": [\n      {\n        \"from\": \"Reader\",\n        \"to\": \"Writer\"\n      }\n    ]\n  },\n  \"setting\": {\n    \"errorLimit\": {},\n    \"speed\": {\n      \"concurrent\": 1,\n      \"throttle\": false\n    }\n  }\n}\n```\n\n","source":"_posts/dataworks命令.md","raw":"---\ntitle: dataworks命令\ndate: 2020-12-24 22:27:32\ntags:\n- dataworks\n- 随笔\ncategories:\n - 工具\n---\n\n<!-- toc -->\n\n[TOC]\n\n# 一、DDL语句\n\n```sql\n\nalter table table_name1 rename to table_name2;   -- 修改表名\nalter table table_name1 changeowner to 'ALIYUN$xxx@aliyun.com'; --修改表的所有人\nalter table table_name1 set COMMENT 'tbl comment'; --修改表注释\nALTER TABLE sale_detail CHANGE COLUMN customer_name RENAME TO customer; --修改字段名 \nALTER TABLE sale_detail CHANGE COLUMN customer COMMENT 'customer';--修改字段注释\nALTER TABLE table_name CHANGE COLUMN old_col_name new_col_name column_type COMMENT 'column_comment';--同时修改列名和注释\nALTER TABLE table_name ADD COLUMNS (col_name1 type1 comment 'XXX',col_name2 type2 comment 'XXX');--添加列和注释\n\n```\n\n# 二、分库分表采集\n\n```xml\n{\n    \"type\": \"job\",\n    \"steps\": [\n        {\n            \"stepType\": \"mysql\",\n            \"parameter\": {\n                \"datasource\": \"mysql_frog_m1_frog_001\",\n                \"column\": [\n                    \"seller_account_id\",\n                    \"reply_guard_flag\",\n                    \"topping_flag\",\n                    \"guard_rule\",\n                    \"plat_form\",\n                    \"feature\",\n                    \"remind_status\",\n                    \"status\",\n                    \"gmt_modified\",\n                    \"gmt_create\",\n                    \"score\",\n                    \"deduction\",\n                    \"buyer_abnormal_emotion\",\n                    \"flag\",\n                    \"msg_alarm_type\",\n                    \"rule_name\",\n                    \"rule_id\",\n                    \"msg_time\",\n                    \"msg_id\",\n                    \"msg_content\",\n                    \"context_id\",\n                    \"buyer_nick\",\n                    \"sub_nick\",\n                    \"main_account\",\n                    \"shop_id_hash\",\n                    \"shop_id\",\n                    \"id\"\n                ],\n                \"connection\": [\n                    {\n                        \"datasource\": \"mysql_frog_m1_frog_001\",\n                        \"table\": [\n                            \"quality_guard_market_alarm_record_[0-127]\"\n                        ]\n                    }\n                ],\n                \"where\": \" date_format(msg_time,'%Y%m%d')='${bizdate}'    \",\n                \"splitPk\": \"id\",\n                \"encoding\": \"UTF-8\"\n            },\n            \"name\": \"Reader\",\n            \"category\": \"reader\"\n        },\n        {\n            \"stepType\": \"odps\",\n            \"parameter\": {\n                \"partition\": \"ds=${bizdate},db=${db}\",\n                \"truncate\": true,\n                \"datasource\": \"odps_first\",\n                \"column\": [\n                    \"seller_account_id\",\n                    \"reply_guard_flag\",\n                    \"topping_flag\",\n                    \"guard_rule\",\n                    \"plat_form\",\n                    \"feature\",\n                    \"remind_status\",\n                    \"status\",\n                    \"gmt_modified\",\n                    \"gmt_create\",\n                    \"score\",\n                    \"deduction\",\n                    \"buyer_abnormal_emotion\",\n                    \"flag\",\n                    \"msg_alarm_type\",\n                    \"rule_name\",\n                    \"rule_id\",\n                    \"msg_time\",\n                    \"msg_id\",\n                    \"msg_content\",\n                    \"context_id\",\n                    \"buyer_nick\",\n                    \"sub_nick\",\n                    \"main_account\",\n                    \"shop_id_hash\",\n                    \"shop_id\",\n                    \"id\"\n                ],\n                \"emptyAsNull\": true,\n                \"table\": \"ods_frog_quality_guard_market_alarm_record_di\"\n            },\n            \"name\": \"Writer\",\n            \"category\": \"writer\"\n        }\n    ],\n    \"version\": \"2.0\",\n    \"order\": {\n        \"hops\": [\n            {\n                \"from\": \"Reader\",\n                \"to\": \"Writer\"\n            }\n        ]\n    },\n    \"setting\": {\n        \"errorLimit\": {\n            \"record\": \"\"\n        },\n        \"speed\": {\n            \"throttle\": false,\n            \"concurrent\": 2\n        }\n    }\n}\n```\n\n# 三、dataworks离线同步到es\n\n```xml\n{\n    \"type\": \"job\",\n    \"steps\": [\n        {\n            \"stepType\": \"odps\",\n            \"parameter\": {\n                \"partition\": [\n                    \"ds=${bizdate}\"\n                ],\n                \"datasource\": \"odps_first\",\n                \"column\": [\n                    \"es_id\",\n                    \"pay_product_td_num\",\n                    \"pay_order_td_num\",\n                    \"pay_first_gmt\",\n                    \"pay_single_max_amt\",\n                    \"pay_payment_td_amt\",\n                    \"buyer_phone\",\n                    \"app\",\n                    \"shop_id\",\n                    \"shop_name\"\n                ],\n                \"tableComment\": \"私域星球全平台用户消费统计表(json数据)\",\n                \"table\": \"ads_sy_shop_phone_du\"\n            },\n            \"name\": \"Reader\",\n            \"category\": \"reader\"\n        },\n        {\n            \"stepType\": \"elasticsearch\",\n            \"parameter\": {\n                \"column\": [\n                    {\n                        \"name\": \"es_id\",\n                        \"type\": \"id\"\n                    },\n                    {\n                        \"name\": \"consumeGoodsTotal\",\n                        \"type\": \"long\"\n                    },\n                    {\n                        \"name\": \"consumeOrderTotal\",\n                        \"type\": \"long\"\n                    },\n                    {\n                        \"origin\": true,\n                        \"format\": \"yyyy-MM-dd HH:mm:ss\",\n                        \"name\": \"firstConsumeTime\",\n                        \"type\": \"date\"\n                    },\n                    {\n                        \"name\": \"maxSinglePayedAmt\",\n                        \"type\": \"long\"\n                    },\n                    {\n                        \"name\": \"payedAmt\",\n                        \"type\": \"long\"\n                    },\n                    {\n                        \"name\": \"phoneNo\",\n                        \"type\": \"keyword\"\n                    },\n                    {\n                        \"name\": \"platformType\",\n                        \"type\": \"keyword\"\n                    },\n                    {\n                        \"name\": \"shopId\",\n                        \"type\": \"keyword\"\n                    },\n                    {\n                        \"name\": \"shopName\",\n                        \"type\": \"keyword\"\n                    }\n                ],\n                \"aliasMode\": \"append\",\n                \"index\": \"all_platform_consume_total_3\",\n                \"type\": \"_doc\",\n                \"splitter\": \",\",\n                \"timeout\": 600000,\n                \"multiThread\": true,\n                \"actionType\": \"index\",\n                \"indexType\": \"\",\n                \"cleanup\": false,\n                \"datasource\": \"es_siyuxingqiu\",\n                \"discovery\": false,\n                \"trySize\": 30,\n                \"alias\": \"\",\n                \"dynamic\": false,\n                \"ignoreParseError\": false,\n                \"batchSize\": 1000,\n                \"compression\": true,\n                \"ignoreWriteError\": false\n            },\n            \"name\": \"Writer\",\n            \"category\": \"writer\"\n        }\n    ],\n    \"version\": \"2.0\",\n    \"order\": {\n        \"hops\": [\n            {\n                \"from\": \"Reader\",\n                \"to\": \"Writer\"\n            }\n        ]\n    },\n    \"setting\": {\n        \"errorLimit\": {\n            \"record\": \"\"\n        },\n        \"speed\": {\n            \"throttle\": false,\n            \"concurrent\": 2\n        }\n    }\n}\n```\n\n# 四、dataworks实时同步到kafka\n\n```xml\n{\n  \"type\": \"job\",\n  \"steps\": [\n    {\n      \"stepType\": \"mysqlbinlog\",\n      \"parameter\": {\n        \"column\": [\n          \"_sequence_id_\",\n          \"_operation_type_\",\n          \"_execute_time_\",\n          \"_before_image_\",\n          \"_after_image_\",\n          \"id\",\n          \"chat_log_id\",\n          \"context_id\",\n          \"msg_id\",\n          \"msg_time\",\n          \"msg_type\",\n          \"main_account\",\n          \"main_account_hash\",\n          \"app_key\",\n          \"cid\",\n          \"from_id\",\n          \"to_id\",\n          \"content\",\n          \"content_type\",\n          \"person_type\",\n          \"is_correct\",\n          \"need_human\",\n          \"error_reason\",\n          \"remark\",\n          \"updated_at\",\n          \"created_at\",\n          \"question\",\n          \"ask_method_name\",\n          \"is_matched\",\n          \"ai_label_id\",\n          \"is_default\",\n          \"inner_msg_type\",\n          \"order_status\",\n          \"has_answer_timeout\",\n          \"is_deleted\",\n          \"remind_type\",\n          \"need_human_reason\",\n          \"replay_scene\",\n          \"replay_scene_type\",\n          \"feature\",\n          \"chat_msg_type\",\n          \"mq_msg_id\",\n          \"mq_msg_text\"\n        ],\n        \"connection\": [\n          {\n            \"datasource\": \"binlog_chatlog_m0\",\n            \"table\": [\n              \"chat_log_detail_0\",\n              \"chat_log_detail_1\",\n              \"chat_log_detail_2\",\n              \"chat_log_detail_3\",\n              \"chat_log_detail_4\",\n              \"chat_log_detail_5\",\n              \"chat_log_detail_6\",\n              \"chat_log_detail_7\",\n              \"chat_log_detail_8\",\n              \"chat_log_detail_9\",\n              \"chat_log_detail_10\",\n              \"chat_log_detail_11\",\n              \"chat_log_detail_12\",\n              \"chat_log_detail_13\",\n              \"chat_log_detail_14\",\n              \"chat_log_detail_15\",\n              \"chat_log_detail_16\",\n              \"chat_log_detail_17\",\n              \"chat_log_detail_18\",\n              \"chat_log_detail_19\",\n              \"chat_log_detail_20\",\n              \"chat_log_detail_21\",\n              \"chat_log_detail_22\",\n              \"chat_log_detail_23\",\n              \"chat_log_detail_24\",\n              \"chat_log_detail_25\",\n              \"chat_log_detail_26\",\n              \"chat_log_detail_27\",\n              \"chat_log_detail_28\",\n              \"chat_log_detail_29\",\n              \"chat_log_detail_30\",\n              \"chat_log_detail_31\",\n              \"chat_log_detail_32\",\n              \"chat_log_detail_33\",\n              \"chat_log_detail_34\",\n              \"chat_log_detail_35\",\n              \"chat_log_detail_36\",\n              \"chat_log_detail_37\",\n              \"chat_log_detail_38\",\n              \"chat_log_detail_39\",\n              \"chat_log_detail_40\",\n              \"chat_log_detail_41\",\n              \"chat_log_detail_42\",\n              \"chat_log_detail_43\",\n              \"chat_log_detail_44\",\n              \"chat_log_detail_45\",\n              \"chat_log_detail_46\",\n              \"chat_log_detail_47\",\n              \"chat_log_detail_48\",\n              \"chat_log_detail_49\",\n              \"chat_log_detail_50\",\n              \"chat_log_detail_51\",\n              \"chat_log_detail_52\",\n              \"chat_log_detail_53\",\n              \"chat_log_detail_54\",\n              \"chat_log_detail_55\",\n              \"chat_log_detail_56\",\n              \"chat_log_detail_57\",\n              \"chat_log_detail_58\",\n              \"chat_log_detail_59\",\n              \"chat_log_detail_60\",\n              \"chat_log_detail_61\",\n              \"chat_log_detail_62\",\n              \"chat_log_detail_63\",\n              \"chat_log_detail_64\",\n              \"chat_log_detail_65\",\n              \"chat_log_detail_66\",\n              \"chat_log_detail_67\",\n              \"chat_log_detail_68\",\n              \"chat_log_detail_69\",\n              \"chat_log_detail_70\",\n              \"chat_log_detail_71\",\n              \"chat_log_detail_72\",\n              \"chat_log_detail_73\",\n              \"chat_log_detail_74\",\n              \"chat_log_detail_75\",\n              \"chat_log_detail_76\",\n              \"chat_log_detail_77\",\n              \"chat_log_detail_78\",\n              \"chat_log_detail_79\",\n              \"chat_log_detail_80\",\n              \"chat_log_detail_81\",\n              \"chat_log_detail_82\",\n              \"chat_log_detail_83\",\n              \"chat_log_detail_84\",\n              \"chat_log_detail_85\",\n              \"chat_log_detail_86\",\n              \"chat_log_detail_87\",\n              \"chat_log_detail_88\",\n              \"chat_log_detail_89\",\n              \"chat_log_detail_90\",\n              \"chat_log_detail_91\",\n              \"chat_log_detail_92\",\n              \"chat_log_detail_93\",\n              \"chat_log_detail_94\",\n              \"chat_log_detail_95\",\n              \"chat_log_detail_96\",\n              \"chat_log_detail_97\",\n              \"chat_log_detail_98\",\n              \"chat_log_detail_99\",\n              \"chat_log_detail_100\",\n              \"chat_log_detail_101\",\n              \"chat_log_detail_102\",\n              \"chat_log_detail_103\",\n              \"chat_log_detail_104\",\n              \"chat_log_detail_105\",\n              \"chat_log_detail_106\",\n              \"chat_log_detail_107\",\n              \"chat_log_detail_108\",\n              \"chat_log_detail_109\",\n              \"chat_log_detail_110\",\n              \"chat_log_detail_111\",\n              \"chat_log_detail_112\",\n              \"chat_log_detail_113\",\n              \"chat_log_detail_114\",\n              \"chat_log_detail_115\",\n              \"chat_log_detail_116\",\n              \"chat_log_detail_117\",\n              \"chat_log_detail_118\",\n              \"chat_log_detail_119\",\n              \"chat_log_detail_120\",\n              \"chat_log_detail_121\",\n              \"chat_log_detail_122\",\n              \"chat_log_detail_123\",\n              \"chat_log_detail_124\",\n              \"chat_log_detail_125\",\n              \"chat_log_detail_126\",\n              \"chat_log_detail_127\"\n            ]\n          },\n          {\n            \"datasource\": \"binlog_chatlog_m1\",\n            \"table\": [\n              \"chat_log_detail_128\",\n              \"chat_log_detail_129\",\n              \"chat_log_detail_130\",\n              \"chat_log_detail_131\",\n              \"chat_log_detail_132\",\n              \"chat_log_detail_133\",\n              \"chat_log_detail_134\",\n              \"chat_log_detail_135\",\n              \"chat_log_detail_136\",\n              \"chat_log_detail_137\",\n              \"chat_log_detail_138\",\n              \"chat_log_detail_139\",\n              \"chat_log_detail_140\",\n              \"chat_log_detail_141\",\n              \"chat_log_detail_142\",\n              \"chat_log_detail_143\",\n              \"chat_log_detail_144\",\n              \"chat_log_detail_145\",\n              \"chat_log_detail_146\",\n              \"chat_log_detail_147\",\n              \"chat_log_detail_148\",\n              \"chat_log_detail_149\",\n              \"chat_log_detail_150\",\n              \"chat_log_detail_151\",\n              \"chat_log_detail_152\",\n              \"chat_log_detail_153\",\n              \"chat_log_detail_154\",\n              \"chat_log_detail_155\",\n              \"chat_log_detail_156\",\n              \"chat_log_detail_157\",\n              \"chat_log_detail_158\",\n              \"chat_log_detail_159\",\n              \"chat_log_detail_160\",\n              \"chat_log_detail_161\",\n              \"chat_log_detail_162\",\n              \"chat_log_detail_163\",\n              \"chat_log_detail_164\",\n              \"chat_log_detail_165\",\n              \"chat_log_detail_166\",\n              \"chat_log_detail_167\",\n              \"chat_log_detail_168\",\n              \"chat_log_detail_169\",\n              \"chat_log_detail_170\",\n              \"chat_log_detail_171\",\n              \"chat_log_detail_172\",\n              \"chat_log_detail_173\",\n              \"chat_log_detail_174\",\n              \"chat_log_detail_175\",\n              \"chat_log_detail_176\",\n              \"chat_log_detail_177\",\n              \"chat_log_detail_178\",\n              \"chat_log_detail_179\",\n              \"chat_log_detail_180\",\n              \"chat_log_detail_181\",\n              \"chat_log_detail_182\",\n              \"chat_log_detail_183\",\n              \"chat_log_detail_184\",\n              \"chat_log_detail_185\",\n              \"chat_log_detail_186\",\n              \"chat_log_detail_187\",\n              \"chat_log_detail_188\",\n              \"chat_log_detail_189\",\n              \"chat_log_detail_190\",\n              \"chat_log_detail_191\",\n              \"chat_log_detail_192\",\n              \"chat_log_detail_193\",\n              \"chat_log_detail_194\",\n              \"chat_log_detail_195\",\n              \"chat_log_detail_196\",\n              \"chat_log_detail_197\",\n              \"chat_log_detail_198\",\n              \"chat_log_detail_199\",\n              \"chat_log_detail_200\",\n              \"chat_log_detail_201\",\n              \"chat_log_detail_202\",\n              \"chat_log_detail_203\",\n              \"chat_log_detail_204\",\n              \"chat_log_detail_205\",\n              \"chat_log_detail_206\",\n              \"chat_log_detail_207\",\n              \"chat_log_detail_208\",\n              \"chat_log_detail_209\",\n              \"chat_log_detail_210\",\n              \"chat_log_detail_211\",\n              \"chat_log_detail_212\",\n              \"chat_log_detail_213\",\n              \"chat_log_detail_214\",\n              \"chat_log_detail_215\",\n              \"chat_log_detail_216\",\n              \"chat_log_detail_217\",\n              \"chat_log_detail_218\",\n              \"chat_log_detail_219\",\n              \"chat_log_detail_220\",\n              \"chat_log_detail_221\",\n              \"chat_log_detail_222\",\n              \"chat_log_detail_223\",\n              \"chat_log_detail_224\",\n              \"chat_log_detail_225\",\n              \"chat_log_detail_226\",\n              \"chat_log_detail_227\",\n              \"chat_log_detail_228\",\n              \"chat_log_detail_229\",\n              \"chat_log_detail_230\",\n              \"chat_log_detail_231\",\n              \"chat_log_detail_232\",\n              \"chat_log_detail_233\",\n              \"chat_log_detail_234\",\n              \"chat_log_detail_235\",\n              \"chat_log_detail_236\",\n              \"chat_log_detail_237\",\n              \"chat_log_detail_238\",\n              \"chat_log_detail_239\",\n              \"chat_log_detail_240\",\n              \"chat_log_detail_241\",\n              \"chat_log_detail_242\",\n              \"chat_log_detail_243\",\n              \"chat_log_detail_244\",\n              \"chat_log_detail_245\",\n              \"chat_log_detail_246\",\n              \"chat_log_detail_247\",\n              \"chat_log_detail_248\",\n              \"chat_log_detail_249\",\n              \"chat_log_detail_250\",\n              \"chat_log_detail_251\",\n              \"chat_log_detail_252\",\n              \"chat_log_detail_253\",\n              \"chat_log_detail_254\",\n              \"chat_log_detail_255\"\n            ]\n          },\n          {\n            \"datasource\": \"binlog_chatlog_m2\",\n            \"table\": [\n              \"chat_log_detail_256\",\n              \"chat_log_detail_257\",\n              \"chat_log_detail_258\",\n              \"chat_log_detail_259\",\n              \"chat_log_detail_260\",\n              \"chat_log_detail_261\",\n              \"chat_log_detail_262\",\n              \"chat_log_detail_263\",\n              \"chat_log_detail_264\",\n              \"chat_log_detail_265\",\n              \"chat_log_detail_266\",\n              \"chat_log_detail_267\",\n              \"chat_log_detail_268\",\n              \"chat_log_detail_269\",\n              \"chat_log_detail_270\",\n              \"chat_log_detail_271\",\n              \"chat_log_detail_272\",\n              \"chat_log_detail_273\",\n              \"chat_log_detail_274\",\n              \"chat_log_detail_275\",\n              \"chat_log_detail_276\",\n              \"chat_log_detail_277\",\n              \"chat_log_detail_278\",\n              \"chat_log_detail_279\",\n              \"chat_log_detail_280\",\n              \"chat_log_detail_281\",\n              \"chat_log_detail_282\",\n              \"chat_log_detail_283\",\n              \"chat_log_detail_284\",\n              \"chat_log_detail_285\",\n              \"chat_log_detail_286\",\n              \"chat_log_detail_287\",\n              \"chat_log_detail_288\",\n              \"chat_log_detail_289\",\n              \"chat_log_detail_290\",\n              \"chat_log_detail_291\",\n              \"chat_log_detail_292\",\n              \"chat_log_detail_293\",\n              \"chat_log_detail_294\",\n              \"chat_log_detail_295\",\n              \"chat_log_detail_296\",\n              \"chat_log_detail_297\",\n              \"chat_log_detail_298\",\n              \"chat_log_detail_299\",\n              \"chat_log_detail_300\",\n              \"chat_log_detail_301\",\n              \"chat_log_detail_302\",\n              \"chat_log_detail_303\",\n              \"chat_log_detail_304\",\n              \"chat_log_detail_305\",\n              \"chat_log_detail_306\",\n              \"chat_log_detail_307\",\n              \"chat_log_detail_308\",\n              \"chat_log_detail_309\",\n              \"chat_log_detail_310\",\n              \"chat_log_detail_311\",\n              \"chat_log_detail_312\",\n              \"chat_log_detail_313\",\n              \"chat_log_detail_314\",\n              \"chat_log_detail_315\",\n              \"chat_log_detail_316\",\n              \"chat_log_detail_317\",\n              \"chat_log_detail_318\",\n              \"chat_log_detail_319\",\n              \"chat_log_detail_320\",\n              \"chat_log_detail_321\",\n              \"chat_log_detail_322\",\n              \"chat_log_detail_323\",\n              \"chat_log_detail_324\",\n              \"chat_log_detail_325\",\n              \"chat_log_detail_326\",\n              \"chat_log_detail_327\",\n              \"chat_log_detail_328\",\n              \"chat_log_detail_329\",\n              \"chat_log_detail_330\",\n              \"chat_log_detail_331\",\n              \"chat_log_detail_332\",\n              \"chat_log_detail_333\",\n              \"chat_log_detail_334\",\n              \"chat_log_detail_335\",\n              \"chat_log_detail_336\",\n              \"chat_log_detail_337\",\n              \"chat_log_detail_338\",\n              \"chat_log_detail_339\",\n              \"chat_log_detail_340\",\n              \"chat_log_detail_341\",\n              \"chat_log_detail_342\",\n              \"chat_log_detail_343\",\n              \"chat_log_detail_344\",\n              \"chat_log_detail_345\",\n              \"chat_log_detail_346\",\n              \"chat_log_detail_347\",\n              \"chat_log_detail_348\",\n              \"chat_log_detail_349\",\n              \"chat_log_detail_350\",\n              \"chat_log_detail_351\",\n              \"chat_log_detail_352\",\n              \"chat_log_detail_353\",\n              \"chat_log_detail_354\",\n              \"chat_log_detail_355\",\n              \"chat_log_detail_356\",\n              \"chat_log_detail_357\",\n              \"chat_log_detail_358\",\n              \"chat_log_detail_359\",\n              \"chat_log_detail_360\",\n              \"chat_log_detail_361\",\n              \"chat_log_detail_362\",\n              \"chat_log_detail_363\",\n              \"chat_log_detail_364\",\n              \"chat_log_detail_365\",\n              \"chat_log_detail_366\",\n              \"chat_log_detail_367\",\n              \"chat_log_detail_368\",\n              \"chat_log_detail_369\",\n              \"chat_log_detail_370\",\n              \"chat_log_detail_371\",\n              \"chat_log_detail_372\",\n              \"chat_log_detail_373\",\n              \"chat_log_detail_374\",\n              \"chat_log_detail_375\",\n              \"chat_log_detail_376\",\n              \"chat_log_detail_377\",\n              \"chat_log_detail_378\",\n              \"chat_log_detail_379\",\n              \"chat_log_detail_380\",\n              \"chat_log_detail_381\",\n              \"chat_log_detail_382\",\n              \"chat_log_detail_383\"\n            ]\n          },\n          {\n            \"datasource\": \"binlog_chatlog_m3\",\n            \"table\": [\n              \"chat_log_detail_384\",\n              \"chat_log_detail_385\",\n              \"chat_log_detail_386\",\n              \"chat_log_detail_387\",\n              \"chat_log_detail_388\",\n              \"chat_log_detail_389\",\n              \"chat_log_detail_390\",\n              \"chat_log_detail_391\",\n              \"chat_log_detail_392\",\n              \"chat_log_detail_393\",\n              \"chat_log_detail_394\",\n              \"chat_log_detail_395\",\n              \"chat_log_detail_396\",\n              \"chat_log_detail_397\",\n              \"chat_log_detail_398\",\n              \"chat_log_detail_399\",\n              \"chat_log_detail_400\",\n              \"chat_log_detail_401\",\n              \"chat_log_detail_402\",\n              \"chat_log_detail_403\",\n              \"chat_log_detail_404\",\n              \"chat_log_detail_405\",\n              \"chat_log_detail_406\",\n              \"chat_log_detail_407\",\n              \"chat_log_detail_408\",\n              \"chat_log_detail_409\",\n              \"chat_log_detail_410\",\n              \"chat_log_detail_411\",\n              \"chat_log_detail_412\",\n              \"chat_log_detail_413\",\n              \"chat_log_detail_414\",\n              \"chat_log_detail_415\",\n              \"chat_log_detail_416\",\n              \"chat_log_detail_417\",\n              \"chat_log_detail_418\",\n              \"chat_log_detail_419\",\n              \"chat_log_detail_420\",\n              \"chat_log_detail_421\",\n              \"chat_log_detail_422\",\n              \"chat_log_detail_423\",\n              \"chat_log_detail_424\",\n              \"chat_log_detail_425\",\n              \"chat_log_detail_426\",\n              \"chat_log_detail_427\",\n              \"chat_log_detail_428\",\n              \"chat_log_detail_429\",\n              \"chat_log_detail_430\",\n              \"chat_log_detail_431\",\n              \"chat_log_detail_432\",\n              \"chat_log_detail_433\",\n              \"chat_log_detail_434\",\n              \"chat_log_detail_435\",\n              \"chat_log_detail_436\",\n              \"chat_log_detail_437\",\n              \"chat_log_detail_438\",\n              \"chat_log_detail_439\",\n              \"chat_log_detail_440\",\n              \"chat_log_detail_441\",\n              \"chat_log_detail_442\",\n              \"chat_log_detail_443\",\n              \"chat_log_detail_444\",\n              \"chat_log_detail_445\",\n              \"chat_log_detail_446\",\n              \"chat_log_detail_447\",\n              \"chat_log_detail_448\",\n              \"chat_log_detail_449\",\n              \"chat_log_detail_450\",\n              \"chat_log_detail_451\",\n              \"chat_log_detail_452\",\n              \"chat_log_detail_453\",\n              \"chat_log_detail_454\",\n              \"chat_log_detail_455\",\n              \"chat_log_detail_456\",\n              \"chat_log_detail_457\",\n              \"chat_log_detail_458\",\n              \"chat_log_detail_459\",\n              \"chat_log_detail_460\",\n              \"chat_log_detail_461\",\n              \"chat_log_detail_462\",\n              \"chat_log_detail_463\",\n              \"chat_log_detail_464\",\n              \"chat_log_detail_465\",\n              \"chat_log_detail_466\",\n              \"chat_log_detail_467\",\n              \"chat_log_detail_468\",\n              \"chat_log_detail_469\",\n              \"chat_log_detail_470\",\n              \"chat_log_detail_471\",\n              \"chat_log_detail_472\",\n              \"chat_log_detail_473\",\n              \"chat_log_detail_474\",\n              \"chat_log_detail_475\",\n              \"chat_log_detail_476\",\n              \"chat_log_detail_477\",\n              \"chat_log_detail_478\",\n              \"chat_log_detail_479\",\n              \"chat_log_detail_480\",\n              \"chat_log_detail_481\",\n              \"chat_log_detail_482\",\n              \"chat_log_detail_483\",\n              \"chat_log_detail_484\",\n              \"chat_log_detail_485\",\n              \"chat_log_detail_486\",\n              \"chat_log_detail_487\",\n              \"chat_log_detail_488\",\n              \"chat_log_detail_489\",\n              \"chat_log_detail_490\",\n              \"chat_log_detail_491\",\n              \"chat_log_detail_492\",\n              \"chat_log_detail_493\",\n              \"chat_log_detail_494\",\n              \"chat_log_detail_495\",\n              \"chat_log_detail_496\",\n              \"chat_log_detail_497\",\n              \"chat_log_detail_498\",\n              \"chat_log_detail_499\",\n              \"chat_log_detail_500\",\n              \"chat_log_detail_501\",\n              \"chat_log_detail_502\",\n              \"chat_log_detail_503\",\n              \"chat_log_detail_504\",\n              \"chat_log_detail_505\",\n              \"chat_log_detail_506\",\n              \"chat_log_detail_507\",\n              \"chat_log_detail_508\",\n              \"chat_log_detail_509\",\n              \"chat_log_detail_510\",\n              \"chat_log_detail_511\"\n            ]\n          },\n          {\n            \"datasource\": \"binlog_chatlog_m4\",\n            \"table\": [\n              \"chat_log_detail_512\",\n              \"chat_log_detail_513\",\n              \"chat_log_detail_514\",\n              \"chat_log_detail_515\",\n              \"chat_log_detail_516\",\n              \"chat_log_detail_517\",\n              \"chat_log_detail_518\",\n              \"chat_log_detail_519\",\n              \"chat_log_detail_520\",\n              \"chat_log_detail_521\",\n              \"chat_log_detail_522\",\n              \"chat_log_detail_523\",\n              \"chat_log_detail_524\",\n              \"chat_log_detail_525\",\n              \"chat_log_detail_526\",\n              \"chat_log_detail_527\",\n              \"chat_log_detail_528\",\n              \"chat_log_detail_529\",\n              \"chat_log_detail_530\",\n              \"chat_log_detail_531\",\n              \"chat_log_detail_532\",\n              \"chat_log_detail_533\",\n              \"chat_log_detail_534\",\n              \"chat_log_detail_535\",\n              \"chat_log_detail_536\",\n              \"chat_log_detail_537\",\n              \"chat_log_detail_538\",\n              \"chat_log_detail_539\",\n              \"chat_log_detail_540\",\n              \"chat_log_detail_541\",\n              \"chat_log_detail_542\",\n              \"chat_log_detail_543\",\n              \"chat_log_detail_544\",\n              \"chat_log_detail_545\",\n              \"chat_log_detail_546\",\n              \"chat_log_detail_547\",\n              \"chat_log_detail_548\",\n              \"chat_log_detail_549\",\n              \"chat_log_detail_550\",\n              \"chat_log_detail_551\",\n              \"chat_log_detail_552\",\n              \"chat_log_detail_553\",\n              \"chat_log_detail_554\",\n              \"chat_log_detail_555\",\n              \"chat_log_detail_556\",\n              \"chat_log_detail_557\",\n              \"chat_log_detail_558\",\n              \"chat_log_detail_559\",\n              \"chat_log_detail_560\",\n              \"chat_log_detail_561\",\n              \"chat_log_detail_562\",\n              \"chat_log_detail_563\",\n              \"chat_log_detail_564\",\n              \"chat_log_detail_565\",\n              \"chat_log_detail_566\",\n              \"chat_log_detail_567\",\n              \"chat_log_detail_568\",\n              \"chat_log_detail_569\",\n              \"chat_log_detail_570\",\n              \"chat_log_detail_571\",\n              \"chat_log_detail_572\",\n              \"chat_log_detail_573\",\n              \"chat_log_detail_574\",\n              \"chat_log_detail_575\",\n              \"chat_log_detail_576\",\n              \"chat_log_detail_577\",\n              \"chat_log_detail_578\",\n              \"chat_log_detail_579\",\n              \"chat_log_detail_580\",\n              \"chat_log_detail_581\",\n              \"chat_log_detail_582\",\n              \"chat_log_detail_583\",\n              \"chat_log_detail_584\",\n              \"chat_log_detail_585\",\n              \"chat_log_detail_586\",\n              \"chat_log_detail_587\",\n              \"chat_log_detail_588\",\n              \"chat_log_detail_589\",\n              \"chat_log_detail_590\",\n              \"chat_log_detail_591\",\n              \"chat_log_detail_592\",\n              \"chat_log_detail_593\",\n              \"chat_log_detail_594\",\n              \"chat_log_detail_595\",\n              \"chat_log_detail_596\",\n              \"chat_log_detail_597\",\n              \"chat_log_detail_598\",\n              \"chat_log_detail_599\",\n              \"chat_log_detail_600\",\n              \"chat_log_detail_601\",\n              \"chat_log_detail_602\",\n              \"chat_log_detail_603\",\n              \"chat_log_detail_604\",\n              \"chat_log_detail_605\",\n              \"chat_log_detail_606\",\n              \"chat_log_detail_607\",\n              \"chat_log_detail_608\",\n              \"chat_log_detail_609\",\n              \"chat_log_detail_610\",\n              \"chat_log_detail_611\",\n              \"chat_log_detail_612\",\n              \"chat_log_detail_613\",\n              \"chat_log_detail_614\",\n              \"chat_log_detail_615\",\n              \"chat_log_detail_616\",\n              \"chat_log_detail_617\",\n              \"chat_log_detail_618\",\n              \"chat_log_detail_619\",\n              \"chat_log_detail_620\",\n              \"chat_log_detail_621\",\n              \"chat_log_detail_622\",\n              \"chat_log_detail_623\",\n              \"chat_log_detail_624\",\n              \"chat_log_detail_625\",\n              \"chat_log_detail_626\",\n              \"chat_log_detail_627\",\n              \"chat_log_detail_628\",\n              \"chat_log_detail_629\",\n              \"chat_log_detail_630\",\n              \"chat_log_detail_631\",\n              \"chat_log_detail_632\",\n              \"chat_log_detail_633\",\n              \"chat_log_detail_634\",\n              \"chat_log_detail_635\",\n              \"chat_log_detail_636\",\n              \"chat_log_detail_637\",\n              \"chat_log_detail_638\",\n              \"chat_log_detail_639\"\n            ]\n          },\n          {\n            \"datasource\": \"binlog_chatlog_m5\",\n            \"table\": [\n              \"chat_log_detail_640\",\n              \"chat_log_detail_641\",\n              \"chat_log_detail_642\",\n              \"chat_log_detail_643\",\n              \"chat_log_detail_644\",\n              \"chat_log_detail_645\",\n              \"chat_log_detail_646\",\n              \"chat_log_detail_647\",\n              \"chat_log_detail_648\",\n              \"chat_log_detail_649\",\n              \"chat_log_detail_650\",\n              \"chat_log_detail_651\",\n              \"chat_log_detail_652\",\n              \"chat_log_detail_653\",\n              \"chat_log_detail_654\",\n              \"chat_log_detail_655\",\n              \"chat_log_detail_656\",\n              \"chat_log_detail_657\",\n              \"chat_log_detail_658\",\n              \"chat_log_detail_659\",\n              \"chat_log_detail_660\",\n              \"chat_log_detail_661\",\n              \"chat_log_detail_662\",\n              \"chat_log_detail_663\",\n              \"chat_log_detail_664\",\n              \"chat_log_detail_665\",\n              \"chat_log_detail_666\",\n              \"chat_log_detail_667\",\n              \"chat_log_detail_668\",\n              \"chat_log_detail_669\",\n              \"chat_log_detail_670\",\n              \"chat_log_detail_671\",\n              \"chat_log_detail_672\",\n              \"chat_log_detail_673\",\n              \"chat_log_detail_674\",\n              \"chat_log_detail_675\",\n              \"chat_log_detail_676\",\n              \"chat_log_detail_677\",\n              \"chat_log_detail_678\",\n              \"chat_log_detail_679\",\n              \"chat_log_detail_680\",\n              \"chat_log_detail_681\",\n              \"chat_log_detail_682\",\n              \"chat_log_detail_683\",\n              \"chat_log_detail_684\",\n              \"chat_log_detail_685\",\n              \"chat_log_detail_686\",\n              \"chat_log_detail_687\",\n              \"chat_log_detail_688\",\n              \"chat_log_detail_689\",\n              \"chat_log_detail_690\",\n              \"chat_log_detail_691\",\n              \"chat_log_detail_692\",\n              \"chat_log_detail_693\",\n              \"chat_log_detail_694\",\n              \"chat_log_detail_695\",\n              \"chat_log_detail_696\",\n              \"chat_log_detail_697\",\n              \"chat_log_detail_698\",\n              \"chat_log_detail_699\",\n              \"chat_log_detail_700\",\n              \"chat_log_detail_701\",\n              \"chat_log_detail_702\",\n              \"chat_log_detail_703\",\n              \"chat_log_detail_704\",\n              \"chat_log_detail_705\",\n              \"chat_log_detail_706\",\n              \"chat_log_detail_707\",\n              \"chat_log_detail_708\",\n              \"chat_log_detail_709\",\n              \"chat_log_detail_710\",\n              \"chat_log_detail_711\",\n              \"chat_log_detail_712\",\n              \"chat_log_detail_713\",\n              \"chat_log_detail_714\",\n              \"chat_log_detail_715\",\n              \"chat_log_detail_716\",\n              \"chat_log_detail_717\",\n              \"chat_log_detail_718\",\n              \"chat_log_detail_719\",\n              \"chat_log_detail_720\",\n              \"chat_log_detail_721\",\n              \"chat_log_detail_722\",\n              \"chat_log_detail_723\",\n              \"chat_log_detail_724\",\n              \"chat_log_detail_725\",\n              \"chat_log_detail_726\",\n              \"chat_log_detail_727\",\n              \"chat_log_detail_728\",\n              \"chat_log_detail_729\",\n              \"chat_log_detail_730\",\n              \"chat_log_detail_731\",\n              \"chat_log_detail_732\",\n              \"chat_log_detail_733\",\n              \"chat_log_detail_734\",\n              \"chat_log_detail_735\",\n              \"chat_log_detail_736\",\n              \"chat_log_detail_737\",\n              \"chat_log_detail_738\",\n              \"chat_log_detail_739\",\n              \"chat_log_detail_740\",\n              \"chat_log_detail_741\",\n              \"chat_log_detail_742\",\n              \"chat_log_detail_743\",\n              \"chat_log_detail_744\",\n              \"chat_log_detail_745\",\n              \"chat_log_detail_746\",\n              \"chat_log_detail_747\",\n              \"chat_log_detail_748\",\n              \"chat_log_detail_749\",\n              \"chat_log_detail_750\",\n              \"chat_log_detail_751\",\n              \"chat_log_detail_752\",\n              \"chat_log_detail_753\",\n              \"chat_log_detail_754\",\n              \"chat_log_detail_755\",\n              \"chat_log_detail_756\",\n              \"chat_log_detail_757\",\n              \"chat_log_detail_758\",\n              \"chat_log_detail_759\",\n              \"chat_log_detail_760\",\n              \"chat_log_detail_761\",\n              \"chat_log_detail_762\",\n              \"chat_log_detail_763\",\n              \"chat_log_detail_764\",\n              \"chat_log_detail_765\",\n              \"chat_log_detail_766\",\n              \"chat_log_detail_767\"\n            ]\n          },\n          {\n            \"datasource\": \"binlog_chatlog_m6\",\n            \"table\": [\n              \"chat_log_detail_768\",\n              \"chat_log_detail_769\",\n              \"chat_log_detail_770\",\n              \"chat_log_detail_771\",\n              \"chat_log_detail_772\",\n              \"chat_log_detail_773\",\n              \"chat_log_detail_774\",\n              \"chat_log_detail_775\",\n              \"chat_log_detail_776\",\n              \"chat_log_detail_777\",\n              \"chat_log_detail_778\",\n              \"chat_log_detail_779\",\n              \"chat_log_detail_780\",\n              \"chat_log_detail_781\",\n              \"chat_log_detail_782\",\n              \"chat_log_detail_783\",\n              \"chat_log_detail_784\",\n              \"chat_log_detail_785\",\n              \"chat_log_detail_786\",\n              \"chat_log_detail_787\",\n              \"chat_log_detail_788\",\n              \"chat_log_detail_789\",\n              \"chat_log_detail_790\",\n              \"chat_log_detail_791\",\n              \"chat_log_detail_792\",\n              \"chat_log_detail_793\",\n              \"chat_log_detail_794\",\n              \"chat_log_detail_795\",\n              \"chat_log_detail_796\",\n              \"chat_log_detail_797\",\n              \"chat_log_detail_798\",\n              \"chat_log_detail_799\",\n              \"chat_log_detail_800\",\n              \"chat_log_detail_801\",\n              \"chat_log_detail_802\",\n              \"chat_log_detail_803\",\n              \"chat_log_detail_804\",\n              \"chat_log_detail_805\",\n              \"chat_log_detail_806\",\n              \"chat_log_detail_807\",\n              \"chat_log_detail_808\",\n              \"chat_log_detail_809\",\n              \"chat_log_detail_810\",\n              \"chat_log_detail_811\",\n              \"chat_log_detail_812\",\n              \"chat_log_detail_813\",\n              \"chat_log_detail_814\",\n              \"chat_log_detail_815\",\n              \"chat_log_detail_816\",\n              \"chat_log_detail_817\",\n              \"chat_log_detail_818\",\n              \"chat_log_detail_819\",\n              \"chat_log_detail_820\",\n              \"chat_log_detail_821\",\n              \"chat_log_detail_822\",\n              \"chat_log_detail_823\",\n              \"chat_log_detail_824\",\n              \"chat_log_detail_825\",\n              \"chat_log_detail_826\",\n              \"chat_log_detail_827\",\n              \"chat_log_detail_828\",\n              \"chat_log_detail_829\",\n              \"chat_log_detail_830\",\n              \"chat_log_detail_831\",\n              \"chat_log_detail_832\",\n              \"chat_log_detail_833\",\n              \"chat_log_detail_834\",\n              \"chat_log_detail_835\",\n              \"chat_log_detail_836\",\n              \"chat_log_detail_837\",\n              \"chat_log_detail_838\",\n              \"chat_log_detail_839\",\n              \"chat_log_detail_840\",\n              \"chat_log_detail_841\",\n              \"chat_log_detail_842\",\n              \"chat_log_detail_843\",\n              \"chat_log_detail_844\",\n              \"chat_log_detail_845\",\n              \"chat_log_detail_846\",\n              \"chat_log_detail_847\",\n              \"chat_log_detail_848\",\n              \"chat_log_detail_849\",\n              \"chat_log_detail_850\",\n              \"chat_log_detail_851\",\n              \"chat_log_detail_852\",\n              \"chat_log_detail_853\",\n              \"chat_log_detail_854\",\n              \"chat_log_detail_855\",\n              \"chat_log_detail_856\",\n              \"chat_log_detail_857\",\n              \"chat_log_detail_858\",\n              \"chat_log_detail_859\",\n              \"chat_log_detail_860\",\n              \"chat_log_detail_861\",\n              \"chat_log_detail_862\",\n              \"chat_log_detail_863\",\n              \"chat_log_detail_864\",\n              \"chat_log_detail_865\",\n              \"chat_log_detail_866\",\n              \"chat_log_detail_867\",\n              \"chat_log_detail_868\",\n              \"chat_log_detail_869\",\n              \"chat_log_detail_870\",\n              \"chat_log_detail_871\",\n              \"chat_log_detail_872\",\n              \"chat_log_detail_873\",\n              \"chat_log_detail_874\",\n              \"chat_log_detail_875\",\n              \"chat_log_detail_876\",\n              \"chat_log_detail_877\",\n              \"chat_log_detail_878\",\n              \"chat_log_detail_879\",\n              \"chat_log_detail_880\",\n              \"chat_log_detail_881\",\n              \"chat_log_detail_882\",\n              \"chat_log_detail_883\",\n              \"chat_log_detail_884\",\n              \"chat_log_detail_885\",\n              \"chat_log_detail_886\",\n              \"chat_log_detail_887\",\n              \"chat_log_detail_888\",\n              \"chat_log_detail_889\",\n              \"chat_log_detail_890\",\n              \"chat_log_detail_891\",\n              \"chat_log_detail_892\",\n              \"chat_log_detail_893\",\n              \"chat_log_detail_894\",\n              \"chat_log_detail_895\"\n            ]\n          },\n          {\n            \"datasource\": \"binlog_chatlog_m7\",\n            \"table\": [\n              \"chat_log_detail_896\",\n              \"chat_log_detail_897\",\n              \"chat_log_detail_898\",\n              \"chat_log_detail_899\",\n              \"chat_log_detail_900\",\n              \"chat_log_detail_901\",\n              \"chat_log_detail_902\",\n              \"chat_log_detail_903\",\n              \"chat_log_detail_904\",\n              \"chat_log_detail_905\",\n              \"chat_log_detail_906\",\n              \"chat_log_detail_907\",\n              \"chat_log_detail_908\",\n              \"chat_log_detail_909\",\n              \"chat_log_detail_910\",\n              \"chat_log_detail_911\",\n              \"chat_log_detail_912\",\n              \"chat_log_detail_913\",\n              \"chat_log_detail_914\",\n              \"chat_log_detail_915\",\n              \"chat_log_detail_916\",\n              \"chat_log_detail_917\",\n              \"chat_log_detail_918\",\n              \"chat_log_detail_919\",\n              \"chat_log_detail_920\",\n              \"chat_log_detail_921\",\n              \"chat_log_detail_922\",\n              \"chat_log_detail_923\",\n              \"chat_log_detail_924\",\n              \"chat_log_detail_925\",\n              \"chat_log_detail_926\",\n              \"chat_log_detail_927\",\n              \"chat_log_detail_928\",\n              \"chat_log_detail_929\",\n              \"chat_log_detail_930\",\n              \"chat_log_detail_931\",\n              \"chat_log_detail_932\",\n              \"chat_log_detail_933\",\n              \"chat_log_detail_934\",\n              \"chat_log_detail_935\",\n              \"chat_log_detail_936\",\n              \"chat_log_detail_937\",\n              \"chat_log_detail_938\",\n              \"chat_log_detail_939\",\n              \"chat_log_detail_940\",\n              \"chat_log_detail_941\",\n              \"chat_log_detail_942\",\n              \"chat_log_detail_943\",\n              \"chat_log_detail_944\",\n              \"chat_log_detail_945\",\n              \"chat_log_detail_946\",\n              \"chat_log_detail_947\",\n              \"chat_log_detail_948\",\n              \"chat_log_detail_949\",\n              \"chat_log_detail_950\",\n              \"chat_log_detail_951\",\n              \"chat_log_detail_952\",\n              \"chat_log_detail_953\",\n              \"chat_log_detail_954\",\n              \"chat_log_detail_955\",\n              \"chat_log_detail_956\",\n              \"chat_log_detail_957\",\n              \"chat_log_detail_958\",\n              \"chat_log_detail_959\",\n              \"chat_log_detail_960\",\n              \"chat_log_detail_961\",\n              \"chat_log_detail_962\",\n              \"chat_log_detail_963\",\n              \"chat_log_detail_964\",\n              \"chat_log_detail_965\",\n              \"chat_log_detail_966\",\n              \"chat_log_detail_967\",\n              \"chat_log_detail_968\",\n              \"chat_log_detail_969\",\n              \"chat_log_detail_970\",\n              \"chat_log_detail_971\",\n              \"chat_log_detail_972\",\n              \"chat_log_detail_973\",\n              \"chat_log_detail_974\",\n              \"chat_log_detail_975\",\n              \"chat_log_detail_976\",\n              \"chat_log_detail_977\",\n              \"chat_log_detail_978\",\n              \"chat_log_detail_979\",\n              \"chat_log_detail_980\",\n              \"chat_log_detail_981\",\n              \"chat_log_detail_982\",\n              \"chat_log_detail_983\",\n              \"chat_log_detail_984\",\n              \"chat_log_detail_985\",\n              \"chat_log_detail_986\",\n              \"chat_log_detail_987\",\n              \"chat_log_detail_988\",\n              \"chat_log_detail_989\",\n              \"chat_log_detail_990\",\n              \"chat_log_detail_991\",\n              \"chat_log_detail_992\",\n              \"chat_log_detail_993\",\n              \"chat_log_detail_994\",\n              \"chat_log_detail_995\",\n              \"chat_log_detail_996\",\n              \"chat_log_detail_997\",\n              \"chat_log_detail_998\",\n              \"chat_log_detail_999\",\n              \"chat_log_detail_1000\",\n              \"chat_log_detail_1001\",\n              \"chat_log_detail_1002\",\n              \"chat_log_detail_1003\",\n              \"chat_log_detail_1004\",\n              \"chat_log_detail_1005\",\n              \"chat_log_detail_1006\",\n              \"chat_log_detail_1007\",\n              \"chat_log_detail_1008\",\n              \"chat_log_detail_1009\",\n              \"chat_log_detail_1010\",\n              \"chat_log_detail_1011\",\n              \"chat_log_detail_1012\",\n              \"chat_log_detail_1013\",\n              \"chat_log_detail_1014\",\n              \"chat_log_detail_1015\",\n              \"chat_log_detail_1016\",\n              \"chat_log_detail_1017\",\n              \"chat_log_detail_1018\",\n              \"chat_log_detail_1019\",\n              \"chat_log_detail_1020\",\n              \"chat_log_detail_1021\",\n              \"chat_log_detail_1022\",\n              \"chat_log_detail_1023\"\n            ]\n          }\n        ]\n      },\n      \"name\": \"Reader\",\n      \"category\": \"reader\"\n    },\n    {\n      \"stepType\": \"kafka\",\n      \"parameter\": {\n        \"server\": \"172.16.87.246:9092,172.16.87.247:9092,172.16.87.248:9092\",\n        \"keyColumn\": \"id\",\n        \"valueType\": \"ByteArray\",\n        \"topic\": \"weier-chat-detail-info-qa\",\n        \"batchSize\": 1024,\n        \"fieldDelimiter\": \"膼\",\n        \"keyType\": \"ByteArray\"\n      },\n      \"name\": \"Writer\",\n      \"category\": \"writer\"\n    }\n  ],\n  \"version\": \"2.0\",\n  \"order\": {\n    \"hops\": [\n      {\n        \"from\": \"Reader\",\n        \"to\": \"Writer\"\n      }\n    ]\n  },\n  \"setting\": {\n    \"errorLimit\": {},\n    \"speed\": {\n      \"concurrent\": 1,\n      \"throttle\": false\n    }\n  }\n}\n```\n\n","slug":"dataworks命令","published":1,"updated":"2021-02-22T12:13:55.758Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cklgjm1vw000qikvu7mvfbgmq","content":"<!-- toc -->\n\n<ul>\n<li><a href=\"#%E4%B8%80-ddl%E8%AF%AD%E5%8F%A5\">一、DDL语句</a></li>\n<li><a href=\"#%E4%BA%8C-%E5%88%86%E5%BA%93%E5%88%86%E8%A1%A8%E9%87%87%E9%9B%86\">二、分库分表采集</a></li>\n<li><a href=\"#%E4%B8%89-dataworks%E7%A6%BB%E7%BA%BF%E5%90%8C%E6%AD%A5%E5%88%B0es\">三、dataworks离线同步到es</a></li>\n<li><a href=\"#%E5%9B%9B-dataworks%E5%AE%9E%E6%97%B6%E5%90%8C%E6%AD%A5%E5%88%B0kafka\">四、dataworks实时同步到kafka</a></li>\n</ul>\n<!-- tocstop -->\n\n<p>[TOC]</p>\n<h1><span id=\"一-ddl语句\">一、DDL语句</span></h1><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">table</span> table_name1 <span class=\"keyword\">rename</span> <span class=\"keyword\">to</span> table_name2;   <span class=\"comment\">-- 修改表名</span></span><br><span class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">table</span> table_name1 changeowner <span class=\"keyword\">to</span> <span class=\"string\">&#x27;ALIYUN$xxx@aliyun.com&#x27;</span>; <span class=\"comment\">--修改表的所有人</span></span><br><span class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">table</span> table_name1 <span class=\"keyword\">set</span> <span class=\"keyword\">COMMENT</span> <span class=\"string\">&#x27;tbl comment&#x27;</span>; <span class=\"comment\">--修改表注释</span></span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> sale_detail <span class=\"keyword\">CHANGE</span> <span class=\"keyword\">COLUMN</span> customer_name <span class=\"keyword\">RENAME</span> <span class=\"keyword\">TO</span> customer; <span class=\"comment\">--修改字段名 </span></span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> sale_detail <span class=\"keyword\">CHANGE</span> <span class=\"keyword\">COLUMN</span> customer <span class=\"keyword\">COMMENT</span> <span class=\"string\">&#x27;customer&#x27;</span>;<span class=\"comment\">--修改字段注释</span></span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> table_name <span class=\"keyword\">CHANGE</span> <span class=\"keyword\">COLUMN</span> old_col_name new_col_name column_type <span class=\"keyword\">COMMENT</span> <span class=\"string\">&#x27;column_comment&#x27;</span>;<span class=\"comment\">--同时修改列名和注释</span></span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> table_name <span class=\"keyword\">ADD</span> <span class=\"keyword\">COLUMNS</span> (col_name1 type1 <span class=\"keyword\">comment</span> <span class=\"string\">&#x27;XXX&#x27;</span>,col_name2 type2 <span class=\"keyword\">comment</span> <span class=\"string\">&#x27;XXX&#x27;</span>);<span class=\"comment\">--添加列和注释</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h1><span id=\"二-分库分表采集\">二、分库分表采集</span></h1><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;type&quot;: &quot;job&quot;,</span><br><span class=\"line\">    &quot;steps&quot;: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            &quot;stepType&quot;: &quot;mysql&quot;,</span><br><span class=\"line\">            &quot;parameter&quot;: &#123;</span><br><span class=\"line\">                &quot;datasource&quot;: &quot;mysql_frog_m1_frog_001&quot;,</span><br><span class=\"line\">                &quot;column&quot;: [</span><br><span class=\"line\">                    &quot;seller_account_id&quot;,</span><br><span class=\"line\">                    &quot;reply_guard_flag&quot;,</span><br><span class=\"line\">                    &quot;topping_flag&quot;,</span><br><span class=\"line\">                    &quot;guard_rule&quot;,</span><br><span class=\"line\">                    &quot;plat_form&quot;,</span><br><span class=\"line\">                    &quot;feature&quot;,</span><br><span class=\"line\">                    &quot;remind_status&quot;,</span><br><span class=\"line\">                    &quot;status&quot;,</span><br><span class=\"line\">                    &quot;gmt_modified&quot;,</span><br><span class=\"line\">                    &quot;gmt_create&quot;,</span><br><span class=\"line\">                    &quot;score&quot;,</span><br><span class=\"line\">                    &quot;deduction&quot;,</span><br><span class=\"line\">                    &quot;buyer_abnormal_emotion&quot;,</span><br><span class=\"line\">                    &quot;flag&quot;,</span><br><span class=\"line\">                    &quot;msg_alarm_type&quot;,</span><br><span class=\"line\">                    &quot;rule_name&quot;,</span><br><span class=\"line\">                    &quot;rule_id&quot;,</span><br><span class=\"line\">                    &quot;msg_time&quot;,</span><br><span class=\"line\">                    &quot;msg_id&quot;,</span><br><span class=\"line\">                    &quot;msg_content&quot;,</span><br><span class=\"line\">                    &quot;context_id&quot;,</span><br><span class=\"line\">                    &quot;buyer_nick&quot;,</span><br><span class=\"line\">                    &quot;sub_nick&quot;,</span><br><span class=\"line\">                    &quot;main_account&quot;,</span><br><span class=\"line\">                    &quot;shop_id_hash&quot;,</span><br><span class=\"line\">                    &quot;shop_id&quot;,</span><br><span class=\"line\">                    &quot;id&quot;</span><br><span class=\"line\">                ],</span><br><span class=\"line\">                &quot;connection&quot;: [</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        &quot;datasource&quot;: &quot;mysql_frog_m1_frog_001&quot;,</span><br><span class=\"line\">                        &quot;table&quot;: [</span><br><span class=\"line\">                            &quot;quality_guard_market_alarm_record_[0-127]&quot;</span><br><span class=\"line\">                        ]</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                ],</span><br><span class=\"line\">                &quot;where&quot;: &quot; date_format(msg_time,&#x27;%Y%m%d&#x27;)=&#x27;$&#123;bizdate&#125;&#x27;    &quot;,</span><br><span class=\"line\">                &quot;splitPk&quot;: &quot;id&quot;,</span><br><span class=\"line\">                &quot;encoding&quot;: &quot;UTF-8&quot;</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &quot;name&quot;: &quot;Reader&quot;,</span><br><span class=\"line\">            &quot;category&quot;: &quot;reader&quot;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            &quot;stepType&quot;: &quot;odps&quot;,</span><br><span class=\"line\">            &quot;parameter&quot;: &#123;</span><br><span class=\"line\">                &quot;partition&quot;: &quot;ds=$&#123;bizdate&#125;,db=$&#123;db&#125;&quot;,</span><br><span class=\"line\">                &quot;truncate&quot;: true,</span><br><span class=\"line\">                &quot;datasource&quot;: &quot;odps_first&quot;,</span><br><span class=\"line\">                &quot;column&quot;: [</span><br><span class=\"line\">                    &quot;seller_account_id&quot;,</span><br><span class=\"line\">                    &quot;reply_guard_flag&quot;,</span><br><span class=\"line\">                    &quot;topping_flag&quot;,</span><br><span class=\"line\">                    &quot;guard_rule&quot;,</span><br><span class=\"line\">                    &quot;plat_form&quot;,</span><br><span class=\"line\">                    &quot;feature&quot;,</span><br><span class=\"line\">                    &quot;remind_status&quot;,</span><br><span class=\"line\">                    &quot;status&quot;,</span><br><span class=\"line\">                    &quot;gmt_modified&quot;,</span><br><span class=\"line\">                    &quot;gmt_create&quot;,</span><br><span class=\"line\">                    &quot;score&quot;,</span><br><span class=\"line\">                    &quot;deduction&quot;,</span><br><span class=\"line\">                    &quot;buyer_abnormal_emotion&quot;,</span><br><span class=\"line\">                    &quot;flag&quot;,</span><br><span class=\"line\">                    &quot;msg_alarm_type&quot;,</span><br><span class=\"line\">                    &quot;rule_name&quot;,</span><br><span class=\"line\">                    &quot;rule_id&quot;,</span><br><span class=\"line\">                    &quot;msg_time&quot;,</span><br><span class=\"line\">                    &quot;msg_id&quot;,</span><br><span class=\"line\">                    &quot;msg_content&quot;,</span><br><span class=\"line\">                    &quot;context_id&quot;,</span><br><span class=\"line\">                    &quot;buyer_nick&quot;,</span><br><span class=\"line\">                    &quot;sub_nick&quot;,</span><br><span class=\"line\">                    &quot;main_account&quot;,</span><br><span class=\"line\">                    &quot;shop_id_hash&quot;,</span><br><span class=\"line\">                    &quot;shop_id&quot;,</span><br><span class=\"line\">                    &quot;id&quot;</span><br><span class=\"line\">                ],</span><br><span class=\"line\">                &quot;emptyAsNull&quot;: true,</span><br><span class=\"line\">                &quot;table&quot;: &quot;ods_frog_quality_guard_market_alarm_record_di&quot;</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &quot;name&quot;: &quot;Writer&quot;,</span><br><span class=\"line\">            &quot;category&quot;: &quot;writer&quot;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    &quot;version&quot;: &quot;2.0&quot;,</span><br><span class=\"line\">    &quot;order&quot;: &#123;</span><br><span class=\"line\">        &quot;hops&quot;: [</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                &quot;from&quot;: &quot;Reader&quot;,</span><br><span class=\"line\">                &quot;to&quot;: &quot;Writer&quot;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &quot;setting&quot;: &#123;</span><br><span class=\"line\">        &quot;errorLimit&quot;: &#123;</span><br><span class=\"line\">            &quot;record&quot;: &quot;&quot;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &quot;speed&quot;: &#123;</span><br><span class=\"line\">            &quot;throttle&quot;: false,</span><br><span class=\"line\">            &quot;concurrent&quot;: 2</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1><span id=\"三-dataworks离线同步到es\">三、dataworks离线同步到es</span></h1><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;type&quot;: &quot;job&quot;,</span><br><span class=\"line\">    &quot;steps&quot;: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            &quot;stepType&quot;: &quot;odps&quot;,</span><br><span class=\"line\">            &quot;parameter&quot;: &#123;</span><br><span class=\"line\">                &quot;partition&quot;: [</span><br><span class=\"line\">                    &quot;ds=$&#123;bizdate&#125;&quot;</span><br><span class=\"line\">                ],</span><br><span class=\"line\">                &quot;datasource&quot;: &quot;odps_first&quot;,</span><br><span class=\"line\">                &quot;column&quot;: [</span><br><span class=\"line\">                    &quot;es_id&quot;,</span><br><span class=\"line\">                    &quot;pay_product_td_num&quot;,</span><br><span class=\"line\">                    &quot;pay_order_td_num&quot;,</span><br><span class=\"line\">                    &quot;pay_first_gmt&quot;,</span><br><span class=\"line\">                    &quot;pay_single_max_amt&quot;,</span><br><span class=\"line\">                    &quot;pay_payment_td_amt&quot;,</span><br><span class=\"line\">                    &quot;buyer_phone&quot;,</span><br><span class=\"line\">                    &quot;app&quot;,</span><br><span class=\"line\">                    &quot;shop_id&quot;,</span><br><span class=\"line\">                    &quot;shop_name&quot;</span><br><span class=\"line\">                ],</span><br><span class=\"line\">                &quot;tableComment&quot;: &quot;私域星球全平台用户消费统计表(json数据)&quot;,</span><br><span class=\"line\">                &quot;table&quot;: &quot;ads_sy_shop_phone_du&quot;</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &quot;name&quot;: &quot;Reader&quot;,</span><br><span class=\"line\">            &quot;category&quot;: &quot;reader&quot;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            &quot;stepType&quot;: &quot;elasticsearch&quot;,</span><br><span class=\"line\">            &quot;parameter&quot;: &#123;</span><br><span class=\"line\">                &quot;column&quot;: [</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        &quot;name&quot;: &quot;es_id&quot;,</span><br><span class=\"line\">                        &quot;type&quot;: &quot;id&quot;</span><br><span class=\"line\">                    &#125;,</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        &quot;name&quot;: &quot;consumeGoodsTotal&quot;,</span><br><span class=\"line\">                        &quot;type&quot;: &quot;long&quot;</span><br><span class=\"line\">                    &#125;,</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        &quot;name&quot;: &quot;consumeOrderTotal&quot;,</span><br><span class=\"line\">                        &quot;type&quot;: &quot;long&quot;</span><br><span class=\"line\">                    &#125;,</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        &quot;origin&quot;: true,</span><br><span class=\"line\">                        &quot;format&quot;: &quot;yyyy-MM-dd HH:mm:ss&quot;,</span><br><span class=\"line\">                        &quot;name&quot;: &quot;firstConsumeTime&quot;,</span><br><span class=\"line\">                        &quot;type&quot;: &quot;date&quot;</span><br><span class=\"line\">                    &#125;,</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        &quot;name&quot;: &quot;maxSinglePayedAmt&quot;,</span><br><span class=\"line\">                        &quot;type&quot;: &quot;long&quot;</span><br><span class=\"line\">                    &#125;,</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        &quot;name&quot;: &quot;payedAmt&quot;,</span><br><span class=\"line\">                        &quot;type&quot;: &quot;long&quot;</span><br><span class=\"line\">                    &#125;,</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        &quot;name&quot;: &quot;phoneNo&quot;,</span><br><span class=\"line\">                        &quot;type&quot;: &quot;keyword&quot;</span><br><span class=\"line\">                    &#125;,</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        &quot;name&quot;: &quot;platformType&quot;,</span><br><span class=\"line\">                        &quot;type&quot;: &quot;keyword&quot;</span><br><span class=\"line\">                    &#125;,</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        &quot;name&quot;: &quot;shopId&quot;,</span><br><span class=\"line\">                        &quot;type&quot;: &quot;keyword&quot;</span><br><span class=\"line\">                    &#125;,</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        &quot;name&quot;: &quot;shopName&quot;,</span><br><span class=\"line\">                        &quot;type&quot;: &quot;keyword&quot;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                ],</span><br><span class=\"line\">                &quot;aliasMode&quot;: &quot;append&quot;,</span><br><span class=\"line\">                &quot;index&quot;: &quot;all_platform_consume_total_3&quot;,</span><br><span class=\"line\">                &quot;type&quot;: &quot;_doc&quot;,</span><br><span class=\"line\">                &quot;splitter&quot;: &quot;,&quot;,</span><br><span class=\"line\">                &quot;timeout&quot;: 600000,</span><br><span class=\"line\">                &quot;multiThread&quot;: true,</span><br><span class=\"line\">                &quot;actionType&quot;: &quot;index&quot;,</span><br><span class=\"line\">                &quot;indexType&quot;: &quot;&quot;,</span><br><span class=\"line\">                &quot;cleanup&quot;: false,</span><br><span class=\"line\">                &quot;datasource&quot;: &quot;es_siyuxingqiu&quot;,</span><br><span class=\"line\">                &quot;discovery&quot;: false,</span><br><span class=\"line\">                &quot;trySize&quot;: 30,</span><br><span class=\"line\">                &quot;alias&quot;: &quot;&quot;,</span><br><span class=\"line\">                &quot;dynamic&quot;: false,</span><br><span class=\"line\">                &quot;ignoreParseError&quot;: false,</span><br><span class=\"line\">                &quot;batchSize&quot;: 1000,</span><br><span class=\"line\">                &quot;compression&quot;: true,</span><br><span class=\"line\">                &quot;ignoreWriteError&quot;: false</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &quot;name&quot;: &quot;Writer&quot;,</span><br><span class=\"line\">            &quot;category&quot;: &quot;writer&quot;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    &quot;version&quot;: &quot;2.0&quot;,</span><br><span class=\"line\">    &quot;order&quot;: &#123;</span><br><span class=\"line\">        &quot;hops&quot;: [</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                &quot;from&quot;: &quot;Reader&quot;,</span><br><span class=\"line\">                &quot;to&quot;: &quot;Writer&quot;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &quot;setting&quot;: &#123;</span><br><span class=\"line\">        &quot;errorLimit&quot;: &#123;</span><br><span class=\"line\">            &quot;record&quot;: &quot;&quot;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &quot;speed&quot;: &#123;</span><br><span class=\"line\">            &quot;throttle&quot;: false,</span><br><span class=\"line\">            &quot;concurrent&quot;: 2</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1><span id=\"四-dataworks实时同步到kafka\">四、dataworks实时同步到kafka</span></h1><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br><span class=\"line\">320</span><br><span class=\"line\">321</span><br><span class=\"line\">322</span><br><span class=\"line\">323</span><br><span class=\"line\">324</span><br><span class=\"line\">325</span><br><span class=\"line\">326</span><br><span class=\"line\">327</span><br><span class=\"line\">328</span><br><span class=\"line\">329</span><br><span class=\"line\">330</span><br><span class=\"line\">331</span><br><span class=\"line\">332</span><br><span class=\"line\">333</span><br><span class=\"line\">334</span><br><span class=\"line\">335</span><br><span class=\"line\">336</span><br><span class=\"line\">337</span><br><span class=\"line\">338</span><br><span class=\"line\">339</span><br><span class=\"line\">340</span><br><span class=\"line\">341</span><br><span class=\"line\">342</span><br><span class=\"line\">343</span><br><span class=\"line\">344</span><br><span class=\"line\">345</span><br><span class=\"line\">346</span><br><span class=\"line\">347</span><br><span class=\"line\">348</span><br><span class=\"line\">349</span><br><span class=\"line\">350</span><br><span class=\"line\">351</span><br><span class=\"line\">352</span><br><span class=\"line\">353</span><br><span class=\"line\">354</span><br><span class=\"line\">355</span><br><span class=\"line\">356</span><br><span class=\"line\">357</span><br><span class=\"line\">358</span><br><span class=\"line\">359</span><br><span class=\"line\">360</span><br><span class=\"line\">361</span><br><span class=\"line\">362</span><br><span class=\"line\">363</span><br><span class=\"line\">364</span><br><span class=\"line\">365</span><br><span class=\"line\">366</span><br><span class=\"line\">367</span><br><span class=\"line\">368</span><br><span class=\"line\">369</span><br><span class=\"line\">370</span><br><span class=\"line\">371</span><br><span class=\"line\">372</span><br><span class=\"line\">373</span><br><span class=\"line\">374</span><br><span class=\"line\">375</span><br><span class=\"line\">376</span><br><span class=\"line\">377</span><br><span class=\"line\">378</span><br><span class=\"line\">379</span><br><span class=\"line\">380</span><br><span class=\"line\">381</span><br><span class=\"line\">382</span><br><span class=\"line\">383</span><br><span class=\"line\">384</span><br><span class=\"line\">385</span><br><span class=\"line\">386</span><br><span class=\"line\">387</span><br><span class=\"line\">388</span><br><span class=\"line\">389</span><br><span class=\"line\">390</span><br><span class=\"line\">391</span><br><span class=\"line\">392</span><br><span class=\"line\">393</span><br><span class=\"line\">394</span><br><span class=\"line\">395</span><br><span class=\"line\">396</span><br><span class=\"line\">397</span><br><span class=\"line\">398</span><br><span class=\"line\">399</span><br><span class=\"line\">400</span><br><span class=\"line\">401</span><br><span class=\"line\">402</span><br><span class=\"line\">403</span><br><span class=\"line\">404</span><br><span class=\"line\">405</span><br><span class=\"line\">406</span><br><span class=\"line\">407</span><br><span class=\"line\">408</span><br><span class=\"line\">409</span><br><span class=\"line\">410</span><br><span class=\"line\">411</span><br><span class=\"line\">412</span><br><span class=\"line\">413</span><br><span class=\"line\">414</span><br><span class=\"line\">415</span><br><span class=\"line\">416</span><br><span class=\"line\">417</span><br><span class=\"line\">418</span><br><span class=\"line\">419</span><br><span class=\"line\">420</span><br><span class=\"line\">421</span><br><span class=\"line\">422</span><br><span class=\"line\">423</span><br><span class=\"line\">424</span><br><span class=\"line\">425</span><br><span class=\"line\">426</span><br><span class=\"line\">427</span><br><span class=\"line\">428</span><br><span class=\"line\">429</span><br><span class=\"line\">430</span><br><span class=\"line\">431</span><br><span class=\"line\">432</span><br><span class=\"line\">433</span><br><span class=\"line\">434</span><br><span class=\"line\">435</span><br><span class=\"line\">436</span><br><span class=\"line\">437</span><br><span class=\"line\">438</span><br><span class=\"line\">439</span><br><span class=\"line\">440</span><br><span class=\"line\">441</span><br><span class=\"line\">442</span><br><span class=\"line\">443</span><br><span class=\"line\">444</span><br><span class=\"line\">445</span><br><span class=\"line\">446</span><br><span class=\"line\">447</span><br><span class=\"line\">448</span><br><span class=\"line\">449</span><br><span class=\"line\">450</span><br><span class=\"line\">451</span><br><span class=\"line\">452</span><br><span class=\"line\">453</span><br><span class=\"line\">454</span><br><span class=\"line\">455</span><br><span class=\"line\">456</span><br><span class=\"line\">457</span><br><span class=\"line\">458</span><br><span class=\"line\">459</span><br><span class=\"line\">460</span><br><span class=\"line\">461</span><br><span class=\"line\">462</span><br><span class=\"line\">463</span><br><span class=\"line\">464</span><br><span class=\"line\">465</span><br><span class=\"line\">466</span><br><span class=\"line\">467</span><br><span class=\"line\">468</span><br><span class=\"line\">469</span><br><span class=\"line\">470</span><br><span class=\"line\">471</span><br><span class=\"line\">472</span><br><span class=\"line\">473</span><br><span class=\"line\">474</span><br><span class=\"line\">475</span><br><span class=\"line\">476</span><br><span class=\"line\">477</span><br><span class=\"line\">478</span><br><span class=\"line\">479</span><br><span class=\"line\">480</span><br><span class=\"line\">481</span><br><span class=\"line\">482</span><br><span class=\"line\">483</span><br><span class=\"line\">484</span><br><span class=\"line\">485</span><br><span class=\"line\">486</span><br><span class=\"line\">487</span><br><span class=\"line\">488</span><br><span class=\"line\">489</span><br><span class=\"line\">490</span><br><span class=\"line\">491</span><br><span class=\"line\">492</span><br><span class=\"line\">493</span><br><span class=\"line\">494</span><br><span class=\"line\">495</span><br><span class=\"line\">496</span><br><span class=\"line\">497</span><br><span class=\"line\">498</span><br><span class=\"line\">499</span><br><span class=\"line\">500</span><br><span class=\"line\">501</span><br><span class=\"line\">502</span><br><span class=\"line\">503</span><br><span class=\"line\">504</span><br><span class=\"line\">505</span><br><span class=\"line\">506</span><br><span class=\"line\">507</span><br><span class=\"line\">508</span><br><span class=\"line\">509</span><br><span class=\"line\">510</span><br><span class=\"line\">511</span><br><span class=\"line\">512</span><br><span class=\"line\">513</span><br><span class=\"line\">514</span><br><span class=\"line\">515</span><br><span class=\"line\">516</span><br><span class=\"line\">517</span><br><span class=\"line\">518</span><br><span class=\"line\">519</span><br><span class=\"line\">520</span><br><span class=\"line\">521</span><br><span class=\"line\">522</span><br><span class=\"line\">523</span><br><span class=\"line\">524</span><br><span class=\"line\">525</span><br><span class=\"line\">526</span><br><span class=\"line\">527</span><br><span class=\"line\">528</span><br><span class=\"line\">529</span><br><span class=\"line\">530</span><br><span class=\"line\">531</span><br><span class=\"line\">532</span><br><span class=\"line\">533</span><br><span class=\"line\">534</span><br><span class=\"line\">535</span><br><span class=\"line\">536</span><br><span class=\"line\">537</span><br><span class=\"line\">538</span><br><span class=\"line\">539</span><br><span class=\"line\">540</span><br><span class=\"line\">541</span><br><span class=\"line\">542</span><br><span class=\"line\">543</span><br><span class=\"line\">544</span><br><span class=\"line\">545</span><br><span class=\"line\">546</span><br><span class=\"line\">547</span><br><span class=\"line\">548</span><br><span class=\"line\">549</span><br><span class=\"line\">550</span><br><span class=\"line\">551</span><br><span class=\"line\">552</span><br><span class=\"line\">553</span><br><span class=\"line\">554</span><br><span class=\"line\">555</span><br><span class=\"line\">556</span><br><span class=\"line\">557</span><br><span class=\"line\">558</span><br><span class=\"line\">559</span><br><span class=\"line\">560</span><br><span class=\"line\">561</span><br><span class=\"line\">562</span><br><span class=\"line\">563</span><br><span class=\"line\">564</span><br><span class=\"line\">565</span><br><span class=\"line\">566</span><br><span class=\"line\">567</span><br><span class=\"line\">568</span><br><span class=\"line\">569</span><br><span class=\"line\">570</span><br><span class=\"line\">571</span><br><span class=\"line\">572</span><br><span class=\"line\">573</span><br><span class=\"line\">574</span><br><span class=\"line\">575</span><br><span class=\"line\">576</span><br><span class=\"line\">577</span><br><span class=\"line\">578</span><br><span class=\"line\">579</span><br><span class=\"line\">580</span><br><span class=\"line\">581</span><br><span class=\"line\">582</span><br><span class=\"line\">583</span><br><span class=\"line\">584</span><br><span class=\"line\">585</span><br><span class=\"line\">586</span><br><span class=\"line\">587</span><br><span class=\"line\">588</span><br><span class=\"line\">589</span><br><span class=\"line\">590</span><br><span class=\"line\">591</span><br><span class=\"line\">592</span><br><span class=\"line\">593</span><br><span class=\"line\">594</span><br><span class=\"line\">595</span><br><span class=\"line\">596</span><br><span class=\"line\">597</span><br><span class=\"line\">598</span><br><span class=\"line\">599</span><br><span class=\"line\">600</span><br><span class=\"line\">601</span><br><span class=\"line\">602</span><br><span class=\"line\">603</span><br><span class=\"line\">604</span><br><span class=\"line\">605</span><br><span class=\"line\">606</span><br><span class=\"line\">607</span><br><span class=\"line\">608</span><br><span class=\"line\">609</span><br><span class=\"line\">610</span><br><span class=\"line\">611</span><br><span class=\"line\">612</span><br><span class=\"line\">613</span><br><span class=\"line\">614</span><br><span class=\"line\">615</span><br><span class=\"line\">616</span><br><span class=\"line\">617</span><br><span class=\"line\">618</span><br><span class=\"line\">619</span><br><span class=\"line\">620</span><br><span class=\"line\">621</span><br><span class=\"line\">622</span><br><span class=\"line\">623</span><br><span class=\"line\">624</span><br><span class=\"line\">625</span><br><span class=\"line\">626</span><br><span class=\"line\">627</span><br><span class=\"line\">628</span><br><span class=\"line\">629</span><br><span class=\"line\">630</span><br><span class=\"line\">631</span><br><span class=\"line\">632</span><br><span class=\"line\">633</span><br><span class=\"line\">634</span><br><span class=\"line\">635</span><br><span class=\"line\">636</span><br><span class=\"line\">637</span><br><span class=\"line\">638</span><br><span class=\"line\">639</span><br><span class=\"line\">640</span><br><span class=\"line\">641</span><br><span class=\"line\">642</span><br><span class=\"line\">643</span><br><span class=\"line\">644</span><br><span class=\"line\">645</span><br><span class=\"line\">646</span><br><span class=\"line\">647</span><br><span class=\"line\">648</span><br><span class=\"line\">649</span><br><span class=\"line\">650</span><br><span class=\"line\">651</span><br><span class=\"line\">652</span><br><span class=\"line\">653</span><br><span class=\"line\">654</span><br><span class=\"line\">655</span><br><span class=\"line\">656</span><br><span class=\"line\">657</span><br><span class=\"line\">658</span><br><span class=\"line\">659</span><br><span class=\"line\">660</span><br><span class=\"line\">661</span><br><span class=\"line\">662</span><br><span class=\"line\">663</span><br><span class=\"line\">664</span><br><span class=\"line\">665</span><br><span class=\"line\">666</span><br><span class=\"line\">667</span><br><span class=\"line\">668</span><br><span class=\"line\">669</span><br><span class=\"line\">670</span><br><span class=\"line\">671</span><br><span class=\"line\">672</span><br><span class=\"line\">673</span><br><span class=\"line\">674</span><br><span class=\"line\">675</span><br><span class=\"line\">676</span><br><span class=\"line\">677</span><br><span class=\"line\">678</span><br><span class=\"line\">679</span><br><span class=\"line\">680</span><br><span class=\"line\">681</span><br><span class=\"line\">682</span><br><span class=\"line\">683</span><br><span class=\"line\">684</span><br><span class=\"line\">685</span><br><span class=\"line\">686</span><br><span class=\"line\">687</span><br><span class=\"line\">688</span><br><span class=\"line\">689</span><br><span class=\"line\">690</span><br><span class=\"line\">691</span><br><span class=\"line\">692</span><br><span class=\"line\">693</span><br><span class=\"line\">694</span><br><span class=\"line\">695</span><br><span class=\"line\">696</span><br><span class=\"line\">697</span><br><span class=\"line\">698</span><br><span class=\"line\">699</span><br><span class=\"line\">700</span><br><span class=\"line\">701</span><br><span class=\"line\">702</span><br><span class=\"line\">703</span><br><span class=\"line\">704</span><br><span class=\"line\">705</span><br><span class=\"line\">706</span><br><span class=\"line\">707</span><br><span class=\"line\">708</span><br><span class=\"line\">709</span><br><span class=\"line\">710</span><br><span class=\"line\">711</span><br><span class=\"line\">712</span><br><span class=\"line\">713</span><br><span class=\"line\">714</span><br><span class=\"line\">715</span><br><span class=\"line\">716</span><br><span class=\"line\">717</span><br><span class=\"line\">718</span><br><span class=\"line\">719</span><br><span class=\"line\">720</span><br><span class=\"line\">721</span><br><span class=\"line\">722</span><br><span class=\"line\">723</span><br><span class=\"line\">724</span><br><span class=\"line\">725</span><br><span class=\"line\">726</span><br><span class=\"line\">727</span><br><span class=\"line\">728</span><br><span class=\"line\">729</span><br><span class=\"line\">730</span><br><span class=\"line\">731</span><br><span class=\"line\">732</span><br><span class=\"line\">733</span><br><span class=\"line\">734</span><br><span class=\"line\">735</span><br><span class=\"line\">736</span><br><span class=\"line\">737</span><br><span class=\"line\">738</span><br><span class=\"line\">739</span><br><span class=\"line\">740</span><br><span class=\"line\">741</span><br><span class=\"line\">742</span><br><span class=\"line\">743</span><br><span class=\"line\">744</span><br><span class=\"line\">745</span><br><span class=\"line\">746</span><br><span class=\"line\">747</span><br><span class=\"line\">748</span><br><span class=\"line\">749</span><br><span class=\"line\">750</span><br><span class=\"line\">751</span><br><span class=\"line\">752</span><br><span class=\"line\">753</span><br><span class=\"line\">754</span><br><span class=\"line\">755</span><br><span class=\"line\">756</span><br><span class=\"line\">757</span><br><span class=\"line\">758</span><br><span class=\"line\">759</span><br><span class=\"line\">760</span><br><span class=\"line\">761</span><br><span class=\"line\">762</span><br><span class=\"line\">763</span><br><span class=\"line\">764</span><br><span class=\"line\">765</span><br><span class=\"line\">766</span><br><span class=\"line\">767</span><br><span class=\"line\">768</span><br><span class=\"line\">769</span><br><span class=\"line\">770</span><br><span class=\"line\">771</span><br><span class=\"line\">772</span><br><span class=\"line\">773</span><br><span class=\"line\">774</span><br><span class=\"line\">775</span><br><span class=\"line\">776</span><br><span class=\"line\">777</span><br><span class=\"line\">778</span><br><span class=\"line\">779</span><br><span class=\"line\">780</span><br><span class=\"line\">781</span><br><span class=\"line\">782</span><br><span class=\"line\">783</span><br><span class=\"line\">784</span><br><span class=\"line\">785</span><br><span class=\"line\">786</span><br><span class=\"line\">787</span><br><span class=\"line\">788</span><br><span class=\"line\">789</span><br><span class=\"line\">790</span><br><span class=\"line\">791</span><br><span class=\"line\">792</span><br><span class=\"line\">793</span><br><span class=\"line\">794</span><br><span class=\"line\">795</span><br><span class=\"line\">796</span><br><span class=\"line\">797</span><br><span class=\"line\">798</span><br><span class=\"line\">799</span><br><span class=\"line\">800</span><br><span class=\"line\">801</span><br><span class=\"line\">802</span><br><span class=\"line\">803</span><br><span class=\"line\">804</span><br><span class=\"line\">805</span><br><span class=\"line\">806</span><br><span class=\"line\">807</span><br><span class=\"line\">808</span><br><span class=\"line\">809</span><br><span class=\"line\">810</span><br><span class=\"line\">811</span><br><span class=\"line\">812</span><br><span class=\"line\">813</span><br><span class=\"line\">814</span><br><span class=\"line\">815</span><br><span class=\"line\">816</span><br><span class=\"line\">817</span><br><span class=\"line\">818</span><br><span class=\"line\">819</span><br><span class=\"line\">820</span><br><span class=\"line\">821</span><br><span class=\"line\">822</span><br><span class=\"line\">823</span><br><span class=\"line\">824</span><br><span class=\"line\">825</span><br><span class=\"line\">826</span><br><span class=\"line\">827</span><br><span class=\"line\">828</span><br><span class=\"line\">829</span><br><span class=\"line\">830</span><br><span class=\"line\">831</span><br><span class=\"line\">832</span><br><span class=\"line\">833</span><br><span class=\"line\">834</span><br><span class=\"line\">835</span><br><span class=\"line\">836</span><br><span class=\"line\">837</span><br><span class=\"line\">838</span><br><span class=\"line\">839</span><br><span class=\"line\">840</span><br><span class=\"line\">841</span><br><span class=\"line\">842</span><br><span class=\"line\">843</span><br><span class=\"line\">844</span><br><span class=\"line\">845</span><br><span class=\"line\">846</span><br><span class=\"line\">847</span><br><span class=\"line\">848</span><br><span class=\"line\">849</span><br><span class=\"line\">850</span><br><span class=\"line\">851</span><br><span class=\"line\">852</span><br><span class=\"line\">853</span><br><span class=\"line\">854</span><br><span class=\"line\">855</span><br><span class=\"line\">856</span><br><span class=\"line\">857</span><br><span class=\"line\">858</span><br><span class=\"line\">859</span><br><span class=\"line\">860</span><br><span class=\"line\">861</span><br><span class=\"line\">862</span><br><span class=\"line\">863</span><br><span class=\"line\">864</span><br><span class=\"line\">865</span><br><span class=\"line\">866</span><br><span class=\"line\">867</span><br><span class=\"line\">868</span><br><span class=\"line\">869</span><br><span class=\"line\">870</span><br><span class=\"line\">871</span><br><span class=\"line\">872</span><br><span class=\"line\">873</span><br><span class=\"line\">874</span><br><span class=\"line\">875</span><br><span class=\"line\">876</span><br><span class=\"line\">877</span><br><span class=\"line\">878</span><br><span class=\"line\">879</span><br><span class=\"line\">880</span><br><span class=\"line\">881</span><br><span class=\"line\">882</span><br><span class=\"line\">883</span><br><span class=\"line\">884</span><br><span class=\"line\">885</span><br><span class=\"line\">886</span><br><span class=\"line\">887</span><br><span class=\"line\">888</span><br><span class=\"line\">889</span><br><span class=\"line\">890</span><br><span class=\"line\">891</span><br><span class=\"line\">892</span><br><span class=\"line\">893</span><br><span class=\"line\">894</span><br><span class=\"line\">895</span><br><span class=\"line\">896</span><br><span class=\"line\">897</span><br><span class=\"line\">898</span><br><span class=\"line\">899</span><br><span class=\"line\">900</span><br><span class=\"line\">901</span><br><span class=\"line\">902</span><br><span class=\"line\">903</span><br><span class=\"line\">904</span><br><span class=\"line\">905</span><br><span class=\"line\">906</span><br><span class=\"line\">907</span><br><span class=\"line\">908</span><br><span class=\"line\">909</span><br><span class=\"line\">910</span><br><span class=\"line\">911</span><br><span class=\"line\">912</span><br><span class=\"line\">913</span><br><span class=\"line\">914</span><br><span class=\"line\">915</span><br><span class=\"line\">916</span><br><span class=\"line\">917</span><br><span class=\"line\">918</span><br><span class=\"line\">919</span><br><span class=\"line\">920</span><br><span class=\"line\">921</span><br><span class=\"line\">922</span><br><span class=\"line\">923</span><br><span class=\"line\">924</span><br><span class=\"line\">925</span><br><span class=\"line\">926</span><br><span class=\"line\">927</span><br><span class=\"line\">928</span><br><span class=\"line\">929</span><br><span class=\"line\">930</span><br><span class=\"line\">931</span><br><span class=\"line\">932</span><br><span class=\"line\">933</span><br><span class=\"line\">934</span><br><span class=\"line\">935</span><br><span class=\"line\">936</span><br><span class=\"line\">937</span><br><span class=\"line\">938</span><br><span class=\"line\">939</span><br><span class=\"line\">940</span><br><span class=\"line\">941</span><br><span class=\"line\">942</span><br><span class=\"line\">943</span><br><span class=\"line\">944</span><br><span class=\"line\">945</span><br><span class=\"line\">946</span><br><span class=\"line\">947</span><br><span class=\"line\">948</span><br><span class=\"line\">949</span><br><span class=\"line\">950</span><br><span class=\"line\">951</span><br><span class=\"line\">952</span><br><span class=\"line\">953</span><br><span class=\"line\">954</span><br><span class=\"line\">955</span><br><span class=\"line\">956</span><br><span class=\"line\">957</span><br><span class=\"line\">958</span><br><span class=\"line\">959</span><br><span class=\"line\">960</span><br><span class=\"line\">961</span><br><span class=\"line\">962</span><br><span class=\"line\">963</span><br><span class=\"line\">964</span><br><span class=\"line\">965</span><br><span class=\"line\">966</span><br><span class=\"line\">967</span><br><span class=\"line\">968</span><br><span class=\"line\">969</span><br><span class=\"line\">970</span><br><span class=\"line\">971</span><br><span class=\"line\">972</span><br><span class=\"line\">973</span><br><span class=\"line\">974</span><br><span class=\"line\">975</span><br><span class=\"line\">976</span><br><span class=\"line\">977</span><br><span class=\"line\">978</span><br><span class=\"line\">979</span><br><span class=\"line\">980</span><br><span class=\"line\">981</span><br><span class=\"line\">982</span><br><span class=\"line\">983</span><br><span class=\"line\">984</span><br><span class=\"line\">985</span><br><span class=\"line\">986</span><br><span class=\"line\">987</span><br><span class=\"line\">988</span><br><span class=\"line\">989</span><br><span class=\"line\">990</span><br><span class=\"line\">991</span><br><span class=\"line\">992</span><br><span class=\"line\">993</span><br><span class=\"line\">994</span><br><span class=\"line\">995</span><br><span class=\"line\">996</span><br><span class=\"line\">997</span><br><span class=\"line\">998</span><br><span class=\"line\">999</span><br><span class=\"line\">1000</span><br><span class=\"line\">1001</span><br><span class=\"line\">1002</span><br><span class=\"line\">1003</span><br><span class=\"line\">1004</span><br><span class=\"line\">1005</span><br><span class=\"line\">1006</span><br><span class=\"line\">1007</span><br><span class=\"line\">1008</span><br><span class=\"line\">1009</span><br><span class=\"line\">1010</span><br><span class=\"line\">1011</span><br><span class=\"line\">1012</span><br><span class=\"line\">1013</span><br><span class=\"line\">1014</span><br><span class=\"line\">1015</span><br><span class=\"line\">1016</span><br><span class=\"line\">1017</span><br><span class=\"line\">1018</span><br><span class=\"line\">1019</span><br><span class=\"line\">1020</span><br><span class=\"line\">1021</span><br><span class=\"line\">1022</span><br><span class=\"line\">1023</span><br><span class=\"line\">1024</span><br><span class=\"line\">1025</span><br><span class=\"line\">1026</span><br><span class=\"line\">1027</span><br><span class=\"line\">1028</span><br><span class=\"line\">1029</span><br><span class=\"line\">1030</span><br><span class=\"line\">1031</span><br><span class=\"line\">1032</span><br><span class=\"line\">1033</span><br><span class=\"line\">1034</span><br><span class=\"line\">1035</span><br><span class=\"line\">1036</span><br><span class=\"line\">1037</span><br><span class=\"line\">1038</span><br><span class=\"line\">1039</span><br><span class=\"line\">1040</span><br><span class=\"line\">1041</span><br><span class=\"line\">1042</span><br><span class=\"line\">1043</span><br><span class=\"line\">1044</span><br><span class=\"line\">1045</span><br><span class=\"line\">1046</span><br><span class=\"line\">1047</span><br><span class=\"line\">1048</span><br><span class=\"line\">1049</span><br><span class=\"line\">1050</span><br><span class=\"line\">1051</span><br><span class=\"line\">1052</span><br><span class=\"line\">1053</span><br><span class=\"line\">1054</span><br><span class=\"line\">1055</span><br><span class=\"line\">1056</span><br><span class=\"line\">1057</span><br><span class=\"line\">1058</span><br><span class=\"line\">1059</span><br><span class=\"line\">1060</span><br><span class=\"line\">1061</span><br><span class=\"line\">1062</span><br><span class=\"line\">1063</span><br><span class=\"line\">1064</span><br><span class=\"line\">1065</span><br><span class=\"line\">1066</span><br><span class=\"line\">1067</span><br><span class=\"line\">1068</span><br><span class=\"line\">1069</span><br><span class=\"line\">1070</span><br><span class=\"line\">1071</span><br><span class=\"line\">1072</span><br><span class=\"line\">1073</span><br><span class=\"line\">1074</span><br><span class=\"line\">1075</span><br><span class=\"line\">1076</span><br><span class=\"line\">1077</span><br><span class=\"line\">1078</span><br><span class=\"line\">1079</span><br><span class=\"line\">1080</span><br><span class=\"line\">1081</span><br><span class=\"line\">1082</span><br><span class=\"line\">1083</span><br><span class=\"line\">1084</span><br><span class=\"line\">1085</span><br><span class=\"line\">1086</span><br><span class=\"line\">1087</span><br><span class=\"line\">1088</span><br><span class=\"line\">1089</span><br><span class=\"line\">1090</span><br><span class=\"line\">1091</span><br><span class=\"line\">1092</span><br><span class=\"line\">1093</span><br><span class=\"line\">1094</span><br><span class=\"line\">1095</span><br><span class=\"line\">1096</span><br><span class=\"line\">1097</span><br><span class=\"line\">1098</span><br><span class=\"line\">1099</span><br><span class=\"line\">1100</span><br><span class=\"line\">1101</span><br><span class=\"line\">1102</span><br><span class=\"line\">1103</span><br><span class=\"line\">1104</span><br><span class=\"line\">1105</span><br><span class=\"line\">1106</span><br><span class=\"line\">1107</span><br><span class=\"line\">1108</span><br><span class=\"line\">1109</span><br><span class=\"line\">1110</span><br><span class=\"line\">1111</span><br><span class=\"line\">1112</span><br><span class=\"line\">1113</span><br><span class=\"line\">1114</span><br><span class=\"line\">1115</span><br><span class=\"line\">1116</span><br><span class=\"line\">1117</span><br><span class=\"line\">1118</span><br><span class=\"line\">1119</span><br><span class=\"line\">1120</span><br><span class=\"line\">1121</span><br><span class=\"line\">1122</span><br><span class=\"line\">1123</span><br><span class=\"line\">1124</span><br><span class=\"line\">1125</span><br><span class=\"line\">1126</span><br><span class=\"line\">1127</span><br><span class=\"line\">1128</span><br><span class=\"line\">1129</span><br><span class=\"line\">1130</span><br><span class=\"line\">1131</span><br><span class=\"line\">1132</span><br><span class=\"line\">1133</span><br><span class=\"line\">1134</span><br><span class=\"line\">1135</span><br><span class=\"line\">1136</span><br><span class=\"line\">1137</span><br><span class=\"line\">1138</span><br><span class=\"line\">1139</span><br><span class=\"line\">1140</span><br><span class=\"line\">1141</span><br><span class=\"line\">1142</span><br><span class=\"line\">1143</span><br><span class=\"line\">1144</span><br><span class=\"line\">1145</span><br><span class=\"line\">1146</span><br><span class=\"line\">1147</span><br><span class=\"line\">1148</span><br><span class=\"line\">1149</span><br><span class=\"line\">1150</span><br><span class=\"line\">1151</span><br><span class=\"line\">1152</span><br><span class=\"line\">1153</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;type&quot;: &quot;job&quot;,</span><br><span class=\"line\">  &quot;steps&quot;: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      &quot;stepType&quot;: &quot;mysqlbinlog&quot;,</span><br><span class=\"line\">      &quot;parameter&quot;: &#123;</span><br><span class=\"line\">        &quot;column&quot;: [</span><br><span class=\"line\">          &quot;_sequence_id_&quot;,</span><br><span class=\"line\">          &quot;_operation_type_&quot;,</span><br><span class=\"line\">          &quot;_execute_time_&quot;,</span><br><span class=\"line\">          &quot;_before_image_&quot;,</span><br><span class=\"line\">          &quot;_after_image_&quot;,</span><br><span class=\"line\">          &quot;id&quot;,</span><br><span class=\"line\">          &quot;chat_log_id&quot;,</span><br><span class=\"line\">          &quot;context_id&quot;,</span><br><span class=\"line\">          &quot;msg_id&quot;,</span><br><span class=\"line\">          &quot;msg_time&quot;,</span><br><span class=\"line\">          &quot;msg_type&quot;,</span><br><span class=\"line\">          &quot;main_account&quot;,</span><br><span class=\"line\">          &quot;main_account_hash&quot;,</span><br><span class=\"line\">          &quot;app_key&quot;,</span><br><span class=\"line\">          &quot;cid&quot;,</span><br><span class=\"line\">          &quot;from_id&quot;,</span><br><span class=\"line\">          &quot;to_id&quot;,</span><br><span class=\"line\">          &quot;content&quot;,</span><br><span class=\"line\">          &quot;content_type&quot;,</span><br><span class=\"line\">          &quot;person_type&quot;,</span><br><span class=\"line\">          &quot;is_correct&quot;,</span><br><span class=\"line\">          &quot;need_human&quot;,</span><br><span class=\"line\">          &quot;error_reason&quot;,</span><br><span class=\"line\">          &quot;remark&quot;,</span><br><span class=\"line\">          &quot;updated_at&quot;,</span><br><span class=\"line\">          &quot;created_at&quot;,</span><br><span class=\"line\">          &quot;question&quot;,</span><br><span class=\"line\">          &quot;ask_method_name&quot;,</span><br><span class=\"line\">          &quot;is_matched&quot;,</span><br><span class=\"line\">          &quot;ai_label_id&quot;,</span><br><span class=\"line\">          &quot;is_default&quot;,</span><br><span class=\"line\">          &quot;inner_msg_type&quot;,</span><br><span class=\"line\">          &quot;order_status&quot;,</span><br><span class=\"line\">          &quot;has_answer_timeout&quot;,</span><br><span class=\"line\">          &quot;is_deleted&quot;,</span><br><span class=\"line\">          &quot;remind_type&quot;,</span><br><span class=\"line\">          &quot;need_human_reason&quot;,</span><br><span class=\"line\">          &quot;replay_scene&quot;,</span><br><span class=\"line\">          &quot;replay_scene_type&quot;,</span><br><span class=\"line\">          &quot;feature&quot;,</span><br><span class=\"line\">          &quot;chat_msg_type&quot;,</span><br><span class=\"line\">          &quot;mq_msg_id&quot;,</span><br><span class=\"line\">          &quot;mq_msg_text&quot;</span><br><span class=\"line\">        ],</span><br><span class=\"line\">        &quot;connection&quot;: [</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            &quot;datasource&quot;: &quot;binlog_chatlog_m0&quot;,</span><br><span class=\"line\">            &quot;table&quot;: [</span><br><span class=\"line\">              &quot;chat_log_detail_0&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_1&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_2&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_3&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_4&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_5&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_6&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_7&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_8&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_9&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_10&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_11&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_12&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_13&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_14&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_15&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_16&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_17&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_18&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_19&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_20&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_21&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_22&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_23&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_24&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_25&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_26&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_27&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_28&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_29&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_30&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_31&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_32&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_33&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_34&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_35&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_36&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_37&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_38&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_39&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_40&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_41&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_42&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_43&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_44&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_45&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_46&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_47&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_48&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_49&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_50&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_51&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_52&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_53&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_54&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_55&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_56&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_57&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_58&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_59&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_60&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_61&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_62&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_63&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_64&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_65&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_66&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_67&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_68&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_69&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_70&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_71&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_72&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_73&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_74&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_75&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_76&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_77&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_78&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_79&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_80&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_81&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_82&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_83&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_84&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_85&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_86&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_87&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_88&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_89&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_90&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_91&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_92&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_93&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_94&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_95&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_96&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_97&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_98&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_99&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_100&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_101&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_102&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_103&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_104&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_105&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_106&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_107&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_108&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_109&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_110&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_111&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_112&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_113&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_114&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_115&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_116&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_117&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_118&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_119&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_120&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_121&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_122&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_123&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_124&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_125&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_126&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_127&quot;</span><br><span class=\"line\">            ]</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            &quot;datasource&quot;: &quot;binlog_chatlog_m1&quot;,</span><br><span class=\"line\">            &quot;table&quot;: [</span><br><span class=\"line\">              &quot;chat_log_detail_128&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_129&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_130&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_131&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_132&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_133&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_134&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_135&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_136&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_137&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_138&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_139&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_140&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_141&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_142&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_143&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_144&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_145&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_146&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_147&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_148&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_149&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_150&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_151&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_152&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_153&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_154&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_155&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_156&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_157&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_158&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_159&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_160&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_161&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_162&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_163&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_164&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_165&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_166&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_167&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_168&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_169&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_170&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_171&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_172&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_173&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_174&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_175&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_176&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_177&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_178&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_179&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_180&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_181&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_182&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_183&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_184&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_185&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_186&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_187&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_188&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_189&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_190&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_191&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_192&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_193&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_194&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_195&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_196&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_197&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_198&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_199&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_200&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_201&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_202&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_203&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_204&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_205&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_206&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_207&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_208&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_209&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_210&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_211&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_212&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_213&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_214&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_215&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_216&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_217&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_218&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_219&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_220&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_221&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_222&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_223&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_224&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_225&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_226&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_227&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_228&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_229&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_230&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_231&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_232&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_233&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_234&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_235&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_236&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_237&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_238&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_239&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_240&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_241&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_242&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_243&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_244&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_245&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_246&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_247&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_248&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_249&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_250&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_251&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_252&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_253&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_254&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_255&quot;</span><br><span class=\"line\">            ]</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            &quot;datasource&quot;: &quot;binlog_chatlog_m2&quot;,</span><br><span class=\"line\">            &quot;table&quot;: [</span><br><span class=\"line\">              &quot;chat_log_detail_256&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_257&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_258&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_259&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_260&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_261&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_262&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_263&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_264&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_265&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_266&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_267&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_268&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_269&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_270&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_271&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_272&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_273&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_274&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_275&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_276&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_277&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_278&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_279&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_280&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_281&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_282&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_283&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_284&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_285&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_286&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_287&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_288&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_289&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_290&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_291&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_292&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_293&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_294&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_295&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_296&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_297&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_298&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_299&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_300&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_301&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_302&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_303&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_304&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_305&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_306&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_307&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_308&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_309&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_310&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_311&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_312&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_313&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_314&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_315&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_316&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_317&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_318&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_319&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_320&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_321&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_322&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_323&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_324&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_325&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_326&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_327&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_328&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_329&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_330&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_331&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_332&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_333&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_334&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_335&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_336&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_337&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_338&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_339&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_340&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_341&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_342&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_343&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_344&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_345&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_346&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_347&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_348&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_349&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_350&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_351&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_352&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_353&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_354&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_355&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_356&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_357&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_358&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_359&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_360&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_361&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_362&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_363&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_364&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_365&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_366&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_367&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_368&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_369&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_370&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_371&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_372&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_373&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_374&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_375&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_376&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_377&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_378&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_379&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_380&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_381&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_382&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_383&quot;</span><br><span class=\"line\">            ]</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            &quot;datasource&quot;: &quot;binlog_chatlog_m3&quot;,</span><br><span class=\"line\">            &quot;table&quot;: [</span><br><span class=\"line\">              &quot;chat_log_detail_384&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_385&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_386&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_387&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_388&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_389&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_390&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_391&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_392&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_393&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_394&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_395&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_396&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_397&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_398&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_399&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_400&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_401&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_402&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_403&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_404&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_405&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_406&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_407&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_408&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_409&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_410&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_411&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_412&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_413&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_414&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_415&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_416&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_417&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_418&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_419&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_420&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_421&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_422&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_423&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_424&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_425&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_426&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_427&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_428&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_429&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_430&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_431&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_432&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_433&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_434&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_435&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_436&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_437&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_438&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_439&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_440&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_441&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_442&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_443&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_444&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_445&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_446&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_447&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_448&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_449&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_450&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_451&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_452&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_453&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_454&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_455&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_456&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_457&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_458&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_459&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_460&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_461&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_462&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_463&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_464&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_465&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_466&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_467&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_468&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_469&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_470&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_471&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_472&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_473&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_474&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_475&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_476&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_477&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_478&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_479&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_480&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_481&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_482&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_483&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_484&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_485&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_486&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_487&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_488&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_489&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_490&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_491&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_492&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_493&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_494&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_495&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_496&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_497&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_498&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_499&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_500&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_501&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_502&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_503&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_504&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_505&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_506&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_507&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_508&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_509&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_510&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_511&quot;</span><br><span class=\"line\">            ]</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            &quot;datasource&quot;: &quot;binlog_chatlog_m4&quot;,</span><br><span class=\"line\">            &quot;table&quot;: [</span><br><span class=\"line\">              &quot;chat_log_detail_512&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_513&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_514&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_515&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_516&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_517&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_518&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_519&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_520&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_521&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_522&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_523&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_524&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_525&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_526&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_527&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_528&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_529&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_530&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_531&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_532&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_533&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_534&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_535&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_536&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_537&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_538&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_539&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_540&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_541&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_542&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_543&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_544&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_545&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_546&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_547&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_548&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_549&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_550&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_551&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_552&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_553&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_554&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_555&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_556&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_557&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_558&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_559&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_560&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_561&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_562&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_563&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_564&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_565&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_566&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_567&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_568&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_569&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_570&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_571&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_572&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_573&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_574&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_575&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_576&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_577&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_578&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_579&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_580&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_581&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_582&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_583&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_584&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_585&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_586&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_587&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_588&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_589&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_590&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_591&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_592&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_593&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_594&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_595&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_596&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_597&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_598&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_599&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_600&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_601&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_602&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_603&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_604&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_605&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_606&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_607&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_608&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_609&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_610&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_611&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_612&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_613&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_614&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_615&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_616&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_617&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_618&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_619&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_620&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_621&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_622&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_623&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_624&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_625&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_626&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_627&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_628&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_629&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_630&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_631&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_632&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_633&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_634&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_635&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_636&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_637&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_638&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_639&quot;</span><br><span class=\"line\">            ]</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            &quot;datasource&quot;: &quot;binlog_chatlog_m5&quot;,</span><br><span class=\"line\">            &quot;table&quot;: [</span><br><span class=\"line\">              &quot;chat_log_detail_640&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_641&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_642&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_643&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_644&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_645&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_646&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_647&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_648&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_649&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_650&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_651&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_652&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_653&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_654&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_655&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_656&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_657&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_658&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_659&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_660&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_661&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_662&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_663&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_664&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_665&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_666&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_667&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_668&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_669&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_670&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_671&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_672&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_673&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_674&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_675&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_676&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_677&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_678&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_679&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_680&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_681&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_682&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_683&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_684&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_685&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_686&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_687&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_688&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_689&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_690&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_691&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_692&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_693&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_694&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_695&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_696&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_697&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_698&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_699&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_700&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_701&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_702&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_703&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_704&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_705&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_706&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_707&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_708&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_709&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_710&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_711&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_712&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_713&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_714&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_715&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_716&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_717&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_718&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_719&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_720&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_721&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_722&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_723&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_724&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_725&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_726&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_727&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_728&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_729&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_730&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_731&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_732&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_733&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_734&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_735&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_736&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_737&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_738&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_739&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_740&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_741&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_742&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_743&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_744&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_745&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_746&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_747&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_748&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_749&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_750&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_751&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_752&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_753&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_754&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_755&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_756&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_757&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_758&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_759&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_760&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_761&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_762&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_763&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_764&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_765&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_766&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_767&quot;</span><br><span class=\"line\">            ]</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            &quot;datasource&quot;: &quot;binlog_chatlog_m6&quot;,</span><br><span class=\"line\">            &quot;table&quot;: [</span><br><span class=\"line\">              &quot;chat_log_detail_768&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_769&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_770&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_771&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_772&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_773&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_774&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_775&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_776&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_777&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_778&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_779&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_780&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_781&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_782&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_783&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_784&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_785&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_786&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_787&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_788&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_789&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_790&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_791&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_792&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_793&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_794&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_795&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_796&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_797&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_798&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_799&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_800&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_801&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_802&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_803&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_804&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_805&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_806&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_807&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_808&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_809&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_810&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_811&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_812&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_813&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_814&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_815&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_816&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_817&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_818&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_819&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_820&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_821&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_822&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_823&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_824&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_825&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_826&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_827&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_828&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_829&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_830&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_831&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_832&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_833&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_834&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_835&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_836&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_837&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_838&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_839&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_840&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_841&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_842&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_843&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_844&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_845&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_846&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_847&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_848&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_849&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_850&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_851&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_852&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_853&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_854&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_855&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_856&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_857&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_858&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_859&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_860&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_861&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_862&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_863&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_864&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_865&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_866&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_867&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_868&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_869&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_870&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_871&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_872&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_873&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_874&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_875&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_876&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_877&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_878&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_879&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_880&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_881&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_882&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_883&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_884&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_885&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_886&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_887&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_888&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_889&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_890&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_891&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_892&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_893&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_894&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_895&quot;</span><br><span class=\"line\">            ]</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            &quot;datasource&quot;: &quot;binlog_chatlog_m7&quot;,</span><br><span class=\"line\">            &quot;table&quot;: [</span><br><span class=\"line\">              &quot;chat_log_detail_896&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_897&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_898&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_899&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_900&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_901&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_902&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_903&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_904&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_905&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_906&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_907&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_908&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_909&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_910&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_911&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_912&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_913&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_914&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_915&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_916&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_917&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_918&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_919&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_920&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_921&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_922&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_923&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_924&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_925&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_926&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_927&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_928&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_929&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_930&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_931&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_932&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_933&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_934&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_935&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_936&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_937&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_938&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_939&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_940&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_941&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_942&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_943&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_944&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_945&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_946&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_947&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_948&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_949&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_950&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_951&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_952&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_953&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_954&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_955&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_956&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_957&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_958&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_959&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_960&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_961&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_962&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_963&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_964&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_965&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_966&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_967&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_968&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_969&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_970&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_971&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_972&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_973&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_974&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_975&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_976&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_977&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_978&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_979&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_980&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_981&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_982&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_983&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_984&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_985&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_986&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_987&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_988&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_989&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_990&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_991&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_992&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_993&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_994&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_995&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_996&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_997&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_998&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_999&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_1000&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_1001&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_1002&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_1003&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_1004&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_1005&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_1006&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_1007&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_1008&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_1009&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_1010&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_1011&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_1012&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_1013&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_1014&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_1015&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_1016&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_1017&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_1018&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_1019&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_1020&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_1021&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_1022&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_1023&quot;</span><br><span class=\"line\">            ]</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &quot;name&quot;: &quot;Reader&quot;,</span><br><span class=\"line\">      &quot;category&quot;: &quot;reader&quot;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      &quot;stepType&quot;: &quot;kafka&quot;,</span><br><span class=\"line\">      &quot;parameter&quot;: &#123;</span><br><span class=\"line\">        &quot;server&quot;: &quot;172.16.87.246:9092,172.16.87.247:9092,172.16.87.248:9092&quot;,</span><br><span class=\"line\">        &quot;keyColumn&quot;: &quot;id&quot;,</span><br><span class=\"line\">        &quot;valueType&quot;: &quot;ByteArray&quot;,</span><br><span class=\"line\">        &quot;topic&quot;: &quot;weier-chat-detail-info-qa&quot;,</span><br><span class=\"line\">        &quot;batchSize&quot;: 1024,</span><br><span class=\"line\">        &quot;fieldDelimiter&quot;: &quot;膼&quot;,</span><br><span class=\"line\">        &quot;keyType&quot;: &quot;ByteArray&quot;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &quot;name&quot;: &quot;Writer&quot;,</span><br><span class=\"line\">      &quot;category&quot;: &quot;writer&quot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  &quot;version&quot;: &quot;2.0&quot;,</span><br><span class=\"line\">  &quot;order&quot;: &#123;</span><br><span class=\"line\">    &quot;hops&quot;: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        &quot;from&quot;: &quot;Reader&quot;,</span><br><span class=\"line\">        &quot;to&quot;: &quot;Writer&quot;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &quot;setting&quot;: &#123;</span><br><span class=\"line\">    &quot;errorLimit&quot;: &#123;&#125;,</span><br><span class=\"line\">    &quot;speed&quot;: &#123;</span><br><span class=\"line\">      &quot;concurrent&quot;: 1,</span><br><span class=\"line\">      &quot;throttle&quot;: false</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<!-- toc -->\n\n<ul>\n<li><a href=\"#%E4%B8%80-ddl%E8%AF%AD%E5%8F%A5\">一、DDL语句</a></li>\n<li><a href=\"#%E4%BA%8C-%E5%88%86%E5%BA%93%E5%88%86%E8%A1%A8%E9%87%87%E9%9B%86\">二、分库分表采集</a></li>\n<li><a href=\"#%E4%B8%89-dataworks%E7%A6%BB%E7%BA%BF%E5%90%8C%E6%AD%A5%E5%88%B0es\">三、dataworks离线同步到es</a></li>\n<li><a href=\"#%E5%9B%9B-dataworks%E5%AE%9E%E6%97%B6%E5%90%8C%E6%AD%A5%E5%88%B0kafka\">四、dataworks实时同步到kafka</a></li>\n</ul>\n<!-- tocstop -->\n\n<p>[TOC]</p>\n<h1 id=\"一、DDL语句\"><a href=\"#一、DDL语句\" class=\"headerlink\" title=\"一、DDL语句\"></a>一、DDL语句</h1><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">table</span> table_name1 <span class=\"keyword\">rename</span> <span class=\"keyword\">to</span> table_name2;   <span class=\"comment\">-- 修改表名</span></span><br><span class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">table</span> table_name1 changeowner <span class=\"keyword\">to</span> <span class=\"string\">&#x27;ALIYUN$xxx@aliyun.com&#x27;</span>; <span class=\"comment\">--修改表的所有人</span></span><br><span class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">table</span> table_name1 <span class=\"keyword\">set</span> <span class=\"keyword\">COMMENT</span> <span class=\"string\">&#x27;tbl comment&#x27;</span>; <span class=\"comment\">--修改表注释</span></span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> sale_detail <span class=\"keyword\">CHANGE</span> <span class=\"keyword\">COLUMN</span> customer_name <span class=\"keyword\">RENAME</span> <span class=\"keyword\">TO</span> customer; <span class=\"comment\">--修改字段名 </span></span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> sale_detail <span class=\"keyword\">CHANGE</span> <span class=\"keyword\">COLUMN</span> customer <span class=\"keyword\">COMMENT</span> <span class=\"string\">&#x27;customer&#x27;</span>;<span class=\"comment\">--修改字段注释</span></span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> table_name <span class=\"keyword\">CHANGE</span> <span class=\"keyword\">COLUMN</span> old_col_name new_col_name column_type <span class=\"keyword\">COMMENT</span> <span class=\"string\">&#x27;column_comment&#x27;</span>;<span class=\"comment\">--同时修改列名和注释</span></span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> table_name <span class=\"keyword\">ADD</span> <span class=\"keyword\">COLUMNS</span> (col_name1 type1 <span class=\"keyword\">comment</span> <span class=\"string\">&#x27;XXX&#x27;</span>,col_name2 type2 <span class=\"keyword\">comment</span> <span class=\"string\">&#x27;XXX&#x27;</span>);<span class=\"comment\">--添加列和注释</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h1 id=\"二、分库分表采集\"><a href=\"#二、分库分表采集\" class=\"headerlink\" title=\"二、分库分表采集\"></a>二、分库分表采集</h1><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;type&quot;: &quot;job&quot;,</span><br><span class=\"line\">    &quot;steps&quot;: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            &quot;stepType&quot;: &quot;mysql&quot;,</span><br><span class=\"line\">            &quot;parameter&quot;: &#123;</span><br><span class=\"line\">                &quot;datasource&quot;: &quot;mysql_frog_m1_frog_001&quot;,</span><br><span class=\"line\">                &quot;column&quot;: [</span><br><span class=\"line\">                    &quot;seller_account_id&quot;,</span><br><span class=\"line\">                    &quot;reply_guard_flag&quot;,</span><br><span class=\"line\">                    &quot;topping_flag&quot;,</span><br><span class=\"line\">                    &quot;guard_rule&quot;,</span><br><span class=\"line\">                    &quot;plat_form&quot;,</span><br><span class=\"line\">                    &quot;feature&quot;,</span><br><span class=\"line\">                    &quot;remind_status&quot;,</span><br><span class=\"line\">                    &quot;status&quot;,</span><br><span class=\"line\">                    &quot;gmt_modified&quot;,</span><br><span class=\"line\">                    &quot;gmt_create&quot;,</span><br><span class=\"line\">                    &quot;score&quot;,</span><br><span class=\"line\">                    &quot;deduction&quot;,</span><br><span class=\"line\">                    &quot;buyer_abnormal_emotion&quot;,</span><br><span class=\"line\">                    &quot;flag&quot;,</span><br><span class=\"line\">                    &quot;msg_alarm_type&quot;,</span><br><span class=\"line\">                    &quot;rule_name&quot;,</span><br><span class=\"line\">                    &quot;rule_id&quot;,</span><br><span class=\"line\">                    &quot;msg_time&quot;,</span><br><span class=\"line\">                    &quot;msg_id&quot;,</span><br><span class=\"line\">                    &quot;msg_content&quot;,</span><br><span class=\"line\">                    &quot;context_id&quot;,</span><br><span class=\"line\">                    &quot;buyer_nick&quot;,</span><br><span class=\"line\">                    &quot;sub_nick&quot;,</span><br><span class=\"line\">                    &quot;main_account&quot;,</span><br><span class=\"line\">                    &quot;shop_id_hash&quot;,</span><br><span class=\"line\">                    &quot;shop_id&quot;,</span><br><span class=\"line\">                    &quot;id&quot;</span><br><span class=\"line\">                ],</span><br><span class=\"line\">                &quot;connection&quot;: [</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        &quot;datasource&quot;: &quot;mysql_frog_m1_frog_001&quot;,</span><br><span class=\"line\">                        &quot;table&quot;: [</span><br><span class=\"line\">                            &quot;quality_guard_market_alarm_record_[0-127]&quot;</span><br><span class=\"line\">                        ]</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                ],</span><br><span class=\"line\">                &quot;where&quot;: &quot; date_format(msg_time,&#x27;%Y%m%d&#x27;)=&#x27;$&#123;bizdate&#125;&#x27;    &quot;,</span><br><span class=\"line\">                &quot;splitPk&quot;: &quot;id&quot;,</span><br><span class=\"line\">                &quot;encoding&quot;: &quot;UTF-8&quot;</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &quot;name&quot;: &quot;Reader&quot;,</span><br><span class=\"line\">            &quot;category&quot;: &quot;reader&quot;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            &quot;stepType&quot;: &quot;odps&quot;,</span><br><span class=\"line\">            &quot;parameter&quot;: &#123;</span><br><span class=\"line\">                &quot;partition&quot;: &quot;ds=$&#123;bizdate&#125;,db=$&#123;db&#125;&quot;,</span><br><span class=\"line\">                &quot;truncate&quot;: true,</span><br><span class=\"line\">                &quot;datasource&quot;: &quot;odps_first&quot;,</span><br><span class=\"line\">                &quot;column&quot;: [</span><br><span class=\"line\">                    &quot;seller_account_id&quot;,</span><br><span class=\"line\">                    &quot;reply_guard_flag&quot;,</span><br><span class=\"line\">                    &quot;topping_flag&quot;,</span><br><span class=\"line\">                    &quot;guard_rule&quot;,</span><br><span class=\"line\">                    &quot;plat_form&quot;,</span><br><span class=\"line\">                    &quot;feature&quot;,</span><br><span class=\"line\">                    &quot;remind_status&quot;,</span><br><span class=\"line\">                    &quot;status&quot;,</span><br><span class=\"line\">                    &quot;gmt_modified&quot;,</span><br><span class=\"line\">                    &quot;gmt_create&quot;,</span><br><span class=\"line\">                    &quot;score&quot;,</span><br><span class=\"line\">                    &quot;deduction&quot;,</span><br><span class=\"line\">                    &quot;buyer_abnormal_emotion&quot;,</span><br><span class=\"line\">                    &quot;flag&quot;,</span><br><span class=\"line\">                    &quot;msg_alarm_type&quot;,</span><br><span class=\"line\">                    &quot;rule_name&quot;,</span><br><span class=\"line\">                    &quot;rule_id&quot;,</span><br><span class=\"line\">                    &quot;msg_time&quot;,</span><br><span class=\"line\">                    &quot;msg_id&quot;,</span><br><span class=\"line\">                    &quot;msg_content&quot;,</span><br><span class=\"line\">                    &quot;context_id&quot;,</span><br><span class=\"line\">                    &quot;buyer_nick&quot;,</span><br><span class=\"line\">                    &quot;sub_nick&quot;,</span><br><span class=\"line\">                    &quot;main_account&quot;,</span><br><span class=\"line\">                    &quot;shop_id_hash&quot;,</span><br><span class=\"line\">                    &quot;shop_id&quot;,</span><br><span class=\"line\">                    &quot;id&quot;</span><br><span class=\"line\">                ],</span><br><span class=\"line\">                &quot;emptyAsNull&quot;: true,</span><br><span class=\"line\">                &quot;table&quot;: &quot;ods_frog_quality_guard_market_alarm_record_di&quot;</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &quot;name&quot;: &quot;Writer&quot;,</span><br><span class=\"line\">            &quot;category&quot;: &quot;writer&quot;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    &quot;version&quot;: &quot;2.0&quot;,</span><br><span class=\"line\">    &quot;order&quot;: &#123;</span><br><span class=\"line\">        &quot;hops&quot;: [</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                &quot;from&quot;: &quot;Reader&quot;,</span><br><span class=\"line\">                &quot;to&quot;: &quot;Writer&quot;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &quot;setting&quot;: &#123;</span><br><span class=\"line\">        &quot;errorLimit&quot;: &#123;</span><br><span class=\"line\">            &quot;record&quot;: &quot;&quot;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &quot;speed&quot;: &#123;</span><br><span class=\"line\">            &quot;throttle&quot;: false,</span><br><span class=\"line\">            &quot;concurrent&quot;: 2</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"三、dataworks离线同步到es\"><a href=\"#三、dataworks离线同步到es\" class=\"headerlink\" title=\"三、dataworks离线同步到es\"></a>三、dataworks离线同步到es</h1><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;type&quot;: &quot;job&quot;,</span><br><span class=\"line\">    &quot;steps&quot;: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            &quot;stepType&quot;: &quot;odps&quot;,</span><br><span class=\"line\">            &quot;parameter&quot;: &#123;</span><br><span class=\"line\">                &quot;partition&quot;: [</span><br><span class=\"line\">                    &quot;ds=$&#123;bizdate&#125;&quot;</span><br><span class=\"line\">                ],</span><br><span class=\"line\">                &quot;datasource&quot;: &quot;odps_first&quot;,</span><br><span class=\"line\">                &quot;column&quot;: [</span><br><span class=\"line\">                    &quot;es_id&quot;,</span><br><span class=\"line\">                    &quot;pay_product_td_num&quot;,</span><br><span class=\"line\">                    &quot;pay_order_td_num&quot;,</span><br><span class=\"line\">                    &quot;pay_first_gmt&quot;,</span><br><span class=\"line\">                    &quot;pay_single_max_amt&quot;,</span><br><span class=\"line\">                    &quot;pay_payment_td_amt&quot;,</span><br><span class=\"line\">                    &quot;buyer_phone&quot;,</span><br><span class=\"line\">                    &quot;app&quot;,</span><br><span class=\"line\">                    &quot;shop_id&quot;,</span><br><span class=\"line\">                    &quot;shop_name&quot;</span><br><span class=\"line\">                ],</span><br><span class=\"line\">                &quot;tableComment&quot;: &quot;私域星球全平台用户消费统计表(json数据)&quot;,</span><br><span class=\"line\">                &quot;table&quot;: &quot;ads_sy_shop_phone_du&quot;</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &quot;name&quot;: &quot;Reader&quot;,</span><br><span class=\"line\">            &quot;category&quot;: &quot;reader&quot;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            &quot;stepType&quot;: &quot;elasticsearch&quot;,</span><br><span class=\"line\">            &quot;parameter&quot;: &#123;</span><br><span class=\"line\">                &quot;column&quot;: [</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        &quot;name&quot;: &quot;es_id&quot;,</span><br><span class=\"line\">                        &quot;type&quot;: &quot;id&quot;</span><br><span class=\"line\">                    &#125;,</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        &quot;name&quot;: &quot;consumeGoodsTotal&quot;,</span><br><span class=\"line\">                        &quot;type&quot;: &quot;long&quot;</span><br><span class=\"line\">                    &#125;,</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        &quot;name&quot;: &quot;consumeOrderTotal&quot;,</span><br><span class=\"line\">                        &quot;type&quot;: &quot;long&quot;</span><br><span class=\"line\">                    &#125;,</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        &quot;origin&quot;: true,</span><br><span class=\"line\">                        &quot;format&quot;: &quot;yyyy-MM-dd HH:mm:ss&quot;,</span><br><span class=\"line\">                        &quot;name&quot;: &quot;firstConsumeTime&quot;,</span><br><span class=\"line\">                        &quot;type&quot;: &quot;date&quot;</span><br><span class=\"line\">                    &#125;,</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        &quot;name&quot;: &quot;maxSinglePayedAmt&quot;,</span><br><span class=\"line\">                        &quot;type&quot;: &quot;long&quot;</span><br><span class=\"line\">                    &#125;,</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        &quot;name&quot;: &quot;payedAmt&quot;,</span><br><span class=\"line\">                        &quot;type&quot;: &quot;long&quot;</span><br><span class=\"line\">                    &#125;,</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        &quot;name&quot;: &quot;phoneNo&quot;,</span><br><span class=\"line\">                        &quot;type&quot;: &quot;keyword&quot;</span><br><span class=\"line\">                    &#125;,</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        &quot;name&quot;: &quot;platformType&quot;,</span><br><span class=\"line\">                        &quot;type&quot;: &quot;keyword&quot;</span><br><span class=\"line\">                    &#125;,</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        &quot;name&quot;: &quot;shopId&quot;,</span><br><span class=\"line\">                        &quot;type&quot;: &quot;keyword&quot;</span><br><span class=\"line\">                    &#125;,</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        &quot;name&quot;: &quot;shopName&quot;,</span><br><span class=\"line\">                        &quot;type&quot;: &quot;keyword&quot;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                ],</span><br><span class=\"line\">                &quot;aliasMode&quot;: &quot;append&quot;,</span><br><span class=\"line\">                &quot;index&quot;: &quot;all_platform_consume_total_3&quot;,</span><br><span class=\"line\">                &quot;type&quot;: &quot;_doc&quot;,</span><br><span class=\"line\">                &quot;splitter&quot;: &quot;,&quot;,</span><br><span class=\"line\">                &quot;timeout&quot;: 600000,</span><br><span class=\"line\">                &quot;multiThread&quot;: true,</span><br><span class=\"line\">                &quot;actionType&quot;: &quot;index&quot;,</span><br><span class=\"line\">                &quot;indexType&quot;: &quot;&quot;,</span><br><span class=\"line\">                &quot;cleanup&quot;: false,</span><br><span class=\"line\">                &quot;datasource&quot;: &quot;es_siyuxingqiu&quot;,</span><br><span class=\"line\">                &quot;discovery&quot;: false,</span><br><span class=\"line\">                &quot;trySize&quot;: 30,</span><br><span class=\"line\">                &quot;alias&quot;: &quot;&quot;,</span><br><span class=\"line\">                &quot;dynamic&quot;: false,</span><br><span class=\"line\">                &quot;ignoreParseError&quot;: false,</span><br><span class=\"line\">                &quot;batchSize&quot;: 1000,</span><br><span class=\"line\">                &quot;compression&quot;: true,</span><br><span class=\"line\">                &quot;ignoreWriteError&quot;: false</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &quot;name&quot;: &quot;Writer&quot;,</span><br><span class=\"line\">            &quot;category&quot;: &quot;writer&quot;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    &quot;version&quot;: &quot;2.0&quot;,</span><br><span class=\"line\">    &quot;order&quot;: &#123;</span><br><span class=\"line\">        &quot;hops&quot;: [</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                &quot;from&quot;: &quot;Reader&quot;,</span><br><span class=\"line\">                &quot;to&quot;: &quot;Writer&quot;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &quot;setting&quot;: &#123;</span><br><span class=\"line\">        &quot;errorLimit&quot;: &#123;</span><br><span class=\"line\">            &quot;record&quot;: &quot;&quot;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &quot;speed&quot;: &#123;</span><br><span class=\"line\">            &quot;throttle&quot;: false,</span><br><span class=\"line\">            &quot;concurrent&quot;: 2</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"四、dataworks实时同步到kafka\"><a href=\"#四、dataworks实时同步到kafka\" class=\"headerlink\" title=\"四、dataworks实时同步到kafka\"></a>四、dataworks实时同步到kafka</h1><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br><span class=\"line\">320</span><br><span class=\"line\">321</span><br><span class=\"line\">322</span><br><span class=\"line\">323</span><br><span class=\"line\">324</span><br><span class=\"line\">325</span><br><span class=\"line\">326</span><br><span class=\"line\">327</span><br><span class=\"line\">328</span><br><span class=\"line\">329</span><br><span class=\"line\">330</span><br><span class=\"line\">331</span><br><span class=\"line\">332</span><br><span class=\"line\">333</span><br><span class=\"line\">334</span><br><span class=\"line\">335</span><br><span class=\"line\">336</span><br><span class=\"line\">337</span><br><span class=\"line\">338</span><br><span class=\"line\">339</span><br><span class=\"line\">340</span><br><span class=\"line\">341</span><br><span class=\"line\">342</span><br><span class=\"line\">343</span><br><span class=\"line\">344</span><br><span class=\"line\">345</span><br><span class=\"line\">346</span><br><span class=\"line\">347</span><br><span class=\"line\">348</span><br><span class=\"line\">349</span><br><span class=\"line\">350</span><br><span class=\"line\">351</span><br><span class=\"line\">352</span><br><span class=\"line\">353</span><br><span class=\"line\">354</span><br><span class=\"line\">355</span><br><span class=\"line\">356</span><br><span class=\"line\">357</span><br><span class=\"line\">358</span><br><span class=\"line\">359</span><br><span class=\"line\">360</span><br><span class=\"line\">361</span><br><span class=\"line\">362</span><br><span class=\"line\">363</span><br><span class=\"line\">364</span><br><span class=\"line\">365</span><br><span class=\"line\">366</span><br><span class=\"line\">367</span><br><span class=\"line\">368</span><br><span class=\"line\">369</span><br><span class=\"line\">370</span><br><span class=\"line\">371</span><br><span class=\"line\">372</span><br><span class=\"line\">373</span><br><span class=\"line\">374</span><br><span class=\"line\">375</span><br><span class=\"line\">376</span><br><span class=\"line\">377</span><br><span class=\"line\">378</span><br><span class=\"line\">379</span><br><span class=\"line\">380</span><br><span class=\"line\">381</span><br><span class=\"line\">382</span><br><span class=\"line\">383</span><br><span class=\"line\">384</span><br><span class=\"line\">385</span><br><span class=\"line\">386</span><br><span class=\"line\">387</span><br><span class=\"line\">388</span><br><span class=\"line\">389</span><br><span class=\"line\">390</span><br><span class=\"line\">391</span><br><span class=\"line\">392</span><br><span class=\"line\">393</span><br><span class=\"line\">394</span><br><span class=\"line\">395</span><br><span class=\"line\">396</span><br><span class=\"line\">397</span><br><span class=\"line\">398</span><br><span class=\"line\">399</span><br><span class=\"line\">400</span><br><span class=\"line\">401</span><br><span class=\"line\">402</span><br><span class=\"line\">403</span><br><span class=\"line\">404</span><br><span class=\"line\">405</span><br><span class=\"line\">406</span><br><span class=\"line\">407</span><br><span class=\"line\">408</span><br><span class=\"line\">409</span><br><span class=\"line\">410</span><br><span class=\"line\">411</span><br><span class=\"line\">412</span><br><span class=\"line\">413</span><br><span class=\"line\">414</span><br><span class=\"line\">415</span><br><span class=\"line\">416</span><br><span class=\"line\">417</span><br><span class=\"line\">418</span><br><span class=\"line\">419</span><br><span class=\"line\">420</span><br><span class=\"line\">421</span><br><span class=\"line\">422</span><br><span class=\"line\">423</span><br><span class=\"line\">424</span><br><span class=\"line\">425</span><br><span class=\"line\">426</span><br><span class=\"line\">427</span><br><span class=\"line\">428</span><br><span class=\"line\">429</span><br><span class=\"line\">430</span><br><span class=\"line\">431</span><br><span class=\"line\">432</span><br><span class=\"line\">433</span><br><span class=\"line\">434</span><br><span class=\"line\">435</span><br><span class=\"line\">436</span><br><span class=\"line\">437</span><br><span class=\"line\">438</span><br><span class=\"line\">439</span><br><span class=\"line\">440</span><br><span class=\"line\">441</span><br><span class=\"line\">442</span><br><span class=\"line\">443</span><br><span class=\"line\">444</span><br><span class=\"line\">445</span><br><span class=\"line\">446</span><br><span class=\"line\">447</span><br><span class=\"line\">448</span><br><span class=\"line\">449</span><br><span class=\"line\">450</span><br><span class=\"line\">451</span><br><span class=\"line\">452</span><br><span class=\"line\">453</span><br><span class=\"line\">454</span><br><span class=\"line\">455</span><br><span class=\"line\">456</span><br><span class=\"line\">457</span><br><span class=\"line\">458</span><br><span class=\"line\">459</span><br><span class=\"line\">460</span><br><span class=\"line\">461</span><br><span class=\"line\">462</span><br><span class=\"line\">463</span><br><span class=\"line\">464</span><br><span class=\"line\">465</span><br><span class=\"line\">466</span><br><span class=\"line\">467</span><br><span class=\"line\">468</span><br><span class=\"line\">469</span><br><span class=\"line\">470</span><br><span class=\"line\">471</span><br><span class=\"line\">472</span><br><span class=\"line\">473</span><br><span class=\"line\">474</span><br><span class=\"line\">475</span><br><span class=\"line\">476</span><br><span class=\"line\">477</span><br><span class=\"line\">478</span><br><span class=\"line\">479</span><br><span class=\"line\">480</span><br><span class=\"line\">481</span><br><span class=\"line\">482</span><br><span class=\"line\">483</span><br><span class=\"line\">484</span><br><span class=\"line\">485</span><br><span class=\"line\">486</span><br><span class=\"line\">487</span><br><span class=\"line\">488</span><br><span class=\"line\">489</span><br><span class=\"line\">490</span><br><span class=\"line\">491</span><br><span class=\"line\">492</span><br><span class=\"line\">493</span><br><span class=\"line\">494</span><br><span class=\"line\">495</span><br><span class=\"line\">496</span><br><span class=\"line\">497</span><br><span class=\"line\">498</span><br><span class=\"line\">499</span><br><span class=\"line\">500</span><br><span class=\"line\">501</span><br><span class=\"line\">502</span><br><span class=\"line\">503</span><br><span class=\"line\">504</span><br><span class=\"line\">505</span><br><span class=\"line\">506</span><br><span class=\"line\">507</span><br><span class=\"line\">508</span><br><span class=\"line\">509</span><br><span class=\"line\">510</span><br><span class=\"line\">511</span><br><span class=\"line\">512</span><br><span class=\"line\">513</span><br><span class=\"line\">514</span><br><span class=\"line\">515</span><br><span class=\"line\">516</span><br><span class=\"line\">517</span><br><span class=\"line\">518</span><br><span class=\"line\">519</span><br><span class=\"line\">520</span><br><span class=\"line\">521</span><br><span class=\"line\">522</span><br><span class=\"line\">523</span><br><span class=\"line\">524</span><br><span class=\"line\">525</span><br><span class=\"line\">526</span><br><span class=\"line\">527</span><br><span class=\"line\">528</span><br><span class=\"line\">529</span><br><span class=\"line\">530</span><br><span class=\"line\">531</span><br><span class=\"line\">532</span><br><span class=\"line\">533</span><br><span class=\"line\">534</span><br><span class=\"line\">535</span><br><span class=\"line\">536</span><br><span class=\"line\">537</span><br><span class=\"line\">538</span><br><span class=\"line\">539</span><br><span class=\"line\">540</span><br><span class=\"line\">541</span><br><span class=\"line\">542</span><br><span class=\"line\">543</span><br><span class=\"line\">544</span><br><span class=\"line\">545</span><br><span class=\"line\">546</span><br><span class=\"line\">547</span><br><span class=\"line\">548</span><br><span class=\"line\">549</span><br><span class=\"line\">550</span><br><span class=\"line\">551</span><br><span class=\"line\">552</span><br><span class=\"line\">553</span><br><span class=\"line\">554</span><br><span class=\"line\">555</span><br><span class=\"line\">556</span><br><span class=\"line\">557</span><br><span class=\"line\">558</span><br><span class=\"line\">559</span><br><span class=\"line\">560</span><br><span class=\"line\">561</span><br><span class=\"line\">562</span><br><span class=\"line\">563</span><br><span class=\"line\">564</span><br><span class=\"line\">565</span><br><span class=\"line\">566</span><br><span class=\"line\">567</span><br><span class=\"line\">568</span><br><span class=\"line\">569</span><br><span class=\"line\">570</span><br><span class=\"line\">571</span><br><span class=\"line\">572</span><br><span class=\"line\">573</span><br><span class=\"line\">574</span><br><span class=\"line\">575</span><br><span class=\"line\">576</span><br><span class=\"line\">577</span><br><span class=\"line\">578</span><br><span class=\"line\">579</span><br><span class=\"line\">580</span><br><span class=\"line\">581</span><br><span class=\"line\">582</span><br><span class=\"line\">583</span><br><span class=\"line\">584</span><br><span class=\"line\">585</span><br><span class=\"line\">586</span><br><span class=\"line\">587</span><br><span class=\"line\">588</span><br><span class=\"line\">589</span><br><span class=\"line\">590</span><br><span class=\"line\">591</span><br><span class=\"line\">592</span><br><span class=\"line\">593</span><br><span class=\"line\">594</span><br><span class=\"line\">595</span><br><span class=\"line\">596</span><br><span class=\"line\">597</span><br><span class=\"line\">598</span><br><span class=\"line\">599</span><br><span class=\"line\">600</span><br><span class=\"line\">601</span><br><span class=\"line\">602</span><br><span class=\"line\">603</span><br><span class=\"line\">604</span><br><span class=\"line\">605</span><br><span class=\"line\">606</span><br><span class=\"line\">607</span><br><span class=\"line\">608</span><br><span class=\"line\">609</span><br><span class=\"line\">610</span><br><span class=\"line\">611</span><br><span class=\"line\">612</span><br><span class=\"line\">613</span><br><span class=\"line\">614</span><br><span class=\"line\">615</span><br><span class=\"line\">616</span><br><span class=\"line\">617</span><br><span class=\"line\">618</span><br><span class=\"line\">619</span><br><span class=\"line\">620</span><br><span class=\"line\">621</span><br><span class=\"line\">622</span><br><span class=\"line\">623</span><br><span class=\"line\">624</span><br><span class=\"line\">625</span><br><span class=\"line\">626</span><br><span class=\"line\">627</span><br><span class=\"line\">628</span><br><span class=\"line\">629</span><br><span class=\"line\">630</span><br><span class=\"line\">631</span><br><span class=\"line\">632</span><br><span class=\"line\">633</span><br><span class=\"line\">634</span><br><span class=\"line\">635</span><br><span class=\"line\">636</span><br><span class=\"line\">637</span><br><span class=\"line\">638</span><br><span class=\"line\">639</span><br><span class=\"line\">640</span><br><span class=\"line\">641</span><br><span class=\"line\">642</span><br><span class=\"line\">643</span><br><span class=\"line\">644</span><br><span class=\"line\">645</span><br><span class=\"line\">646</span><br><span class=\"line\">647</span><br><span class=\"line\">648</span><br><span class=\"line\">649</span><br><span class=\"line\">650</span><br><span class=\"line\">651</span><br><span class=\"line\">652</span><br><span class=\"line\">653</span><br><span class=\"line\">654</span><br><span class=\"line\">655</span><br><span class=\"line\">656</span><br><span class=\"line\">657</span><br><span class=\"line\">658</span><br><span class=\"line\">659</span><br><span class=\"line\">660</span><br><span class=\"line\">661</span><br><span class=\"line\">662</span><br><span class=\"line\">663</span><br><span class=\"line\">664</span><br><span class=\"line\">665</span><br><span class=\"line\">666</span><br><span class=\"line\">667</span><br><span class=\"line\">668</span><br><span class=\"line\">669</span><br><span class=\"line\">670</span><br><span class=\"line\">671</span><br><span class=\"line\">672</span><br><span class=\"line\">673</span><br><span class=\"line\">674</span><br><span class=\"line\">675</span><br><span class=\"line\">676</span><br><span class=\"line\">677</span><br><span class=\"line\">678</span><br><span class=\"line\">679</span><br><span class=\"line\">680</span><br><span class=\"line\">681</span><br><span class=\"line\">682</span><br><span class=\"line\">683</span><br><span class=\"line\">684</span><br><span class=\"line\">685</span><br><span class=\"line\">686</span><br><span class=\"line\">687</span><br><span class=\"line\">688</span><br><span class=\"line\">689</span><br><span class=\"line\">690</span><br><span class=\"line\">691</span><br><span class=\"line\">692</span><br><span class=\"line\">693</span><br><span class=\"line\">694</span><br><span class=\"line\">695</span><br><span class=\"line\">696</span><br><span class=\"line\">697</span><br><span class=\"line\">698</span><br><span class=\"line\">699</span><br><span class=\"line\">700</span><br><span class=\"line\">701</span><br><span class=\"line\">702</span><br><span class=\"line\">703</span><br><span class=\"line\">704</span><br><span class=\"line\">705</span><br><span class=\"line\">706</span><br><span class=\"line\">707</span><br><span class=\"line\">708</span><br><span class=\"line\">709</span><br><span class=\"line\">710</span><br><span class=\"line\">711</span><br><span class=\"line\">712</span><br><span class=\"line\">713</span><br><span class=\"line\">714</span><br><span class=\"line\">715</span><br><span class=\"line\">716</span><br><span class=\"line\">717</span><br><span class=\"line\">718</span><br><span class=\"line\">719</span><br><span class=\"line\">720</span><br><span class=\"line\">721</span><br><span class=\"line\">722</span><br><span class=\"line\">723</span><br><span class=\"line\">724</span><br><span class=\"line\">725</span><br><span class=\"line\">726</span><br><span class=\"line\">727</span><br><span class=\"line\">728</span><br><span class=\"line\">729</span><br><span class=\"line\">730</span><br><span class=\"line\">731</span><br><span class=\"line\">732</span><br><span class=\"line\">733</span><br><span class=\"line\">734</span><br><span class=\"line\">735</span><br><span class=\"line\">736</span><br><span class=\"line\">737</span><br><span class=\"line\">738</span><br><span class=\"line\">739</span><br><span class=\"line\">740</span><br><span class=\"line\">741</span><br><span class=\"line\">742</span><br><span class=\"line\">743</span><br><span class=\"line\">744</span><br><span class=\"line\">745</span><br><span class=\"line\">746</span><br><span class=\"line\">747</span><br><span class=\"line\">748</span><br><span class=\"line\">749</span><br><span class=\"line\">750</span><br><span class=\"line\">751</span><br><span class=\"line\">752</span><br><span class=\"line\">753</span><br><span class=\"line\">754</span><br><span class=\"line\">755</span><br><span class=\"line\">756</span><br><span class=\"line\">757</span><br><span class=\"line\">758</span><br><span class=\"line\">759</span><br><span class=\"line\">760</span><br><span class=\"line\">761</span><br><span class=\"line\">762</span><br><span class=\"line\">763</span><br><span class=\"line\">764</span><br><span class=\"line\">765</span><br><span class=\"line\">766</span><br><span class=\"line\">767</span><br><span class=\"line\">768</span><br><span class=\"line\">769</span><br><span class=\"line\">770</span><br><span class=\"line\">771</span><br><span class=\"line\">772</span><br><span class=\"line\">773</span><br><span class=\"line\">774</span><br><span class=\"line\">775</span><br><span class=\"line\">776</span><br><span class=\"line\">777</span><br><span class=\"line\">778</span><br><span class=\"line\">779</span><br><span class=\"line\">780</span><br><span class=\"line\">781</span><br><span class=\"line\">782</span><br><span class=\"line\">783</span><br><span class=\"line\">784</span><br><span class=\"line\">785</span><br><span class=\"line\">786</span><br><span class=\"line\">787</span><br><span class=\"line\">788</span><br><span class=\"line\">789</span><br><span class=\"line\">790</span><br><span class=\"line\">791</span><br><span class=\"line\">792</span><br><span class=\"line\">793</span><br><span class=\"line\">794</span><br><span class=\"line\">795</span><br><span class=\"line\">796</span><br><span class=\"line\">797</span><br><span class=\"line\">798</span><br><span class=\"line\">799</span><br><span class=\"line\">800</span><br><span class=\"line\">801</span><br><span class=\"line\">802</span><br><span class=\"line\">803</span><br><span class=\"line\">804</span><br><span class=\"line\">805</span><br><span class=\"line\">806</span><br><span class=\"line\">807</span><br><span class=\"line\">808</span><br><span class=\"line\">809</span><br><span class=\"line\">810</span><br><span class=\"line\">811</span><br><span class=\"line\">812</span><br><span class=\"line\">813</span><br><span class=\"line\">814</span><br><span class=\"line\">815</span><br><span class=\"line\">816</span><br><span class=\"line\">817</span><br><span class=\"line\">818</span><br><span class=\"line\">819</span><br><span class=\"line\">820</span><br><span class=\"line\">821</span><br><span class=\"line\">822</span><br><span class=\"line\">823</span><br><span class=\"line\">824</span><br><span class=\"line\">825</span><br><span class=\"line\">826</span><br><span class=\"line\">827</span><br><span class=\"line\">828</span><br><span class=\"line\">829</span><br><span class=\"line\">830</span><br><span class=\"line\">831</span><br><span class=\"line\">832</span><br><span class=\"line\">833</span><br><span class=\"line\">834</span><br><span class=\"line\">835</span><br><span class=\"line\">836</span><br><span class=\"line\">837</span><br><span class=\"line\">838</span><br><span class=\"line\">839</span><br><span class=\"line\">840</span><br><span class=\"line\">841</span><br><span class=\"line\">842</span><br><span class=\"line\">843</span><br><span class=\"line\">844</span><br><span class=\"line\">845</span><br><span class=\"line\">846</span><br><span class=\"line\">847</span><br><span class=\"line\">848</span><br><span class=\"line\">849</span><br><span class=\"line\">850</span><br><span class=\"line\">851</span><br><span class=\"line\">852</span><br><span class=\"line\">853</span><br><span class=\"line\">854</span><br><span class=\"line\">855</span><br><span class=\"line\">856</span><br><span class=\"line\">857</span><br><span class=\"line\">858</span><br><span class=\"line\">859</span><br><span class=\"line\">860</span><br><span class=\"line\">861</span><br><span class=\"line\">862</span><br><span class=\"line\">863</span><br><span class=\"line\">864</span><br><span class=\"line\">865</span><br><span class=\"line\">866</span><br><span class=\"line\">867</span><br><span class=\"line\">868</span><br><span class=\"line\">869</span><br><span class=\"line\">870</span><br><span class=\"line\">871</span><br><span class=\"line\">872</span><br><span class=\"line\">873</span><br><span class=\"line\">874</span><br><span class=\"line\">875</span><br><span class=\"line\">876</span><br><span class=\"line\">877</span><br><span class=\"line\">878</span><br><span class=\"line\">879</span><br><span class=\"line\">880</span><br><span class=\"line\">881</span><br><span class=\"line\">882</span><br><span class=\"line\">883</span><br><span class=\"line\">884</span><br><span class=\"line\">885</span><br><span class=\"line\">886</span><br><span class=\"line\">887</span><br><span class=\"line\">888</span><br><span class=\"line\">889</span><br><span class=\"line\">890</span><br><span class=\"line\">891</span><br><span class=\"line\">892</span><br><span class=\"line\">893</span><br><span class=\"line\">894</span><br><span class=\"line\">895</span><br><span class=\"line\">896</span><br><span class=\"line\">897</span><br><span class=\"line\">898</span><br><span class=\"line\">899</span><br><span class=\"line\">900</span><br><span class=\"line\">901</span><br><span class=\"line\">902</span><br><span class=\"line\">903</span><br><span class=\"line\">904</span><br><span class=\"line\">905</span><br><span class=\"line\">906</span><br><span class=\"line\">907</span><br><span class=\"line\">908</span><br><span class=\"line\">909</span><br><span class=\"line\">910</span><br><span class=\"line\">911</span><br><span class=\"line\">912</span><br><span class=\"line\">913</span><br><span class=\"line\">914</span><br><span class=\"line\">915</span><br><span class=\"line\">916</span><br><span class=\"line\">917</span><br><span class=\"line\">918</span><br><span class=\"line\">919</span><br><span class=\"line\">920</span><br><span class=\"line\">921</span><br><span class=\"line\">922</span><br><span class=\"line\">923</span><br><span class=\"line\">924</span><br><span class=\"line\">925</span><br><span class=\"line\">926</span><br><span class=\"line\">927</span><br><span class=\"line\">928</span><br><span class=\"line\">929</span><br><span class=\"line\">930</span><br><span class=\"line\">931</span><br><span class=\"line\">932</span><br><span class=\"line\">933</span><br><span class=\"line\">934</span><br><span class=\"line\">935</span><br><span class=\"line\">936</span><br><span class=\"line\">937</span><br><span class=\"line\">938</span><br><span class=\"line\">939</span><br><span class=\"line\">940</span><br><span class=\"line\">941</span><br><span class=\"line\">942</span><br><span class=\"line\">943</span><br><span class=\"line\">944</span><br><span class=\"line\">945</span><br><span class=\"line\">946</span><br><span class=\"line\">947</span><br><span class=\"line\">948</span><br><span class=\"line\">949</span><br><span class=\"line\">950</span><br><span class=\"line\">951</span><br><span class=\"line\">952</span><br><span class=\"line\">953</span><br><span class=\"line\">954</span><br><span class=\"line\">955</span><br><span class=\"line\">956</span><br><span class=\"line\">957</span><br><span class=\"line\">958</span><br><span class=\"line\">959</span><br><span class=\"line\">960</span><br><span class=\"line\">961</span><br><span class=\"line\">962</span><br><span class=\"line\">963</span><br><span class=\"line\">964</span><br><span class=\"line\">965</span><br><span class=\"line\">966</span><br><span class=\"line\">967</span><br><span class=\"line\">968</span><br><span class=\"line\">969</span><br><span class=\"line\">970</span><br><span class=\"line\">971</span><br><span class=\"line\">972</span><br><span class=\"line\">973</span><br><span class=\"line\">974</span><br><span class=\"line\">975</span><br><span class=\"line\">976</span><br><span class=\"line\">977</span><br><span class=\"line\">978</span><br><span class=\"line\">979</span><br><span class=\"line\">980</span><br><span class=\"line\">981</span><br><span class=\"line\">982</span><br><span class=\"line\">983</span><br><span class=\"line\">984</span><br><span class=\"line\">985</span><br><span class=\"line\">986</span><br><span class=\"line\">987</span><br><span class=\"line\">988</span><br><span class=\"line\">989</span><br><span class=\"line\">990</span><br><span class=\"line\">991</span><br><span class=\"line\">992</span><br><span class=\"line\">993</span><br><span class=\"line\">994</span><br><span class=\"line\">995</span><br><span class=\"line\">996</span><br><span class=\"line\">997</span><br><span class=\"line\">998</span><br><span class=\"line\">999</span><br><span class=\"line\">1000</span><br><span class=\"line\">1001</span><br><span class=\"line\">1002</span><br><span class=\"line\">1003</span><br><span class=\"line\">1004</span><br><span class=\"line\">1005</span><br><span class=\"line\">1006</span><br><span class=\"line\">1007</span><br><span class=\"line\">1008</span><br><span class=\"line\">1009</span><br><span class=\"line\">1010</span><br><span class=\"line\">1011</span><br><span class=\"line\">1012</span><br><span class=\"line\">1013</span><br><span class=\"line\">1014</span><br><span class=\"line\">1015</span><br><span class=\"line\">1016</span><br><span class=\"line\">1017</span><br><span class=\"line\">1018</span><br><span class=\"line\">1019</span><br><span class=\"line\">1020</span><br><span class=\"line\">1021</span><br><span class=\"line\">1022</span><br><span class=\"line\">1023</span><br><span class=\"line\">1024</span><br><span class=\"line\">1025</span><br><span class=\"line\">1026</span><br><span class=\"line\">1027</span><br><span class=\"line\">1028</span><br><span class=\"line\">1029</span><br><span class=\"line\">1030</span><br><span class=\"line\">1031</span><br><span class=\"line\">1032</span><br><span class=\"line\">1033</span><br><span class=\"line\">1034</span><br><span class=\"line\">1035</span><br><span class=\"line\">1036</span><br><span class=\"line\">1037</span><br><span class=\"line\">1038</span><br><span class=\"line\">1039</span><br><span class=\"line\">1040</span><br><span class=\"line\">1041</span><br><span class=\"line\">1042</span><br><span class=\"line\">1043</span><br><span class=\"line\">1044</span><br><span class=\"line\">1045</span><br><span class=\"line\">1046</span><br><span class=\"line\">1047</span><br><span class=\"line\">1048</span><br><span class=\"line\">1049</span><br><span class=\"line\">1050</span><br><span class=\"line\">1051</span><br><span class=\"line\">1052</span><br><span class=\"line\">1053</span><br><span class=\"line\">1054</span><br><span class=\"line\">1055</span><br><span class=\"line\">1056</span><br><span class=\"line\">1057</span><br><span class=\"line\">1058</span><br><span class=\"line\">1059</span><br><span class=\"line\">1060</span><br><span class=\"line\">1061</span><br><span class=\"line\">1062</span><br><span class=\"line\">1063</span><br><span class=\"line\">1064</span><br><span class=\"line\">1065</span><br><span class=\"line\">1066</span><br><span class=\"line\">1067</span><br><span class=\"line\">1068</span><br><span class=\"line\">1069</span><br><span class=\"line\">1070</span><br><span class=\"line\">1071</span><br><span class=\"line\">1072</span><br><span class=\"line\">1073</span><br><span class=\"line\">1074</span><br><span class=\"line\">1075</span><br><span class=\"line\">1076</span><br><span class=\"line\">1077</span><br><span class=\"line\">1078</span><br><span class=\"line\">1079</span><br><span class=\"line\">1080</span><br><span class=\"line\">1081</span><br><span class=\"line\">1082</span><br><span class=\"line\">1083</span><br><span class=\"line\">1084</span><br><span class=\"line\">1085</span><br><span class=\"line\">1086</span><br><span class=\"line\">1087</span><br><span class=\"line\">1088</span><br><span class=\"line\">1089</span><br><span class=\"line\">1090</span><br><span class=\"line\">1091</span><br><span class=\"line\">1092</span><br><span class=\"line\">1093</span><br><span class=\"line\">1094</span><br><span class=\"line\">1095</span><br><span class=\"line\">1096</span><br><span class=\"line\">1097</span><br><span class=\"line\">1098</span><br><span class=\"line\">1099</span><br><span class=\"line\">1100</span><br><span class=\"line\">1101</span><br><span class=\"line\">1102</span><br><span class=\"line\">1103</span><br><span class=\"line\">1104</span><br><span class=\"line\">1105</span><br><span class=\"line\">1106</span><br><span class=\"line\">1107</span><br><span class=\"line\">1108</span><br><span class=\"line\">1109</span><br><span class=\"line\">1110</span><br><span class=\"line\">1111</span><br><span class=\"line\">1112</span><br><span class=\"line\">1113</span><br><span class=\"line\">1114</span><br><span class=\"line\">1115</span><br><span class=\"line\">1116</span><br><span class=\"line\">1117</span><br><span class=\"line\">1118</span><br><span class=\"line\">1119</span><br><span class=\"line\">1120</span><br><span class=\"line\">1121</span><br><span class=\"line\">1122</span><br><span class=\"line\">1123</span><br><span class=\"line\">1124</span><br><span class=\"line\">1125</span><br><span class=\"line\">1126</span><br><span class=\"line\">1127</span><br><span class=\"line\">1128</span><br><span class=\"line\">1129</span><br><span class=\"line\">1130</span><br><span class=\"line\">1131</span><br><span class=\"line\">1132</span><br><span class=\"line\">1133</span><br><span class=\"line\">1134</span><br><span class=\"line\">1135</span><br><span class=\"line\">1136</span><br><span class=\"line\">1137</span><br><span class=\"line\">1138</span><br><span class=\"line\">1139</span><br><span class=\"line\">1140</span><br><span class=\"line\">1141</span><br><span class=\"line\">1142</span><br><span class=\"line\">1143</span><br><span class=\"line\">1144</span><br><span class=\"line\">1145</span><br><span class=\"line\">1146</span><br><span class=\"line\">1147</span><br><span class=\"line\">1148</span><br><span class=\"line\">1149</span><br><span class=\"line\">1150</span><br><span class=\"line\">1151</span><br><span class=\"line\">1152</span><br><span class=\"line\">1153</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;type&quot;: &quot;job&quot;,</span><br><span class=\"line\">  &quot;steps&quot;: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      &quot;stepType&quot;: &quot;mysqlbinlog&quot;,</span><br><span class=\"line\">      &quot;parameter&quot;: &#123;</span><br><span class=\"line\">        &quot;column&quot;: [</span><br><span class=\"line\">          &quot;_sequence_id_&quot;,</span><br><span class=\"line\">          &quot;_operation_type_&quot;,</span><br><span class=\"line\">          &quot;_execute_time_&quot;,</span><br><span class=\"line\">          &quot;_before_image_&quot;,</span><br><span class=\"line\">          &quot;_after_image_&quot;,</span><br><span class=\"line\">          &quot;id&quot;,</span><br><span class=\"line\">          &quot;chat_log_id&quot;,</span><br><span class=\"line\">          &quot;context_id&quot;,</span><br><span class=\"line\">          &quot;msg_id&quot;,</span><br><span class=\"line\">          &quot;msg_time&quot;,</span><br><span class=\"line\">          &quot;msg_type&quot;,</span><br><span class=\"line\">          &quot;main_account&quot;,</span><br><span class=\"line\">          &quot;main_account_hash&quot;,</span><br><span class=\"line\">          &quot;app_key&quot;,</span><br><span class=\"line\">          &quot;cid&quot;,</span><br><span class=\"line\">          &quot;from_id&quot;,</span><br><span class=\"line\">          &quot;to_id&quot;,</span><br><span class=\"line\">          &quot;content&quot;,</span><br><span class=\"line\">          &quot;content_type&quot;,</span><br><span class=\"line\">          &quot;person_type&quot;,</span><br><span class=\"line\">          &quot;is_correct&quot;,</span><br><span class=\"line\">          &quot;need_human&quot;,</span><br><span class=\"line\">          &quot;error_reason&quot;,</span><br><span class=\"line\">          &quot;remark&quot;,</span><br><span class=\"line\">          &quot;updated_at&quot;,</span><br><span class=\"line\">          &quot;created_at&quot;,</span><br><span class=\"line\">          &quot;question&quot;,</span><br><span class=\"line\">          &quot;ask_method_name&quot;,</span><br><span class=\"line\">          &quot;is_matched&quot;,</span><br><span class=\"line\">          &quot;ai_label_id&quot;,</span><br><span class=\"line\">          &quot;is_default&quot;,</span><br><span class=\"line\">          &quot;inner_msg_type&quot;,</span><br><span class=\"line\">          &quot;order_status&quot;,</span><br><span class=\"line\">          &quot;has_answer_timeout&quot;,</span><br><span class=\"line\">          &quot;is_deleted&quot;,</span><br><span class=\"line\">          &quot;remind_type&quot;,</span><br><span class=\"line\">          &quot;need_human_reason&quot;,</span><br><span class=\"line\">          &quot;replay_scene&quot;,</span><br><span class=\"line\">          &quot;replay_scene_type&quot;,</span><br><span class=\"line\">          &quot;feature&quot;,</span><br><span class=\"line\">          &quot;chat_msg_type&quot;,</span><br><span class=\"line\">          &quot;mq_msg_id&quot;,</span><br><span class=\"line\">          &quot;mq_msg_text&quot;</span><br><span class=\"line\">        ],</span><br><span class=\"line\">        &quot;connection&quot;: [</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            &quot;datasource&quot;: &quot;binlog_chatlog_m0&quot;,</span><br><span class=\"line\">            &quot;table&quot;: [</span><br><span class=\"line\">              &quot;chat_log_detail_0&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_1&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_2&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_3&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_4&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_5&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_6&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_7&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_8&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_9&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_10&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_11&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_12&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_13&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_14&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_15&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_16&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_17&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_18&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_19&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_20&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_21&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_22&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_23&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_24&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_25&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_26&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_27&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_28&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_29&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_30&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_31&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_32&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_33&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_34&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_35&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_36&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_37&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_38&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_39&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_40&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_41&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_42&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_43&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_44&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_45&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_46&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_47&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_48&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_49&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_50&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_51&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_52&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_53&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_54&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_55&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_56&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_57&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_58&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_59&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_60&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_61&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_62&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_63&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_64&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_65&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_66&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_67&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_68&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_69&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_70&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_71&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_72&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_73&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_74&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_75&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_76&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_77&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_78&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_79&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_80&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_81&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_82&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_83&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_84&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_85&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_86&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_87&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_88&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_89&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_90&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_91&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_92&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_93&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_94&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_95&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_96&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_97&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_98&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_99&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_100&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_101&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_102&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_103&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_104&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_105&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_106&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_107&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_108&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_109&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_110&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_111&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_112&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_113&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_114&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_115&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_116&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_117&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_118&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_119&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_120&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_121&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_122&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_123&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_124&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_125&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_126&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_127&quot;</span><br><span class=\"line\">            ]</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            &quot;datasource&quot;: &quot;binlog_chatlog_m1&quot;,</span><br><span class=\"line\">            &quot;table&quot;: [</span><br><span class=\"line\">              &quot;chat_log_detail_128&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_129&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_130&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_131&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_132&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_133&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_134&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_135&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_136&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_137&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_138&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_139&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_140&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_141&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_142&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_143&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_144&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_145&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_146&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_147&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_148&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_149&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_150&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_151&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_152&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_153&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_154&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_155&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_156&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_157&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_158&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_159&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_160&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_161&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_162&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_163&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_164&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_165&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_166&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_167&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_168&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_169&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_170&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_171&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_172&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_173&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_174&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_175&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_176&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_177&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_178&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_179&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_180&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_181&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_182&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_183&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_184&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_185&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_186&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_187&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_188&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_189&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_190&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_191&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_192&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_193&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_194&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_195&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_196&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_197&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_198&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_199&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_200&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_201&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_202&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_203&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_204&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_205&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_206&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_207&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_208&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_209&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_210&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_211&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_212&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_213&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_214&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_215&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_216&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_217&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_218&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_219&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_220&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_221&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_222&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_223&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_224&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_225&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_226&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_227&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_228&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_229&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_230&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_231&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_232&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_233&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_234&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_235&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_236&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_237&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_238&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_239&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_240&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_241&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_242&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_243&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_244&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_245&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_246&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_247&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_248&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_249&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_250&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_251&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_252&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_253&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_254&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_255&quot;</span><br><span class=\"line\">            ]</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            &quot;datasource&quot;: &quot;binlog_chatlog_m2&quot;,</span><br><span class=\"line\">            &quot;table&quot;: [</span><br><span class=\"line\">              &quot;chat_log_detail_256&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_257&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_258&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_259&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_260&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_261&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_262&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_263&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_264&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_265&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_266&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_267&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_268&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_269&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_270&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_271&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_272&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_273&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_274&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_275&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_276&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_277&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_278&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_279&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_280&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_281&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_282&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_283&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_284&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_285&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_286&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_287&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_288&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_289&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_290&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_291&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_292&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_293&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_294&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_295&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_296&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_297&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_298&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_299&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_300&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_301&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_302&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_303&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_304&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_305&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_306&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_307&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_308&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_309&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_310&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_311&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_312&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_313&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_314&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_315&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_316&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_317&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_318&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_319&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_320&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_321&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_322&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_323&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_324&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_325&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_326&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_327&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_328&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_329&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_330&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_331&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_332&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_333&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_334&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_335&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_336&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_337&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_338&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_339&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_340&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_341&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_342&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_343&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_344&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_345&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_346&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_347&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_348&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_349&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_350&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_351&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_352&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_353&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_354&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_355&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_356&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_357&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_358&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_359&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_360&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_361&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_362&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_363&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_364&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_365&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_366&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_367&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_368&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_369&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_370&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_371&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_372&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_373&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_374&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_375&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_376&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_377&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_378&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_379&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_380&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_381&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_382&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_383&quot;</span><br><span class=\"line\">            ]</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            &quot;datasource&quot;: &quot;binlog_chatlog_m3&quot;,</span><br><span class=\"line\">            &quot;table&quot;: [</span><br><span class=\"line\">              &quot;chat_log_detail_384&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_385&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_386&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_387&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_388&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_389&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_390&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_391&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_392&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_393&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_394&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_395&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_396&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_397&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_398&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_399&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_400&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_401&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_402&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_403&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_404&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_405&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_406&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_407&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_408&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_409&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_410&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_411&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_412&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_413&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_414&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_415&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_416&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_417&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_418&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_419&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_420&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_421&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_422&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_423&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_424&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_425&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_426&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_427&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_428&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_429&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_430&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_431&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_432&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_433&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_434&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_435&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_436&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_437&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_438&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_439&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_440&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_441&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_442&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_443&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_444&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_445&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_446&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_447&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_448&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_449&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_450&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_451&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_452&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_453&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_454&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_455&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_456&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_457&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_458&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_459&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_460&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_461&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_462&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_463&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_464&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_465&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_466&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_467&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_468&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_469&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_470&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_471&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_472&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_473&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_474&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_475&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_476&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_477&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_478&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_479&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_480&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_481&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_482&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_483&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_484&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_485&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_486&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_487&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_488&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_489&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_490&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_491&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_492&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_493&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_494&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_495&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_496&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_497&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_498&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_499&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_500&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_501&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_502&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_503&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_504&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_505&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_506&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_507&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_508&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_509&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_510&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_511&quot;</span><br><span class=\"line\">            ]</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            &quot;datasource&quot;: &quot;binlog_chatlog_m4&quot;,</span><br><span class=\"line\">            &quot;table&quot;: [</span><br><span class=\"line\">              &quot;chat_log_detail_512&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_513&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_514&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_515&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_516&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_517&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_518&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_519&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_520&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_521&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_522&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_523&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_524&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_525&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_526&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_527&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_528&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_529&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_530&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_531&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_532&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_533&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_534&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_535&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_536&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_537&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_538&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_539&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_540&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_541&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_542&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_543&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_544&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_545&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_546&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_547&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_548&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_549&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_550&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_551&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_552&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_553&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_554&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_555&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_556&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_557&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_558&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_559&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_560&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_561&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_562&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_563&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_564&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_565&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_566&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_567&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_568&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_569&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_570&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_571&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_572&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_573&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_574&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_575&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_576&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_577&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_578&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_579&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_580&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_581&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_582&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_583&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_584&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_585&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_586&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_587&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_588&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_589&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_590&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_591&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_592&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_593&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_594&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_595&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_596&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_597&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_598&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_599&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_600&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_601&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_602&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_603&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_604&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_605&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_606&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_607&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_608&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_609&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_610&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_611&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_612&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_613&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_614&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_615&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_616&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_617&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_618&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_619&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_620&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_621&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_622&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_623&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_624&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_625&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_626&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_627&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_628&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_629&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_630&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_631&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_632&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_633&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_634&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_635&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_636&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_637&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_638&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_639&quot;</span><br><span class=\"line\">            ]</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            &quot;datasource&quot;: &quot;binlog_chatlog_m5&quot;,</span><br><span class=\"line\">            &quot;table&quot;: [</span><br><span class=\"line\">              &quot;chat_log_detail_640&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_641&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_642&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_643&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_644&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_645&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_646&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_647&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_648&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_649&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_650&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_651&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_652&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_653&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_654&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_655&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_656&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_657&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_658&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_659&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_660&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_661&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_662&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_663&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_664&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_665&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_666&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_667&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_668&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_669&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_670&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_671&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_672&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_673&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_674&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_675&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_676&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_677&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_678&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_679&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_680&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_681&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_682&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_683&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_684&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_685&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_686&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_687&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_688&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_689&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_690&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_691&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_692&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_693&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_694&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_695&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_696&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_697&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_698&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_699&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_700&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_701&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_702&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_703&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_704&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_705&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_706&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_707&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_708&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_709&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_710&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_711&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_712&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_713&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_714&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_715&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_716&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_717&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_718&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_719&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_720&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_721&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_722&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_723&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_724&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_725&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_726&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_727&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_728&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_729&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_730&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_731&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_732&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_733&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_734&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_735&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_736&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_737&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_738&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_739&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_740&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_741&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_742&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_743&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_744&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_745&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_746&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_747&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_748&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_749&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_750&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_751&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_752&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_753&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_754&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_755&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_756&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_757&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_758&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_759&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_760&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_761&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_762&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_763&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_764&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_765&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_766&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_767&quot;</span><br><span class=\"line\">            ]</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            &quot;datasource&quot;: &quot;binlog_chatlog_m6&quot;,</span><br><span class=\"line\">            &quot;table&quot;: [</span><br><span class=\"line\">              &quot;chat_log_detail_768&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_769&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_770&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_771&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_772&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_773&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_774&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_775&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_776&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_777&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_778&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_779&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_780&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_781&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_782&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_783&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_784&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_785&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_786&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_787&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_788&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_789&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_790&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_791&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_792&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_793&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_794&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_795&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_796&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_797&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_798&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_799&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_800&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_801&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_802&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_803&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_804&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_805&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_806&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_807&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_808&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_809&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_810&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_811&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_812&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_813&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_814&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_815&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_816&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_817&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_818&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_819&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_820&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_821&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_822&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_823&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_824&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_825&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_826&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_827&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_828&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_829&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_830&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_831&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_832&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_833&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_834&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_835&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_836&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_837&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_838&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_839&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_840&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_841&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_842&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_843&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_844&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_845&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_846&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_847&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_848&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_849&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_850&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_851&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_852&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_853&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_854&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_855&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_856&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_857&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_858&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_859&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_860&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_861&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_862&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_863&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_864&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_865&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_866&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_867&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_868&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_869&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_870&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_871&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_872&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_873&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_874&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_875&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_876&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_877&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_878&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_879&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_880&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_881&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_882&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_883&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_884&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_885&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_886&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_887&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_888&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_889&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_890&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_891&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_892&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_893&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_894&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_895&quot;</span><br><span class=\"line\">            ]</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            &quot;datasource&quot;: &quot;binlog_chatlog_m7&quot;,</span><br><span class=\"line\">            &quot;table&quot;: [</span><br><span class=\"line\">              &quot;chat_log_detail_896&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_897&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_898&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_899&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_900&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_901&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_902&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_903&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_904&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_905&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_906&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_907&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_908&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_909&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_910&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_911&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_912&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_913&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_914&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_915&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_916&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_917&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_918&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_919&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_920&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_921&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_922&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_923&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_924&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_925&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_926&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_927&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_928&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_929&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_930&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_931&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_932&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_933&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_934&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_935&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_936&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_937&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_938&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_939&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_940&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_941&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_942&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_943&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_944&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_945&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_946&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_947&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_948&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_949&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_950&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_951&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_952&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_953&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_954&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_955&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_956&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_957&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_958&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_959&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_960&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_961&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_962&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_963&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_964&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_965&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_966&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_967&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_968&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_969&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_970&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_971&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_972&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_973&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_974&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_975&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_976&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_977&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_978&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_979&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_980&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_981&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_982&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_983&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_984&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_985&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_986&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_987&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_988&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_989&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_990&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_991&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_992&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_993&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_994&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_995&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_996&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_997&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_998&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_999&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_1000&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_1001&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_1002&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_1003&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_1004&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_1005&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_1006&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_1007&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_1008&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_1009&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_1010&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_1011&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_1012&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_1013&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_1014&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_1015&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_1016&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_1017&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_1018&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_1019&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_1020&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_1021&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_1022&quot;,</span><br><span class=\"line\">              &quot;chat_log_detail_1023&quot;</span><br><span class=\"line\">            ]</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &quot;name&quot;: &quot;Reader&quot;,</span><br><span class=\"line\">      &quot;category&quot;: &quot;reader&quot;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      &quot;stepType&quot;: &quot;kafka&quot;,</span><br><span class=\"line\">      &quot;parameter&quot;: &#123;</span><br><span class=\"line\">        &quot;server&quot;: &quot;172.16.87.246:9092,172.16.87.247:9092,172.16.87.248:9092&quot;,</span><br><span class=\"line\">        &quot;keyColumn&quot;: &quot;id&quot;,</span><br><span class=\"line\">        &quot;valueType&quot;: &quot;ByteArray&quot;,</span><br><span class=\"line\">        &quot;topic&quot;: &quot;weier-chat-detail-info-qa&quot;,</span><br><span class=\"line\">        &quot;batchSize&quot;: 1024,</span><br><span class=\"line\">        &quot;fieldDelimiter&quot;: &quot;膼&quot;,</span><br><span class=\"line\">        &quot;keyType&quot;: &quot;ByteArray&quot;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &quot;name&quot;: &quot;Writer&quot;,</span><br><span class=\"line\">      &quot;category&quot;: &quot;writer&quot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  &quot;version&quot;: &quot;2.0&quot;,</span><br><span class=\"line\">  &quot;order&quot;: &#123;</span><br><span class=\"line\">    &quot;hops&quot;: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        &quot;from&quot;: &quot;Reader&quot;,</span><br><span class=\"line\">        &quot;to&quot;: &quot;Writer&quot;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &quot;setting&quot;: &#123;</span><br><span class=\"line\">    &quot;errorLimit&quot;: &#123;&#125;,</span><br><span class=\"line\">    &quot;speed&quot;: &#123;</span><br><span class=\"line\">      &quot;concurrent&quot;: 1,</span><br><span class=\"line\">      &quot;throttle&quot;: false</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"hive知识整理","date":"2020-12-29T13:16:31.000Z","_content":"\n# Hive\n\n<!-- toc -->\n\n[TOC]\n\n\n\n## 概述\n\nHive是基于Hadoop的一个数据仓库工具，可以将结构化的数据文件映射为一张数据库表，并提供类SQL查询功能。\n\n本质是将SQL转换为MapReduce程序\n\n主要用途：用来做离线数据分析，比直接用MapReduce开发效率更高\n\n<!--more-->\n\n![img](hive知识整理/timg-1568381886490.jpg) \n\n数据仓库和数据库的区别\n\n* 数据库是面向事务的设计，数据仓库是面向主题设计的。\n\n* 数据库一般存储业务数据，数据仓库存储的一般是历史数据。\n\n* 数据库设计是尽量避免冗余，一般针对某一业务应用进行设计，比如一张简单的User表，记录用户名、密码等简单数据即可，符合业务应用，但是不符合分析。数据仓库在设计是有意引入冗余，依照分析需求，分析维度、分析指标进行设计。\n\n* 数据库是为捕获数据而设计，数据仓库是为分析数据而设计。\n\n数据仓库分层架构\n\n==源数据层（ODS）==：此层数据无任何更改，直接沿用外围系统数据结构和数据，不对外开放；为临时存储层，是接口数据的临时存储区域，为后一步的数据处理做准备。\n\n==数据仓库层（DW）==：也称为细节层，DW层的数据应该是一致的、准确的、干净的数据，即对源系统数据进行了清洗（去除了杂质）后的数据。\n\n==数据应用层（DA或APP）==：前端应用直接读取的数据源；根据报表、专题分析需求而计算生成的数据。\n\n \n\n~~~bash\n先启动metastore服务再启动hiveserver2服务\n/export/servers/hive/bin/beeline\nbeeline> ! connect jdbc:hive2://hdp3:10000\n\n~~~\n\n\n\nhive SQL语句中 select from where group by having order by 的==执行顺序==？\n\n执行顺序：\n\nfrom … where … select … group by … having … order by …\n\n其实总结hive的执行顺序也是总结mapreduce的执行顺序：\n\nMR程序的执行顺序：\n\nmap阶段：\n\n 1.执行from加载，进行表的查找与加载\n\n2.执行where过滤，进行条件过滤与筛选\n\n3.执行select查询：进行输出项的筛选\n\n4.执行group by分组：描述了分组后需要计算的函数\n\n5.map端文件合并：map端本地溢出写文件的合并操作，每个map最终形成一个临时文件。 然后按列映射到对应的reduceReduce阶段：\n\nReduce阶段：\n\n1.group by：对map端发送过来的数据进行分组并进行计算。\n\n2.select：最后过滤列用于输出结果\n\n3.limit排序后进行结果输出到HDFS文件\n\n所以通过上面的例子我们可以看到，在进行select之后我们会形成一张表，在这张表当中做分组排序这些操作。\n\n## 1.DDL操作\n\n设置hive程序本地运行模式：\n\n~~~bash\nset hive.exec.mode.local.auto=true;\n~~~\n\n### 1.1  创建表\n\n```sql\ncreate [external] table [if not exists] tb_name (...) [like] existing_table;\n[row format delimited fields terminated by char\n\t\t\t\t\tcollection items terminated by char\n\t\t\t\t\tmap keys terminated by char\n\t\t\t\t\tlines terminated by char\n\t\t\t\t\t...]\n[partitioned by ]\n[stored as file_format]\n[CLUSTERED BY (col_name, col_name, ...) [SORTED BY (col_name [ASC|DESC], ...)] INTO num_buckets BUCKETS]\n[LOCATION hdfs_path]\n\n\n```\n\n1.create table 创建一个指定名字的表，如果表以存在可以用[if not exists]跳过异常\n\n2.[external] 关键字可以让给用户创建一个外部表。\n\n创建内部表时会将数据移动到数据仓库指向的路径，删除表时元数据和数据都被删除。\n\n外部表仅记录数据所在的路径，删除时只删除元数据，不删除数据。\n\n3.[like] 允许用户复制现有的表结构，但是不复制数据\n\n4.[row format delimited] 指定表列与列的分隔符。hive建表的时候默认分隔符是‘\\001’,\n\n5.[partitioned by] 分区命令。每个表可以有多个分区，每个分区以文件夹的形式单独存在表文件夹目录下。分区是以字段的形式在表结构中存在。\n\n6.[stored as sequencedile|textfile|refile]   如果文件数据是纯文本，可以使用textfile,如果数据需要压缩，使用sequencedile。\n\ntextfile是默认的文件格式，使用delimited子句来读取分隔文件\n\n7.[clustered by (col_name,col_name,....)]   分桶\n\n8.[LOCATION hdfs_path]  指定这张表所在的hdfs上的目录，如果不指定，默认在数据库的目录下面\n\n```sql\ncreate table tb_name as select statement;将sql语句的结果进行保存\ncreate table tb_new like tb_old;创建一张结构与tb_old一样的表\ndrop table [if exists] tb_name;删除表\ntruncate table tb_name;清空表\nshow functions;查看所有的函数\nshow partitions tb_name;查看所有分区\ndesc formatted tb_name；查看表信息\n\n```\n\n#### 1.1.1 管理表\n\n最普通的表，默认表的类型就是管理表\n\n```sql\ncreate table tb_name();\n\n```\n\n#### 1.1.2 外部表\n\n```sql\ncreate external table tb_name();\n\n```\n\n特点：在删除时，不会删除表数据\n\n应用场景：1-如果需要多张表共用同一份数据，都建立外部表，使用完以后，删除表互不影响。2-如果数据需要进行额外的使用：存档等等\n\n#### 1.1.3 分区表\n\n```sql\ncreate external table tb_part(\nid string\n name string\n)\npartitioned by (day string)\nrow format delimited fields terminated by '\\t';\n--创建分区表，指定分区字段day\nload data local inpath '/export/datas/20180718' into table tb_name partition(day='18');\n--加载文件数据，创建分区字段day=18\nload data local inpath '/export/datas/20180719' into table tb_name partition(day='19');\n--加载文件数据，创建分区字段day=19\nselect * from tb_part where day = 19;\n--过滤条件需是分区的字段，如果不是分区字段就会从整个分区目录中查找\n\n```\n\n- 手动分区：加载数据时，手动指定文件的分区\n\n  分区字段为查询的语句的最后一个字段 \n\n  ```sql\n  insert overwrite table tb_emp_part partition (deptno)\n    select empno\n    ename,\n    job,\n    manager,\n    inday,\n    salary,\n    jiangjin,\n    deptno\n  from tb_emp_normal;\n  \n  ```\n\n  - 应用场景：将普通表的数据转换成一个分区表\n    \t\t   原始表【tb1】中的数据没有做分区\n      \t\t   希望将原始表中的数据按照分区存放到新的分区表[tb2]\n\n  - 自动分区：默认按照原始表的最后一列进行分区\n\n  ```sql\n  set hive.exec.dynamic.partition.mode=nonstrict;\n  配置自动分区\n  show partitions tb_name;\n  查看当前所有分区\n  \n  ```\n\n  数据加载问题：\n  1-如果手动将数据文件放入一张普通表的目录下？表能不能读到数据？\n\n  ​\t可以，元数据查询时直接将表的目录作为查询目录\n  2-如果手动将数据文件放入一张分区表的分区目录下？表能不能读到数据？表的分区能不能读到数据？\n  ​\t可以的，因为元数据查询时直接将分区的目录作为查询目录\n  3-如果手动在HDFS上创建一个分区的目录，将数据放入分区目录下，表能不能读到数据？\n  ​\t不能，因为Hive中没有该分区的元数据\n\n  方案一：修复表的元数据（资源占用多）\n\n  ```sql\n  msck repair table tb_emp;\n  \n  ```\n\n  方案二：手动向表中添加一个分区\n\n  ```sql\n  alter table tb_name add [if exists] partition (dt='20') location '/user/hadoop/dt=20';\n  --要求建立的目录必须与分区自动创建的目录格式一样\n  \n  ```\n\n  删除分区\n\n  ~~~bash\n  alter table tb_name drop [if exists] partition (dt='20');\n  ~~~\n\n  \n\n  #### 1.1.4  分桶表\n\n  ```sql\n  create table tb_emp_bucket(\n  empno int ,\n  ename string,\n  job string,\n  manager int,\n  inday string,\n  salary double,\n  jiangjin double,\n  deptno int\n  ) \n  clustered by (deptno) into 3 BUCKETS\n  row format delimited fields terminated by '\\t';\n  \n  ```\n\n  应用场景：大表join大表时\n\n  ```sql\n  --开启分桶\n  set hive.enforce.bucketing=true;\n  \n  insert overwrite table tb_emp_bucket\n  select * from tb_emp_normal cluster by (deptno);\n  \n  ```\n\n  连个桶表桶的个数必须相同，或者b表桶是a表的倍数\n\n  ### 1.2 修改表\n\n  增加分区：\n\n  ```sql\n  alter table tb_name add partition (dt='20170101') location '/user/hadoop/table_name/dt=20170101';\n  \n  ```\n\n  删除分区\n\n  ```sql\n  alter table tb_name drop if exists partition (dt='20170101')\n  \n  ```\n\n  修改分区\n\n  ```sql\n  alter table tb_name partition (dt='20170101') rename to partition(dt='20170202')\n  \n  ```\n\n  添加列\n\n  ```sql\n  --添加列\n  alter table tb_name add|replace columns (col_name string);\n  --修改表名\n  alter table stu_par rename to stu_par1\n  --增加列\n  alter table stu1 add columns(score string);\n  --修改列类型\n  alter table stu1 change column score score double;\n  --\n  ```\n\n  ## 2.DML操作\n\n  ### 2.1 load \n\n  在将数据加载到表中时，Hive不会进行任何转换。加载操作是将数据文件移动到与Hive表对应的位置的纯复制/移动操作。\n\n  ```sql\n  load data [local] inpath 'filepath' [overwrite] into table tb_name [partition(partcol1=val1,partcol2=val2...)]\n  \n  ```\n\n  ### 2.2 insert\n\n  Hive中insert主要是结合select查询语句使用，将查询结果插入到表中\n\n  ```sql\n  --查询结果的列数要和插入数据表格的列数一致\n  insert overwrite table tb_name select statement\n  --将查询语句结果保存至HDFS中\n  insert overwrite directory \"/movie/answer10/\" select statement;\n  \n  ```\n\n  ### 2.3 join\n\n  inner join: 两张表都有结果才有\n\n  left join: 左表有，结果就有\n\n  right join: 右表有，结果就有\n\n  full join：两边任意一边有，结果就有\n\n  cross join:笛卡尔积      --一般用于结果的漏斗计算\n\n  ### 2.4 排序\n\n  ```sql\n  set hive.exec.reducers.bytes.per.reducer=<number>\n  \t每个reduce最多处理多少数据量\n  set hive.exec.reducers.max=<number>\t\n  \t最多启动多少个reduce\n  set mapreduce.job.reduces=<number>\n  \t设置reduce的个数\n  \n  ```\n\n  #### order by\n\n  全局排序，对整体进行排序，只有一个reduce的情况下\n\n  在启用多个reduce的情况下如果使用order by 结果依旧全局有序，但只会启用一个reduce\n\n  ```sql\n  select  empno,ename,salary,deptno from tb_emp_normal order by empno;\n  \n  ```\n\n  #### sort by\n\n  局部排序，多个reduce的 情况下，每个reduce内部有序（分区内有序）\n\n  ```sql\n  set mapreduce.job.reduces=3;\n  设置reduce个数\n  insert overwrite local directory '/export/datas/sort' \n  row format delimited fields terminated by '\\t' \n  select  empno,ename,salary,deptno from tb_emp_normal \n  sort by empno;\n  \n  ```\n\n  #### distribute by\n\n  指定多个reduce情况下，以哪一列作为分区字段。将相同的数据放入同一个结果文件，类似MR中Partition，进行分区，结合sort by使用  \n\n  ```sql\n  insert overwrite local directory '/export/datas/dis' \n  row format delimited fields terminated by '\\t' \n  select  empno,ename,salary,deptno from tb_emp_normal \n  distribute by deptno \n  sort by empno;\n  \n  ```\n\n  #### cluster by\n\n  如果sort by与distribute by使用同一个字段可以用此代替，但是排序只能是升序排序，不能指定排序规则为ASC或者DESC。\n\n  \n\n## 3.hive参数配置\n\n### 3.1 Hive shell命令行\n\n针对bin/hive，除了可以当第一代客户端之外。还可以在hive中启动其他用途。\n\n1、 -i  初始化HQL文件。\n\n2、 -e从命令行执行指定的HQL \n\n3、 -f 执行HQL脚本 \n\n4、 -v 输出执行的HQL语句到控制台 \n\n5、 -p <port> connect to Hive Server on port number \n\n6、 -hiveconf x=y Use this to set hive/hadoop configuration variables.\n\n例如：\n\n~~~bash\n$HIVE_HOME/bin/hive -e 'select * from table a'\t\n\n$HIVE_HOME/bin/hive -f /home/my/hive-script.sql\n\n$HIVE_HOME/bin/hive -f hdfs://<namenode>:<port>/hive-script.sql\n\n$HIVE_HOME/bin/hive -i /home/my/hive-init.sql\n\n~~~\n\n\n\n### 3.2 Hive 参数配置方式\n\n*Hive参数大全：*\n\n[*https://cwiki.apache.org/confluence/display/Hive/Configuration+Properties*\n\n 开发Hive应用时，不可避免地需要设定Hive的参数。设定Hive的参数可以调优HQL代码的执行效率，或帮助定位问题。然而实践中经常遇到的一个问题是，为什么设定的参数没有起作用？这通常是错误的设定方式导致的。\n\n对于一般参数，有以下三种设定方式：\n\n配置文件   （全局有效）\n\n命令行参数   （对hive启动实例有效）\n\n参数声明   （对hive的连接session有效）\n\n配置文件 \n\n用户自定义配置文件：$HIVE_CONF_DIR/hive-site.xml\n\n默认配置文件：$HIVE_CONF_DIR/hive-default.xml \n\n用户自定义配置会覆盖默认配置。\n\n另外，Hive也会读入Hadoop的配置，因为Hive是作为Hadoop的客户端启动的，Hive的配置会覆盖Hadoop的配置。\n\n配置文件的设定对本机启动的所有Hive进程都有效。\n\n 命令行参数\n\n启动Hive（客户端或Server方式）时，可以在命令行添加-hiveconf来设定参数\t例如：bin/hive -hiveconf hive.root.logger=INFO,console\n\n设定对本次启动的Session（对于Server方式启动，则是所有请求的Sessions）有效。\n\n 参数声明\n\n可以在HQL中使用SET关键字设定参数，这一设定的作用域也是session级的。\n\n比如：\n\nset hive.exec.reducers.bytes.per.reducer=<number>  每个reduce task的平均负载数据量\n\nset hive.exec.reducers.max=<number>   设置reduce task数量的上限\n\nset mapreduce.job.reduces=<number>    指定固定的reduce task数量\n\n但是，这个参数在必要时<业务逻辑决定只能用一个reduce task> hive会忽略\n\n上述三种设定方式的优先级依次递增。即参数声明覆盖命令行参数，命令行参数覆盖配置文件设定。注意某些系统级的参数，例如log4j相关的设定，必须用前两种方式设定，因为那些参数的读取在Session建立以前已经完成了。\n\n## 4.hive中复杂数据类型的使用\n\n### 4.1 数组类型\n\n~~~\n--数据如下：vim /export/datas/array.txt\nzhangsan\tbeijing,shanghai,tianjin,hangzhou\nwangwu\tshanghai,chengdu,wuhan,haerbin\n~~~\n\n~~~sql\n--创建表\ncreate table complex_array(\nname string,\nwork_locations array<string>\n)\nrow format delimited fields terminated by '\\t' --指定列的分隔符\ncollection items terminated by ',';--指定数组中元素的分隔符\n\n--加载数据\nload data local inpath '/export/datas/array.txt' into table complex_array;\n\n--查询\nselect * from complex_array;\nselect size(work_locations) from complex_array;\nselect work_locations[0],work_locations[1] from complex_array;\n~~~\n\n### 4.2 map类型\n\n~~~\n--数据如下：vim /export/datas/map.txt\n1,zhangsan,唱歌:非常喜欢-跳舞:喜欢-游泳:一般般\n2,lisi,打游戏:非常喜欢-篮球:不喜欢\n~~~\n\n~~~sql\n--创建表\ncreate table complex_map(\nid int,\nname string,\nhobby map<string,string>)\nrow format delimited fields terminated by ',' --指定列的分隔符\ncollection items terminated by '-' map keys terminated by ':' ;--指定keyvalue的分割\n\n--加载数据\nload data local inpath '/export/datas/map.txt' into table complex_map;\n\n--查询\nselect * from complex_map;\nselect size(hobby) from complex_map;\nselect hobby[\"唱歌\"] from complex_map;\n~~~\n\n### 4.3 正则类型\n\n```sql\n--数据如下:vim /export/datas/regex.txt\ntom 男 23 上海\n```\n\n```sql\n--使用正则加载数据\nCREATE TABLE user_regex(\nname string,\nsex string,\nage int,\ncity string\n)\nROW FORMAT SERDE 'org.apache.hadoop.hive.serde2.RegexSerDe'\nWITH SERDEPROPERTIES (\n  \"input.regex\" = \"([^ ]+) ([^ ]+) ([0-9]+) (.+)\"\n)\nSTORED AS TEXTFILE;\n\nload data local inpath '/root/regex.txt' into table user_regex;\n```\n\n### 4.4 json类型\n\n~~~sql\n--通过专门的解析类直接加载一个json格式的数据到Hive中\n--数据如下:vim /export/datas/hivedata.json\n{\"id\": 1701439105,\"ids\": [2154137571,3889177061],\"total_number\": 493}\n{\"id\": 1701439106,\"ids\": [2154137571,3889177061],\"total_number\": 494}\n--添加jar包\nadd jar /export/datas/json-serde-1.3.7-jar-with-dependencies.jar;\n~~~\n\n~~~sql\n--创建表：\ncreate table tb_json_test2 (\nid string,\nids array<string>,\ntotal_number int)\nROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'\nSTORED AS TEXTFILE;\n\n\n--加载数据\nload data local inpath '/export/datas/hivedata.json' into table tb_json_test2;\n~~~\n\n### 4.5 python类型\n\n```sql\n--创建Python脚本实现将原始表的时间转为对应的星期几\nvim /export/datas/weekday_mapper.py\n\nimport sys\nimport datetime\n\nfor line in sys.stdin:\n  line = line.strip()\n  userid, movieid, rating, unixtime = line.split('\\t')\n  weekday = datetime.datetime.fromtimestamp(float(unixtime)).isoweekday()\n  print '\\t'.join([userid, movieid, rating, str(weekday)])\n \n```\n\n```sql\n--加载python脚本并将数据写入新表\nadd FILE /export/datas/weekday_mapper.py;\nINSERT OVERWRITE TABLE u_data_new\nSELECT\n  TRANSFORM (userid, movieid, rating, unixtime)\n  USING 'python weekday_mapper.py'\n  AS (userid, movieid, rating, weekday)\nFROM u_data;\n```\n\n## 5.Hive函数\n\n### 5.1自定义函数\n\n#### 5.1.1 UDF\n\nUDF（User-Defined-Function）普通函数 一进一出\n\n1、自定义一个类，继承UDF,实现一个或重载多个evaluate方法，打包上传jar包到linux环境\n\n```xml\n       <!-- 指定该项目可以从哪些地方下载依赖包 -->\n\t\t\t<repository>\n\t\t\t\t<id>aliyun</id>\n\t\t\t\t<url>http://maven.aliyun.com/nexus/content/groups/public/</url>\n\t\t\t</repository>\n\t\t\t<repository>\n\t\t\t\t<id>cloudera</id>\n\t\t\t\t<url>https://repository.cloudera.com/artifactory/cloudera-repos/</url>\n\t\t\t</repository>\n\t\t\t<repository>\n\t\t\t\t<id>jboss</id>\n\t\t\t\t<url>http://repository.jboss.org/nexus/content/groups/public</url>\n\t\t\t</repository>\n\t\t</repositories>\n\t\t<!--指定字符编码-->\n\t\t<properties>\n\t\t\t<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n\t\t</properties>\n\t\t<!--指定依赖-->\n\t\t<dependencies>\n\t\t\t<dependency>\n\t\t\t\t<groupId>org.apache.hadoop</groupId>\n\t\t\t\t<artifactId>hadoop-common</artifactId>\n\t\t\t\t<version>2.6.0-cdh5.14.0</version>\n\t\t\t</dependency>\n\t\t\t<dependency>\n\t\t\t\t<groupId>org.apache.hadoop</groupId>\n\t\t\t\t<artifactId>hadoop-hdfs</artifactId>\n\t\t\t\t<version>2.6.0-cdh5.14.0</version>\n\t\t\t</dependency>\n\n\t\t\t<dependency>\n\t\t\t\t<groupId>org.apache.hadoop</groupId>\n\t\t\t\t<artifactId>hadoop-client</artifactId>\n\t\t\t\t<version>2.6.0-cdh5.14.0</version>\n\t\t\t</dependency>\n\t\t\t<dependency>\n\t\t\t\t<groupId>org.apache.hive</groupId>\n\t\t\t\t<artifactId>hive-exec</artifactId>\n\t\t\t\t<version>1.1.0-cdh5.14.0</version>\n\t\t\t</dependency>\n\t\t\t<dependency>\n\t\t\t\t<groupId>org.apache.hive</groupId>\n\t\t\t\t<artifactId>hive-common</artifactId>\n\t\t\t\t<version>1.1.0-cdh5.14.0</version>\n\t\t\t</dependency>\n\t\t\t<dependency>\n\t\t\t\t<groupId>org.apache.hive</groupId>\n\t\t\t\t<artifactId>hive-cli</artifactId>\n\t\t\t\t<version>1.1.0-cdh5.14.0</version>\n\t\t\t</dependency>\n\t\t\t<dependency>\n\t\t\t\t<groupId>org.apache.hive</groupId>\n\t\t\t\t<artifactId>hive-jdbc</artifactId>\n\t\t\t\t<version>1.1.0-cdh5.14.0</version>\n\t\t\t</dependency>\n\t\t</dependencies>\n```\n\n```java\nimport org.apache.hadoop.hive.ql.exec.UDF;\nimport org.apache.hadoop.io.Text;\npublic class UserUDF extends UDF{\n\tpublic Text evaluate(Text s){\n        if(s==null){\n            return null;\n        }\n        return new Text(s.toString().toLowerCase());\n    }\n}\n```\n\n\n\n2、将jar包添加到hive环境中\n\n```\nadd jar /export/datas/udf.jar;\n\n```\n\n3、在hive中创建一个函数\n\n```\ncreate temporary function fc_name as 'com.neusoft.data.UserUDF';\n\n```\n\n4、使用函数\n\n```\nselect fc_name(age),name from tb_name;\n\n```\n\n#### 5.1.2自定义udf,udtf,udaf开发\n\nUDF：\n1-开发udf程序：继承UDF类，实现一个或者多个evaluate方法\n2-打成jar包\n3-上传jar包到集群中，并添加到hive的环境变量中，在hive中执行\n\tadd jar /export/datas/udf.jar;\n4-创建临时函数：\n\tcreate temporary function  transDate as 'cn.itcast.bigdata.hive.TransDate';\n5-测试函数：\n\tselect transDate(\"18/Aug/2019:12:30:05\");\n6-删除临时函数\n\tDROP TEMPORARY FUNCTION transDate;\n\nUDTF\n1-开发udtf程序：继承UDTF类，重写process方法\n2-打成jar包\n3-上传jar包到集群中，并添加到hive的环境变量中，在hive中执行\n\tadd jar /export/datas/udtf.jar;\n4-创建临时函数：\n\tcreate temporary function  transMap as 'cn.itcast.bigdata.hive.UserUDTF';\n5-测试函数：\n\t第一种用法：直接调用\n\t\tselect transMap(\"uuid=root&url=www.taobao.com\") as (userCol1,userCol2);\n\t第二种用法：和侧视图一起使用\n\t\tselect deptno,deptname,a.* from tb_dept lateral view transMap(\"uuid=root&url=www.taobao.com\") a as col1,col2;\n\t注意：\n\t\t1-udtf只能直接select中使用\n\t\t2-不可以添加其他字段使用\n\t\t3-不可以嵌套调用\n\t\t4-不可以和group by/cluster by/distribute by/sort by一起使用\n\n\n\n\n\nUDAF\n1-开发udaf程序：继承UDAF类，重写iterate方法\n2-打成jar包\n3-上传jar包到集群中，并添加到hive的环境变量中，在hive中执行\n\tadd jar /export/datas/udaf.jar;\n4-创建临时函数：\n\tcreate temporary function  userMax as 'cn.itcast.bigdata.hive.UserUDAF';\n5-测试函数：\n\tselect userMax(deptno) from tb_dept;\n\n### 5.2UDAF\n\nUDAF（User-Defined Aggregation Function）聚合函数，多进一出\n\n#### 窗口函数：SUM、AVG、COUNT、MAX、MIN\n\n功能：用于实现数据分区后的聚合\n\t-》语法：fun_name(col1) over (partition by col2 order by col3)\n\t\t\t\t实现功能\tover  按照什么分区，分区内部按照什么排序\n\t-》示例：实现分区内的累加，其他的原理类似\n\n~~~\ncookie1,2018-04-10,1\ncookie1,2018-04-11,5\ncookie1,2018-04-12,7\ncookie1,2018-04-13,3\ncookie2,2018-04-13,3\ncookie2,2018-04-14,2\ncookie2,2018-04-15,4\ncookie1,2018-04-14,2\ncookie1,2018-04-15,4\ncookie1,2018-04-16,4\ncookie2,2018-04-10,1\ncookie2,2018-04-11,5\ncookie2,2018-04-12,7\n~~~\n\n~~~sql\n--创建表\ncreate database db_function;\nuse db_function;\ncreate table user_f1(\ncookieid string,\ndaystr string,\npv int\n) row format delimited fields terminated by ',';\n--加载数据\nload data local inpath '/export/datas/window.txt' into table user_f1;\nset hive.exec.mode.local.auto=true;\n--实现分区内起始到当前行的pv累加，默认窗口：取第一行开始到当前行的和\nselect \n  cookieid,\n  daystr,\n  pv,\n  sum(pv) over(partition by cookieid order by daystr) as pv1 \nfrom \n  user_f1;\n   \n--实现分区内所有pv的累加，不指定排序默认窗口：从第一行到最后一行\nselect \n  cookieid,\n  daystr,\n  pv,\n  sum(pv) over(partition by cookieid ) as pv2\nfrom \n  user_f1;\n  \n    \n--手动指定窗口的大小：分区\nrows between 起始位置 and 结束位置\nrows between unbounded preceding and current row\n\n--实现分区内起始到当前行的pv累加\nselect \n  cookieid,\n  daystr,\n  pv,\n  sum(pv) over(partition by cookieid order by daystr rows between unbounded preceding and current row) as pv3\nfrom \n  user_f1;\n--实现分区内指定前N行到当前行的pv累加\nselect \n  cookieid,\n  daystr,\n  pv,\n  sum(pv) over(partition by cookieid order by daystr rows between 3 preceding and current row) as pv4\nfrom \n  user_f1;\n--实现分区内指定前N行到后N行的pv累加 \nselect \n  cookieid,\n  daystr,\n  pv,\n  sum(pv) over(partition by cookieid order by daystr rows between 3 preceding and 1 following) as pv5\nfrom \n  user_f1;\n--实现分区内指定当前行到后N行的pv累加   \nselect \n  cookieid,\n  daystr,\n  pv,\n  sum(pv) over(partition by cookieid order by daystr rows between current row and unbounded following) as pv6\nfrom \n  user_f1;\n  \n  \n- preceding：往前\n- following：往后\n- current row：当前行\n- unbounded：起点\n- unbounded preceding 表示从前面的起点\n- unbounded following：表示到后面的终点\n~~~\n\n#### 窗口函数：LAG、LEAD、FIRST_VALUE、LAST_VALUE\n\nFIRST_VALUE\n\t功能：取每个分区内某列的第一个值\n\t语法：FIRST_VALUE(col) over (partition by col1 order by col2)\n\n~~~sql\n--取每个部门薪资最高的员工编号\nselect\n  empno,\n  ename,\n  salary,\n  deptno,\n  FIRST_VALUE(ename) over (partition by deptno order by salary desc) as first\nfrom\n  db_emp.tb_emp_normal;\n~~~\n\nLAST_VALUE\n\t功能：取每个分区内某列的最后一个值\n\t语法：LAST_VALUE() over (partition by col1 order by col2)\n\t注意：默认窗口是从第一条到当前条\n\n~~~sql\n--取每个部门薪资最低的员工编号\nselect\n  empno,\n  ename,\n  salary,\n  deptno,\n  LAST_VALUE(empno) over (partition by deptno order by salary desc) as last\nfrom\n  db_emp.tb_emp_normal; \n\nselect\n  empno,\n  ename,\n  salary,\n  deptno,\n  LAST_VALUE(empno) over (partition by deptno order by salary desc rows between unbounded preceding and unbounded following) as last\nfrom\n  db_emp.tb_emp_normal;\n~~~\n\nLAG\n\t功能：取每个分区内某列的前N个值\n\t语法：LAG(col,N,defaultValue) over (partition by col1 order by col2)\n\n~~~sql\nselect\n  empno,\n  ename,\n  salary,\n  deptno,\n  LAG(salary,1,0) over (partition by deptno order by salary) as deptno2\nfrom\n  db_emp.tb_emp_normal;\n~~~\n\nLEAD\n\t功能：向后取每个分区内某列的前N个值\n\t语法：LEAD(col,N,defaultValue) over (partition by col1 order by col2)\n\n~~~sql\nselect\n  empno,\n  ename,\n  salary,\n  deptno,\n  LEAD(salary,1,0) over (partition by deptno order by salary) as deptno2\nfrom\n  db_emp.tb_emp_normal;\n~~~\n\n\n\n\n\n#### 分析函数：ROW_NUMBER、RANK、DENSE_RANK、NTILE\n\n==ROW_NUMBER==\n\t功能：用于实现分区内记录编号\n\t语法：row_number() over (partition by col1 order by col2)\n\n~~~sql\n--统计每个部门薪资最高的前两名\nselect * from \n(select\n  empno,\n  ename,\n  salary,\n  deptno,\n  row_number() over (partition by deptno order by salary desc) as numb\nfrom\n  db_emp.tb_emp_normal) t where t.numb < 3;\n~~~\n\nRANK\n\t功能：用于实现分区内排名编号[会留空位]\n\t\t与row_number的区别：\n\t\t\trow_number：如果排序时数值相同，继续编号\n\t\t\trank：如果排序时数值相同，编号不变，但留下空位\n\t语法：rank() over (partition by col1 order by col2)\n\n~~~sql\n--统计每个部门薪资排名\nselect\n  empno,\n  ename,\n  salary,\n  deptno,\n  rank() over (partition by deptno order by salary desc) as numb\nfrom\n  db_emp.tb_emp_normal;\n~~~\n\nDENSE_RANK\n\t功能：用于实现分区内排名编号[不留空位]\n\t\t与rank的区别：\n\t\t\t==row_number：如果排序时数值相同，编号不变，并留下排名空位==\n\t\t\t==dense_rank：如果排序时数值相同，编号不变，不留空位==\n\t\t\t==rank：如果排序时数值相同，编号不变，但留下空位==\n\t语法：dense_rank() over (partition by col1 order by col2)\n\n~~~sql\n--统计每个部门薪资排名\nselect\n  empno,\n  ename,\n  salary,\n  deptno,\n  dense_rank() over (partition by deptno order by salary desc) as numb\nfrom\n  db_emp.tb_emp_normal;\n~~~\n\nNTILE\n\t功能：将每个分区内排序后的结果均分成N份【如果不能均分，优先分配编号小的】\n\t\t本质：将每个分区拆分成更小的分区\n\t语法：NTILE(N) over (partition by col1 order by col2)\n\n~~~sql\n--统计每个部门薪资排名，将每个部门的薪资分为两个部分，区分高薪和低薪\nselect\n  empno,\n  ename,\n  salary,\n  deptno,\n  NTILE(2) over (partition by deptno order by salary desc) as numb\nfrom\n  db_emp.tb_emp_normal;\n~~~\n\n\n\n### 5.3UDTF\n\nUDTF（User-Defined Table-Generating Functions）表生成函数 一进多出\n\n#### lateral view\n\n分类：视图\n功能：配合UDTF来使用,把某一行数据拆分成多行数据\n\t与UDTF直接使用的区别：\n\t\t==很多的UDTF不能将结果与源表进行关联，使用lateral view==\n\t\t可以将UDTF拆分的单个字段数据与原始表数据关联上==\n使用方式：\n\ttabel A lateral view UDTF(xxx) 视图名 as a,b,c\n\n~~~sql\n--准备数据:vim /export/datas/lateral.txt\n1\thttp://facebook.com/path/p1.php?query=1\n2\thttp://www.baidu.com/news/index.jsp?uuid=frank\n3\thttp://www.jd.com/index?source=baidu\n\n--创建表\ncreate table tb_url(\nid int,\nurl string\n) row format delimited fields terminated by '\\t';\n\n--加载数据\nload data local inpath '/export/datas/lateral.txt' into table tb_url;\n\n--使用UDTF解析\nSELECT parse_url_tuple(url, 'HOST') from tb_url;\n\n--使用UDTF+lateral view\nselect a.id,b.* from tb_url a lateral view parse_url_tuple(url, 'HOST') b as host;\n\n--对比\nSELECT id,parse_url_tuple(url, 'HOST') from tb_url;--失败，UDTF函数不能与字段连用\n~~~\n\n\n\n#### explode\n\n功能：函数可以将一个array或者map展开\n\texplode(array)：\n\t\t将array列表里的每个元素生成一行\n\texplode(map)：\n\t\t每一对元素作为一行，key为一列，value为一列\n使用方式：\n\t1-直接使用\n\t2-与lateral view连用\n\n~~~sql\n--实现wordcount【explode(array)】\n\tselect explode(split(word,\" \")) from wc1;\n--将兴趣爱好展开【explode(map)】\n\tselect explode(hobby) from complex_map;\n--与侧视图连用\n\tselect a.name,b.* from complex_map a lateral view explode(hobby) b as hobby,deep;\n~~~\n\n#### reflect\n\n功能：用于在Hive中直接调用Java中静态类的方法\n\t用法：reflect(classname,method,args)\n\n~~~sql\nselect reflect(\"java.util.UUID\", \"randomUUID\");\nselect reflect(\"java.lang.Math\",\"max\",20,30);\nselect reflect(\"org.apache.commons.lang.math.NumberUtils\",\"isNumber\",\"123\");\n~~~\n\n#### get_json_object\n\n处理json格式数据\n\n~~~sql\n--创建数据：vim /export/datas/hivedata.json\n{\"id\": 1701439105,\"ids\": [2154137571,3889177061],\"total_number\": 493}\n{\"id\": 1701439106,\"ids\": [2154137571,3889177061],\"total_number\": 494}\n--创建表：\ncreate table tb_json_test1 (\njson string\n);\n--加载数据\nload data local inpath '/export/datas/hivedata.json' into table tb_json_test1;\n~~~\n\n~~~sql\n--处理读取\nselect \n  get_json_object(t.json,'$.id'), \n  get_json_object(t.json,'$.total_number') \nfrom \n  tb_json_test1 t ;\n  \nselect \n  t2.* \nfrom \n  tb_json_test1 t1 \nlateral view \n  json_tuple(t1.json, 'id', 'total_number') t2 as c1,c2;\n~~~\n\n\n\n#### COALESCE\n\nCOALESCE(col,0)\n\n如果单列值为null，替换为默认值0\n\nconcat\n\n~~~sql\nconcat( 'liubei','xihuan','xiaoqiao' )\nliubeixihuanxiaoqiao\n~~~\n\n\n\n#### concat_ws&collect_set\n\nconcat_ws('|', collect_set(c_id))\n\n~~~sql\nid    name\n1001    A\n1001    B\n1001    C\n-------------------------\nid      name\n1001    A,B,C\n\nselect id,collect_list(name) from tb_ss group by id\n\n如果需要去重课可以使用collect_set,返回的是数组\nconcat_ws('|',collect_set(c_id))可以将数组内容按|拼接\n\n如果该列不是string，先用cast(col) as string 转换为string类型\nselect id,concat_ws(',',collect_list(cast (name as string))) from tb_ss group by id\n~~~\n\n\n\n#### instr\n\n查找字符串str中子字符串substr的位置， 如果查找失败将返回0，如果任一参数为Null将返回null，注意位置为从1开始的 \n\n~~~\ninstr(string str, string substr)\n~~~\n\n\n\n#### substring\n\n截取字符串\n\n~~~\nhello\nsubstring(col,1,2) -> 'he'\nsubstring(col,-2,2) -> 'lo'\n~~~\n\n\n\n### 5.4常见自带的hive函数\n\nshow functions;\n\n使用desc function  extended 函数名查看帮助\n\n•UNIX时间戳转日期函数: from_unixtime\n\n• 获取当前UNIX时间戳函数: unix_timestamp\n\n•日期转UNIX时间戳函数: unix_timestamp\n\n• 指定格式日期转UNIX时间戳函数: unix_timestamp\n\n•日期时间转日期函数: to_date\n\n•日期转年函数: year\n\n• 日期转月函数: month\n\n• 日期转天函数: day\n\n• 日期转小时函数: hour\n\n• 日期转分钟函数: minute\n\n• 日期转秒函数: second\n\n• 日期转周函数: weekofyear\n\n• 两个日期之间有多少个月:months_between('2020-01-10', u.birthday)(多用户得出用户年龄)\n\n• 日期比较函数: datediff\n\n• 日期增加函数: date_add\n\n• 日期减少函数: date_sub\n\n• 取当前天的下一周的周几：next_day(\"xxxx-xx-xx\",\"Mo\")\n\n• 取当前月的最后一天：last_day(\"xxxx-xx-xx\")\n\n•If函数: if\n\n•非空查找函数: COALESCE\n\n•条件判断函数：CASE\n\n•字符串长度函数：length\n\n•字符串反转函数：reverse\n\n•字符串连接函数：concat\n\n• 带分隔符字符串连接函数：concat_ws\n\n• 字符串截取函数：substr,substring\n\n•正则表达式替换函数：regexp_replace\n\n•正则表达式解析函数：regexp_extract\n\n•URL解析函数：parse_url\n\n​\t\t\t\t\t\t\tparse_url_tuple\n\n•json解析函数：get_json_object\n\n​\t\t\t\t\t\t\tjson_tuple\n\n•分割字符串函数: split\n\n•集合查找函数: find_in_set\n\n### 5.5关于union和union all\n\n总结分析\n\n1. 子查询相当于表名，使用 from 关键字需要指定真实表名或表别名。\n\n2. hive 不支持union ，只支持union all \n\n3. 子查询中使用union all 时，在子查询里不能使用count、sum 等 聚合函数 \n\n4. 两表直接进行union all 可以使用count、sum 等聚合函数 \n\n5. 两张表进行union all 取相同的字段名称，可正常输出指定数据内容，且结果为两张表的结果集\n\n## 6.hive语法要点\n\n~~~sql\n(1).Hive不支持join的非等值连接,不支持or\n分别举例如下及实现解决办法。\n  不支持不等值连接\n       错误:select * from a inner join b on a.id<>b.id\n       替代方法:select * from a inner join b on a.id=b.id and a.id is null;\n 不支持or\n       错误:select * from a inner join b on a.id=b.id or a.name=b.name\n       替代方法:select * from a inner join b on a.id=b.id\n                union all\n                select * from a inner join b on a.name=b.name\n  两个sql union all的字段名必须一样或者列别名要一样。\n        \n(2).分号字符:不能智能识别concat(‘;’,key)，只会将‘；’当做SQL结束符号。\n    •分号是SQL语句结束标记，在HiveQL中也是，但是在HiveQL中，对分号的识别没有那么智慧，例如：\n        •select concat(key,concat(';',key)) from dual;\n    •但HiveQL在解析语句时提示：\n        FAILED: Parse Error: line 0:-1 mismatched input '<EOF>' expecting ) in function specification\n    •解决的办法是，使用分号的八进制的ASCII码进行转义，那么上述语句应写成：\n        •select concat(key,concat('\\073',key)) from dual;\n\n(3).不支持INSERT INTO 表 Values（）, UPDATE, DELETE等操作.这样的话，就不要很复杂的锁机制来读写数据。\n    INSERT INTO syntax is only available starting in version 0.8。INSERT INTO就是在表或分区中追加数据。\n\n(4).HiveQL中String类型的字段若是空(empty)字符串, 即长度为0, 那么对它进行IS NULL的判断结果是False，使用left join可以进行筛选行。\n\n(5).不支持 ‘< dt <’这种格式的范围查找，可以用dt in(”,”)或者between替代。\n\n(6).Hive不支持将数据插入现有的表或分区中，仅支持覆盖重写整个表，示例如下：\n    INSERT OVERWRITE TABLE t1 SELECT * FROM t2;\n    \n(7).group by的字段,必须是select后面的字段，select后面的字段不能比group by的字段多.\n    如果select后面有聚合函数,则该select语句中必须有group by语句\n    而且group by后面不能使用别名\n    \n(8).hive的0.13版之前select , where 及 having 之后不能跟子查询语句(一般使用left join、right join 或者inner join替代)\n\n(9).先join(及inner join) 然后left join或right join\n\n(10).hive不支持group_concat方法,可用 concat_ws('|', collect_set(str)) 实现\n\n(11).not in 后不能包含查询语句,可用left join tmp on tableName.id = tmp.id where tmp.id is null 替代实现\n\n1.case when ... then ... else ... end\n\n2.length(string)\n\n3.cast(string as bigint)\n\n4.rand()       返回一个0到1范围内的随机数\n\n5.ceiling(double)    向上取整\n\n6.substr(string A, int start, int len)\n\n7.collect_set(col)函数只接受基本数据类型，它的主要作用是将某字段的值进行去重汇总，产生array类型字段\n\n8.concat()函数\n    1、功能：将多个字符串连接成一个字符串。\n    2、语法：concat(str1, str2,...)\n    返回结果为连接参数产生的字符串，如果有任何一个参数为null，则返回值为null。\n\n    9.concat_ws()函数\n    1、功能：和concat()一样，将多个字符串连接成一个字符串，但是可以一次性指定分隔符～（concat_ws就是concat with separator）\n    2、语法：concat_ws(separator, str1, str2, ...)\n    说明：第一个参数指定分隔符。需要注意的是分隔符不能为null，如果为null，则返回结果为null。\n\n    10.nvl(expr1, expr2)：空值转换函数  nvl(x,y)    Returns y if x is null else return x\n\n11.if(boolean testCondition, T valueTrue, T valueFalse)\n\n12.row_number()over()分组排序功能,over()里头的分组以及排序的执行晚于 where group by  order by 的执行。\n\n13.获取年、月、日、小时、分钟、秒、当年第几周\n    select \n        year('2018-02-27 10:00:00')       as year\n        ,month('2018-02-27 10:00:00')      as month\n        ,day('2018-02-27 10:00:00')        as day\n        ,hour('2018-02-27 10:00:00')       as hour\n        ,minute('2018-02-27 10:00:00')     as minute\n        ,second('2018-02-27 10:00:00')     as second\n        ,weekofyear('2018-02-27 10:00:00') as weekofyear\n  获取当前时间:\n        1).current_timestamp\n        2).unix_timestamp()\n        3).from_unixtime(unix_timestamp())\n        4).CURRENT_DATE\n~~~\n\n\n\n## 7.hive优化\n\n\n\n### 7.1大表join大表优化\n\n```sql\n如果Hive优化实战2中mapjoin中小表dim_seller很大呢？比如超过了1GB大小？这种就是大表join大表的问题。首先引入一个具体的问题场景，然后基于此介绍各自优化方案。\n\n1、问题场景\n问题场景如下：\n\nA表为一个汇总表，汇总的是卖家买家最近N天交易汇总信息，即对于每个卖家最近N天，其每个买家共成交了多少单，总金额是多少，假设N取90天，汇总值仅取成交单数。\n\nA表的字段有：buyer_id、seller_id、pay_cnt_90day。\n\nB表为卖家基本信息表，其字段有seller_id、sale_level，其中sale_levels是卖家的一个分层评级信息，比如吧卖家分为6个级别：S0、S1、S2、S3、S4和S5。\n\n要获得的结果是每个买家在各个级别的卖家的成交比例信息，比如：\n\n某买家：S0:10%；S1:20%；S2:20%；S3:10%；S4:20%；S5:10%。\n\n正如mapjoin中的例子一样，第一反应是直接join两表并统计：\n\nselect\n\nm.buyer_id,\n\nsum(pay_cnt_90day)  as pay_cnt_90day,\n\nsum(case when m.sale_level = 0  then pay_cnt_90day  end)  as pay_cnt_90day_s0,\n\nsum(case when m.sale_level = 1  then pay_cnt_90day  end)  as pay_cnt_90day_s1,\n\nsum(case when m.sale_level = 2  then pay_cnt_90day  end)  as pay_cnt_90day_s2,\n\nsum(case when m.sale_level = 3  then pay_cnt_90day  end)  as pay_cnt_90day_s3,\n\nsum(case when m.sale_level = 4  then pay_cnt_90day  end)  as pay_cnt_90day_s4,\n\nsum(case when m.sale_level = 5  then pay_cnt_90day  end)  as pay_cnt_90day_s5\n\nfrom (\n\nselect  a.buer_id,  a.seller_id,  b.sale_level, a.pay_cnt_90day\n\nfrom (  select buyer_id,  seller_id,  pay_cnt_90day   from table_A)  a\n\njoin\n\n(select seller_id,  sale_level  from table_B)  b\n\non  a.seller_id  = b.seller_id\n\n)  m\n\ngroup by m.buyer_id\n\n但是此SQL会引起数据倾斜，原因在于卖家的二八准则，某些卖家90天内会有几百万甚至上千万的买家，但是大部分的卖家90天内买家的数目并不多，join table_A和table_B的时候，\n\nODPS会按照seller_id进行分发，table_A的大卖家引起了数据倾斜。\n\n但是数据本身无法用mapjoin table_B解决，因为卖家超过千万条，文件大小有几个GB，超过了1GB的限制。\n\n优化方案1：转为mapjoin\n一个很正常的想法是，尽管B表无法直接mapjoin, 但是是否可以间接mapjoin它呢？\n\n实际上此思路有两种途径：限制行和限制列。\n\n限制行的思路是不需要join B全表，而只需要join其在A表中存在的，对于本问题场景，就是过滤掉90天内没有成交的卖家。\n\n限制列的思路是只取需要的字段。\n\n加上如上的限制后，检查过滤后的B表是否满足了Hive  mapjoin的条件，如果能满足，那么添加过滤条件生成一个临时B表，然后mapjoin该表即可。采用此思路的语句如下：\n\n\n\nselect\n\nm.buyer_id,\n\nsum(pay_cnt_90day)  as pay_cnt_90day,\n\nsum(case when m.sale_level = 0  then pay_cnt_90day  end)  as pay_cnt_90day_s0,\n\nsum(case when m.sale_level = 1  then pay_cnt_90day  end)  as pay_cnt_90day_s1,\n\nsum(case when m.sale_level = 2  then pay_cnt_90day  end)  as pay_cnt_90day_s2,\n\nsum(case when m.sale_level = 3  then pay_cnt_90day  end)  as pay_cnt_90day_s3,\n\nsum(case when m.sale_level = 4  then pay_cnt_90day  end)  as pay_cnt_90day_s4,\n\nsum(case when m.sale_level = 5  then pay_cnt_90day  end)  as pay_cnt_90day_s5\n\nfrom ( \n\nselect  /*+mapjoin(b)*/\n\na.buer_id,  a.seller_id,  b.sale_level, a.pay_cnt_90day\n\nfrom (  select buyer_id,  seller_id,  pay_cnt_90day   from table_A)  a\n\njoin\n\n(\n\n    select seller_id,  sale_level  from table_B b0\n\n    join \n\n    (select seller_id from table_A group by seller_id) a0\n\n    on b0.seller_id = a0.selller_id\n\n)  b\n\non  a.seller_id  = b.seller_id\n\n)  m\n\ngroup by m.buyer_id\n\n此方案在一些情况可以起作用，但是很多时候还是无法解决上述问题，因为大部分卖家尽管90天内买家不多，但还是有一些的，过滤后的B表仍然很多。\n\n\n优化方案2：join时用case when语句\n此种解决方案应用场景是：倾斜的值是明确的而且数量很少，比如null值引起的倾斜。其核心是将这些引起倾斜的值随机分发到Reduce,其主要核心逻辑在于join时对这些特殊值concat随机数，\n\n从而达到随机分发的目的。此方案的核心逻辑如下：\n\nselect a.user_id, a.order_id, b.user_id\n\nfrom table_a a join table_b b\n\non (case when a.user_is is null then concat('hive', rand()) else a.user_id end) = b.user_id\n\nHive 已对此进行了优化，只需要设置参数skewinfo和skewjoin参数，不修改SQL代码，例如，由于table_B的值“0” 和“1”引起了倾斜，值需要做如下设置：\n\nset hive.optimize.skewinfo=table_B:(selleer_id) [ ( \"0\") (\"1\") ) ] \n\nset hive.optimize.skewjoin = true;\n\n但是方案2因为无法解决本问题场景的倾斜问题，因为倾斜的卖家大量存在而且动态变化。\n\n\n优化方案3：倍数B表，再取模join\n1、通用方案\n此方案的思路是建立一个numbers表，其值只有一列int 行，比如从1到10（具体值可根据倾斜程度确定），然后放大B表10倍，再取模join。代码如下：\n\n\n\nselect\n\nm.buyer_id,\n\nsum(pay_cnt_90day)  as pay_cnt_90day,\n\nsum(case when m.sale_level = 0  then pay_cnt_90day  end)  as pay_cnt_90day_s0,\n\nsum(case when m.sale_level = 1  then pay_cnt_90day  end)  as pay_cnt_90day_s1,\n\nsum(case when m.sale_level = 2  then pay_cnt_90day  end)  as pay_cnt_90day_s2,\n\nsum(case when m.sale_level = 3  then pay_cnt_90day  end)  as pay_cnt_90day_s3,\n\nsum(case when m.sale_level = 4  then pay_cnt_90day  end)  as pay_cnt_90day_s4,\n\nsum(case when m.sale_level = 5  then pay_cnt_90day  end)  as pay_cnt_90day_s5\n\nfrom (\n\nselect  a.buer_id,  a.seller_id,  b.sale_level, a.pay_cnt_90day\n\nfrom (  select buyer_id,  seller_id,  pay_cnt_90day   from table_A)  a\n\njoin\n\n(\n\nselect  /*+mapjoin(members)*/\n\nseller_id,  sale_level ,member\n\nfrom table_B\n\njoin members\n\n)  b\n\non  a.seller_id  = b.seller_id\n\nand mod(a.pay_cnt_90day,10)+1 = b.number \n\n)  m\n\ngroup by m.buyer_id\n\n此思路的核心在于，既然按照seller_id分发会倾斜，那么再人工增加一列进行分发，这样之前倾斜的值的倾斜程度会减少到原来的1/10，可以通过配置numbers表改放大倍数来降低倾斜程度，\n\n但这样做的一个弊端是B表也会膨胀N倍。\n\n2、专用方案\n通用方案的思路把B表的每条数据都放大了相同的倍数，实际上这是不需要的，只需要把大卖家放大倍数即可：需要首先知道大卖家的名单，即先建立一个临时表动态存放每天最新的大卖家（\n\n比如dim_big_seller）,同时此表的大卖家要膨胀预先设定的倍数（1000倍）。\n\n在A表和B表分别新建一个join列，其逻辑为：如果是大卖家，那么concat一个随机分配正整数（0到预定义的倍数之间，本例为0~1000）；如果不是，保持不变。具体代码如下：\n\n\n\nselect\n\nm.buyer_id,\n\nsum(pay_cnt_90day)  as pay_cnt_90day,\n\nsum(case when m.sale_level = 0  then pay_cnt_90day  end)  as pay_cnt_90day_s0,\n\nsum(case when m.sale_level = 1  then pay_cnt_90day  end)  as pay_cnt_90day_s1,\n\nsum(case when m.sale_level = 2  then pay_cnt_90day  end)  as pay_cnt_90day_s2,\n\nsum(case when m.sale_level = 3  then pay_cnt_90day  end)  as pay_cnt_90day_s3,\n\nsum(case when m.sale_level = 4  then pay_cnt_90day  end)  as pay_cnt_90day_s4,\n\nsum(case when m.sale_level = 5  then pay_cnt_90day  end)  as pay_cnt_90day_s5\n\nfrom (\n\nselect  a.buer_id,  a.seller_id,  b.sale_level, a.pay_cnt_90day\n\nfrom (  \n\nselect  /*+mapjoin(big)*/\n\nbuyer_id,  seller_id,  pay_cnt_90day,\n\nif(big.seller_id is not null, concat(  table_A.seller_id,  'rnd',  cast(  rand() * 1000 as bigint ), table_A.seller_id)  as seller_id_joinkey\n\nfrom table_A\n\nleft outer join\n\n--big表seller_id有重复，请注意一定要group by 后再join,保证table_A的行数保持不变\n\n（select seller_id  from dim_big_seller  group by seller_id）big\n\non table_A.seller_id = big.seller_id\n\n)  a\n\njoin\n\n(\n\nselect  /*+mapjoin(big)*/\n\nseller_id,  sale_level ,\n\n--big表的seller_id_joinkey生成逻辑和上面的生成逻辑一样\n\ncoalesce(seller_id_joinkey,table_B.seller_id) as seller_id_joinkey\n\nfrom table_B\n\nleft out join\n\n--table_B表join大卖家表后大卖家行数扩大1000倍，其它卖家行数保持不变\n\n(select seller_id, seller_id_joinkey from dim_big_seller) big\n\non table_B.seller_id= big.seller_id\n\n)  b\n\non  a.seller_id_joinkey= b.seller_id_joinkey\n\nand mod(a.pay_cnt_90day,10)+1 = b.number \n\n)  m\n\ngroup by m.buyer_id\n\n相比通用方案，专用方案的运行效率明细好了许多，因为只是将B表中大卖家的行数放大了1000倍，其它卖家的行数保持不变，但同时代码复杂了很多，而且必须首先建立大数据表。\n\n方案4：动态一分为二\n实际上方案2和3都用了一分为二的思想，但是都不彻底，对于mapjoin不能解决的问题，终极解决方案是动态一分为二，即对倾斜的键值和不倾斜的键值分开处理，不倾斜的正常join即可，倾斜的把他们找出来做mapjoin，最后union all其结果即可。\n\n但是此种解决方案比较麻烦，代码复杂而且需要一个临时表存放倾斜的键值。代码如下：\n\n--由于数据倾斜，先找出90天买家超过10000的卖家\n\ninsert overwrite table  temp_table_B\n\nselect \n\nm.seller_id,  n.sale_level\n\nfrom (\n\nselect   seller_id\n\nfrom (\n\nselect seller_id,count(buyer_id) as byr_cnt\n\nfrom table_A\n\ngroup by seller_id\n\n) a\n\nwhere a.byr_cnt >10000\n\n) m\n\nleft join \n\n(\n\nselect seller_id, sale_level  from table_B\n\n) n\n\non m.seller_id = n.seller_id;\n\n\n\n--对于90天买家超过10000的卖家直接mapjoin,对其它卖家直接正常join即可。\n\n\n\nselect\n\nm.buyer_id,\n\nsum(pay_cnt_90day)  as pay_cnt_90day,\n\nsum(case when m.sale_level = 0  then pay_cnt_90day  end)  as pay_cnt_90day_s0,\n\nsum(case when m.sale_level = 1  then pay_cnt_90day  end)  as pay_cnt_90day_s1,\n\nsum(case when m.sale_level = 2  then pay_cnt_90day  end)  as pay_cnt_90day_s2,\n\nsum(case when m.sale_level = 3  then pay_cnt_90day  end)  as pay_cnt_90day_s3,\n\nsum(case when m.sale_level = 4  then pay_cnt_90day  end)  as pay_cnt_90day_s4,\n\nsum(case when m.sale_level = 5  then pay_cnt_90day  end)  as pay_cnt_90day_s5\n\nfrom (\n\nselect  a.buer_id,  a.seller_id,  b.sale_level, a.pay_cnt_90day\n\nfrom (  select buyer_id,  seller_id,  pay_cnt_90day   from table_A)  a\n\njoin\n\n(\n\nselect seller_id,  a.sale_level \n\nfrom table_A  a\n\nleft join temp_table_B b\n\non a.seller_id = b.seller_id\n\nwhere b.seller_id is not null\n\n)  b\n\non  a.seller_id  = b.seller_id\n\nunion all\n\n\n\nselect  /*+mapjoin(b)*/\n\na.buer_id,  a.seller_id,  b.sale_level, a.pay_cnt_90day\n\nfrom ( \n\nselect buyer_id,  seller_id,  pay_cnt_90day   \n\nfrom table_A\n\n)  a\n\njoin\n\n(\n\nselect seller_id,  sale_level  from table_B \n\n)  b\n\non  a.seller_id  = b.seller_id\n\n)  m  group by m.buyer_id\n\n) m\n\ngroup by m.buyer_id\n\n\n\n总结：方案1、2以及方案3中的同用方案不能保证解决大表join大表问题，因为它们都存在种种不同的限制和特定使用场景。\n\n而方案3的专用方案和方案4是推荐的优化方案，但是它们都需要新建一个临时表来存储每日动态变化的大卖家。相对方案4来说，方案3的专用方案不需要对代码框架进行修改，但是B表会被放大，所以一定要是是维度表，不然统计结果会是错误的。方案4最通用，自由度最高，但是对代码的更改也最大，甚至修改更难代码框架，可以作为终极方案使用。\n```","source":"_posts/hive知识整理.md","raw":"---\ntitle: hive知识整理\ndate: 2020-12-29 21:16:31\ntags:\n- hive\ncategories: \n- 工具\n---\n\n# Hive\n\n<!-- toc -->\n\n[TOC]\n\n\n\n## 概述\n\nHive是基于Hadoop的一个数据仓库工具，可以将结构化的数据文件映射为一张数据库表，并提供类SQL查询功能。\n\n本质是将SQL转换为MapReduce程序\n\n主要用途：用来做离线数据分析，比直接用MapReduce开发效率更高\n\n<!--more-->\n\n![img](hive知识整理/timg-1568381886490.jpg) \n\n数据仓库和数据库的区别\n\n* 数据库是面向事务的设计，数据仓库是面向主题设计的。\n\n* 数据库一般存储业务数据，数据仓库存储的一般是历史数据。\n\n* 数据库设计是尽量避免冗余，一般针对某一业务应用进行设计，比如一张简单的User表，记录用户名、密码等简单数据即可，符合业务应用，但是不符合分析。数据仓库在设计是有意引入冗余，依照分析需求，分析维度、分析指标进行设计。\n\n* 数据库是为捕获数据而设计，数据仓库是为分析数据而设计。\n\n数据仓库分层架构\n\n==源数据层（ODS）==：此层数据无任何更改，直接沿用外围系统数据结构和数据，不对外开放；为临时存储层，是接口数据的临时存储区域，为后一步的数据处理做准备。\n\n==数据仓库层（DW）==：也称为细节层，DW层的数据应该是一致的、准确的、干净的数据，即对源系统数据进行了清洗（去除了杂质）后的数据。\n\n==数据应用层（DA或APP）==：前端应用直接读取的数据源；根据报表、专题分析需求而计算生成的数据。\n\n \n\n~~~bash\n先启动metastore服务再启动hiveserver2服务\n/export/servers/hive/bin/beeline\nbeeline> ! connect jdbc:hive2://hdp3:10000\n\n~~~\n\n\n\nhive SQL语句中 select from where group by having order by 的==执行顺序==？\n\n执行顺序：\n\nfrom … where … select … group by … having … order by …\n\n其实总结hive的执行顺序也是总结mapreduce的执行顺序：\n\nMR程序的执行顺序：\n\nmap阶段：\n\n 1.执行from加载，进行表的查找与加载\n\n2.执行where过滤，进行条件过滤与筛选\n\n3.执行select查询：进行输出项的筛选\n\n4.执行group by分组：描述了分组后需要计算的函数\n\n5.map端文件合并：map端本地溢出写文件的合并操作，每个map最终形成一个临时文件。 然后按列映射到对应的reduceReduce阶段：\n\nReduce阶段：\n\n1.group by：对map端发送过来的数据进行分组并进行计算。\n\n2.select：最后过滤列用于输出结果\n\n3.limit排序后进行结果输出到HDFS文件\n\n所以通过上面的例子我们可以看到，在进行select之后我们会形成一张表，在这张表当中做分组排序这些操作。\n\n## 1.DDL操作\n\n设置hive程序本地运行模式：\n\n~~~bash\nset hive.exec.mode.local.auto=true;\n~~~\n\n### 1.1  创建表\n\n```sql\ncreate [external] table [if not exists] tb_name (...) [like] existing_table;\n[row format delimited fields terminated by char\n\t\t\t\t\tcollection items terminated by char\n\t\t\t\t\tmap keys terminated by char\n\t\t\t\t\tlines terminated by char\n\t\t\t\t\t...]\n[partitioned by ]\n[stored as file_format]\n[CLUSTERED BY (col_name, col_name, ...) [SORTED BY (col_name [ASC|DESC], ...)] INTO num_buckets BUCKETS]\n[LOCATION hdfs_path]\n\n\n```\n\n1.create table 创建一个指定名字的表，如果表以存在可以用[if not exists]跳过异常\n\n2.[external] 关键字可以让给用户创建一个外部表。\n\n创建内部表时会将数据移动到数据仓库指向的路径，删除表时元数据和数据都被删除。\n\n外部表仅记录数据所在的路径，删除时只删除元数据，不删除数据。\n\n3.[like] 允许用户复制现有的表结构，但是不复制数据\n\n4.[row format delimited] 指定表列与列的分隔符。hive建表的时候默认分隔符是‘\\001’,\n\n5.[partitioned by] 分区命令。每个表可以有多个分区，每个分区以文件夹的形式单独存在表文件夹目录下。分区是以字段的形式在表结构中存在。\n\n6.[stored as sequencedile|textfile|refile]   如果文件数据是纯文本，可以使用textfile,如果数据需要压缩，使用sequencedile。\n\ntextfile是默认的文件格式，使用delimited子句来读取分隔文件\n\n7.[clustered by (col_name,col_name,....)]   分桶\n\n8.[LOCATION hdfs_path]  指定这张表所在的hdfs上的目录，如果不指定，默认在数据库的目录下面\n\n```sql\ncreate table tb_name as select statement;将sql语句的结果进行保存\ncreate table tb_new like tb_old;创建一张结构与tb_old一样的表\ndrop table [if exists] tb_name;删除表\ntruncate table tb_name;清空表\nshow functions;查看所有的函数\nshow partitions tb_name;查看所有分区\ndesc formatted tb_name；查看表信息\n\n```\n\n#### 1.1.1 管理表\n\n最普通的表，默认表的类型就是管理表\n\n```sql\ncreate table tb_name();\n\n```\n\n#### 1.1.2 外部表\n\n```sql\ncreate external table tb_name();\n\n```\n\n特点：在删除时，不会删除表数据\n\n应用场景：1-如果需要多张表共用同一份数据，都建立外部表，使用完以后，删除表互不影响。2-如果数据需要进行额外的使用：存档等等\n\n#### 1.1.3 分区表\n\n```sql\ncreate external table tb_part(\nid string\n name string\n)\npartitioned by (day string)\nrow format delimited fields terminated by '\\t';\n--创建分区表，指定分区字段day\nload data local inpath '/export/datas/20180718' into table tb_name partition(day='18');\n--加载文件数据，创建分区字段day=18\nload data local inpath '/export/datas/20180719' into table tb_name partition(day='19');\n--加载文件数据，创建分区字段day=19\nselect * from tb_part where day = 19;\n--过滤条件需是分区的字段，如果不是分区字段就会从整个分区目录中查找\n\n```\n\n- 手动分区：加载数据时，手动指定文件的分区\n\n  分区字段为查询的语句的最后一个字段 \n\n  ```sql\n  insert overwrite table tb_emp_part partition (deptno)\n    select empno\n    ename,\n    job,\n    manager,\n    inday,\n    salary,\n    jiangjin,\n    deptno\n  from tb_emp_normal;\n  \n  ```\n\n  - 应用场景：将普通表的数据转换成一个分区表\n    \t\t   原始表【tb1】中的数据没有做分区\n      \t\t   希望将原始表中的数据按照分区存放到新的分区表[tb2]\n\n  - 自动分区：默认按照原始表的最后一列进行分区\n\n  ```sql\n  set hive.exec.dynamic.partition.mode=nonstrict;\n  配置自动分区\n  show partitions tb_name;\n  查看当前所有分区\n  \n  ```\n\n  数据加载问题：\n  1-如果手动将数据文件放入一张普通表的目录下？表能不能读到数据？\n\n  ​\t可以，元数据查询时直接将表的目录作为查询目录\n  2-如果手动将数据文件放入一张分区表的分区目录下？表能不能读到数据？表的分区能不能读到数据？\n  ​\t可以的，因为元数据查询时直接将分区的目录作为查询目录\n  3-如果手动在HDFS上创建一个分区的目录，将数据放入分区目录下，表能不能读到数据？\n  ​\t不能，因为Hive中没有该分区的元数据\n\n  方案一：修复表的元数据（资源占用多）\n\n  ```sql\n  msck repair table tb_emp;\n  \n  ```\n\n  方案二：手动向表中添加一个分区\n\n  ```sql\n  alter table tb_name add [if exists] partition (dt='20') location '/user/hadoop/dt=20';\n  --要求建立的目录必须与分区自动创建的目录格式一样\n  \n  ```\n\n  删除分区\n\n  ~~~bash\n  alter table tb_name drop [if exists] partition (dt='20');\n  ~~~\n\n  \n\n  #### 1.1.4  分桶表\n\n  ```sql\n  create table tb_emp_bucket(\n  empno int ,\n  ename string,\n  job string,\n  manager int,\n  inday string,\n  salary double,\n  jiangjin double,\n  deptno int\n  ) \n  clustered by (deptno) into 3 BUCKETS\n  row format delimited fields terminated by '\\t';\n  \n  ```\n\n  应用场景：大表join大表时\n\n  ```sql\n  --开启分桶\n  set hive.enforce.bucketing=true;\n  \n  insert overwrite table tb_emp_bucket\n  select * from tb_emp_normal cluster by (deptno);\n  \n  ```\n\n  连个桶表桶的个数必须相同，或者b表桶是a表的倍数\n\n  ### 1.2 修改表\n\n  增加分区：\n\n  ```sql\n  alter table tb_name add partition (dt='20170101') location '/user/hadoop/table_name/dt=20170101';\n  \n  ```\n\n  删除分区\n\n  ```sql\n  alter table tb_name drop if exists partition (dt='20170101')\n  \n  ```\n\n  修改分区\n\n  ```sql\n  alter table tb_name partition (dt='20170101') rename to partition(dt='20170202')\n  \n  ```\n\n  添加列\n\n  ```sql\n  --添加列\n  alter table tb_name add|replace columns (col_name string);\n  --修改表名\n  alter table stu_par rename to stu_par1\n  --增加列\n  alter table stu1 add columns(score string);\n  --修改列类型\n  alter table stu1 change column score score double;\n  --\n  ```\n\n  ## 2.DML操作\n\n  ### 2.1 load \n\n  在将数据加载到表中时，Hive不会进行任何转换。加载操作是将数据文件移动到与Hive表对应的位置的纯复制/移动操作。\n\n  ```sql\n  load data [local] inpath 'filepath' [overwrite] into table tb_name [partition(partcol1=val1,partcol2=val2...)]\n  \n  ```\n\n  ### 2.2 insert\n\n  Hive中insert主要是结合select查询语句使用，将查询结果插入到表中\n\n  ```sql\n  --查询结果的列数要和插入数据表格的列数一致\n  insert overwrite table tb_name select statement\n  --将查询语句结果保存至HDFS中\n  insert overwrite directory \"/movie/answer10/\" select statement;\n  \n  ```\n\n  ### 2.3 join\n\n  inner join: 两张表都有结果才有\n\n  left join: 左表有，结果就有\n\n  right join: 右表有，结果就有\n\n  full join：两边任意一边有，结果就有\n\n  cross join:笛卡尔积      --一般用于结果的漏斗计算\n\n  ### 2.4 排序\n\n  ```sql\n  set hive.exec.reducers.bytes.per.reducer=<number>\n  \t每个reduce最多处理多少数据量\n  set hive.exec.reducers.max=<number>\t\n  \t最多启动多少个reduce\n  set mapreduce.job.reduces=<number>\n  \t设置reduce的个数\n  \n  ```\n\n  #### order by\n\n  全局排序，对整体进行排序，只有一个reduce的情况下\n\n  在启用多个reduce的情况下如果使用order by 结果依旧全局有序，但只会启用一个reduce\n\n  ```sql\n  select  empno,ename,salary,deptno from tb_emp_normal order by empno;\n  \n  ```\n\n  #### sort by\n\n  局部排序，多个reduce的 情况下，每个reduce内部有序（分区内有序）\n\n  ```sql\n  set mapreduce.job.reduces=3;\n  设置reduce个数\n  insert overwrite local directory '/export/datas/sort' \n  row format delimited fields terminated by '\\t' \n  select  empno,ename,salary,deptno from tb_emp_normal \n  sort by empno;\n  \n  ```\n\n  #### distribute by\n\n  指定多个reduce情况下，以哪一列作为分区字段。将相同的数据放入同一个结果文件，类似MR中Partition，进行分区，结合sort by使用  \n\n  ```sql\n  insert overwrite local directory '/export/datas/dis' \n  row format delimited fields terminated by '\\t' \n  select  empno,ename,salary,deptno from tb_emp_normal \n  distribute by deptno \n  sort by empno;\n  \n  ```\n\n  #### cluster by\n\n  如果sort by与distribute by使用同一个字段可以用此代替，但是排序只能是升序排序，不能指定排序规则为ASC或者DESC。\n\n  \n\n## 3.hive参数配置\n\n### 3.1 Hive shell命令行\n\n针对bin/hive，除了可以当第一代客户端之外。还可以在hive中启动其他用途。\n\n1、 -i  初始化HQL文件。\n\n2、 -e从命令行执行指定的HQL \n\n3、 -f 执行HQL脚本 \n\n4、 -v 输出执行的HQL语句到控制台 \n\n5、 -p <port> connect to Hive Server on port number \n\n6、 -hiveconf x=y Use this to set hive/hadoop configuration variables.\n\n例如：\n\n~~~bash\n$HIVE_HOME/bin/hive -e 'select * from table a'\t\n\n$HIVE_HOME/bin/hive -f /home/my/hive-script.sql\n\n$HIVE_HOME/bin/hive -f hdfs://<namenode>:<port>/hive-script.sql\n\n$HIVE_HOME/bin/hive -i /home/my/hive-init.sql\n\n~~~\n\n\n\n### 3.2 Hive 参数配置方式\n\n*Hive参数大全：*\n\n[*https://cwiki.apache.org/confluence/display/Hive/Configuration+Properties*\n\n 开发Hive应用时，不可避免地需要设定Hive的参数。设定Hive的参数可以调优HQL代码的执行效率，或帮助定位问题。然而实践中经常遇到的一个问题是，为什么设定的参数没有起作用？这通常是错误的设定方式导致的。\n\n对于一般参数，有以下三种设定方式：\n\n配置文件   （全局有效）\n\n命令行参数   （对hive启动实例有效）\n\n参数声明   （对hive的连接session有效）\n\n配置文件 \n\n用户自定义配置文件：$HIVE_CONF_DIR/hive-site.xml\n\n默认配置文件：$HIVE_CONF_DIR/hive-default.xml \n\n用户自定义配置会覆盖默认配置。\n\n另外，Hive也会读入Hadoop的配置，因为Hive是作为Hadoop的客户端启动的，Hive的配置会覆盖Hadoop的配置。\n\n配置文件的设定对本机启动的所有Hive进程都有效。\n\n 命令行参数\n\n启动Hive（客户端或Server方式）时，可以在命令行添加-hiveconf来设定参数\t例如：bin/hive -hiveconf hive.root.logger=INFO,console\n\n设定对本次启动的Session（对于Server方式启动，则是所有请求的Sessions）有效。\n\n 参数声明\n\n可以在HQL中使用SET关键字设定参数，这一设定的作用域也是session级的。\n\n比如：\n\nset hive.exec.reducers.bytes.per.reducer=<number>  每个reduce task的平均负载数据量\n\nset hive.exec.reducers.max=<number>   设置reduce task数量的上限\n\nset mapreduce.job.reduces=<number>    指定固定的reduce task数量\n\n但是，这个参数在必要时<业务逻辑决定只能用一个reduce task> hive会忽略\n\n上述三种设定方式的优先级依次递增。即参数声明覆盖命令行参数，命令行参数覆盖配置文件设定。注意某些系统级的参数，例如log4j相关的设定，必须用前两种方式设定，因为那些参数的读取在Session建立以前已经完成了。\n\n## 4.hive中复杂数据类型的使用\n\n### 4.1 数组类型\n\n~~~\n--数据如下：vim /export/datas/array.txt\nzhangsan\tbeijing,shanghai,tianjin,hangzhou\nwangwu\tshanghai,chengdu,wuhan,haerbin\n~~~\n\n~~~sql\n--创建表\ncreate table complex_array(\nname string,\nwork_locations array<string>\n)\nrow format delimited fields terminated by '\\t' --指定列的分隔符\ncollection items terminated by ',';--指定数组中元素的分隔符\n\n--加载数据\nload data local inpath '/export/datas/array.txt' into table complex_array;\n\n--查询\nselect * from complex_array;\nselect size(work_locations) from complex_array;\nselect work_locations[0],work_locations[1] from complex_array;\n~~~\n\n### 4.2 map类型\n\n~~~\n--数据如下：vim /export/datas/map.txt\n1,zhangsan,唱歌:非常喜欢-跳舞:喜欢-游泳:一般般\n2,lisi,打游戏:非常喜欢-篮球:不喜欢\n~~~\n\n~~~sql\n--创建表\ncreate table complex_map(\nid int,\nname string,\nhobby map<string,string>)\nrow format delimited fields terminated by ',' --指定列的分隔符\ncollection items terminated by '-' map keys terminated by ':' ;--指定keyvalue的分割\n\n--加载数据\nload data local inpath '/export/datas/map.txt' into table complex_map;\n\n--查询\nselect * from complex_map;\nselect size(hobby) from complex_map;\nselect hobby[\"唱歌\"] from complex_map;\n~~~\n\n### 4.3 正则类型\n\n```sql\n--数据如下:vim /export/datas/regex.txt\ntom 男 23 上海\n```\n\n```sql\n--使用正则加载数据\nCREATE TABLE user_regex(\nname string,\nsex string,\nage int,\ncity string\n)\nROW FORMAT SERDE 'org.apache.hadoop.hive.serde2.RegexSerDe'\nWITH SERDEPROPERTIES (\n  \"input.regex\" = \"([^ ]+) ([^ ]+) ([0-9]+) (.+)\"\n)\nSTORED AS TEXTFILE;\n\nload data local inpath '/root/regex.txt' into table user_regex;\n```\n\n### 4.4 json类型\n\n~~~sql\n--通过专门的解析类直接加载一个json格式的数据到Hive中\n--数据如下:vim /export/datas/hivedata.json\n{\"id\": 1701439105,\"ids\": [2154137571,3889177061],\"total_number\": 493}\n{\"id\": 1701439106,\"ids\": [2154137571,3889177061],\"total_number\": 494}\n--添加jar包\nadd jar /export/datas/json-serde-1.3.7-jar-with-dependencies.jar;\n~~~\n\n~~~sql\n--创建表：\ncreate table tb_json_test2 (\nid string,\nids array<string>,\ntotal_number int)\nROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'\nSTORED AS TEXTFILE;\n\n\n--加载数据\nload data local inpath '/export/datas/hivedata.json' into table tb_json_test2;\n~~~\n\n### 4.5 python类型\n\n```sql\n--创建Python脚本实现将原始表的时间转为对应的星期几\nvim /export/datas/weekday_mapper.py\n\nimport sys\nimport datetime\n\nfor line in sys.stdin:\n  line = line.strip()\n  userid, movieid, rating, unixtime = line.split('\\t')\n  weekday = datetime.datetime.fromtimestamp(float(unixtime)).isoweekday()\n  print '\\t'.join([userid, movieid, rating, str(weekday)])\n \n```\n\n```sql\n--加载python脚本并将数据写入新表\nadd FILE /export/datas/weekday_mapper.py;\nINSERT OVERWRITE TABLE u_data_new\nSELECT\n  TRANSFORM (userid, movieid, rating, unixtime)\n  USING 'python weekday_mapper.py'\n  AS (userid, movieid, rating, weekday)\nFROM u_data;\n```\n\n## 5.Hive函数\n\n### 5.1自定义函数\n\n#### 5.1.1 UDF\n\nUDF（User-Defined-Function）普通函数 一进一出\n\n1、自定义一个类，继承UDF,实现一个或重载多个evaluate方法，打包上传jar包到linux环境\n\n```xml\n       <!-- 指定该项目可以从哪些地方下载依赖包 -->\n\t\t\t<repository>\n\t\t\t\t<id>aliyun</id>\n\t\t\t\t<url>http://maven.aliyun.com/nexus/content/groups/public/</url>\n\t\t\t</repository>\n\t\t\t<repository>\n\t\t\t\t<id>cloudera</id>\n\t\t\t\t<url>https://repository.cloudera.com/artifactory/cloudera-repos/</url>\n\t\t\t</repository>\n\t\t\t<repository>\n\t\t\t\t<id>jboss</id>\n\t\t\t\t<url>http://repository.jboss.org/nexus/content/groups/public</url>\n\t\t\t</repository>\n\t\t</repositories>\n\t\t<!--指定字符编码-->\n\t\t<properties>\n\t\t\t<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n\t\t</properties>\n\t\t<!--指定依赖-->\n\t\t<dependencies>\n\t\t\t<dependency>\n\t\t\t\t<groupId>org.apache.hadoop</groupId>\n\t\t\t\t<artifactId>hadoop-common</artifactId>\n\t\t\t\t<version>2.6.0-cdh5.14.0</version>\n\t\t\t</dependency>\n\t\t\t<dependency>\n\t\t\t\t<groupId>org.apache.hadoop</groupId>\n\t\t\t\t<artifactId>hadoop-hdfs</artifactId>\n\t\t\t\t<version>2.6.0-cdh5.14.0</version>\n\t\t\t</dependency>\n\n\t\t\t<dependency>\n\t\t\t\t<groupId>org.apache.hadoop</groupId>\n\t\t\t\t<artifactId>hadoop-client</artifactId>\n\t\t\t\t<version>2.6.0-cdh5.14.0</version>\n\t\t\t</dependency>\n\t\t\t<dependency>\n\t\t\t\t<groupId>org.apache.hive</groupId>\n\t\t\t\t<artifactId>hive-exec</artifactId>\n\t\t\t\t<version>1.1.0-cdh5.14.0</version>\n\t\t\t</dependency>\n\t\t\t<dependency>\n\t\t\t\t<groupId>org.apache.hive</groupId>\n\t\t\t\t<artifactId>hive-common</artifactId>\n\t\t\t\t<version>1.1.0-cdh5.14.0</version>\n\t\t\t</dependency>\n\t\t\t<dependency>\n\t\t\t\t<groupId>org.apache.hive</groupId>\n\t\t\t\t<artifactId>hive-cli</artifactId>\n\t\t\t\t<version>1.1.0-cdh5.14.0</version>\n\t\t\t</dependency>\n\t\t\t<dependency>\n\t\t\t\t<groupId>org.apache.hive</groupId>\n\t\t\t\t<artifactId>hive-jdbc</artifactId>\n\t\t\t\t<version>1.1.0-cdh5.14.0</version>\n\t\t\t</dependency>\n\t\t</dependencies>\n```\n\n```java\nimport org.apache.hadoop.hive.ql.exec.UDF;\nimport org.apache.hadoop.io.Text;\npublic class UserUDF extends UDF{\n\tpublic Text evaluate(Text s){\n        if(s==null){\n            return null;\n        }\n        return new Text(s.toString().toLowerCase());\n    }\n}\n```\n\n\n\n2、将jar包添加到hive环境中\n\n```\nadd jar /export/datas/udf.jar;\n\n```\n\n3、在hive中创建一个函数\n\n```\ncreate temporary function fc_name as 'com.neusoft.data.UserUDF';\n\n```\n\n4、使用函数\n\n```\nselect fc_name(age),name from tb_name;\n\n```\n\n#### 5.1.2自定义udf,udtf,udaf开发\n\nUDF：\n1-开发udf程序：继承UDF类，实现一个或者多个evaluate方法\n2-打成jar包\n3-上传jar包到集群中，并添加到hive的环境变量中，在hive中执行\n\tadd jar /export/datas/udf.jar;\n4-创建临时函数：\n\tcreate temporary function  transDate as 'cn.itcast.bigdata.hive.TransDate';\n5-测试函数：\n\tselect transDate(\"18/Aug/2019:12:30:05\");\n6-删除临时函数\n\tDROP TEMPORARY FUNCTION transDate;\n\nUDTF\n1-开发udtf程序：继承UDTF类，重写process方法\n2-打成jar包\n3-上传jar包到集群中，并添加到hive的环境变量中，在hive中执行\n\tadd jar /export/datas/udtf.jar;\n4-创建临时函数：\n\tcreate temporary function  transMap as 'cn.itcast.bigdata.hive.UserUDTF';\n5-测试函数：\n\t第一种用法：直接调用\n\t\tselect transMap(\"uuid=root&url=www.taobao.com\") as (userCol1,userCol2);\n\t第二种用法：和侧视图一起使用\n\t\tselect deptno,deptname,a.* from tb_dept lateral view transMap(\"uuid=root&url=www.taobao.com\") a as col1,col2;\n\t注意：\n\t\t1-udtf只能直接select中使用\n\t\t2-不可以添加其他字段使用\n\t\t3-不可以嵌套调用\n\t\t4-不可以和group by/cluster by/distribute by/sort by一起使用\n\n\n\n\n\nUDAF\n1-开发udaf程序：继承UDAF类，重写iterate方法\n2-打成jar包\n3-上传jar包到集群中，并添加到hive的环境变量中，在hive中执行\n\tadd jar /export/datas/udaf.jar;\n4-创建临时函数：\n\tcreate temporary function  userMax as 'cn.itcast.bigdata.hive.UserUDAF';\n5-测试函数：\n\tselect userMax(deptno) from tb_dept;\n\n### 5.2UDAF\n\nUDAF（User-Defined Aggregation Function）聚合函数，多进一出\n\n#### 窗口函数：SUM、AVG、COUNT、MAX、MIN\n\n功能：用于实现数据分区后的聚合\n\t-》语法：fun_name(col1) over (partition by col2 order by col3)\n\t\t\t\t实现功能\tover  按照什么分区，分区内部按照什么排序\n\t-》示例：实现分区内的累加，其他的原理类似\n\n~~~\ncookie1,2018-04-10,1\ncookie1,2018-04-11,5\ncookie1,2018-04-12,7\ncookie1,2018-04-13,3\ncookie2,2018-04-13,3\ncookie2,2018-04-14,2\ncookie2,2018-04-15,4\ncookie1,2018-04-14,2\ncookie1,2018-04-15,4\ncookie1,2018-04-16,4\ncookie2,2018-04-10,1\ncookie2,2018-04-11,5\ncookie2,2018-04-12,7\n~~~\n\n~~~sql\n--创建表\ncreate database db_function;\nuse db_function;\ncreate table user_f1(\ncookieid string,\ndaystr string,\npv int\n) row format delimited fields terminated by ',';\n--加载数据\nload data local inpath '/export/datas/window.txt' into table user_f1;\nset hive.exec.mode.local.auto=true;\n--实现分区内起始到当前行的pv累加，默认窗口：取第一行开始到当前行的和\nselect \n  cookieid,\n  daystr,\n  pv,\n  sum(pv) over(partition by cookieid order by daystr) as pv1 \nfrom \n  user_f1;\n   \n--实现分区内所有pv的累加，不指定排序默认窗口：从第一行到最后一行\nselect \n  cookieid,\n  daystr,\n  pv,\n  sum(pv) over(partition by cookieid ) as pv2\nfrom \n  user_f1;\n  \n    \n--手动指定窗口的大小：分区\nrows between 起始位置 and 结束位置\nrows between unbounded preceding and current row\n\n--实现分区内起始到当前行的pv累加\nselect \n  cookieid,\n  daystr,\n  pv,\n  sum(pv) over(partition by cookieid order by daystr rows between unbounded preceding and current row) as pv3\nfrom \n  user_f1;\n--实现分区内指定前N行到当前行的pv累加\nselect \n  cookieid,\n  daystr,\n  pv,\n  sum(pv) over(partition by cookieid order by daystr rows between 3 preceding and current row) as pv4\nfrom \n  user_f1;\n--实现分区内指定前N行到后N行的pv累加 \nselect \n  cookieid,\n  daystr,\n  pv,\n  sum(pv) over(partition by cookieid order by daystr rows between 3 preceding and 1 following) as pv5\nfrom \n  user_f1;\n--实现分区内指定当前行到后N行的pv累加   \nselect \n  cookieid,\n  daystr,\n  pv,\n  sum(pv) over(partition by cookieid order by daystr rows between current row and unbounded following) as pv6\nfrom \n  user_f1;\n  \n  \n- preceding：往前\n- following：往后\n- current row：当前行\n- unbounded：起点\n- unbounded preceding 表示从前面的起点\n- unbounded following：表示到后面的终点\n~~~\n\n#### 窗口函数：LAG、LEAD、FIRST_VALUE、LAST_VALUE\n\nFIRST_VALUE\n\t功能：取每个分区内某列的第一个值\n\t语法：FIRST_VALUE(col) over (partition by col1 order by col2)\n\n~~~sql\n--取每个部门薪资最高的员工编号\nselect\n  empno,\n  ename,\n  salary,\n  deptno,\n  FIRST_VALUE(ename) over (partition by deptno order by salary desc) as first\nfrom\n  db_emp.tb_emp_normal;\n~~~\n\nLAST_VALUE\n\t功能：取每个分区内某列的最后一个值\n\t语法：LAST_VALUE() over (partition by col1 order by col2)\n\t注意：默认窗口是从第一条到当前条\n\n~~~sql\n--取每个部门薪资最低的员工编号\nselect\n  empno,\n  ename,\n  salary,\n  deptno,\n  LAST_VALUE(empno) over (partition by deptno order by salary desc) as last\nfrom\n  db_emp.tb_emp_normal; \n\nselect\n  empno,\n  ename,\n  salary,\n  deptno,\n  LAST_VALUE(empno) over (partition by deptno order by salary desc rows between unbounded preceding and unbounded following) as last\nfrom\n  db_emp.tb_emp_normal;\n~~~\n\nLAG\n\t功能：取每个分区内某列的前N个值\n\t语法：LAG(col,N,defaultValue) over (partition by col1 order by col2)\n\n~~~sql\nselect\n  empno,\n  ename,\n  salary,\n  deptno,\n  LAG(salary,1,0) over (partition by deptno order by salary) as deptno2\nfrom\n  db_emp.tb_emp_normal;\n~~~\n\nLEAD\n\t功能：向后取每个分区内某列的前N个值\n\t语法：LEAD(col,N,defaultValue) over (partition by col1 order by col2)\n\n~~~sql\nselect\n  empno,\n  ename,\n  salary,\n  deptno,\n  LEAD(salary,1,0) over (partition by deptno order by salary) as deptno2\nfrom\n  db_emp.tb_emp_normal;\n~~~\n\n\n\n\n\n#### 分析函数：ROW_NUMBER、RANK、DENSE_RANK、NTILE\n\n==ROW_NUMBER==\n\t功能：用于实现分区内记录编号\n\t语法：row_number() over (partition by col1 order by col2)\n\n~~~sql\n--统计每个部门薪资最高的前两名\nselect * from \n(select\n  empno,\n  ename,\n  salary,\n  deptno,\n  row_number() over (partition by deptno order by salary desc) as numb\nfrom\n  db_emp.tb_emp_normal) t where t.numb < 3;\n~~~\n\nRANK\n\t功能：用于实现分区内排名编号[会留空位]\n\t\t与row_number的区别：\n\t\t\trow_number：如果排序时数值相同，继续编号\n\t\t\trank：如果排序时数值相同，编号不变，但留下空位\n\t语法：rank() over (partition by col1 order by col2)\n\n~~~sql\n--统计每个部门薪资排名\nselect\n  empno,\n  ename,\n  salary,\n  deptno,\n  rank() over (partition by deptno order by salary desc) as numb\nfrom\n  db_emp.tb_emp_normal;\n~~~\n\nDENSE_RANK\n\t功能：用于实现分区内排名编号[不留空位]\n\t\t与rank的区别：\n\t\t\t==row_number：如果排序时数值相同，编号不变，并留下排名空位==\n\t\t\t==dense_rank：如果排序时数值相同，编号不变，不留空位==\n\t\t\t==rank：如果排序时数值相同，编号不变，但留下空位==\n\t语法：dense_rank() over (partition by col1 order by col2)\n\n~~~sql\n--统计每个部门薪资排名\nselect\n  empno,\n  ename,\n  salary,\n  deptno,\n  dense_rank() over (partition by deptno order by salary desc) as numb\nfrom\n  db_emp.tb_emp_normal;\n~~~\n\nNTILE\n\t功能：将每个分区内排序后的结果均分成N份【如果不能均分，优先分配编号小的】\n\t\t本质：将每个分区拆分成更小的分区\n\t语法：NTILE(N) over (partition by col1 order by col2)\n\n~~~sql\n--统计每个部门薪资排名，将每个部门的薪资分为两个部分，区分高薪和低薪\nselect\n  empno,\n  ename,\n  salary,\n  deptno,\n  NTILE(2) over (partition by deptno order by salary desc) as numb\nfrom\n  db_emp.tb_emp_normal;\n~~~\n\n\n\n### 5.3UDTF\n\nUDTF（User-Defined Table-Generating Functions）表生成函数 一进多出\n\n#### lateral view\n\n分类：视图\n功能：配合UDTF来使用,把某一行数据拆分成多行数据\n\t与UDTF直接使用的区别：\n\t\t==很多的UDTF不能将结果与源表进行关联，使用lateral view==\n\t\t可以将UDTF拆分的单个字段数据与原始表数据关联上==\n使用方式：\n\ttabel A lateral view UDTF(xxx) 视图名 as a,b,c\n\n~~~sql\n--准备数据:vim /export/datas/lateral.txt\n1\thttp://facebook.com/path/p1.php?query=1\n2\thttp://www.baidu.com/news/index.jsp?uuid=frank\n3\thttp://www.jd.com/index?source=baidu\n\n--创建表\ncreate table tb_url(\nid int,\nurl string\n) row format delimited fields terminated by '\\t';\n\n--加载数据\nload data local inpath '/export/datas/lateral.txt' into table tb_url;\n\n--使用UDTF解析\nSELECT parse_url_tuple(url, 'HOST') from tb_url;\n\n--使用UDTF+lateral view\nselect a.id,b.* from tb_url a lateral view parse_url_tuple(url, 'HOST') b as host;\n\n--对比\nSELECT id,parse_url_tuple(url, 'HOST') from tb_url;--失败，UDTF函数不能与字段连用\n~~~\n\n\n\n#### explode\n\n功能：函数可以将一个array或者map展开\n\texplode(array)：\n\t\t将array列表里的每个元素生成一行\n\texplode(map)：\n\t\t每一对元素作为一行，key为一列，value为一列\n使用方式：\n\t1-直接使用\n\t2-与lateral view连用\n\n~~~sql\n--实现wordcount【explode(array)】\n\tselect explode(split(word,\" \")) from wc1;\n--将兴趣爱好展开【explode(map)】\n\tselect explode(hobby) from complex_map;\n--与侧视图连用\n\tselect a.name,b.* from complex_map a lateral view explode(hobby) b as hobby,deep;\n~~~\n\n#### reflect\n\n功能：用于在Hive中直接调用Java中静态类的方法\n\t用法：reflect(classname,method,args)\n\n~~~sql\nselect reflect(\"java.util.UUID\", \"randomUUID\");\nselect reflect(\"java.lang.Math\",\"max\",20,30);\nselect reflect(\"org.apache.commons.lang.math.NumberUtils\",\"isNumber\",\"123\");\n~~~\n\n#### get_json_object\n\n处理json格式数据\n\n~~~sql\n--创建数据：vim /export/datas/hivedata.json\n{\"id\": 1701439105,\"ids\": [2154137571,3889177061],\"total_number\": 493}\n{\"id\": 1701439106,\"ids\": [2154137571,3889177061],\"total_number\": 494}\n--创建表：\ncreate table tb_json_test1 (\njson string\n);\n--加载数据\nload data local inpath '/export/datas/hivedata.json' into table tb_json_test1;\n~~~\n\n~~~sql\n--处理读取\nselect \n  get_json_object(t.json,'$.id'), \n  get_json_object(t.json,'$.total_number') \nfrom \n  tb_json_test1 t ;\n  \nselect \n  t2.* \nfrom \n  tb_json_test1 t1 \nlateral view \n  json_tuple(t1.json, 'id', 'total_number') t2 as c1,c2;\n~~~\n\n\n\n#### COALESCE\n\nCOALESCE(col,0)\n\n如果单列值为null，替换为默认值0\n\nconcat\n\n~~~sql\nconcat( 'liubei','xihuan','xiaoqiao' )\nliubeixihuanxiaoqiao\n~~~\n\n\n\n#### concat_ws&collect_set\n\nconcat_ws('|', collect_set(c_id))\n\n~~~sql\nid    name\n1001    A\n1001    B\n1001    C\n-------------------------\nid      name\n1001    A,B,C\n\nselect id,collect_list(name) from tb_ss group by id\n\n如果需要去重课可以使用collect_set,返回的是数组\nconcat_ws('|',collect_set(c_id))可以将数组内容按|拼接\n\n如果该列不是string，先用cast(col) as string 转换为string类型\nselect id,concat_ws(',',collect_list(cast (name as string))) from tb_ss group by id\n~~~\n\n\n\n#### instr\n\n查找字符串str中子字符串substr的位置， 如果查找失败将返回0，如果任一参数为Null将返回null，注意位置为从1开始的 \n\n~~~\ninstr(string str, string substr)\n~~~\n\n\n\n#### substring\n\n截取字符串\n\n~~~\nhello\nsubstring(col,1,2) -> 'he'\nsubstring(col,-2,2) -> 'lo'\n~~~\n\n\n\n### 5.4常见自带的hive函数\n\nshow functions;\n\n使用desc function  extended 函数名查看帮助\n\n•UNIX时间戳转日期函数: from_unixtime\n\n• 获取当前UNIX时间戳函数: unix_timestamp\n\n•日期转UNIX时间戳函数: unix_timestamp\n\n• 指定格式日期转UNIX时间戳函数: unix_timestamp\n\n•日期时间转日期函数: to_date\n\n•日期转年函数: year\n\n• 日期转月函数: month\n\n• 日期转天函数: day\n\n• 日期转小时函数: hour\n\n• 日期转分钟函数: minute\n\n• 日期转秒函数: second\n\n• 日期转周函数: weekofyear\n\n• 两个日期之间有多少个月:months_between('2020-01-10', u.birthday)(多用户得出用户年龄)\n\n• 日期比较函数: datediff\n\n• 日期增加函数: date_add\n\n• 日期减少函数: date_sub\n\n• 取当前天的下一周的周几：next_day(\"xxxx-xx-xx\",\"Mo\")\n\n• 取当前月的最后一天：last_day(\"xxxx-xx-xx\")\n\n•If函数: if\n\n•非空查找函数: COALESCE\n\n•条件判断函数：CASE\n\n•字符串长度函数：length\n\n•字符串反转函数：reverse\n\n•字符串连接函数：concat\n\n• 带分隔符字符串连接函数：concat_ws\n\n• 字符串截取函数：substr,substring\n\n•正则表达式替换函数：regexp_replace\n\n•正则表达式解析函数：regexp_extract\n\n•URL解析函数：parse_url\n\n​\t\t\t\t\t\t\tparse_url_tuple\n\n•json解析函数：get_json_object\n\n​\t\t\t\t\t\t\tjson_tuple\n\n•分割字符串函数: split\n\n•集合查找函数: find_in_set\n\n### 5.5关于union和union all\n\n总结分析\n\n1. 子查询相当于表名，使用 from 关键字需要指定真实表名或表别名。\n\n2. hive 不支持union ，只支持union all \n\n3. 子查询中使用union all 时，在子查询里不能使用count、sum 等 聚合函数 \n\n4. 两表直接进行union all 可以使用count、sum 等聚合函数 \n\n5. 两张表进行union all 取相同的字段名称，可正常输出指定数据内容，且结果为两张表的结果集\n\n## 6.hive语法要点\n\n~~~sql\n(1).Hive不支持join的非等值连接,不支持or\n分别举例如下及实现解决办法。\n  不支持不等值连接\n       错误:select * from a inner join b on a.id<>b.id\n       替代方法:select * from a inner join b on a.id=b.id and a.id is null;\n 不支持or\n       错误:select * from a inner join b on a.id=b.id or a.name=b.name\n       替代方法:select * from a inner join b on a.id=b.id\n                union all\n                select * from a inner join b on a.name=b.name\n  两个sql union all的字段名必须一样或者列别名要一样。\n        \n(2).分号字符:不能智能识别concat(‘;’,key)，只会将‘；’当做SQL结束符号。\n    •分号是SQL语句结束标记，在HiveQL中也是，但是在HiveQL中，对分号的识别没有那么智慧，例如：\n        •select concat(key,concat(';',key)) from dual;\n    •但HiveQL在解析语句时提示：\n        FAILED: Parse Error: line 0:-1 mismatched input '<EOF>' expecting ) in function specification\n    •解决的办法是，使用分号的八进制的ASCII码进行转义，那么上述语句应写成：\n        •select concat(key,concat('\\073',key)) from dual;\n\n(3).不支持INSERT INTO 表 Values（）, UPDATE, DELETE等操作.这样的话，就不要很复杂的锁机制来读写数据。\n    INSERT INTO syntax is only available starting in version 0.8。INSERT INTO就是在表或分区中追加数据。\n\n(4).HiveQL中String类型的字段若是空(empty)字符串, 即长度为0, 那么对它进行IS NULL的判断结果是False，使用left join可以进行筛选行。\n\n(5).不支持 ‘< dt <’这种格式的范围查找，可以用dt in(”,”)或者between替代。\n\n(6).Hive不支持将数据插入现有的表或分区中，仅支持覆盖重写整个表，示例如下：\n    INSERT OVERWRITE TABLE t1 SELECT * FROM t2;\n    \n(7).group by的字段,必须是select后面的字段，select后面的字段不能比group by的字段多.\n    如果select后面有聚合函数,则该select语句中必须有group by语句\n    而且group by后面不能使用别名\n    \n(8).hive的0.13版之前select , where 及 having 之后不能跟子查询语句(一般使用left join、right join 或者inner join替代)\n\n(9).先join(及inner join) 然后left join或right join\n\n(10).hive不支持group_concat方法,可用 concat_ws('|', collect_set(str)) 实现\n\n(11).not in 后不能包含查询语句,可用left join tmp on tableName.id = tmp.id where tmp.id is null 替代实现\n\n1.case when ... then ... else ... end\n\n2.length(string)\n\n3.cast(string as bigint)\n\n4.rand()       返回一个0到1范围内的随机数\n\n5.ceiling(double)    向上取整\n\n6.substr(string A, int start, int len)\n\n7.collect_set(col)函数只接受基本数据类型，它的主要作用是将某字段的值进行去重汇总，产生array类型字段\n\n8.concat()函数\n    1、功能：将多个字符串连接成一个字符串。\n    2、语法：concat(str1, str2,...)\n    返回结果为连接参数产生的字符串，如果有任何一个参数为null，则返回值为null。\n\n    9.concat_ws()函数\n    1、功能：和concat()一样，将多个字符串连接成一个字符串，但是可以一次性指定分隔符～（concat_ws就是concat with separator）\n    2、语法：concat_ws(separator, str1, str2, ...)\n    说明：第一个参数指定分隔符。需要注意的是分隔符不能为null，如果为null，则返回结果为null。\n\n    10.nvl(expr1, expr2)：空值转换函数  nvl(x,y)    Returns y if x is null else return x\n\n11.if(boolean testCondition, T valueTrue, T valueFalse)\n\n12.row_number()over()分组排序功能,over()里头的分组以及排序的执行晚于 where group by  order by 的执行。\n\n13.获取年、月、日、小时、分钟、秒、当年第几周\n    select \n        year('2018-02-27 10:00:00')       as year\n        ,month('2018-02-27 10:00:00')      as month\n        ,day('2018-02-27 10:00:00')        as day\n        ,hour('2018-02-27 10:00:00')       as hour\n        ,minute('2018-02-27 10:00:00')     as minute\n        ,second('2018-02-27 10:00:00')     as second\n        ,weekofyear('2018-02-27 10:00:00') as weekofyear\n  获取当前时间:\n        1).current_timestamp\n        2).unix_timestamp()\n        3).from_unixtime(unix_timestamp())\n        4).CURRENT_DATE\n~~~\n\n\n\n## 7.hive优化\n\n\n\n### 7.1大表join大表优化\n\n```sql\n如果Hive优化实战2中mapjoin中小表dim_seller很大呢？比如超过了1GB大小？这种就是大表join大表的问题。首先引入一个具体的问题场景，然后基于此介绍各自优化方案。\n\n1、问题场景\n问题场景如下：\n\nA表为一个汇总表，汇总的是卖家买家最近N天交易汇总信息，即对于每个卖家最近N天，其每个买家共成交了多少单，总金额是多少，假设N取90天，汇总值仅取成交单数。\n\nA表的字段有：buyer_id、seller_id、pay_cnt_90day。\n\nB表为卖家基本信息表，其字段有seller_id、sale_level，其中sale_levels是卖家的一个分层评级信息，比如吧卖家分为6个级别：S0、S1、S2、S3、S4和S5。\n\n要获得的结果是每个买家在各个级别的卖家的成交比例信息，比如：\n\n某买家：S0:10%；S1:20%；S2:20%；S3:10%；S4:20%；S5:10%。\n\n正如mapjoin中的例子一样，第一反应是直接join两表并统计：\n\nselect\n\nm.buyer_id,\n\nsum(pay_cnt_90day)  as pay_cnt_90day,\n\nsum(case when m.sale_level = 0  then pay_cnt_90day  end)  as pay_cnt_90day_s0,\n\nsum(case when m.sale_level = 1  then pay_cnt_90day  end)  as pay_cnt_90day_s1,\n\nsum(case when m.sale_level = 2  then pay_cnt_90day  end)  as pay_cnt_90day_s2,\n\nsum(case when m.sale_level = 3  then pay_cnt_90day  end)  as pay_cnt_90day_s3,\n\nsum(case when m.sale_level = 4  then pay_cnt_90day  end)  as pay_cnt_90day_s4,\n\nsum(case when m.sale_level = 5  then pay_cnt_90day  end)  as pay_cnt_90day_s5\n\nfrom (\n\nselect  a.buer_id,  a.seller_id,  b.sale_level, a.pay_cnt_90day\n\nfrom (  select buyer_id,  seller_id,  pay_cnt_90day   from table_A)  a\n\njoin\n\n(select seller_id,  sale_level  from table_B)  b\n\non  a.seller_id  = b.seller_id\n\n)  m\n\ngroup by m.buyer_id\n\n但是此SQL会引起数据倾斜，原因在于卖家的二八准则，某些卖家90天内会有几百万甚至上千万的买家，但是大部分的卖家90天内买家的数目并不多，join table_A和table_B的时候，\n\nODPS会按照seller_id进行分发，table_A的大卖家引起了数据倾斜。\n\n但是数据本身无法用mapjoin table_B解决，因为卖家超过千万条，文件大小有几个GB，超过了1GB的限制。\n\n优化方案1：转为mapjoin\n一个很正常的想法是，尽管B表无法直接mapjoin, 但是是否可以间接mapjoin它呢？\n\n实际上此思路有两种途径：限制行和限制列。\n\n限制行的思路是不需要join B全表，而只需要join其在A表中存在的，对于本问题场景，就是过滤掉90天内没有成交的卖家。\n\n限制列的思路是只取需要的字段。\n\n加上如上的限制后，检查过滤后的B表是否满足了Hive  mapjoin的条件，如果能满足，那么添加过滤条件生成一个临时B表，然后mapjoin该表即可。采用此思路的语句如下：\n\n\n\nselect\n\nm.buyer_id,\n\nsum(pay_cnt_90day)  as pay_cnt_90day,\n\nsum(case when m.sale_level = 0  then pay_cnt_90day  end)  as pay_cnt_90day_s0,\n\nsum(case when m.sale_level = 1  then pay_cnt_90day  end)  as pay_cnt_90day_s1,\n\nsum(case when m.sale_level = 2  then pay_cnt_90day  end)  as pay_cnt_90day_s2,\n\nsum(case when m.sale_level = 3  then pay_cnt_90day  end)  as pay_cnt_90day_s3,\n\nsum(case when m.sale_level = 4  then pay_cnt_90day  end)  as pay_cnt_90day_s4,\n\nsum(case when m.sale_level = 5  then pay_cnt_90day  end)  as pay_cnt_90day_s5\n\nfrom ( \n\nselect  /*+mapjoin(b)*/\n\na.buer_id,  a.seller_id,  b.sale_level, a.pay_cnt_90day\n\nfrom (  select buyer_id,  seller_id,  pay_cnt_90day   from table_A)  a\n\njoin\n\n(\n\n    select seller_id,  sale_level  from table_B b0\n\n    join \n\n    (select seller_id from table_A group by seller_id) a0\n\n    on b0.seller_id = a0.selller_id\n\n)  b\n\non  a.seller_id  = b.seller_id\n\n)  m\n\ngroup by m.buyer_id\n\n此方案在一些情况可以起作用，但是很多时候还是无法解决上述问题，因为大部分卖家尽管90天内买家不多，但还是有一些的，过滤后的B表仍然很多。\n\n\n优化方案2：join时用case when语句\n此种解决方案应用场景是：倾斜的值是明确的而且数量很少，比如null值引起的倾斜。其核心是将这些引起倾斜的值随机分发到Reduce,其主要核心逻辑在于join时对这些特殊值concat随机数，\n\n从而达到随机分发的目的。此方案的核心逻辑如下：\n\nselect a.user_id, a.order_id, b.user_id\n\nfrom table_a a join table_b b\n\non (case when a.user_is is null then concat('hive', rand()) else a.user_id end) = b.user_id\n\nHive 已对此进行了优化，只需要设置参数skewinfo和skewjoin参数，不修改SQL代码，例如，由于table_B的值“0” 和“1”引起了倾斜，值需要做如下设置：\n\nset hive.optimize.skewinfo=table_B:(selleer_id) [ ( \"0\") (\"1\") ) ] \n\nset hive.optimize.skewjoin = true;\n\n但是方案2因为无法解决本问题场景的倾斜问题，因为倾斜的卖家大量存在而且动态变化。\n\n\n优化方案3：倍数B表，再取模join\n1、通用方案\n此方案的思路是建立一个numbers表，其值只有一列int 行，比如从1到10（具体值可根据倾斜程度确定），然后放大B表10倍，再取模join。代码如下：\n\n\n\nselect\n\nm.buyer_id,\n\nsum(pay_cnt_90day)  as pay_cnt_90day,\n\nsum(case when m.sale_level = 0  then pay_cnt_90day  end)  as pay_cnt_90day_s0,\n\nsum(case when m.sale_level = 1  then pay_cnt_90day  end)  as pay_cnt_90day_s1,\n\nsum(case when m.sale_level = 2  then pay_cnt_90day  end)  as pay_cnt_90day_s2,\n\nsum(case when m.sale_level = 3  then pay_cnt_90day  end)  as pay_cnt_90day_s3,\n\nsum(case when m.sale_level = 4  then pay_cnt_90day  end)  as pay_cnt_90day_s4,\n\nsum(case when m.sale_level = 5  then pay_cnt_90day  end)  as pay_cnt_90day_s5\n\nfrom (\n\nselect  a.buer_id,  a.seller_id,  b.sale_level, a.pay_cnt_90day\n\nfrom (  select buyer_id,  seller_id,  pay_cnt_90day   from table_A)  a\n\njoin\n\n(\n\nselect  /*+mapjoin(members)*/\n\nseller_id,  sale_level ,member\n\nfrom table_B\n\njoin members\n\n)  b\n\non  a.seller_id  = b.seller_id\n\nand mod(a.pay_cnt_90day,10)+1 = b.number \n\n)  m\n\ngroup by m.buyer_id\n\n此思路的核心在于，既然按照seller_id分发会倾斜，那么再人工增加一列进行分发，这样之前倾斜的值的倾斜程度会减少到原来的1/10，可以通过配置numbers表改放大倍数来降低倾斜程度，\n\n但这样做的一个弊端是B表也会膨胀N倍。\n\n2、专用方案\n通用方案的思路把B表的每条数据都放大了相同的倍数，实际上这是不需要的，只需要把大卖家放大倍数即可：需要首先知道大卖家的名单，即先建立一个临时表动态存放每天最新的大卖家（\n\n比如dim_big_seller）,同时此表的大卖家要膨胀预先设定的倍数（1000倍）。\n\n在A表和B表分别新建一个join列，其逻辑为：如果是大卖家，那么concat一个随机分配正整数（0到预定义的倍数之间，本例为0~1000）；如果不是，保持不变。具体代码如下：\n\n\n\nselect\n\nm.buyer_id,\n\nsum(pay_cnt_90day)  as pay_cnt_90day,\n\nsum(case when m.sale_level = 0  then pay_cnt_90day  end)  as pay_cnt_90day_s0,\n\nsum(case when m.sale_level = 1  then pay_cnt_90day  end)  as pay_cnt_90day_s1,\n\nsum(case when m.sale_level = 2  then pay_cnt_90day  end)  as pay_cnt_90day_s2,\n\nsum(case when m.sale_level = 3  then pay_cnt_90day  end)  as pay_cnt_90day_s3,\n\nsum(case when m.sale_level = 4  then pay_cnt_90day  end)  as pay_cnt_90day_s4,\n\nsum(case when m.sale_level = 5  then pay_cnt_90day  end)  as pay_cnt_90day_s5\n\nfrom (\n\nselect  a.buer_id,  a.seller_id,  b.sale_level, a.pay_cnt_90day\n\nfrom (  \n\nselect  /*+mapjoin(big)*/\n\nbuyer_id,  seller_id,  pay_cnt_90day,\n\nif(big.seller_id is not null, concat(  table_A.seller_id,  'rnd',  cast(  rand() * 1000 as bigint ), table_A.seller_id)  as seller_id_joinkey\n\nfrom table_A\n\nleft outer join\n\n--big表seller_id有重复，请注意一定要group by 后再join,保证table_A的行数保持不变\n\n（select seller_id  from dim_big_seller  group by seller_id）big\n\non table_A.seller_id = big.seller_id\n\n)  a\n\njoin\n\n(\n\nselect  /*+mapjoin(big)*/\n\nseller_id,  sale_level ,\n\n--big表的seller_id_joinkey生成逻辑和上面的生成逻辑一样\n\ncoalesce(seller_id_joinkey,table_B.seller_id) as seller_id_joinkey\n\nfrom table_B\n\nleft out join\n\n--table_B表join大卖家表后大卖家行数扩大1000倍，其它卖家行数保持不变\n\n(select seller_id, seller_id_joinkey from dim_big_seller) big\n\non table_B.seller_id= big.seller_id\n\n)  b\n\non  a.seller_id_joinkey= b.seller_id_joinkey\n\nand mod(a.pay_cnt_90day,10)+1 = b.number \n\n)  m\n\ngroup by m.buyer_id\n\n相比通用方案，专用方案的运行效率明细好了许多，因为只是将B表中大卖家的行数放大了1000倍，其它卖家的行数保持不变，但同时代码复杂了很多，而且必须首先建立大数据表。\n\n方案4：动态一分为二\n实际上方案2和3都用了一分为二的思想，但是都不彻底，对于mapjoin不能解决的问题，终极解决方案是动态一分为二，即对倾斜的键值和不倾斜的键值分开处理，不倾斜的正常join即可，倾斜的把他们找出来做mapjoin，最后union all其结果即可。\n\n但是此种解决方案比较麻烦，代码复杂而且需要一个临时表存放倾斜的键值。代码如下：\n\n--由于数据倾斜，先找出90天买家超过10000的卖家\n\ninsert overwrite table  temp_table_B\n\nselect \n\nm.seller_id,  n.sale_level\n\nfrom (\n\nselect   seller_id\n\nfrom (\n\nselect seller_id,count(buyer_id) as byr_cnt\n\nfrom table_A\n\ngroup by seller_id\n\n) a\n\nwhere a.byr_cnt >10000\n\n) m\n\nleft join \n\n(\n\nselect seller_id, sale_level  from table_B\n\n) n\n\non m.seller_id = n.seller_id;\n\n\n\n--对于90天买家超过10000的卖家直接mapjoin,对其它卖家直接正常join即可。\n\n\n\nselect\n\nm.buyer_id,\n\nsum(pay_cnt_90day)  as pay_cnt_90day,\n\nsum(case when m.sale_level = 0  then pay_cnt_90day  end)  as pay_cnt_90day_s0,\n\nsum(case when m.sale_level = 1  then pay_cnt_90day  end)  as pay_cnt_90day_s1,\n\nsum(case when m.sale_level = 2  then pay_cnt_90day  end)  as pay_cnt_90day_s2,\n\nsum(case when m.sale_level = 3  then pay_cnt_90day  end)  as pay_cnt_90day_s3,\n\nsum(case when m.sale_level = 4  then pay_cnt_90day  end)  as pay_cnt_90day_s4,\n\nsum(case when m.sale_level = 5  then pay_cnt_90day  end)  as pay_cnt_90day_s5\n\nfrom (\n\nselect  a.buer_id,  a.seller_id,  b.sale_level, a.pay_cnt_90day\n\nfrom (  select buyer_id,  seller_id,  pay_cnt_90day   from table_A)  a\n\njoin\n\n(\n\nselect seller_id,  a.sale_level \n\nfrom table_A  a\n\nleft join temp_table_B b\n\non a.seller_id = b.seller_id\n\nwhere b.seller_id is not null\n\n)  b\n\non  a.seller_id  = b.seller_id\n\nunion all\n\n\n\nselect  /*+mapjoin(b)*/\n\na.buer_id,  a.seller_id,  b.sale_level, a.pay_cnt_90day\n\nfrom ( \n\nselect buyer_id,  seller_id,  pay_cnt_90day   \n\nfrom table_A\n\n)  a\n\njoin\n\n(\n\nselect seller_id,  sale_level  from table_B \n\n)  b\n\non  a.seller_id  = b.seller_id\n\n)  m  group by m.buyer_id\n\n) m\n\ngroup by m.buyer_id\n\n\n\n总结：方案1、2以及方案3中的同用方案不能保证解决大表join大表问题，因为它们都存在种种不同的限制和特定使用场景。\n\n而方案3的专用方案和方案4是推荐的优化方案，但是它们都需要新建一个临时表来存储每日动态变化的大卖家。相对方案4来说，方案3的专用方案不需要对代码框架进行修改，但是B表会被放大，所以一定要是是维度表，不然统计结果会是错误的。方案4最通用，自由度最高，但是对代码的更改也最大，甚至修改更难代码框架，可以作为终极方案使用。\n```","slug":"hive知识整理","published":1,"updated":"2021-01-10T12:22:26.145Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cklgjm1vx000rikvuc3owcvpe","content":"<h1><span id=\"hive\">Hive</span></h1><!-- toc -->\n\n<ul>\n<li><a href=\"#%E6%A6%82%E8%BF%B0\">概述</a></li>\n<li><a href=\"#1ddl%E6%93%8D%E4%BD%9C\">1.DDL操作</a><ul>\n<li><a href=\"#11-%E5%88%9B%E5%BB%BA%E8%A1%A8\">1.1 创建表</a></li>\n<li><a href=\"#12-%E4%BF%AE%E6%94%B9%E8%A1%A8\">1.2 修改表</a></li>\n</ul>\n</li>\n<li><a href=\"#2dml%E6%93%8D%E4%BD%9C\">2.DML操作</a><ul>\n<li><a href=\"#21-load\">2.1 load</a></li>\n<li><a href=\"#22-insert\">2.2 insert</a></li>\n<li><a href=\"#23-join\">2.3 join</a></li>\n<li><a href=\"#24-%E6%8E%92%E5%BA%8F\">2.4 排序</a></li>\n</ul>\n</li>\n<li><a href=\"#3hive%E5%8F%82%E6%95%B0%E9%85%8D%E7%BD%AE\">3.hive参数配置</a><ul>\n<li><a href=\"#31-hive-shell%E5%91%BD%E4%BB%A4%E8%A1%8C\">3.1 Hive shell命令行</a></li>\n<li><a href=\"#32-hive-%E5%8F%82%E6%95%B0%E9%85%8D%E7%BD%AE%E6%96%B9%E5%BC%8F\">3.2 Hive 参数配置方式</a></li>\n</ul>\n</li>\n<li><a href=\"#4hive%E4%B8%AD%E5%A4%8D%E6%9D%82%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E7%9A%84%E4%BD%BF%E7%94%A8\">4.hive中复杂数据类型的使用</a><ul>\n<li><a href=\"#41-%E6%95%B0%E7%BB%84%E7%B1%BB%E5%9E%8B\">4.1 数组类型</a></li>\n<li><a href=\"#42-map%E7%B1%BB%E5%9E%8B\">4.2 map类型</a></li>\n<li><a href=\"#43-%E6%AD%A3%E5%88%99%E7%B1%BB%E5%9E%8B\">4.3 正则类型</a></li>\n<li><a href=\"#44-json%E7%B1%BB%E5%9E%8B\">4.4 json类型</a></li>\n<li><a href=\"#45-python%E7%B1%BB%E5%9E%8B\">4.5 python类型</a></li>\n</ul>\n</li>\n<li><a href=\"#5hive%E5%87%BD%E6%95%B0\">5.Hive函数</a><ul>\n<li><a href=\"#51%E8%87%AA%E5%AE%9A%E4%B9%89%E5%87%BD%E6%95%B0\">5.1自定义函数</a></li>\n<li><a href=\"#52udaf\">5.2UDAF</a></li>\n<li><a href=\"#53udtf\">5.3UDTF</a></li>\n<li><a href=\"#54%E5%B8%B8%E8%A7%81%E8%87%AA%E5%B8%A6%E7%9A%84hive%E5%87%BD%E6%95%B0\">5.4常见自带的hive函数</a></li>\n<li><a href=\"#55%E5%85%B3%E4%BA%8Eunion%E5%92%8Cunion-all\">5.5关于union和union all</a></li>\n</ul>\n</li>\n<li><a href=\"#6hive%E8%AF%AD%E6%B3%95%E8%A6%81%E7%82%B9\">6.hive语法要点</a></li>\n<li><a href=\"#7hive%E4%BC%98%E5%8C%96\">7.hive优化</a><ul>\n<li><a href=\"#71%E5%A4%A7%E8%A1%A8join%E5%A4%A7%E8%A1%A8%E4%BC%98%E5%8C%96\">7.1大表join大表优化</a></li>\n</ul>\n</li>\n</ul>\n<!-- tocstop -->\n\n<p>[TOC]</p>\n<h2><span id=\"概述\">概述</span></h2><p>Hive是基于Hadoop的一个数据仓库工具，可以将结构化的数据文件映射为一张数据库表，并提供类SQL查询功能。</p>\n<p>本质是将SQL转换为MapReduce程序</p>\n<p>主要用途：用来做离线数据分析，比直接用MapReduce开发效率更高</p>\n<a id=\"more\"></a>\n\n<p><img src=\"/2020/12/29/hive%E7%9F%A5%E8%AF%86%E6%95%B4%E7%90%86/timg-1568381886490.jpg\" alt=\"img\"> </p>\n<p>数据仓库和数据库的区别</p>\n<ul>\n<li><p>数据库是面向事务的设计，数据仓库是面向主题设计的。</p>\n</li>\n<li><p>数据库一般存储业务数据，数据仓库存储的一般是历史数据。</p>\n</li>\n<li><p>数据库设计是尽量避免冗余，一般针对某一业务应用进行设计，比如一张简单的User表，记录用户名、密码等简单数据即可，符合业务应用，但是不符合分析。数据仓库在设计是有意引入冗余，依照分析需求，分析维度、分析指标进行设计。</p>\n</li>\n<li><p>数据库是为捕获数据而设计，数据仓库是为分析数据而设计。</p>\n</li>\n</ul>\n<p>数据仓库分层架构</p>\n<p>==源数据层（ODS）==：此层数据无任何更改，直接沿用外围系统数据结构和数据，不对外开放；为临时存储层，是接口数据的临时存储区域，为后一步的数据处理做准备。</p>\n<p>==数据仓库层（DW）==：也称为细节层，DW层的数据应该是一致的、准确的、干净的数据，即对源系统数据进行了清洗（去除了杂质）后的数据。</p>\n<p>==数据应用层（DA或APP）==：前端应用直接读取的数据源；根据报表、专题分析需求而计算生成的数据。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">先启动metastore服务再启动hiveserver2服务</span><br><span class=\"line\">/<span class=\"built_in\">export</span>/servers/hive/bin/beeline</span><br><span class=\"line\">beeline&gt; ! connect jdbc:hive2://hdp3:10000</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n<p>hive SQL语句中 select from where group by having order by 的==执行顺序==？</p>\n<p>执行顺序：</p>\n<p>from … where … select … group by … having … order by …</p>\n<p>其实总结hive的执行顺序也是总结mapreduce的执行顺序：</p>\n<p>MR程序的执行顺序：</p>\n<p>map阶段：</p>\n<p> 1.执行from加载，进行表的查找与加载</p>\n<p>2.执行where过滤，进行条件过滤与筛选</p>\n<p>3.执行select查询：进行输出项的筛选</p>\n<p>4.执行group by分组：描述了分组后需要计算的函数</p>\n<p>5.map端文件合并：map端本地溢出写文件的合并操作，每个map最终形成一个临时文件。 然后按列映射到对应的reduceReduce阶段：</p>\n<p>Reduce阶段：</p>\n<p>1.group by：对map端发送过来的数据进行分组并进行计算。</p>\n<p>2.select：最后过滤列用于输出结果</p>\n<p>3.limit排序后进行结果输出到HDFS文件</p>\n<p>所以通过上面的例子我们可以看到，在进行select之后我们会形成一张表，在这张表当中做分组排序这些操作。</p>\n<h2><span id=\"1ddl操作\">1.DDL操作</span></h2><p>设置hive程序本地运行模式：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">set</span> hive.exec.mode.local.auto=<span class=\"literal\">true</span>;</span><br></pre></td></tr></table></figure>\n<h3><span id=\"11-创建表\">1.1  创建表</span></h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create</span> [<span class=\"keyword\">external</span>] <span class=\"keyword\">table</span> [<span class=\"keyword\">if</span> <span class=\"keyword\">not</span> <span class=\"keyword\">exists</span>] tb_name (...) [<span class=\"keyword\">like</span>] existing_table;</span><br><span class=\"line\">[row format delimited fields terminated by char</span><br><span class=\"line\">\t\t\t\t\tcollection items terminated by char</span><br><span class=\"line\">\t\t\t\t\tmap keys terminated by char</span><br><span class=\"line\">\t\t\t\t\tlines terminated by char</span><br><span class=\"line\">\t\t\t\t\t...]</span><br><span class=\"line\">[partitioned by ]</span><br><span class=\"line\">[stored as file_format]</span><br><span class=\"line\">[CLUSTERED BY (col_name, col_name, ...) [SORTED BY (col_name [ASC|DESC], ...)] INTO num_buckets BUCKETS]</span><br><span class=\"line\">[LOCATION hdfs_path]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>1.create table 创建一个指定名字的表，如果表以存在可以用[if not exists]跳过异常</p>\n<p>2.[external] 关键字可以让给用户创建一个外部表。</p>\n<p>创建内部表时会将数据移动到数据仓库指向的路径，删除表时元数据和数据都被删除。</p>\n<p>外部表仅记录数据所在的路径，删除时只删除元数据，不删除数据。</p>\n<p>3.[like] 允许用户复制现有的表结构，但是不复制数据</p>\n<p>4.[row format delimited] 指定表列与列的分隔符。hive建表的时候默认分隔符是‘\\001’,</p>\n<p>5.[partitioned by] 分区命令。每个表可以有多个分区，每个分区以文件夹的形式单独存在表文件夹目录下。分区是以字段的形式在表结构中存在。</p>\n<p>6.[stored as sequencedile|textfile|refile]   如果文件数据是纯文本，可以使用textfile,如果数据需要压缩，使用sequencedile。</p>\n<p>textfile是默认的文件格式，使用delimited子句来读取分隔文件</p>\n<p>7.[clustered by (col_name,col_name,….)]   分桶</p>\n<p>8.[LOCATION hdfs_path]  指定这张表所在的hdfs上的目录，如果不指定，默认在数据库的目录下面</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span> tb_name <span class=\"keyword\">as</span> <span class=\"keyword\">select</span> <span class=\"keyword\">statement</span>;将sql语句的结果进行保存</span><br><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span> tb_new <span class=\"keyword\">like</span> tb_old;创建一张结构与tb_old一样的表</span><br><span class=\"line\"><span class=\"keyword\">drop</span> <span class=\"keyword\">table</span> [<span class=\"keyword\">if</span> <span class=\"keyword\">exists</span>] tb_name;删除表</span><br><span class=\"line\"><span class=\"keyword\">truncate</span> <span class=\"keyword\">table</span> tb_name;清空表</span><br><span class=\"line\"><span class=\"keyword\">show</span> functions;查看所有的函数</span><br><span class=\"line\"><span class=\"keyword\">show</span> <span class=\"keyword\">partitions</span> tb_name;查看所有分区</span><br><span class=\"line\">desc formatted tb_name；查看表信息</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4><span id=\"111-管理表\">1.1.1 管理表</span></h4><p>最普通的表，默认表的类型就是管理表</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span> tb_name();</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4><span id=\"112-外部表\">1.1.2 外部表</span></h4><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">external</span> <span class=\"keyword\">table</span> tb_name();</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>特点：在删除时，不会删除表数据</p>\n<p>应用场景：1-如果需要多张表共用同一份数据，都建立外部表，使用完以后，删除表互不影响。2-如果数据需要进行额外的使用：存档等等</p>\n<h4><span id=\"113-分区表\">1.1.3 分区表</span></h4><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">external</span> <span class=\"keyword\">table</span> tb_part(</span><br><span class=\"line\"><span class=\"keyword\">id</span> <span class=\"keyword\">string</span></span><br><span class=\"line\"> <span class=\"keyword\">name</span> <span class=\"keyword\">string</span></span><br><span class=\"line\">)</span><br><span class=\"line\">partitioned <span class=\"keyword\">by</span> (<span class=\"keyword\">day</span> <span class=\"keyword\">string</span>)</span><br><span class=\"line\"><span class=\"keyword\">row</span> <span class=\"keyword\">format</span> <span class=\"keyword\">delimited</span> <span class=\"keyword\">fields</span> <span class=\"keyword\">terminated</span> <span class=\"keyword\">by</span> <span class=\"string\">&#x27;\\t&#x27;</span>;</span><br><span class=\"line\"><span class=\"comment\">--创建分区表，指定分区字段day</span></span><br><span class=\"line\"><span class=\"keyword\">load</span> <span class=\"keyword\">data</span> <span class=\"keyword\">local</span> inpath <span class=\"string\">&#x27;/export/datas/20180718&#x27;</span> <span class=\"keyword\">into</span> <span class=\"keyword\">table</span> tb_name <span class=\"keyword\">partition</span>(<span class=\"keyword\">day</span>=<span class=\"string\">&#x27;18&#x27;</span>);</span><br><span class=\"line\"><span class=\"comment\">--加载文件数据，创建分区字段day=18</span></span><br><span class=\"line\"><span class=\"keyword\">load</span> <span class=\"keyword\">data</span> <span class=\"keyword\">local</span> inpath <span class=\"string\">&#x27;/export/datas/20180719&#x27;</span> <span class=\"keyword\">into</span> <span class=\"keyword\">table</span> tb_name <span class=\"keyword\">partition</span>(<span class=\"keyword\">day</span>=<span class=\"string\">&#x27;19&#x27;</span>);</span><br><span class=\"line\"><span class=\"comment\">--加载文件数据，创建分区字段day=19</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> tb_part <span class=\"keyword\">where</span> <span class=\"keyword\">day</span> = <span class=\"number\">19</span>;</span><br><span class=\"line\"><span class=\"comment\">--过滤条件需是分区的字段，如果不是分区字段就会从整个分区目录中查找</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>手动分区：加载数据时，手动指定文件的分区</p>\n<p>分区字段为查询的语句的最后一个字段 </p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">insert</span> overwrite <span class=\"keyword\">table</span> tb_emp_part <span class=\"keyword\">partition</span> (deptno)</span><br><span class=\"line\">  <span class=\"keyword\">select</span> empno</span><br><span class=\"line\">  ename,</span><br><span class=\"line\">  job,</span><br><span class=\"line\">  manager,</span><br><span class=\"line\">  inday,</span><br><span class=\"line\">  salary,</span><br><span class=\"line\">  jiangjin,</span><br><span class=\"line\">  deptno</span><br><span class=\"line\"><span class=\"keyword\">from</span> tb_emp_normal;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>应用场景：将普通表的数据转换成一个分区表</p>\n<pre><code>       原始表【tb1】中的数据没有做分区\n         希望将原始表中的数据按照分区存放到新的分区表[tb2]</code></pre>\n</li>\n<li><p>自动分区：默认按照原始表的最后一列进行分区</p>\n</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">set</span> hive.exec.dynamic.partition.mode=nonstrict;</span><br><span class=\"line\">配置自动分区</span><br><span class=\"line\"><span class=\"keyword\">show</span> <span class=\"keyword\">partitions</span> tb_name;</span><br><span class=\"line\">查看当前所有分区</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>数据加载问题：<br>1-如果手动将数据文件放入一张普通表的目录下？表能不能读到数据？</p>\n<p>​    可以，元数据查询时直接将表的目录作为查询目录<br>2-如果手动将数据文件放入一张分区表的分区目录下？表能不能读到数据？表的分区能不能读到数据？<br>​    可以的，因为元数据查询时直接将分区的目录作为查询目录<br>3-如果手动在HDFS上创建一个分区的目录，将数据放入分区目录下，表能不能读到数据？<br>​    不能，因为Hive中没有该分区的元数据</p>\n<p>方案一：修复表的元数据（资源占用多）</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">msck <span class=\"keyword\">repair</span> <span class=\"keyword\">table</span> tb_emp;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>方案二：手动向表中添加一个分区</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">table</span> tb_name <span class=\"keyword\">add</span> [<span class=\"keyword\">if</span> <span class=\"keyword\">exists</span>] <span class=\"keyword\">partition</span> (dt=<span class=\"string\">&#x27;20&#x27;</span>) location <span class=\"string\">&#x27;/user/hadoop/dt=20&#x27;</span>;</span><br><span class=\"line\"><span class=\"comment\">--要求建立的目录必须与分区自动创建的目录格式一样</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>删除分区</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alter table tb_name drop [<span class=\"keyword\">if</span> exists] partition (dt=<span class=\"string\">&#x27;20&#x27;</span>);</span><br></pre></td></tr></table></figure>\n\n\n</li>\n</ul>\n<h4><span id=\"114-分桶表\">1.1.4  分桶表</span></h4>  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span> tb_emp_bucket(</span><br><span class=\"line\">empno <span class=\"built_in\">int</span> ,</span><br><span class=\"line\">ename <span class=\"keyword\">string</span>,</span><br><span class=\"line\">job <span class=\"keyword\">string</span>,</span><br><span class=\"line\">manager <span class=\"built_in\">int</span>,</span><br><span class=\"line\">inday <span class=\"keyword\">string</span>,</span><br><span class=\"line\">salary <span class=\"keyword\">double</span>,</span><br><span class=\"line\">jiangjin <span class=\"keyword\">double</span>,</span><br><span class=\"line\">deptno <span class=\"built_in\">int</span></span><br><span class=\"line\">) </span><br><span class=\"line\">clustered <span class=\"keyword\">by</span> (deptno) <span class=\"keyword\">into</span> <span class=\"number\">3</span> BUCKETS</span><br><span class=\"line\"><span class=\"keyword\">row</span> <span class=\"keyword\">format</span> <span class=\"keyword\">delimited</span> <span class=\"keyword\">fields</span> <span class=\"keyword\">terminated</span> <span class=\"keyword\">by</span> <span class=\"string\">&#x27;\\t&#x27;</span>;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>  应用场景：大表join大表时</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--开启分桶</span></span><br><span class=\"line\"><span class=\"keyword\">set</span> hive.enforce.bucketing=<span class=\"literal\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">insert</span> overwrite <span class=\"keyword\">table</span> tb_emp_bucket</span><br><span class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> tb_emp_normal cluster <span class=\"keyword\">by</span> (deptno);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>  连个桶表桶的个数必须相同，或者b表桶是a表的倍数</p>\n<h3><span id=\"12-修改表\">1.2 修改表</span></h3><p>  增加分区：</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">table</span> tb_name <span class=\"keyword\">add</span> <span class=\"keyword\">partition</span> (dt=<span class=\"string\">&#x27;20170101&#x27;</span>) location <span class=\"string\">&#x27;/user/hadoop/table_name/dt=20170101&#x27;</span>;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>  删除分区</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">table</span> tb_name <span class=\"keyword\">drop</span> <span class=\"keyword\">if</span> <span class=\"keyword\">exists</span> <span class=\"keyword\">partition</span> (dt=<span class=\"string\">&#x27;20170101&#x27;</span>)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>  修改分区</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">table</span> tb_name <span class=\"keyword\">partition</span> (dt=<span class=\"string\">&#x27;20170101&#x27;</span>) <span class=\"keyword\">rename</span> <span class=\"keyword\">to</span> <span class=\"keyword\">partition</span>(dt=<span class=\"string\">&#x27;20170202&#x27;</span>)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>  添加列</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--添加列</span></span><br><span class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">table</span> tb_name <span class=\"keyword\">add</span>|<span class=\"keyword\">replace</span> <span class=\"keyword\">columns</span> (col_name <span class=\"keyword\">string</span>);</span><br><span class=\"line\"><span class=\"comment\">--修改表名</span></span><br><span class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">table</span> stu_par <span class=\"keyword\">rename</span> <span class=\"keyword\">to</span> stu_par1</span><br><span class=\"line\"><span class=\"comment\">--增加列</span></span><br><span class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">table</span> stu1 <span class=\"keyword\">add</span> <span class=\"keyword\">columns</span>(score <span class=\"keyword\">string</span>);</span><br><span class=\"line\"><span class=\"comment\">--修改列类型</span></span><br><span class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">table</span> stu1 <span class=\"keyword\">change</span> <span class=\"keyword\">column</span> score score <span class=\"keyword\">double</span>;</span><br><span class=\"line\"><span class=\"comment\">--</span></span><br></pre></td></tr></table></figure>\n<h2><span id=\"2dml操作\">2.DML操作</span></h2><h3><span id=\"21-load\">2.1 load</span></h3><p>  在将数据加载到表中时，Hive不会进行任何转换。加载操作是将数据文件移动到与Hive表对应的位置的纯复制/移动操作。</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">load</span> <span class=\"keyword\">data</span> [<span class=\"keyword\">local</span>] inpath <span class=\"string\">&#x27;filepath&#x27;</span> [overwrite] <span class=\"keyword\">into</span> <span class=\"keyword\">table</span> tb_name [<span class=\"keyword\">partition</span>(partcol1=val1,partcol2=val2...)]</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3><span id=\"22-insert\">2.2 insert</span></h3><p>  Hive中insert主要是结合select查询语句使用，将查询结果插入到表中</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--查询结果的列数要和插入数据表格的列数一致</span></span><br><span class=\"line\"><span class=\"keyword\">insert</span> overwrite <span class=\"keyword\">table</span> tb_name <span class=\"keyword\">select</span> <span class=\"keyword\">statement</span></span><br><span class=\"line\"><span class=\"comment\">--将查询语句结果保存至HDFS中</span></span><br><span class=\"line\"><span class=\"keyword\">insert</span> overwrite <span class=\"keyword\">directory</span> <span class=\"string\">&quot;/movie/answer10/&quot;</span> <span class=\"keyword\">select</span> <span class=\"keyword\">statement</span>;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3><span id=\"23-join\">2.3 join</span></h3><p>  inner join: 两张表都有结果才有</p>\n<p>  left join: 左表有，结果就有</p>\n<p>  right join: 右表有，结果就有</p>\n<p>  full join：两边任意一边有，结果就有</p>\n<p>  cross join:笛卡尔积      –一般用于结果的漏斗计算</p>\n<h3><span id=\"24-排序\">2.4 排序</span></h3>  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">set</span> hive.exec.reducers.bytes.per.reducer=&lt;<span class=\"built_in\">number</span>&gt;</span><br><span class=\"line\">\t每个reduce最多处理多少数据量</span><br><span class=\"line\"><span class=\"keyword\">set</span> hive.exec.reducers.max=&lt;<span class=\"built_in\">number</span>&gt;\t</span><br><span class=\"line\">\t最多启动多少个reduce</span><br><span class=\"line\"><span class=\"keyword\">set</span> mapreduce.job.reduces=&lt;<span class=\"built_in\">number</span>&gt;</span><br><span class=\"line\">\t设置reduce的个数</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4><span id=\"order-by\">order by</span></h4><p>  全局排序，对整体进行排序，只有一个reduce的情况下</p>\n<p>  在启用多个reduce的情况下如果使用order by 结果依旧全局有序，但只会启用一个reduce</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span>  empno,ename,salary,deptno <span class=\"keyword\">from</span> tb_emp_normal <span class=\"keyword\">order</span> <span class=\"keyword\">by</span> empno;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4><span id=\"sort-by\">sort by</span></h4><p>  局部排序，多个reduce的 情况下，每个reduce内部有序（分区内有序）</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">set</span> mapreduce.job.reduces=<span class=\"number\">3</span>;</span><br><span class=\"line\">设置reduce个数</span><br><span class=\"line\"><span class=\"keyword\">insert</span> overwrite <span class=\"keyword\">local</span> <span class=\"keyword\">directory</span> <span class=\"string\">&#x27;/export/datas/sort&#x27;</span> </span><br><span class=\"line\"><span class=\"keyword\">row</span> <span class=\"keyword\">format</span> <span class=\"keyword\">delimited</span> <span class=\"keyword\">fields</span> <span class=\"keyword\">terminated</span> <span class=\"keyword\">by</span> <span class=\"string\">&#x27;\\t&#x27;</span> </span><br><span class=\"line\"><span class=\"keyword\">select</span>  empno,ename,salary,deptno <span class=\"keyword\">from</span> tb_emp_normal </span><br><span class=\"line\"><span class=\"keyword\">sort</span> <span class=\"keyword\">by</span> empno;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4><span id=\"distribute-by\">distribute by</span></h4><p>  指定多个reduce情况下，以哪一列作为分区字段。将相同的数据放入同一个结果文件，类似MR中Partition，进行分区，结合sort by使用  </p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">insert</span> overwrite <span class=\"keyword\">local</span> <span class=\"keyword\">directory</span> <span class=\"string\">&#x27;/export/datas/dis&#x27;</span> </span><br><span class=\"line\"><span class=\"keyword\">row</span> <span class=\"keyword\">format</span> <span class=\"keyword\">delimited</span> <span class=\"keyword\">fields</span> <span class=\"keyword\">terminated</span> <span class=\"keyword\">by</span> <span class=\"string\">&#x27;\\t&#x27;</span> </span><br><span class=\"line\"><span class=\"keyword\">select</span>  empno,ename,salary,deptno <span class=\"keyword\">from</span> tb_emp_normal </span><br><span class=\"line\"><span class=\"keyword\">distribute</span> <span class=\"keyword\">by</span> deptno </span><br><span class=\"line\"><span class=\"keyword\">sort</span> <span class=\"keyword\">by</span> empno;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4><span id=\"cluster-by\">cluster by</span></h4><p>  如果sort by与distribute by使用同一个字段可以用此代替，但是排序只能是升序排序，不能指定排序规则为ASC或者DESC。</p>\n<h2><span id=\"3hive参数配置\">3.hive参数配置</span></h2><h3><span id=\"31-hive-shell命令行\">3.1 Hive shell命令行</span></h3><p>针对bin/hive，除了可以当第一代客户端之外。还可以在hive中启动其他用途。</p>\n<p>1、 -i  初始化HQL文件。</p>\n<p>2、 -e从命令行执行指定的HQL </p>\n<p>3、 -f 执行HQL脚本 </p>\n<p>4、 -v 输出执行的HQL语句到控制台 </p>\n<p>5、 -p <port> connect to Hive Server on port number </port></p>\n<p>6、 -hiveconf x=y Use this to set hive/hadoop configuration variables.</p>\n<p>例如：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$HIVE_HOME</span>/bin/hive -e <span class=\"string\">&#x27;select * from table a&#x27;</span>\t</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable\">$HIVE_HOME</span>/bin/hive -f /home/my/hive-script.sql</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable\">$HIVE_HOME</span>/bin/hive -f hdfs://&lt;namenode&gt;:&lt;port&gt;/hive-script.sql</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable\">$HIVE_HOME</span>/bin/hive -i /home/my/hive-init.sql</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n<h3><span id=\"32-hive-参数配置方式\">3.2 Hive 参数配置方式</span></h3><p><em>Hive参数大全：</em></p>\n<p>[<em><a href=\"https://cwiki.apache.org/confluence/display/Hive/Configuration+Properties\">https://cwiki.apache.org/confluence/display/Hive/Configuration+Properties</a></em></p>\n<p> 开发Hive应用时，不可避免地需要设定Hive的参数。设定Hive的参数可以调优HQL代码的执行效率，或帮助定位问题。然而实践中经常遇到的一个问题是，为什么设定的参数没有起作用？这通常是错误的设定方式导致的。</p>\n<p>对于一般参数，有以下三种设定方式：</p>\n<p>配置文件   （全局有效）</p>\n<p>命令行参数   （对hive启动实例有效）</p>\n<p>参数声明   （对hive的连接session有效）</p>\n<p>配置文件 </p>\n<p>用户自定义配置文件：$HIVE_CONF_DIR/hive-site.xml</p>\n<p>默认配置文件：$HIVE_CONF_DIR/hive-default.xml </p>\n<p>用户自定义配置会覆盖默认配置。</p>\n<p>另外，Hive也会读入Hadoop的配置，因为Hive是作为Hadoop的客户端启动的，Hive的配置会覆盖Hadoop的配置。</p>\n<p>配置文件的设定对本机启动的所有Hive进程都有效。</p>\n<p> 命令行参数</p>\n<p>启动Hive（客户端或Server方式）时，可以在命令行添加-hiveconf来设定参数    例如：bin/hive -hiveconf hive.root.logger=INFO,console</p>\n<p>设定对本次启动的Session（对于Server方式启动，则是所有请求的Sessions）有效。</p>\n<p> 参数声明</p>\n<p>可以在HQL中使用SET关键字设定参数，这一设定的作用域也是session级的。</p>\n<p>比如：</p>\n<p>set hive.exec.reducers.bytes.per.reducer=<number>  每个reduce task的平均负载数据量</number></p>\n<p>set hive.exec.reducers.max=<number>   设置reduce task数量的上限</number></p>\n<p>set mapreduce.job.reduces=<number>    指定固定的reduce task数量</number></p>\n<p>但是，这个参数在必要时&lt;业务逻辑决定只能用一个reduce task&gt; hive会忽略</p>\n<p>上述三种设定方式的优先级依次递增。即参数声明覆盖命令行参数，命令行参数覆盖配置文件设定。注意某些系统级的参数，例如log4j相关的设定，必须用前两种方式设定，因为那些参数的读取在Session建立以前已经完成了。</p>\n<h2><span id=\"4hive中复杂数据类型的使用\">4.hive中复杂数据类型的使用</span></h2><h3><span id=\"41-数组类型\">4.1 数组类型</span></h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--数据如下：vim &#x2F;export&#x2F;datas&#x2F;array.txt</span><br><span class=\"line\">zhangsan\tbeijing,shanghai,tianjin,hangzhou</span><br><span class=\"line\">wangwu\tshanghai,chengdu,wuhan,haerbin</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--创建表</span></span><br><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span> complex_array(</span><br><span class=\"line\"><span class=\"keyword\">name</span> <span class=\"keyword\">string</span>,</span><br><span class=\"line\">work_locations <span class=\"built_in\">array</span>&lt;<span class=\"keyword\">string</span>&gt;</span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"keyword\">row</span> <span class=\"keyword\">format</span> <span class=\"keyword\">delimited</span> <span class=\"keyword\">fields</span> <span class=\"keyword\">terminated</span> <span class=\"keyword\">by</span> <span class=\"string\">&#x27;\\t&#x27;</span> <span class=\"comment\">--指定列的分隔符</span></span><br><span class=\"line\">collection items <span class=\"keyword\">terminated</span> <span class=\"keyword\">by</span> <span class=\"string\">&#x27;,&#x27;</span>;<span class=\"comment\">--指定数组中元素的分隔符</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--加载数据</span></span><br><span class=\"line\"><span class=\"keyword\">load</span> <span class=\"keyword\">data</span> <span class=\"keyword\">local</span> inpath <span class=\"string\">&#x27;/export/datas/array.txt&#x27;</span> <span class=\"keyword\">into</span> <span class=\"keyword\">table</span> complex_array;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--查询</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> complex_array;</span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"keyword\">size</span>(work_locations) <span class=\"keyword\">from</span> complex_array;</span><br><span class=\"line\"><span class=\"keyword\">select</span> work_locations[<span class=\"number\">0</span>],work_locations[<span class=\"number\">1</span>] <span class=\"keyword\">from</span> complex_array;</span><br></pre></td></tr></table></figure>\n<h3><span id=\"42-map类型\">4.2 map类型</span></h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--数据如下：vim &#x2F;export&#x2F;datas&#x2F;map.txt</span><br><span class=\"line\">1,zhangsan,唱歌:非常喜欢-跳舞:喜欢-游泳:一般般</span><br><span class=\"line\">2,lisi,打游戏:非常喜欢-篮球:不喜欢</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--创建表</span></span><br><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span> complex_map(</span><br><span class=\"line\"><span class=\"keyword\">id</span> <span class=\"built_in\">int</span>,</span><br><span class=\"line\"><span class=\"keyword\">name</span> <span class=\"keyword\">string</span>,</span><br><span class=\"line\">hobby <span class=\"keyword\">map</span>&lt;<span class=\"keyword\">string</span>,<span class=\"keyword\">string</span>&gt;)</span><br><span class=\"line\"><span class=\"keyword\">row</span> <span class=\"keyword\">format</span> <span class=\"keyword\">delimited</span> <span class=\"keyword\">fields</span> <span class=\"keyword\">terminated</span> <span class=\"keyword\">by</span> <span class=\"string\">&#x27;,&#x27;</span> <span class=\"comment\">--指定列的分隔符</span></span><br><span class=\"line\">collection items <span class=\"keyword\">terminated</span> <span class=\"keyword\">by</span> <span class=\"string\">&#x27;-&#x27;</span> <span class=\"keyword\">map</span> <span class=\"keyword\">keys</span> <span class=\"keyword\">terminated</span> <span class=\"keyword\">by</span> <span class=\"string\">&#x27;:&#x27;</span> ;<span class=\"comment\">--指定keyvalue的分割</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--加载数据</span></span><br><span class=\"line\"><span class=\"keyword\">load</span> <span class=\"keyword\">data</span> <span class=\"keyword\">local</span> inpath <span class=\"string\">&#x27;/export/datas/map.txt&#x27;</span> <span class=\"keyword\">into</span> <span class=\"keyword\">table</span> complex_map;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--查询</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> complex_map;</span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"keyword\">size</span>(hobby) <span class=\"keyword\">from</span> complex_map;</span><br><span class=\"line\"><span class=\"keyword\">select</span> hobby[<span class=\"string\">&quot;唱歌&quot;</span>] <span class=\"keyword\">from</span> complex_map;</span><br></pre></td></tr></table></figure>\n<h3><span id=\"43-正则类型\">4.3 正则类型</span></h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--数据如下:vim /export/datas/regex.txt</span></span><br><span class=\"line\">tom 男 23 上海</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--使用正则加载数据</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> user_regex(</span><br><span class=\"line\"><span class=\"keyword\">name</span> <span class=\"keyword\">string</span>,</span><br><span class=\"line\">sex <span class=\"keyword\">string</span>,</span><br><span class=\"line\">age <span class=\"built_in\">int</span>,</span><br><span class=\"line\">city <span class=\"keyword\">string</span></span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"keyword\">ROW</span> <span class=\"keyword\">FORMAT</span> SERDE <span class=\"string\">&#x27;org.apache.hadoop.hive.serde2.RegexSerDe&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">WITH</span> SERDEPROPERTIES (</span><br><span class=\"line\">  <span class=\"string\">&quot;input.regex&quot;</span> = <span class=\"string\">&quot;([^ ]+) ([^ ]+) ([0-9]+) (.+)&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"keyword\">STORED</span> <span class=\"keyword\">AS</span> TEXTFILE;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">load</span> <span class=\"keyword\">data</span> <span class=\"keyword\">local</span> inpath <span class=\"string\">&#x27;/root/regex.txt&#x27;</span> <span class=\"keyword\">into</span> <span class=\"keyword\">table</span> user_regex;</span><br></pre></td></tr></table></figure>\n<h3><span id=\"44-json类型\">4.4 json类型</span></h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--通过专门的解析类直接加载一个json格式的数据到Hive中</span></span><br><span class=\"line\"><span class=\"comment\">--数据如下:vim /export/datas/hivedata.json</span></span><br><span class=\"line\">&#123;&quot;id&quot;: 1701439105,&quot;ids&quot;: [2154137571,3889177061],&quot;total_number&quot;: 493&#125;</span><br><span class=\"line\">&#123;&quot;id&quot;: 1701439106,&quot;ids&quot;: [2154137571,3889177061],&quot;total_number&quot;: 494&#125;</span><br><span class=\"line\"><span class=\"comment\">--添加jar包</span></span><br><span class=\"line\">add jar /export/datas/json-serde-1.3.7-jar-<span class=\"keyword\">with</span>-dependencies.jar;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--创建表：</span></span><br><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span> tb_json_test2 (</span><br><span class=\"line\"><span class=\"keyword\">id</span> <span class=\"keyword\">string</span>,</span><br><span class=\"line\">ids <span class=\"built_in\">array</span>&lt;<span class=\"keyword\">string</span>&gt;,</span><br><span class=\"line\">total_number <span class=\"built_in\">int</span>)</span><br><span class=\"line\"><span class=\"keyword\">ROW</span> <span class=\"keyword\">FORMAT</span> SERDE <span class=\"string\">&#x27;org.openx.data.jsonserde.JsonSerDe&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">STORED</span> <span class=\"keyword\">AS</span> TEXTFILE;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--加载数据</span></span><br><span class=\"line\"><span class=\"keyword\">load</span> <span class=\"keyword\">data</span> <span class=\"keyword\">local</span> inpath <span class=\"string\">&#x27;/export/datas/hivedata.json&#x27;</span> <span class=\"keyword\">into</span> <span class=\"keyword\">table</span> tb_json_test2;</span><br></pre></td></tr></table></figure>\n<h3><span id=\"45-python类型\">4.5 python类型</span></h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--创建Python脚本实现将原始表的时间转为对应的星期几</span></span><br><span class=\"line\">vim /export/datas/weekday_mapper.py</span><br><span class=\"line\"></span><br><span class=\"line\">import sys</span><br><span class=\"line\">import datetime</span><br><span class=\"line\"></span><br><span class=\"line\">for line in sys.stdin:</span><br><span class=\"line\">  line = line.strip()</span><br><span class=\"line\">  userid, movieid, rating, unixtime = line.split(&#x27;\\t&#x27;)</span><br><span class=\"line\">  weekday = datetime.datetime.fromtimestamp(float(unixtime)).isoweekday()</span><br><span class=\"line\">  print &#x27;\\t&#x27;.join([userid, movieid, rating, str(weekday)])</span><br><span class=\"line\"> </span><br></pre></td></tr></table></figure>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--加载python脚本并将数据写入新表</span></span><br><span class=\"line\">add FILE /export/datas/weekday_mapper.py;</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> OVERWRITE <span class=\"keyword\">TABLE</span> u_data_new</span><br><span class=\"line\"><span class=\"keyword\">SELECT</span></span><br><span class=\"line\">  TRANSFORM (userid, movieid, rating, unixtime)</span><br><span class=\"line\">  <span class=\"keyword\">USING</span> <span class=\"string\">&#x27;python weekday_mapper.py&#x27;</span></span><br><span class=\"line\">  <span class=\"keyword\">AS</span> (userid, movieid, rating, <span class=\"keyword\">weekday</span>)</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> u_data;</span><br></pre></td></tr></table></figure>\n<h2><span id=\"5hive函数\">5.Hive函数</span></h2><h3><span id=\"51自定义函数\">5.1自定义函数</span></h3><h4><span id=\"511-udf\">5.1.1 UDF</span></h4><p>UDF（User-Defined-Function）普通函数 一进一出</p>\n<p>1、自定义一个类，继承UDF,实现一个或重载多个evaluate方法，打包上传jar包到linux环境</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">     <span class=\"comment\">&lt;!-- 指定该项目可以从哪些地方下载依赖包 --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">repository</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>aliyun<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public/<span class=\"tag\">&lt;/<span class=\"name\">url</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">repository</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">repository</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>cloudera<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">url</span>&gt;</span>https://repository.cloudera.com/artifactory/cloudera-repos/<span class=\"tag\">&lt;/<span class=\"name\">url</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">repository</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">repository</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>jboss<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">url</span>&gt;</span>http://repository.jboss.org/nexus/content/groups/public<span class=\"tag\">&lt;/<span class=\"name\">url</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">repository</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">repositories</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--指定字符编码--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class=\"tag\">&lt;/<span class=\"name\">project.build.sourceEncoding</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--指定依赖--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.hadoop<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>hadoop-common<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.6.0-cdh5.14.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.hadoop<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>hadoop-hdfs<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.6.0-cdh5.14.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.hadoop<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>hadoop-client<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.6.0-cdh5.14.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.hive<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>hive-exec<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.1.0-cdh5.14.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.hive<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>hive-common<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.1.0-cdh5.14.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.hive<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>hive-cli<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.1.0-cdh5.14.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.hive<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>hive-jdbc<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.1.0-cdh5.14.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> org.apache.hadoop.hive.ql.exec.UDF;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.hadoop.io.Text;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserUDF</span> <span class=\"keyword\">extends</span> <span class=\"title\">UDF</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Text <span class=\"title\">evaluate</span><span class=\"params\">(Text s)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(s==<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Text(s.toString().toLowerCase());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<p>2、将jar包添加到hive环境中</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">add jar &#x2F;export&#x2F;datas&#x2F;udf.jar;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>3、在hive中创建一个函数</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">create temporary function fc_name as &#39;com.neusoft.data.UserUDF&#39;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>4、使用函数</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select fc_name(age),name from tb_name;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4><span id=\"512自定义udfudtfudaf开发\">5.1.2自定义udf,udtf,udaf开发</span></h4><p>UDF：<br>1-开发udf程序：继承UDF类，实现一个或者多个evaluate方法<br>2-打成jar包<br>3-上传jar包到集群中，并添加到hive的环境变量中，在hive中执行<br>    add jar /export/datas/udf.jar;<br>4-创建临时函数：<br>    create temporary function  transDate as ‘cn.itcast.bigdata.hive.TransDate’;<br>5-测试函数：<br>    select transDate(“18/Aug/2019:12:30:05”);<br>6-删除临时函数<br>    DROP TEMPORARY FUNCTION transDate;</p>\n<p>UDTF<br>1-开发udtf程序：继承UDTF类，重写process方法<br>2-打成jar包<br>3-上传jar包到集群中，并添加到hive的环境变量中，在hive中执行<br>    add jar /export/datas/udtf.jar;<br>4-创建临时函数：<br>    create temporary function  transMap as ‘cn.itcast.bigdata.hive.UserUDTF’;<br>5-测试函数：<br>    第一种用法：直接调用<br>        select transMap(“uuid=root&amp;url=<a href=\"http://www.taobao.com&quot;/\">www.taobao.com&quot;</a>) as (userCol1,userCol2);<br>    第二种用法：和侧视图一起使用<br>        select deptno,deptname,a.* from tb_dept lateral view transMap(“uuid=root&amp;url=<a href=\"http://www.taobao.com&quot;/\">www.taobao.com&quot;</a>) a as col1,col2;<br>    注意：<br>        1-udtf只能直接select中使用<br>        2-不可以添加其他字段使用<br>        3-不可以嵌套调用<br>        4-不可以和group by/cluster by/distribute by/sort by一起使用</p>\n<p>UDAF<br>1-开发udaf程序：继承UDAF类，重写iterate方法<br>2-打成jar包<br>3-上传jar包到集群中，并添加到hive的环境变量中，在hive中执行<br>    add jar /export/datas/udaf.jar;<br>4-创建临时函数：<br>    create temporary function  userMax as ‘cn.itcast.bigdata.hive.UserUDAF’;<br>5-测试函数：<br>    select userMax(deptno) from tb_dept;</p>\n<h3><span id=\"52udaf\">5.2UDAF</span></h3><p>UDAF（User-Defined Aggregation Function）聚合函数，多进一出</p>\n<h4><span id=\"窗口函数sum-avg-count-max-min\">窗口函数：SUM、AVG、COUNT、MAX、MIN</span></h4><p>功能：用于实现数据分区后的聚合<br>    -》语法：fun_name(col1) over (partition by col2 order by col3)<br>                实现功能    over  按照什么分区，分区内部按照什么排序<br>    -》示例：实现分区内的累加，其他的原理类似</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cookie1,2018-04-10,1</span><br><span class=\"line\">cookie1,2018-04-11,5</span><br><span class=\"line\">cookie1,2018-04-12,7</span><br><span class=\"line\">cookie1,2018-04-13,3</span><br><span class=\"line\">cookie2,2018-04-13,3</span><br><span class=\"line\">cookie2,2018-04-14,2</span><br><span class=\"line\">cookie2,2018-04-15,4</span><br><span class=\"line\">cookie1,2018-04-14,2</span><br><span class=\"line\">cookie1,2018-04-15,4</span><br><span class=\"line\">cookie1,2018-04-16,4</span><br><span class=\"line\">cookie2,2018-04-10,1</span><br><span class=\"line\">cookie2,2018-04-11,5</span><br><span class=\"line\">cookie2,2018-04-12,7</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--创建表</span></span><br><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">database</span> db_function;</span><br><span class=\"line\"><span class=\"keyword\">use</span> db_function;</span><br><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span> user_f1(</span><br><span class=\"line\">cookieid <span class=\"keyword\">string</span>,</span><br><span class=\"line\">daystr <span class=\"keyword\">string</span>,</span><br><span class=\"line\">pv <span class=\"built_in\">int</span></span><br><span class=\"line\">) <span class=\"keyword\">row</span> <span class=\"keyword\">format</span> <span class=\"keyword\">delimited</span> <span class=\"keyword\">fields</span> <span class=\"keyword\">terminated</span> <span class=\"keyword\">by</span> <span class=\"string\">&#x27;,&#x27;</span>;</span><br><span class=\"line\"><span class=\"comment\">--加载数据</span></span><br><span class=\"line\"><span class=\"keyword\">load</span> <span class=\"keyword\">data</span> <span class=\"keyword\">local</span> inpath <span class=\"string\">&#x27;/export/datas/window.txt&#x27;</span> <span class=\"keyword\">into</span> <span class=\"keyword\">table</span> user_f1;</span><br><span class=\"line\"><span class=\"keyword\">set</span> hive.exec.mode.local.auto=<span class=\"literal\">true</span>;</span><br><span class=\"line\"><span class=\"comment\">--实现分区内起始到当前行的pv累加，默认窗口：取第一行开始到当前行的和</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> </span><br><span class=\"line\">  cookieid,</span><br><span class=\"line\">  daystr,</span><br><span class=\"line\">  pv,</span><br><span class=\"line\">  <span class=\"keyword\">sum</span>(pv) <span class=\"keyword\">over</span>(<span class=\"keyword\">partition</span> <span class=\"keyword\">by</span> cookieid <span class=\"keyword\">order</span> <span class=\"keyword\">by</span> daystr) <span class=\"keyword\">as</span> pv1 </span><br><span class=\"line\"><span class=\"keyword\">from</span> </span><br><span class=\"line\">  user_f1;</span><br><span class=\"line\">   </span><br><span class=\"line\"><span class=\"comment\">--实现分区内所有pv的累加，不指定排序默认窗口：从第一行到最后一行</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> </span><br><span class=\"line\">  cookieid,</span><br><span class=\"line\">  daystr,</span><br><span class=\"line\">  pv,</span><br><span class=\"line\">  <span class=\"keyword\">sum</span>(pv) <span class=\"keyword\">over</span>(<span class=\"keyword\">partition</span> <span class=\"keyword\">by</span> cookieid ) <span class=\"keyword\">as</span> pv2</span><br><span class=\"line\"><span class=\"keyword\">from</span> </span><br><span class=\"line\">  user_f1;</span><br><span class=\"line\">  </span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"comment\">--手动指定窗口的大小：分区</span></span><br><span class=\"line\">rows between 起始位置 and 结束位置</span><br><span class=\"line\">rows between unbounded preceding and current row</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--实现分区内起始到当前行的pv累加</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> </span><br><span class=\"line\">  cookieid,</span><br><span class=\"line\">  daystr,</span><br><span class=\"line\">  pv,</span><br><span class=\"line\">  <span class=\"keyword\">sum</span>(pv) <span class=\"keyword\">over</span>(<span class=\"keyword\">partition</span> <span class=\"keyword\">by</span> cookieid <span class=\"keyword\">order</span> <span class=\"keyword\">by</span> daystr <span class=\"keyword\">rows</span> <span class=\"keyword\">between</span> <span class=\"keyword\">unbounded</span> <span class=\"keyword\">preceding</span> <span class=\"keyword\">and</span> <span class=\"keyword\">current</span> <span class=\"keyword\">row</span>) <span class=\"keyword\">as</span> pv3</span><br><span class=\"line\"><span class=\"keyword\">from</span> </span><br><span class=\"line\">  user_f1;</span><br><span class=\"line\"><span class=\"comment\">--实现分区内指定前N行到当前行的pv累加</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> </span><br><span class=\"line\">  cookieid,</span><br><span class=\"line\">  daystr,</span><br><span class=\"line\">  pv,</span><br><span class=\"line\">  <span class=\"keyword\">sum</span>(pv) <span class=\"keyword\">over</span>(<span class=\"keyword\">partition</span> <span class=\"keyword\">by</span> cookieid <span class=\"keyword\">order</span> <span class=\"keyword\">by</span> daystr <span class=\"keyword\">rows</span> <span class=\"keyword\">between</span> <span class=\"number\">3</span> <span class=\"keyword\">preceding</span> <span class=\"keyword\">and</span> <span class=\"keyword\">current</span> <span class=\"keyword\">row</span>) <span class=\"keyword\">as</span> pv4</span><br><span class=\"line\"><span class=\"keyword\">from</span> </span><br><span class=\"line\">  user_f1;</span><br><span class=\"line\"><span class=\"comment\">--实现分区内指定前N行到后N行的pv累加 </span></span><br><span class=\"line\"><span class=\"keyword\">select</span> </span><br><span class=\"line\">  cookieid,</span><br><span class=\"line\">  daystr,</span><br><span class=\"line\">  pv,</span><br><span class=\"line\">  <span class=\"keyword\">sum</span>(pv) <span class=\"keyword\">over</span>(<span class=\"keyword\">partition</span> <span class=\"keyword\">by</span> cookieid <span class=\"keyword\">order</span> <span class=\"keyword\">by</span> daystr <span class=\"keyword\">rows</span> <span class=\"keyword\">between</span> <span class=\"number\">3</span> <span class=\"keyword\">preceding</span> <span class=\"keyword\">and</span> <span class=\"number\">1</span> <span class=\"keyword\">following</span>) <span class=\"keyword\">as</span> pv5</span><br><span class=\"line\"><span class=\"keyword\">from</span> </span><br><span class=\"line\">  user_f1;</span><br><span class=\"line\"><span class=\"comment\">--实现分区内指定当前行到后N行的pv累加   </span></span><br><span class=\"line\"><span class=\"keyword\">select</span> </span><br><span class=\"line\">  cookieid,</span><br><span class=\"line\">  daystr,</span><br><span class=\"line\">  pv,</span><br><span class=\"line\">  <span class=\"keyword\">sum</span>(pv) <span class=\"keyword\">over</span>(<span class=\"keyword\">partition</span> <span class=\"keyword\">by</span> cookieid <span class=\"keyword\">order</span> <span class=\"keyword\">by</span> daystr <span class=\"keyword\">rows</span> <span class=\"keyword\">between</span> <span class=\"keyword\">current</span> <span class=\"keyword\">row</span> <span class=\"keyword\">and</span> <span class=\"keyword\">unbounded</span> <span class=\"keyword\">following</span>) <span class=\"keyword\">as</span> pv6</span><br><span class=\"line\"><span class=\"keyword\">from</span> </span><br><span class=\"line\">  user_f1;</span><br><span class=\"line\">  </span><br><span class=\"line\">  </span><br><span class=\"line\">- preceding：往前</span><br><span class=\"line\">- following：往后</span><br><span class=\"line\">- current row：当前行</span><br><span class=\"line\">- unbounded：起点</span><br><span class=\"line\">- unbounded preceding 表示从前面的起点</span><br><span class=\"line\">- unbounded following：表示到后面的终点</span><br></pre></td></tr></table></figure>\n<h4><span id=\"窗口函数lag-lead-first_value-last_value\">窗口函数：LAG、LEAD、FIRST_VALUE、LAST_VALUE</span></h4><p>FIRST_VALUE<br>    功能：取每个分区内某列的第一个值<br>    语法：FIRST_VALUE(col) over (partition by col1 order by col2)</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--取每个部门薪资最高的员工编号</span></span><br><span class=\"line\"><span class=\"keyword\">select</span></span><br><span class=\"line\">  empno,</span><br><span class=\"line\">  ename,</span><br><span class=\"line\">  salary,</span><br><span class=\"line\">  deptno,</span><br><span class=\"line\">  <span class=\"keyword\">FIRST_VALUE</span>(ename) <span class=\"keyword\">over</span> (<span class=\"keyword\">partition</span> <span class=\"keyword\">by</span> deptno <span class=\"keyword\">order</span> <span class=\"keyword\">by</span> salary <span class=\"keyword\">desc</span>) <span class=\"keyword\">as</span> <span class=\"keyword\">first</span></span><br><span class=\"line\"><span class=\"keyword\">from</span></span><br><span class=\"line\">  db_emp.tb_emp_normal;</span><br></pre></td></tr></table></figure>\n<p>LAST_VALUE<br>    功能：取每个分区内某列的最后一个值<br>    语法：LAST_VALUE() over (partition by col1 order by col2)<br>    注意：默认窗口是从第一条到当前条</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--取每个部门薪资最低的员工编号</span></span><br><span class=\"line\"><span class=\"keyword\">select</span></span><br><span class=\"line\">  empno,</span><br><span class=\"line\">  ename,</span><br><span class=\"line\">  salary,</span><br><span class=\"line\">  deptno,</span><br><span class=\"line\">  <span class=\"keyword\">LAST_VALUE</span>(empno) <span class=\"keyword\">over</span> (<span class=\"keyword\">partition</span> <span class=\"keyword\">by</span> deptno <span class=\"keyword\">order</span> <span class=\"keyword\">by</span> salary <span class=\"keyword\">desc</span>) <span class=\"keyword\">as</span> <span class=\"keyword\">last</span></span><br><span class=\"line\"><span class=\"keyword\">from</span></span><br><span class=\"line\">  db_emp.tb_emp_normal; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">select</span></span><br><span class=\"line\">  empno,</span><br><span class=\"line\">  ename,</span><br><span class=\"line\">  salary,</span><br><span class=\"line\">  deptno,</span><br><span class=\"line\">  <span class=\"keyword\">LAST_VALUE</span>(empno) <span class=\"keyword\">over</span> (<span class=\"keyword\">partition</span> <span class=\"keyword\">by</span> deptno <span class=\"keyword\">order</span> <span class=\"keyword\">by</span> salary <span class=\"keyword\">desc</span> <span class=\"keyword\">rows</span> <span class=\"keyword\">between</span> <span class=\"keyword\">unbounded</span> <span class=\"keyword\">preceding</span> <span class=\"keyword\">and</span> <span class=\"keyword\">unbounded</span> <span class=\"keyword\">following</span>) <span class=\"keyword\">as</span> <span class=\"keyword\">last</span></span><br><span class=\"line\"><span class=\"keyword\">from</span></span><br><span class=\"line\">  db_emp.tb_emp_normal;</span><br></pre></td></tr></table></figure>\n<p>LAG<br>    功能：取每个分区内某列的前N个值<br>    语法：LAG(col,N,defaultValue) over (partition by col1 order by col2)</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span></span><br><span class=\"line\">  empno,</span><br><span class=\"line\">  ename,</span><br><span class=\"line\">  salary,</span><br><span class=\"line\">  deptno,</span><br><span class=\"line\">  LAG(salary,<span class=\"number\">1</span>,<span class=\"number\">0</span>) <span class=\"keyword\">over</span> (<span class=\"keyword\">partition</span> <span class=\"keyword\">by</span> deptno <span class=\"keyword\">order</span> <span class=\"keyword\">by</span> salary) <span class=\"keyword\">as</span> deptno2</span><br><span class=\"line\"><span class=\"keyword\">from</span></span><br><span class=\"line\">  db_emp.tb_emp_normal;</span><br></pre></td></tr></table></figure>\n<p>LEAD<br>    功能：向后取每个分区内某列的前N个值<br>    语法：LEAD(col,N,defaultValue) over (partition by col1 order by col2)</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span></span><br><span class=\"line\">  empno,</span><br><span class=\"line\">  ename,</span><br><span class=\"line\">  salary,</span><br><span class=\"line\">  deptno,</span><br><span class=\"line\">  <span class=\"keyword\">LEAD</span>(salary,<span class=\"number\">1</span>,<span class=\"number\">0</span>) <span class=\"keyword\">over</span> (<span class=\"keyword\">partition</span> <span class=\"keyword\">by</span> deptno <span class=\"keyword\">order</span> <span class=\"keyword\">by</span> salary) <span class=\"keyword\">as</span> deptno2</span><br><span class=\"line\"><span class=\"keyword\">from</span></span><br><span class=\"line\">  db_emp.tb_emp_normal;</span><br></pre></td></tr></table></figure>\n\n\n\n\n<h4><span id=\"分析函数row_number-rank-dense_rank-ntile\">分析函数：ROW_NUMBER、RANK、DENSE_RANK、NTILE</span></h4><p>==ROW_NUMBER==<br>    功能：用于实现分区内记录编号<br>    语法：row_number() over (partition by col1 order by col2)</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--统计每个部门薪资最高的前两名</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> </span><br><span class=\"line\">(<span class=\"keyword\">select</span></span><br><span class=\"line\">  empno,</span><br><span class=\"line\">  ename,</span><br><span class=\"line\">  salary,</span><br><span class=\"line\">  deptno,</span><br><span class=\"line\">  row_number() <span class=\"keyword\">over</span> (<span class=\"keyword\">partition</span> <span class=\"keyword\">by</span> deptno <span class=\"keyword\">order</span> <span class=\"keyword\">by</span> salary <span class=\"keyword\">desc</span>) <span class=\"keyword\">as</span> <span class=\"keyword\">numb</span></span><br><span class=\"line\"><span class=\"keyword\">from</span></span><br><span class=\"line\">  db_emp.tb_emp_normal) t <span class=\"keyword\">where</span> t.numb &lt; <span class=\"number\">3</span>;</span><br></pre></td></tr></table></figure>\n<p>RANK<br>    功能：用于实现分区内排名编号[会留空位]<br>        与row_number的区别：<br>            row_number：如果排序时数值相同，继续编号<br>            rank：如果排序时数值相同，编号不变，但留下空位<br>    语法：rank() over (partition by col1 order by col2)</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--统计每个部门薪资排名</span></span><br><span class=\"line\"><span class=\"keyword\">select</span></span><br><span class=\"line\">  empno,</span><br><span class=\"line\">  ename,</span><br><span class=\"line\">  salary,</span><br><span class=\"line\">  deptno,</span><br><span class=\"line\">  <span class=\"keyword\">rank</span>() <span class=\"keyword\">over</span> (<span class=\"keyword\">partition</span> <span class=\"keyword\">by</span> deptno <span class=\"keyword\">order</span> <span class=\"keyword\">by</span> salary <span class=\"keyword\">desc</span>) <span class=\"keyword\">as</span> <span class=\"keyword\">numb</span></span><br><span class=\"line\"><span class=\"keyword\">from</span></span><br><span class=\"line\">  db_emp.tb_emp_normal;</span><br></pre></td></tr></table></figure>\n<p>DENSE_RANK<br>    功能：用于实现分区内排名编号[不留空位]<br>        与rank的区别：<br>            ==row_number：如果排序时数值相同，编号不变，并留下排名空位==<br>            ==dense_rank：如果排序时数值相同，编号不变，不留空位==<br>            ==rank：如果排序时数值相同，编号不变，但留下空位==<br>    语法：dense_rank() over (partition by col1 order by col2)</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--统计每个部门薪资排名</span></span><br><span class=\"line\"><span class=\"keyword\">select</span></span><br><span class=\"line\">  empno,</span><br><span class=\"line\">  ename,</span><br><span class=\"line\">  salary,</span><br><span class=\"line\">  deptno,</span><br><span class=\"line\">  <span class=\"keyword\">dense_rank</span>() <span class=\"keyword\">over</span> (<span class=\"keyword\">partition</span> <span class=\"keyword\">by</span> deptno <span class=\"keyword\">order</span> <span class=\"keyword\">by</span> salary <span class=\"keyword\">desc</span>) <span class=\"keyword\">as</span> <span class=\"keyword\">numb</span></span><br><span class=\"line\"><span class=\"keyword\">from</span></span><br><span class=\"line\">  db_emp.tb_emp_normal;</span><br></pre></td></tr></table></figure>\n<p>NTILE<br>    功能：将每个分区内排序后的结果均分成N份【如果不能均分，优先分配编号小的】<br>        本质：将每个分区拆分成更小的分区<br>    语法：NTILE(N) over (partition by col1 order by col2)</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--统计每个部门薪资排名，将每个部门的薪资分为两个部分，区分高薪和低薪</span></span><br><span class=\"line\"><span class=\"keyword\">select</span></span><br><span class=\"line\">  empno,</span><br><span class=\"line\">  ename,</span><br><span class=\"line\">  salary,</span><br><span class=\"line\">  deptno,</span><br><span class=\"line\">  NTILE(<span class=\"number\">2</span>) <span class=\"keyword\">over</span> (<span class=\"keyword\">partition</span> <span class=\"keyword\">by</span> deptno <span class=\"keyword\">order</span> <span class=\"keyword\">by</span> salary <span class=\"keyword\">desc</span>) <span class=\"keyword\">as</span> <span class=\"keyword\">numb</span></span><br><span class=\"line\"><span class=\"keyword\">from</span></span><br><span class=\"line\">  db_emp.tb_emp_normal;</span><br></pre></td></tr></table></figure>\n\n\n<h3><span id=\"53udtf\">5.3UDTF</span></h3><p>UDTF（User-Defined Table-Generating Functions）表生成函数 一进多出</p>\n<h4><span id=\"lateral-view\">lateral view</span></h4><p>分类：视图<br>功能：配合UDTF来使用,把某一行数据拆分成多行数据<br>    与UDTF直接使用的区别：<br>        ==很多的UDTF不能将结果与源表进行关联，使用lateral view==<br>        可以将UDTF拆分的单个字段数据与原始表数据关联上==<br>使用方式：<br>    tabel A lateral view UDTF(xxx) 视图名 as a,b,c</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--准备数据:vim /export/datas/lateral.txt</span></span><br><span class=\"line\">1\thttp://facebook.com/path/p1.php?query=1</span><br><span class=\"line\">2\thttp://www.baidu.com/news/index.jsp?uuid=frank</span><br><span class=\"line\">3\thttp://www.jd.com/index?source=baidu</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--创建表</span></span><br><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span> tb_url(</span><br><span class=\"line\"><span class=\"keyword\">id</span> <span class=\"built_in\">int</span>,</span><br><span class=\"line\"><span class=\"keyword\">url</span> <span class=\"keyword\">string</span></span><br><span class=\"line\">) <span class=\"keyword\">row</span> <span class=\"keyword\">format</span> <span class=\"keyword\">delimited</span> <span class=\"keyword\">fields</span> <span class=\"keyword\">terminated</span> <span class=\"keyword\">by</span> <span class=\"string\">&#x27;\\t&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--加载数据</span></span><br><span class=\"line\"><span class=\"keyword\">load</span> <span class=\"keyword\">data</span> <span class=\"keyword\">local</span> inpath <span class=\"string\">&#x27;/export/datas/lateral.txt&#x27;</span> <span class=\"keyword\">into</span> <span class=\"keyword\">table</span> tb_url;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--使用UDTF解析</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> parse_url_tuple(<span class=\"keyword\">url</span>, <span class=\"string\">&#x27;HOST&#x27;</span>) <span class=\"keyword\">from</span> tb_url;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--使用UDTF+lateral view</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> a.id,b.* <span class=\"keyword\">from</span> tb_url a <span class=\"keyword\">lateral</span> <span class=\"keyword\">view</span> parse_url_tuple(<span class=\"keyword\">url</span>, <span class=\"string\">&#x27;HOST&#x27;</span>) b <span class=\"keyword\">as</span> host;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--对比</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">id</span>,parse_url_tuple(<span class=\"keyword\">url</span>, <span class=\"string\">&#x27;HOST&#x27;</span>) <span class=\"keyword\">from</span> tb_url;<span class=\"comment\">--失败，UDTF函数不能与字段连用</span></span><br></pre></td></tr></table></figure>\n\n\n<h4><span id=\"explode\">explode</span></h4><p>功能：函数可以将一个array或者map展开<br>    explode(array)：<br>        将array列表里的每个元素生成一行<br>    explode(map)：<br>        每一对元素作为一行，key为一列，value为一列<br>使用方式：<br>    1-直接使用<br>    2-与lateral view连用</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--实现wordcount【explode(array)】</span></span><br><span class=\"line\">\t<span class=\"keyword\">select</span> <span class=\"keyword\">explode</span>(<span class=\"keyword\">split</span>(word,<span class=\"string\">&quot; &quot;</span>)) <span class=\"keyword\">from</span> wc1;</span><br><span class=\"line\"><span class=\"comment\">--将兴趣爱好展开【explode(map)】</span></span><br><span class=\"line\">\t<span class=\"keyword\">select</span> <span class=\"keyword\">explode</span>(hobby) <span class=\"keyword\">from</span> complex_map;</span><br><span class=\"line\"><span class=\"comment\">--与侧视图连用</span></span><br><span class=\"line\">\t<span class=\"keyword\">select</span> a.name,b.* <span class=\"keyword\">from</span> complex_map a <span class=\"keyword\">lateral</span> <span class=\"keyword\">view</span> <span class=\"keyword\">explode</span>(hobby) b <span class=\"keyword\">as</span> hobby,deep;</span><br></pre></td></tr></table></figure>\n<h4><span id=\"reflect\">reflect</span></h4><p>功能：用于在Hive中直接调用Java中静态类的方法<br>    用法：reflect(classname,method,args)</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> reflect(<span class=\"string\">&quot;java.util.UUID&quot;</span>, <span class=\"string\">&quot;randomUUID&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">select</span> reflect(<span class=\"string\">&quot;java.lang.Math&quot;</span>,<span class=\"string\">&quot;max&quot;</span>,<span class=\"number\">20</span>,<span class=\"number\">30</span>);</span><br><span class=\"line\"><span class=\"keyword\">select</span> reflect(<span class=\"string\">&quot;org.apache.commons.lang.math.NumberUtils&quot;</span>,<span class=\"string\">&quot;isNumber&quot;</span>,<span class=\"string\">&quot;123&quot;</span>);</span><br></pre></td></tr></table></figure>\n<h4><span id=\"get_json_object\">get_json_object</span></h4><p>处理json格式数据</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--创建数据：vim /export/datas/hivedata.json</span></span><br><span class=\"line\">&#123;&quot;id&quot;: 1701439105,&quot;ids&quot;: [2154137571,3889177061],&quot;total_number&quot;: 493&#125;</span><br><span class=\"line\">&#123;&quot;id&quot;: 1701439106,&quot;ids&quot;: [2154137571,3889177061],&quot;total_number&quot;: 494&#125;</span><br><span class=\"line\"><span class=\"comment\">--创建表：</span></span><br><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span> tb_json_test1 (</span><br><span class=\"line\"><span class=\"keyword\">json</span> <span class=\"keyword\">string</span></span><br><span class=\"line\">);</span><br><span class=\"line\"><span class=\"comment\">--加载数据</span></span><br><span class=\"line\"><span class=\"keyword\">load</span> <span class=\"keyword\">data</span> <span class=\"keyword\">local</span> inpath <span class=\"string\">&#x27;/export/datas/hivedata.json&#x27;</span> <span class=\"keyword\">into</span> <span class=\"keyword\">table</span> tb_json_test1;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--处理读取</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> </span><br><span class=\"line\">  get_json_object(t.json,<span class=\"string\">&#x27;$.id&#x27;</span>), </span><br><span class=\"line\">  get_json_object(t.json,<span class=\"string\">&#x27;$.total_number&#x27;</span>) </span><br><span class=\"line\"><span class=\"keyword\">from</span> </span><br><span class=\"line\">  tb_json_test1 t ;</span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"keyword\">select</span> </span><br><span class=\"line\">  t2.* </span><br><span class=\"line\"><span class=\"keyword\">from</span> </span><br><span class=\"line\">  tb_json_test1 t1 </span><br><span class=\"line\"><span class=\"keyword\">lateral</span> <span class=\"keyword\">view</span> </span><br><span class=\"line\">  json_tuple(t1.json, <span class=\"string\">&#x27;id&#x27;</span>, <span class=\"string\">&#x27;total_number&#x27;</span>) t2 <span class=\"keyword\">as</span> c1,c2;</span><br></pre></td></tr></table></figure>\n\n\n<h4><span id=\"coalesce\">COALESCE</span></h4><p>COALESCE(col,0)</p>\n<p>如果单列值为null，替换为默认值0</p>\n<p>concat</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">concat( &#x27;liubei&#x27;,&#x27;xihuan&#x27;,&#x27;xiaoqiao&#x27; )</span><br><span class=\"line\">liubeixihuanxiaoqiao</span><br></pre></td></tr></table></figure>\n\n\n<h4><span id=\"concat_wsampcollect_set\">concat_ws&amp;collect_set</span></h4><p>concat_ws(‘|’, collect_set(c_id))</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">id    name</span><br><span class=\"line\">1001    A</span><br><span class=\"line\">1001    B</span><br><span class=\"line\">1001    C</span><br><span class=\"line\"><span class=\"comment\">-------------------------</span></span><br><span class=\"line\">id      name</span><br><span class=\"line\">1001    A,B,C</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"keyword\">id</span>,collect_list(<span class=\"keyword\">name</span>) <span class=\"keyword\">from</span> tb_ss <span class=\"keyword\">group</span> <span class=\"keyword\">by</span> <span class=\"keyword\">id</span></span><br><span class=\"line\"></span><br><span class=\"line\">如果需要去重课可以使用collect_set,返回的是数组</span><br><span class=\"line\"><span class=\"keyword\">concat_ws</span>(<span class=\"string\">&#x27;|&#x27;</span>,collect_set(c_id))可以将数组内容按|拼接</span><br><span class=\"line\"></span><br><span class=\"line\">如果该列不是<span class=\"keyword\">string</span>，先用<span class=\"keyword\">cast</span>(<span class=\"keyword\">col</span>) <span class=\"keyword\">as</span> <span class=\"keyword\">string</span> 转换为<span class=\"keyword\">string</span>类型</span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"keyword\">id</span>,<span class=\"keyword\">concat_ws</span>(<span class=\"string\">&#x27;,&#x27;</span>,collect_list(<span class=\"keyword\">cast</span> (<span class=\"keyword\">name</span> <span class=\"keyword\">as</span> <span class=\"keyword\">string</span>))) <span class=\"keyword\">from</span> tb_ss <span class=\"keyword\">group</span> <span class=\"keyword\">by</span> <span class=\"keyword\">id</span></span><br></pre></td></tr></table></figure>\n\n\n<h4><span id=\"instr\">instr</span></h4><p>查找字符串str中子字符串substr的位置， 如果查找失败将返回0，如果任一参数为Null将返回null，注意位置为从1开始的 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">instr(string str, string substr)</span><br></pre></td></tr></table></figure>\n\n\n<h4><span id=\"substring\">substring</span></h4><p>截取字符串</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hello</span><br><span class=\"line\">substring(col,1,2) -&gt; &#39;he&#39;</span><br><span class=\"line\">substring(col,-2,2) -&gt; &#39;lo&#39;</span><br></pre></td></tr></table></figure>\n\n\n<h3><span id=\"54常见自带的hive函数\">5.4常见自带的hive函数</span></h3><p>show functions;</p>\n<p>使用desc function  extended 函数名查看帮助</p>\n<p>•UNIX时间戳转日期函数: from_unixtime</p>\n<p>• 获取当前UNIX时间戳函数: unix_timestamp</p>\n<p>•日期转UNIX时间戳函数: unix_timestamp</p>\n<p>• 指定格式日期转UNIX时间戳函数: unix_timestamp</p>\n<p>•日期时间转日期函数: to_date</p>\n<p>•日期转年函数: year</p>\n<p>• 日期转月函数: month</p>\n<p>• 日期转天函数: day</p>\n<p>• 日期转小时函数: hour</p>\n<p>• 日期转分钟函数: minute</p>\n<p>• 日期转秒函数: second</p>\n<p>• 日期转周函数: weekofyear</p>\n<p>• 两个日期之间有多少个月:months_between(‘2020-01-10’, u.birthday)(多用户得出用户年龄)</p>\n<p>• 日期比较函数: datediff</p>\n<p>• 日期增加函数: date_add</p>\n<p>• 日期减少函数: date_sub</p>\n<p>• 取当前天的下一周的周几：next_day(“xxxx-xx-xx”,”Mo”)</p>\n<p>• 取当前月的最后一天：last_day(“xxxx-xx-xx”)</p>\n<p>•If函数: if</p>\n<p>•非空查找函数: COALESCE</p>\n<p>•条件判断函数：CASE</p>\n<p>•字符串长度函数：length</p>\n<p>•字符串反转函数：reverse</p>\n<p>•字符串连接函数：concat</p>\n<p>• 带分隔符字符串连接函数：concat_ws</p>\n<p>• 字符串截取函数：substr,substring</p>\n<p>•正则表达式替换函数：regexp_replace</p>\n<p>•正则表达式解析函数：regexp_extract</p>\n<p>•URL解析函数：parse_url</p>\n<p>​                            parse_url_tuple</p>\n<p>•json解析函数：get_json_object</p>\n<p>​                            json_tuple</p>\n<p>•分割字符串函数: split</p>\n<p>•集合查找函数: find_in_set</p>\n<h3><span id=\"55关于union和union-all\">5.5关于union和union all</span></h3><p>总结分析</p>\n<ol>\n<li><p>子查询相当于表名，使用 from 关键字需要指定真实表名或表别名。</p>\n</li>\n<li><p>hive 不支持union ，只支持union all </p>\n</li>\n<li><p>子查询中使用union all 时，在子查询里不能使用count、sum 等 聚合函数 </p>\n</li>\n<li><p>两表直接进行union all 可以使用count、sum 等聚合函数 </p>\n</li>\n<li><p>两张表进行union all 取相同的字段名称，可正常输出指定数据内容，且结果为两张表的结果集</p>\n</li>\n</ol>\n<h2><span id=\"6hive语法要点\">6.hive语法要点</span></h2><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(1).Hive不支持join的非等值连接,不支持or</span><br><span class=\"line\">分别举例如下及实现解决办法。</span><br><span class=\"line\">  不支持不等值连接</span><br><span class=\"line\">       错误:<span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> a <span class=\"keyword\">inner</span> <span class=\"keyword\">join</span> b <span class=\"keyword\">on</span> a.id&lt;&gt;b.id</span><br><span class=\"line\">       替代方法:<span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> a <span class=\"keyword\">inner</span> <span class=\"keyword\">join</span> b <span class=\"keyword\">on</span> a.id=b.id <span class=\"keyword\">and</span> a.id <span class=\"keyword\">is</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\"> 不支持or</span><br><span class=\"line\">       错误:<span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> a <span class=\"keyword\">inner</span> <span class=\"keyword\">join</span> b <span class=\"keyword\">on</span> a.id=b.id <span class=\"keyword\">or</span> a.name=b.name</span><br><span class=\"line\">       替代方法:<span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> a <span class=\"keyword\">inner</span> <span class=\"keyword\">join</span> b <span class=\"keyword\">on</span> a.id=b.id</span><br><span class=\"line\">                <span class=\"keyword\">union</span> <span class=\"keyword\">all</span></span><br><span class=\"line\">                <span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> a <span class=\"keyword\">inner</span> <span class=\"keyword\">join</span> b <span class=\"keyword\">on</span> a.name=b.name</span><br><span class=\"line\">  两个<span class=\"keyword\">sql</span> <span class=\"keyword\">union</span> <span class=\"keyword\">all</span>的字段名必须一样或者列别名要一样。</span><br><span class=\"line\">        </span><br><span class=\"line\">(<span class=\"number\">2</span>).分号字符:不能智能识别<span class=\"keyword\">concat</span>(‘;’,key)，只会将‘；’当做SQL结束符号。</span><br><span class=\"line\">    •分号是SQL语句结束标记，在HiveQL中也是，但是在HiveQL中，对分号的识别没有那么智慧，例如：</span><br><span class=\"line\">        •<span class=\"keyword\">select</span> <span class=\"keyword\">concat</span>(<span class=\"keyword\">key</span>,<span class=\"keyword\">concat</span>(<span class=\"string\">&#x27;;&#x27;</span>,<span class=\"keyword\">key</span>)) <span class=\"keyword\">from</span> dual;</span><br><span class=\"line\">    •但HiveQL在解析语句时提示：</span><br><span class=\"line\">        FAILED: Parse Error: line 0:-1 mismatched input &#x27;&lt;EOF&gt;&#x27; expecting ) in function specification</span><br><span class=\"line\">    •解决的办法是，使用分号的八进制的ASCII码进行转义，那么上述语句应写成：</span><br><span class=\"line\">        •<span class=\"keyword\">select</span> <span class=\"keyword\">concat</span>(<span class=\"keyword\">key</span>,<span class=\"keyword\">concat</span>(<span class=\"string\">&#x27;\\073&#x27;</span>,<span class=\"keyword\">key</span>)) <span class=\"keyword\">from</span> dual;</span><br><span class=\"line\"></span><br><span class=\"line\">(3).不支持<span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> 表 <span class=\"keyword\">Values</span>（）, <span class=\"keyword\">UPDATE</span>, <span class=\"keyword\">DELETE</span>等操作.这样的话，就不要很复杂的锁机制来读写数据。</span><br><span class=\"line\">    <span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> syntax <span class=\"keyword\">is</span> <span class=\"keyword\">only</span> available <span class=\"keyword\">starting</span> <span class=\"keyword\">in</span> <span class=\"keyword\">version</span> <span class=\"number\">0.8</span>。<span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span>就是在表或分区中追加数据。</span><br><span class=\"line\"></span><br><span class=\"line\">(<span class=\"number\">4</span>).HiveQL中<span class=\"keyword\">String</span>类型的字段若是空(<span class=\"keyword\">empty</span>)字符串, 即长度为<span class=\"number\">0</span>, 那么对它进行<span class=\"keyword\">IS</span> <span class=\"literal\">NULL</span>的判断结果是<span class=\"literal\">False</span>，使用<span class=\"keyword\">left</span> <span class=\"keyword\">join</span>可以进行筛选行。</span><br><span class=\"line\"></span><br><span class=\"line\">(<span class=\"number\">5</span>).不支持 ‘&lt; dt &lt;’这种格式的范围查找，可以用dt <span class=\"keyword\">in</span>(”,”)或者<span class=\"keyword\">between</span>替代。</span><br><span class=\"line\"></span><br><span class=\"line\">(<span class=\"number\">6</span>).Hive不支持将数据插入现有的表或分区中，仅支持覆盖重写整个表，示例如下：</span><br><span class=\"line\">    <span class=\"keyword\">INSERT</span> OVERWRITE <span class=\"keyword\">TABLE</span> t1 <span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> t2;</span><br><span class=\"line\">    </span><br><span class=\"line\">(7).group by的字段,必须是<span class=\"keyword\">select</span>后面的字段，<span class=\"keyword\">select</span>后面的字段不能比<span class=\"keyword\">group</span> <span class=\"keyword\">by</span>的字段多.</span><br><span class=\"line\">    如果<span class=\"keyword\">select</span>后面有聚合函数,则该<span class=\"keyword\">select</span>语句中必须有<span class=\"keyword\">group</span> <span class=\"keyword\">by</span>语句</span><br><span class=\"line\">    而且<span class=\"keyword\">group</span> <span class=\"keyword\">by</span>后面不能使用别名</span><br><span class=\"line\">    </span><br><span class=\"line\">(<span class=\"number\">8</span>).hive的<span class=\"number\">0.13</span>版之前<span class=\"keyword\">select</span> , <span class=\"keyword\">where</span> 及 <span class=\"keyword\">having</span> 之后不能跟子查询语句(一般使用<span class=\"keyword\">left</span> <span class=\"keyword\">join</span>、<span class=\"keyword\">right</span> <span class=\"keyword\">join</span> 或者<span class=\"keyword\">inner</span> <span class=\"keyword\">join</span>替代)</span><br><span class=\"line\"></span><br><span class=\"line\">(<span class=\"number\">9</span>).先<span class=\"keyword\">join</span>(及<span class=\"keyword\">inner</span> <span class=\"keyword\">join</span>) 然后<span class=\"keyword\">left</span> <span class=\"keyword\">join</span>或<span class=\"keyword\">right</span> <span class=\"keyword\">join</span></span><br><span class=\"line\"></span><br><span class=\"line\">(<span class=\"number\">10</span>).hive不支持<span class=\"keyword\">group_concat</span>方法,可用 <span class=\"keyword\">concat_ws</span>(<span class=\"string\">&#x27;|&#x27;</span>, collect_set(<span class=\"keyword\">str</span>)) 实现</span><br><span class=\"line\"></span><br><span class=\"line\">(<span class=\"number\">11</span>).not <span class=\"keyword\">in</span> 后不能包含查询语句,可用<span class=\"keyword\">left</span> <span class=\"keyword\">join</span> tmp <span class=\"keyword\">on</span> tableName.id = tmp.id <span class=\"keyword\">where</span> tmp.id <span class=\"keyword\">is</span> <span class=\"literal\">null</span> 替代实现</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">1.</span><span class=\"keyword\">case</span> <span class=\"keyword\">when</span> ... <span class=\"keyword\">then</span> ... <span class=\"keyword\">else</span> ... <span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">2.</span><span class=\"keyword\">length</span>(<span class=\"keyword\">string</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">3.</span><span class=\"keyword\">cast</span>(<span class=\"keyword\">string</span> <span class=\"keyword\">as</span> <span class=\"built_in\">bigint</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">4.</span><span class=\"keyword\">rand</span>()       返回一个<span class=\"number\">0</span>到<span class=\"number\">1</span>范围内的随机数</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">5.</span><span class=\"keyword\">ceiling</span>(<span class=\"keyword\">double</span>)    向上取整</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">6.</span><span class=\"keyword\">substr</span>(<span class=\"keyword\">string</span> A, <span class=\"built_in\">int</span> <span class=\"keyword\">start</span>, <span class=\"built_in\">int</span> <span class=\"keyword\">len</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">7.</span>collect_set(<span class=\"keyword\">col</span>)函数只接受基本数据类型，它的主要作用是将某字段的值进行去重汇总，产生<span class=\"built_in\">array</span>类型字段</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">8.</span><span class=\"keyword\">concat</span>()函数</span><br><span class=\"line\">    <span class=\"number\">1</span>、功能：将多个字符串连接成一个字符串。</span><br><span class=\"line\">    <span class=\"number\">2</span>、语法：<span class=\"keyword\">concat</span>(str1, str2,...)</span><br><span class=\"line\">    返回结果为连接参数产生的字符串，如果有任何一个参数为<span class=\"literal\">null</span>，则返回值为<span class=\"literal\">null</span>。</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"number\">9.</span><span class=\"keyword\">concat_ws</span>()函数</span><br><span class=\"line\">    <span class=\"number\">1</span>、功能：和<span class=\"keyword\">concat</span>()一样，将多个字符串连接成一个字符串，但是可以一次性指定分隔符～（<span class=\"keyword\">concat_ws</span>就是<span class=\"keyword\">concat</span> <span class=\"keyword\">with</span> separator）</span><br><span class=\"line\">    <span class=\"number\">2</span>、语法：<span class=\"keyword\">concat_ws</span>(separator, str1, str2, ...)</span><br><span class=\"line\">    说明：第一个参数指定分隔符。需要注意的是分隔符不能为<span class=\"literal\">null</span>，如果为<span class=\"literal\">null</span>，则返回结果为<span class=\"literal\">null</span>。</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"number\">10.</span>nvl(expr1, expr2)：空值转换函数  nvl(x,y)    <span class=\"keyword\">Returns</span> y <span class=\"keyword\">if</span> x <span class=\"keyword\">is</span> <span class=\"literal\">null</span> <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> x</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">11.</span><span class=\"keyword\">if</span>(<span class=\"built_in\">boolean</span> testCondition, T valueTrue, T valueFalse)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">12.</span>row_number()<span class=\"keyword\">over</span>()分组排序功能,<span class=\"keyword\">over</span>()里头的分组以及排序的执行晚于 <span class=\"keyword\">where</span> <span class=\"keyword\">group</span> <span class=\"keyword\">by</span>  <span class=\"keyword\">order</span> <span class=\"keyword\">by</span> 的执行。</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">13.</span>获取年、月、日、小时、分钟、秒、当年第几周</span><br><span class=\"line\">    <span class=\"keyword\">select</span> </span><br><span class=\"line\">        <span class=\"keyword\">year</span>(<span class=\"string\">&#x27;2018-02-27 10:00:00&#x27;</span>)       <span class=\"keyword\">as</span> <span class=\"keyword\">year</span></span><br><span class=\"line\">        ,<span class=\"keyword\">month</span>(<span class=\"string\">&#x27;2018-02-27 10:00:00&#x27;</span>)      <span class=\"keyword\">as</span> <span class=\"keyword\">month</span></span><br><span class=\"line\">        ,<span class=\"keyword\">day</span>(<span class=\"string\">&#x27;2018-02-27 10:00:00&#x27;</span>)        <span class=\"keyword\">as</span> <span class=\"keyword\">day</span></span><br><span class=\"line\">        ,<span class=\"keyword\">hour</span>(<span class=\"string\">&#x27;2018-02-27 10:00:00&#x27;</span>)       <span class=\"keyword\">as</span> <span class=\"keyword\">hour</span></span><br><span class=\"line\">        ,<span class=\"keyword\">minute</span>(<span class=\"string\">&#x27;2018-02-27 10:00:00&#x27;</span>)     <span class=\"keyword\">as</span> <span class=\"keyword\">minute</span></span><br><span class=\"line\">        ,<span class=\"keyword\">second</span>(<span class=\"string\">&#x27;2018-02-27 10:00:00&#x27;</span>)     <span class=\"keyword\">as</span> <span class=\"keyword\">second</span></span><br><span class=\"line\">        ,<span class=\"keyword\">weekofyear</span>(<span class=\"string\">&#x27;2018-02-27 10:00:00&#x27;</span>) <span class=\"keyword\">as</span> <span class=\"keyword\">weekofyear</span></span><br><span class=\"line\">  获取当前时间:</span><br><span class=\"line\">        <span class=\"number\">1</span>).current_timestamp</span><br><span class=\"line\">        <span class=\"number\">2</span>).unix_timestamp()</span><br><span class=\"line\">        <span class=\"number\">3</span>).from_unixtime(<span class=\"keyword\">unix_timestamp</span>())</span><br><span class=\"line\">        <span class=\"number\">4</span>).CURRENT_DATE</span><br></pre></td></tr></table></figure>\n\n\n<h2><span id=\"7hive优化\">7.hive优化</span></h2><h3><span id=\"71大表join大表优化\">7.1大表join大表优化</span></h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br><span class=\"line\">320</span><br><span class=\"line\">321</span><br><span class=\"line\">322</span><br><span class=\"line\">323</span><br><span class=\"line\">324</span><br><span class=\"line\">325</span><br><span class=\"line\">326</span><br><span class=\"line\">327</span><br><span class=\"line\">328</span><br><span class=\"line\">329</span><br><span class=\"line\">330</span><br><span class=\"line\">331</span><br><span class=\"line\">332</span><br><span class=\"line\">333</span><br><span class=\"line\">334</span><br><span class=\"line\">335</span><br><span class=\"line\">336</span><br><span class=\"line\">337</span><br><span class=\"line\">338</span><br><span class=\"line\">339</span><br><span class=\"line\">340</span><br><span class=\"line\">341</span><br><span class=\"line\">342</span><br><span class=\"line\">343</span><br><span class=\"line\">344</span><br><span class=\"line\">345</span><br><span class=\"line\">346</span><br><span class=\"line\">347</span><br><span class=\"line\">348</span><br><span class=\"line\">349</span><br><span class=\"line\">350</span><br><span class=\"line\">351</span><br><span class=\"line\">352</span><br><span class=\"line\">353</span><br><span class=\"line\">354</span><br><span class=\"line\">355</span><br><span class=\"line\">356</span><br><span class=\"line\">357</span><br><span class=\"line\">358</span><br><span class=\"line\">359</span><br><span class=\"line\">360</span><br><span class=\"line\">361</span><br><span class=\"line\">362</span><br><span class=\"line\">363</span><br><span class=\"line\">364</span><br><span class=\"line\">365</span><br><span class=\"line\">366</span><br><span class=\"line\">367</span><br><span class=\"line\">368</span><br><span class=\"line\">369</span><br><span class=\"line\">370</span><br><span class=\"line\">371</span><br><span class=\"line\">372</span><br><span class=\"line\">373</span><br><span class=\"line\">374</span><br><span class=\"line\">375</span><br><span class=\"line\">376</span><br><span class=\"line\">377</span><br><span class=\"line\">378</span><br><span class=\"line\">379</span><br><span class=\"line\">380</span><br><span class=\"line\">381</span><br><span class=\"line\">382</span><br><span class=\"line\">383</span><br><span class=\"line\">384</span><br><span class=\"line\">385</span><br><span class=\"line\">386</span><br><span class=\"line\">387</span><br><span class=\"line\">388</span><br><span class=\"line\">389</span><br><span class=\"line\">390</span><br><span class=\"line\">391</span><br><span class=\"line\">392</span><br><span class=\"line\">393</span><br><span class=\"line\">394</span><br><span class=\"line\">395</span><br><span class=\"line\">396</span><br><span class=\"line\">397</span><br><span class=\"line\">398</span><br><span class=\"line\">399</span><br><span class=\"line\">400</span><br><span class=\"line\">401</span><br><span class=\"line\">402</span><br><span class=\"line\">403</span><br><span class=\"line\">404</span><br><span class=\"line\">405</span><br><span class=\"line\">406</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">如果Hive优化实战2中mapjoin中小表dim_seller很大呢？比如超过了1GB大小？这种就是大表join大表的问题。首先引入一个具体的问题场景，然后基于此介绍各自优化方案。</span><br><span class=\"line\"></span><br><span class=\"line\">1、问题场景</span><br><span class=\"line\">问题场景如下：</span><br><span class=\"line\"></span><br><span class=\"line\">A表为一个汇总表，汇总的是卖家买家最近N天交易汇总信息，即对于每个卖家最近N天，其每个买家共成交了多少单，总金额是多少，假设N取90天，汇总值仅取成交单数。</span><br><span class=\"line\"></span><br><span class=\"line\">A表的字段有：buyer_id、seller_id、pay_cnt_90day。</span><br><span class=\"line\"></span><br><span class=\"line\">B表为卖家基本信息表，其字段有seller_id、sale_level，其中sale_levels是卖家的一个分层评级信息，比如吧卖家分为6个级别：S0、S1、S2、S3、S4和S5。</span><br><span class=\"line\"></span><br><span class=\"line\">要获得的结果是每个买家在各个级别的卖家的成交比例信息，比如：</span><br><span class=\"line\"></span><br><span class=\"line\">某买家：S0:10%；S1:20%；S2:20%；S3:10%；S4:20%；S5:10%。</span><br><span class=\"line\"></span><br><span class=\"line\">正如mapjoin中的例子一样，第一反应是直接join两表并统计：</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">select</span></span><br><span class=\"line\"></span><br><span class=\"line\">m.buyer_id,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">sum</span>(pay_cnt_90day)  <span class=\"keyword\">as</span> pay_cnt_90day,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">sum</span>(<span class=\"keyword\">case</span> <span class=\"keyword\">when</span> m.sale_level = <span class=\"number\">0</span>  <span class=\"keyword\">then</span> pay_cnt_90day  <span class=\"keyword\">end</span>)  <span class=\"keyword\">as</span> pay_cnt_90day_s0,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">sum</span>(<span class=\"keyword\">case</span> <span class=\"keyword\">when</span> m.sale_level = <span class=\"number\">1</span>  <span class=\"keyword\">then</span> pay_cnt_90day  <span class=\"keyword\">end</span>)  <span class=\"keyword\">as</span> pay_cnt_90day_s1,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">sum</span>(<span class=\"keyword\">case</span> <span class=\"keyword\">when</span> m.sale_level = <span class=\"number\">2</span>  <span class=\"keyword\">then</span> pay_cnt_90day  <span class=\"keyword\">end</span>)  <span class=\"keyword\">as</span> pay_cnt_90day_s2,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">sum</span>(<span class=\"keyword\">case</span> <span class=\"keyword\">when</span> m.sale_level = <span class=\"number\">3</span>  <span class=\"keyword\">then</span> pay_cnt_90day  <span class=\"keyword\">end</span>)  <span class=\"keyword\">as</span> pay_cnt_90day_s3,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">sum</span>(<span class=\"keyword\">case</span> <span class=\"keyword\">when</span> m.sale_level = <span class=\"number\">4</span>  <span class=\"keyword\">then</span> pay_cnt_90day  <span class=\"keyword\">end</span>)  <span class=\"keyword\">as</span> pay_cnt_90day_s4,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">sum</span>(<span class=\"keyword\">case</span> <span class=\"keyword\">when</span> m.sale_level = <span class=\"number\">5</span>  <span class=\"keyword\">then</span> pay_cnt_90day  <span class=\"keyword\">end</span>)  <span class=\"keyword\">as</span> pay_cnt_90day_s5</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> (</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">select</span>  a.buer_id,  a.seller_id,  b.sale_level, a.pay_cnt_90day</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> (  <span class=\"keyword\">select</span> buyer_id,  seller_id,  pay_cnt_90day   <span class=\"keyword\">from</span> table_A)  a</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">join</span></span><br><span class=\"line\"></span><br><span class=\"line\">(<span class=\"keyword\">select</span> seller_id,  sale_level  <span class=\"keyword\">from</span> table_B)  b</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">on</span>  a.seller_id  = b.seller_id</span><br><span class=\"line\"></span><br><span class=\"line\">)  m</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">group</span> <span class=\"keyword\">by</span> m.buyer_id</span><br><span class=\"line\"></span><br><span class=\"line\">但是此<span class=\"keyword\">SQL</span>会引起数据倾斜，原因在于卖家的二八准则，某些卖家<span class=\"number\">90</span>天内会有几百万甚至上千万的买家，但是大部分的卖家<span class=\"number\">90</span>天内买家的数目并不多，<span class=\"keyword\">join</span> table_A和table_B的时候，</span><br><span class=\"line\"></span><br><span class=\"line\">ODPS会按照seller_id进行分发，table_A的大卖家引起了数据倾斜。</span><br><span class=\"line\"></span><br><span class=\"line\">但是数据本身无法用mapjoin table_B解决，因为卖家超过千万条，文件大小有几个GB，超过了<span class=\"number\">1</span>GB的限制。</span><br><span class=\"line\"></span><br><span class=\"line\">优化方案<span class=\"number\">1</span>：转为mapjoin</span><br><span class=\"line\">一个很正常的想法是，尽管B表无法直接mapjoin, 但是是否可以间接mapjoin它呢？</span><br><span class=\"line\"></span><br><span class=\"line\">实际上此思路有两种途径：限制行和限制列。</span><br><span class=\"line\"></span><br><span class=\"line\">限制行的思路是不需要<span class=\"keyword\">join</span> B全表，而只需要<span class=\"keyword\">join</span>其在A表中存在的，对于本问题场景，就是过滤掉<span class=\"number\">90</span>天内没有成交的卖家。</span><br><span class=\"line\"></span><br><span class=\"line\">限制列的思路是只取需要的字段。</span><br><span class=\"line\"></span><br><span class=\"line\">加上如上的限制后，检查过滤后的B表是否满足了Hive  mapjoin的条件，如果能满足，那么添加过滤条件生成一个临时B表，然后mapjoin该表即可。采用此思路的语句如下：</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">select</span></span><br><span class=\"line\"></span><br><span class=\"line\">m.buyer_id,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">sum</span>(pay_cnt_90day)  <span class=\"keyword\">as</span> pay_cnt_90day,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">sum</span>(<span class=\"keyword\">case</span> <span class=\"keyword\">when</span> m.sale_level = <span class=\"number\">0</span>  <span class=\"keyword\">then</span> pay_cnt_90day  <span class=\"keyword\">end</span>)  <span class=\"keyword\">as</span> pay_cnt_90day_s0,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">sum</span>(<span class=\"keyword\">case</span> <span class=\"keyword\">when</span> m.sale_level = <span class=\"number\">1</span>  <span class=\"keyword\">then</span> pay_cnt_90day  <span class=\"keyword\">end</span>)  <span class=\"keyword\">as</span> pay_cnt_90day_s1,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">sum</span>(<span class=\"keyword\">case</span> <span class=\"keyword\">when</span> m.sale_level = <span class=\"number\">2</span>  <span class=\"keyword\">then</span> pay_cnt_90day  <span class=\"keyword\">end</span>)  <span class=\"keyword\">as</span> pay_cnt_90day_s2,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">sum</span>(<span class=\"keyword\">case</span> <span class=\"keyword\">when</span> m.sale_level = <span class=\"number\">3</span>  <span class=\"keyword\">then</span> pay_cnt_90day  <span class=\"keyword\">end</span>)  <span class=\"keyword\">as</span> pay_cnt_90day_s3,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">sum</span>(<span class=\"keyword\">case</span> <span class=\"keyword\">when</span> m.sale_level = <span class=\"number\">4</span>  <span class=\"keyword\">then</span> pay_cnt_90day  <span class=\"keyword\">end</span>)  <span class=\"keyword\">as</span> pay_cnt_90day_s4,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">sum</span>(<span class=\"keyword\">case</span> <span class=\"keyword\">when</span> m.sale_level = <span class=\"number\">5</span>  <span class=\"keyword\">then</span> pay_cnt_90day  <span class=\"keyword\">end</span>)  <span class=\"keyword\">as</span> pay_cnt_90day_s5</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> ( </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">select</span>  <span class=\"comment\">/*+mapjoin(b)*/</span></span><br><span class=\"line\"></span><br><span class=\"line\">a.buer_id,  a.seller_id,  b.sale_level, a.pay_cnt_90day</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> (  <span class=\"keyword\">select</span> buyer_id,  seller_id,  pay_cnt_90day   <span class=\"keyword\">from</span> table_A)  a</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">join</span></span><br><span class=\"line\"></span><br><span class=\"line\">(</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">select</span> seller_id,  sale_level  <span class=\"keyword\">from</span> table_B b0</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">join</span> </span><br><span class=\"line\"></span><br><span class=\"line\">    (<span class=\"keyword\">select</span> seller_id <span class=\"keyword\">from</span> table_A <span class=\"keyword\">group</span> <span class=\"keyword\">by</span> seller_id) a0</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">on</span> b0.seller_id = a0.selller_id</span><br><span class=\"line\"></span><br><span class=\"line\">)  b</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">on</span>  a.seller_id  = b.seller_id</span><br><span class=\"line\"></span><br><span class=\"line\">)  m</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">group</span> <span class=\"keyword\">by</span> m.buyer_id</span><br><span class=\"line\"></span><br><span class=\"line\">此方案在一些情况可以起作用，但是很多时候还是无法解决上述问题，因为大部分卖家尽管<span class=\"number\">90</span>天内买家不多，但还是有一些的，过滤后的B表仍然很多。</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">优化方案<span class=\"number\">2</span>：<span class=\"keyword\">join</span>时用<span class=\"keyword\">case</span> <span class=\"keyword\">when</span>语句</span><br><span class=\"line\">此种解决方案应用场景是：倾斜的值是明确的而且数量很少，比如<span class=\"literal\">null</span>值引起的倾斜。其核心是将这些引起倾斜的值随机分发到Reduce,其主要核心逻辑在于<span class=\"keyword\">join</span>时对这些特殊值<span class=\"keyword\">concat</span>随机数，</span><br><span class=\"line\"></span><br><span class=\"line\">从而达到随机分发的目的。此方案的核心逻辑如下：</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">select</span> a.user_id, a.order_id, b.user_id</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> table_a a <span class=\"keyword\">join</span> table_b b</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">on</span> (<span class=\"keyword\">case</span> <span class=\"keyword\">when</span> a.user_is <span class=\"keyword\">is</span> <span class=\"literal\">null</span> <span class=\"keyword\">then</span> <span class=\"keyword\">concat</span>(<span class=\"string\">&#x27;hive&#x27;</span>, <span class=\"keyword\">rand</span>()) <span class=\"keyword\">else</span> a.user_id <span class=\"keyword\">end</span>) = b.user_id</span><br><span class=\"line\"></span><br><span class=\"line\">Hive 已对此进行了优化，只需要设置参数skewinfo和skewjoin参数，不修改<span class=\"keyword\">SQL</span>代码，例如，由于table_B的值“<span class=\"number\">0</span>” 和“<span class=\"number\">1</span>”引起了倾斜，值需要做如下设置：</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">set</span> hive.optimize.skewinfo=table_B:(selleer_id) [ ( <span class=\"string\">&quot;0&quot;</span>) (<span class=\"string\">&quot;1&quot;</span>) ) ] </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">set</span> hive.optimize.skewjoin = <span class=\"literal\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">但是方案2因为无法解决本问题场景的倾斜问题，因为倾斜的卖家大量存在而且动态变化。</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">优化方案3：倍数B表，再取模join</span><br><span class=\"line\">1、通用方案</span><br><span class=\"line\">此方案的思路是建立一个numbers表，其值只有一列int 行，比如从1到10（具体值可根据倾斜程度确定），然后放大B表10倍，再取模join。代码如下：</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">select</span></span><br><span class=\"line\"></span><br><span class=\"line\">m.buyer_id,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">sum</span>(pay_cnt_90day)  <span class=\"keyword\">as</span> pay_cnt_90day,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">sum</span>(<span class=\"keyword\">case</span> <span class=\"keyword\">when</span> m.sale_level = <span class=\"number\">0</span>  <span class=\"keyword\">then</span> pay_cnt_90day  <span class=\"keyword\">end</span>)  <span class=\"keyword\">as</span> pay_cnt_90day_s0,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">sum</span>(<span class=\"keyword\">case</span> <span class=\"keyword\">when</span> m.sale_level = <span class=\"number\">1</span>  <span class=\"keyword\">then</span> pay_cnt_90day  <span class=\"keyword\">end</span>)  <span class=\"keyword\">as</span> pay_cnt_90day_s1,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">sum</span>(<span class=\"keyword\">case</span> <span class=\"keyword\">when</span> m.sale_level = <span class=\"number\">2</span>  <span class=\"keyword\">then</span> pay_cnt_90day  <span class=\"keyword\">end</span>)  <span class=\"keyword\">as</span> pay_cnt_90day_s2,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">sum</span>(<span class=\"keyword\">case</span> <span class=\"keyword\">when</span> m.sale_level = <span class=\"number\">3</span>  <span class=\"keyword\">then</span> pay_cnt_90day  <span class=\"keyword\">end</span>)  <span class=\"keyword\">as</span> pay_cnt_90day_s3,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">sum</span>(<span class=\"keyword\">case</span> <span class=\"keyword\">when</span> m.sale_level = <span class=\"number\">4</span>  <span class=\"keyword\">then</span> pay_cnt_90day  <span class=\"keyword\">end</span>)  <span class=\"keyword\">as</span> pay_cnt_90day_s4,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">sum</span>(<span class=\"keyword\">case</span> <span class=\"keyword\">when</span> m.sale_level = <span class=\"number\">5</span>  <span class=\"keyword\">then</span> pay_cnt_90day  <span class=\"keyword\">end</span>)  <span class=\"keyword\">as</span> pay_cnt_90day_s5</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> (</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">select</span>  a.buer_id,  a.seller_id,  b.sale_level, a.pay_cnt_90day</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> (  <span class=\"keyword\">select</span> buyer_id,  seller_id,  pay_cnt_90day   <span class=\"keyword\">from</span> table_A)  a</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">join</span></span><br><span class=\"line\"></span><br><span class=\"line\">(</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">select</span>  <span class=\"comment\">/*+mapjoin(members)*/</span></span><br><span class=\"line\"></span><br><span class=\"line\">seller_id,  sale_level ,<span class=\"keyword\">member</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> table_B</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">join</span> members</span><br><span class=\"line\"></span><br><span class=\"line\">)  b</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">on</span>  a.seller_id  = b.seller_id</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">and</span> <span class=\"keyword\">mod</span>(a.pay_cnt_90day,<span class=\"number\">10</span>)+<span class=\"number\">1</span> = b.number </span><br><span class=\"line\"></span><br><span class=\"line\">)  m</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">group</span> <span class=\"keyword\">by</span> m.buyer_id</span><br><span class=\"line\"></span><br><span class=\"line\">此思路的核心在于，既然按照seller_id分发会倾斜，那么再人工增加一列进行分发，这样之前倾斜的值的倾斜程度会减少到原来的<span class=\"number\">1</span>/<span class=\"number\">10</span>，可以通过配置numbers表改放大倍数来降低倾斜程度，</span><br><span class=\"line\"></span><br><span class=\"line\">但这样做的一个弊端是B表也会膨胀N倍。</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">2</span>、专用方案</span><br><span class=\"line\">通用方案的思路把B表的每条数据都放大了相同的倍数，实际上这是不需要的，只需要把大卖家放大倍数即可：需要首先知道大卖家的名单，即先建立一个临时表动态存放每天最新的大卖家（</span><br><span class=\"line\"></span><br><span class=\"line\">比如dim_big_seller）,同时此表的大卖家要膨胀预先设定的倍数（<span class=\"number\">1000</span>倍）。</span><br><span class=\"line\"></span><br><span class=\"line\">在A表和B表分别新建一个<span class=\"keyword\">join</span>列，其逻辑为：如果是大卖家，那么<span class=\"keyword\">concat</span>一个随机分配正整数（<span class=\"number\">0</span>到预定义的倍数之间，本例为<span class=\"number\">0</span>~<span class=\"number\">1000</span>）；如果不是，保持不变。具体代码如下：</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">select</span></span><br><span class=\"line\"></span><br><span class=\"line\">m.buyer_id,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">sum</span>(pay_cnt_90day)  <span class=\"keyword\">as</span> pay_cnt_90day,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">sum</span>(<span class=\"keyword\">case</span> <span class=\"keyword\">when</span> m.sale_level = <span class=\"number\">0</span>  <span class=\"keyword\">then</span> pay_cnt_90day  <span class=\"keyword\">end</span>)  <span class=\"keyword\">as</span> pay_cnt_90day_s0,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">sum</span>(<span class=\"keyword\">case</span> <span class=\"keyword\">when</span> m.sale_level = <span class=\"number\">1</span>  <span class=\"keyword\">then</span> pay_cnt_90day  <span class=\"keyword\">end</span>)  <span class=\"keyword\">as</span> pay_cnt_90day_s1,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">sum</span>(<span class=\"keyword\">case</span> <span class=\"keyword\">when</span> m.sale_level = <span class=\"number\">2</span>  <span class=\"keyword\">then</span> pay_cnt_90day  <span class=\"keyword\">end</span>)  <span class=\"keyword\">as</span> pay_cnt_90day_s2,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">sum</span>(<span class=\"keyword\">case</span> <span class=\"keyword\">when</span> m.sale_level = <span class=\"number\">3</span>  <span class=\"keyword\">then</span> pay_cnt_90day  <span class=\"keyword\">end</span>)  <span class=\"keyword\">as</span> pay_cnt_90day_s3,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">sum</span>(<span class=\"keyword\">case</span> <span class=\"keyword\">when</span> m.sale_level = <span class=\"number\">4</span>  <span class=\"keyword\">then</span> pay_cnt_90day  <span class=\"keyword\">end</span>)  <span class=\"keyword\">as</span> pay_cnt_90day_s4,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">sum</span>(<span class=\"keyword\">case</span> <span class=\"keyword\">when</span> m.sale_level = <span class=\"number\">5</span>  <span class=\"keyword\">then</span> pay_cnt_90day  <span class=\"keyword\">end</span>)  <span class=\"keyword\">as</span> pay_cnt_90day_s5</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> (</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">select</span>  a.buer_id,  a.seller_id,  b.sale_level, a.pay_cnt_90day</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> (  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">select</span>  <span class=\"comment\">/*+mapjoin(big)*/</span></span><br><span class=\"line\"></span><br><span class=\"line\">buyer_id,  seller_id,  pay_cnt_90day,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span>(big.seller_id <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">null</span>, <span class=\"keyword\">concat</span>(  table_A.seller_id,  <span class=\"string\">&#x27;rnd&#x27;</span>,  <span class=\"keyword\">cast</span>(  <span class=\"keyword\">rand</span>() * <span class=\"number\">1000</span> <span class=\"keyword\">as</span> <span class=\"built_in\">bigint</span> ), table_A.seller_id)  <span class=\"keyword\">as</span> seller_id_joinkey</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> table_A</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">left</span> <span class=\"keyword\">outer</span> <span class=\"keyword\">join</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--big表seller_id有重复，请注意一定要group by 后再join,保证table_A的行数保持不变</span></span><br><span class=\"line\"></span><br><span class=\"line\">（<span class=\"keyword\">select</span> seller_id  <span class=\"keyword\">from</span> dim_big_seller  <span class=\"keyword\">group</span> <span class=\"keyword\">by</span> seller_id）<span class=\"keyword\">big</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">on</span> table_A.seller_id = big.seller_id</span><br><span class=\"line\"></span><br><span class=\"line\">)  a</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">join</span></span><br><span class=\"line\"></span><br><span class=\"line\">(</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">select</span>  <span class=\"comment\">/*+mapjoin(big)*/</span></span><br><span class=\"line\"></span><br><span class=\"line\">seller_id,  sale_level ,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--big表的seller_id_joinkey生成逻辑和上面的生成逻辑一样</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">coalesce</span>(seller_id_joinkey,table_B.seller_id) <span class=\"keyword\">as</span> seller_id_joinkey</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> table_B</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">left</span> <span class=\"keyword\">out</span> <span class=\"keyword\">join</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--table_B表join大卖家表后大卖家行数扩大1000倍，其它卖家行数保持不变</span></span><br><span class=\"line\"></span><br><span class=\"line\">(<span class=\"keyword\">select</span> seller_id, seller_id_joinkey <span class=\"keyword\">from</span> dim_big_seller) <span class=\"keyword\">big</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">on</span> table_B.seller_id= big.seller_id</span><br><span class=\"line\"></span><br><span class=\"line\">)  b</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">on</span>  a.seller_id_joinkey= b.seller_id_joinkey</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">and</span> <span class=\"keyword\">mod</span>(a.pay_cnt_90day,<span class=\"number\">10</span>)+<span class=\"number\">1</span> = b.number </span><br><span class=\"line\"></span><br><span class=\"line\">)  m</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">group</span> <span class=\"keyword\">by</span> m.buyer_id</span><br><span class=\"line\"></span><br><span class=\"line\">相比通用方案，专用方案的运行效率明细好了许多，因为只是将B表中大卖家的行数放大了<span class=\"number\">1000</span>倍，其它卖家的行数保持不变，但同时代码复杂了很多，而且必须首先建立大数据表。</span><br><span class=\"line\"></span><br><span class=\"line\">方案<span class=\"number\">4</span>：动态一分为二</span><br><span class=\"line\">实际上方案<span class=\"number\">2</span>和<span class=\"number\">3</span>都用了一分为二的思想，但是都不彻底，对于mapjoin不能解决的问题，终极解决方案是动态一分为二，即对倾斜的键值和不倾斜的键值分开处理，不倾斜的正常<span class=\"keyword\">join</span>即可，倾斜的把他们找出来做mapjoin，最后<span class=\"keyword\">union</span> <span class=\"keyword\">all</span>其结果即可。</span><br><span class=\"line\"></span><br><span class=\"line\">但是此种解决方案比较麻烦，代码复杂而且需要一个临时表存放倾斜的键值。代码如下：</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--由于数据倾斜，先找出90天买家超过10000的卖家</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">insert</span> overwrite <span class=\"keyword\">table</span>  temp_table_B</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">select</span> </span><br><span class=\"line\"></span><br><span class=\"line\">m.seller_id,  n.sale_level</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> (</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">select</span>   seller_id</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> (</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">select</span> seller_id,<span class=\"keyword\">count</span>(buyer_id) <span class=\"keyword\">as</span> byr_cnt</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> table_A</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">group</span> <span class=\"keyword\">by</span> seller_id</span><br><span class=\"line\"></span><br><span class=\"line\">) a</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">where</span> a.byr_cnt &gt;<span class=\"number\">10000</span></span><br><span class=\"line\"></span><br><span class=\"line\">) m</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">left</span> <span class=\"keyword\">join</span> </span><br><span class=\"line\"></span><br><span class=\"line\">(</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">select</span> seller_id, sale_level  <span class=\"keyword\">from</span> table_B</span><br><span class=\"line\"></span><br><span class=\"line\">) n</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">on</span> m.seller_id = n.seller_id;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--对于90天买家超过10000的卖家直接mapjoin,对其它卖家直接正常join即可。</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">select</span></span><br><span class=\"line\"></span><br><span class=\"line\">m.buyer_id,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">sum</span>(pay_cnt_90day)  <span class=\"keyword\">as</span> pay_cnt_90day,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">sum</span>(<span class=\"keyword\">case</span> <span class=\"keyword\">when</span> m.sale_level = <span class=\"number\">0</span>  <span class=\"keyword\">then</span> pay_cnt_90day  <span class=\"keyword\">end</span>)  <span class=\"keyword\">as</span> pay_cnt_90day_s0,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">sum</span>(<span class=\"keyword\">case</span> <span class=\"keyword\">when</span> m.sale_level = <span class=\"number\">1</span>  <span class=\"keyword\">then</span> pay_cnt_90day  <span class=\"keyword\">end</span>)  <span class=\"keyword\">as</span> pay_cnt_90day_s1,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">sum</span>(<span class=\"keyword\">case</span> <span class=\"keyword\">when</span> m.sale_level = <span class=\"number\">2</span>  <span class=\"keyword\">then</span> pay_cnt_90day  <span class=\"keyword\">end</span>)  <span class=\"keyword\">as</span> pay_cnt_90day_s2,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">sum</span>(<span class=\"keyword\">case</span> <span class=\"keyword\">when</span> m.sale_level = <span class=\"number\">3</span>  <span class=\"keyword\">then</span> pay_cnt_90day  <span class=\"keyword\">end</span>)  <span class=\"keyword\">as</span> pay_cnt_90day_s3,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">sum</span>(<span class=\"keyword\">case</span> <span class=\"keyword\">when</span> m.sale_level = <span class=\"number\">4</span>  <span class=\"keyword\">then</span> pay_cnt_90day  <span class=\"keyword\">end</span>)  <span class=\"keyword\">as</span> pay_cnt_90day_s4,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">sum</span>(<span class=\"keyword\">case</span> <span class=\"keyword\">when</span> m.sale_level = <span class=\"number\">5</span>  <span class=\"keyword\">then</span> pay_cnt_90day  <span class=\"keyword\">end</span>)  <span class=\"keyword\">as</span> pay_cnt_90day_s5</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> (</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">select</span>  a.buer_id,  a.seller_id,  b.sale_level, a.pay_cnt_90day</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> (  <span class=\"keyword\">select</span> buyer_id,  seller_id,  pay_cnt_90day   <span class=\"keyword\">from</span> table_A)  a</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">join</span></span><br><span class=\"line\"></span><br><span class=\"line\">(</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">select</span> seller_id,  a.sale_level </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> table_A  a</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">left</span> <span class=\"keyword\">join</span> temp_table_B b</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">on</span> a.seller_id = b.seller_id</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">where</span> b.seller_id <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">null</span></span><br><span class=\"line\"></span><br><span class=\"line\">)  b</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">on</span>  a.seller_id  = b.seller_id</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">union</span> <span class=\"keyword\">all</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">select</span>  <span class=\"comment\">/*+mapjoin(b)*/</span></span><br><span class=\"line\"></span><br><span class=\"line\">a.buer_id,  a.seller_id,  b.sale_level, a.pay_cnt_90day</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> ( </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">select</span> buyer_id,  seller_id,  pay_cnt_90day   </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> table_A</span><br><span class=\"line\"></span><br><span class=\"line\">)  a</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">join</span></span><br><span class=\"line\"></span><br><span class=\"line\">(</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">select</span> seller_id,  sale_level  <span class=\"keyword\">from</span> table_B </span><br><span class=\"line\"></span><br><span class=\"line\">)  b</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">on</span>  a.seller_id  = b.seller_id</span><br><span class=\"line\"></span><br><span class=\"line\">)  m  <span class=\"keyword\">group</span> <span class=\"keyword\">by</span> m.buyer_id</span><br><span class=\"line\"></span><br><span class=\"line\">) m</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">group</span> <span class=\"keyword\">by</span> m.buyer_id</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">总结：方案<span class=\"number\">1</span>、<span class=\"number\">2</span>以及方案<span class=\"number\">3</span>中的同用方案不能保证解决大表<span class=\"keyword\">join</span>大表问题，因为它们都存在种种不同的限制和特定使用场景。</span><br><span class=\"line\"></span><br><span class=\"line\">而方案<span class=\"number\">3</span>的专用方案和方案<span class=\"number\">4</span>是推荐的优化方案，但是它们都需要新建一个临时表来存储每日动态变化的大卖家。相对方案<span class=\"number\">4</span>来说，方案<span class=\"number\">3</span>的专用方案不需要对代码框架进行修改，但是B表会被放大，所以一定要是是维度表，不然统计结果会是错误的。方案<span class=\"number\">4</span>最通用，自由度最高，但是对代码的更改也最大，甚至修改更难代码框架，可以作为终极方案使用。</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<h1 id=\"Hive\"><a href=\"#Hive\" class=\"headerlink\" title=\"Hive\"></a>Hive</h1><!-- toc -->\n\n<ul>\n<li><a href=\"#%E6%A6%82%E8%BF%B0\">概述</a></li>\n<li><a href=\"#1ddl%E6%93%8D%E4%BD%9C\">1.DDL操作</a><ul>\n<li><a href=\"#11-%E5%88%9B%E5%BB%BA%E8%A1%A8\">1.1 创建表</a></li>\n<li><a href=\"#12-%E4%BF%AE%E6%94%B9%E8%A1%A8\">1.2 修改表</a></li>\n</ul>\n</li>\n<li><a href=\"#2dml%E6%93%8D%E4%BD%9C\">2.DML操作</a><ul>\n<li><a href=\"#21-load\">2.1 load</a></li>\n<li><a href=\"#22-insert\">2.2 insert</a></li>\n<li><a href=\"#23-join\">2.3 join</a></li>\n<li><a href=\"#24-%E6%8E%92%E5%BA%8F\">2.4 排序</a></li>\n</ul>\n</li>\n<li><a href=\"#3hive%E5%8F%82%E6%95%B0%E9%85%8D%E7%BD%AE\">3.hive参数配置</a><ul>\n<li><a href=\"#31-hive-shell%E5%91%BD%E4%BB%A4%E8%A1%8C\">3.1 Hive shell命令行</a></li>\n<li><a href=\"#32-hive-%E5%8F%82%E6%95%B0%E9%85%8D%E7%BD%AE%E6%96%B9%E5%BC%8F\">3.2 Hive 参数配置方式</a></li>\n</ul>\n</li>\n<li><a href=\"#4hive%E4%B8%AD%E5%A4%8D%E6%9D%82%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E7%9A%84%E4%BD%BF%E7%94%A8\">4.hive中复杂数据类型的使用</a><ul>\n<li><a href=\"#41-%E6%95%B0%E7%BB%84%E7%B1%BB%E5%9E%8B\">4.1 数组类型</a></li>\n<li><a href=\"#42-map%E7%B1%BB%E5%9E%8B\">4.2 map类型</a></li>\n<li><a href=\"#43-%E6%AD%A3%E5%88%99%E7%B1%BB%E5%9E%8B\">4.3 正则类型</a></li>\n<li><a href=\"#44-json%E7%B1%BB%E5%9E%8B\">4.4 json类型</a></li>\n<li><a href=\"#45-python%E7%B1%BB%E5%9E%8B\">4.5 python类型</a></li>\n</ul>\n</li>\n<li><a href=\"#5hive%E5%87%BD%E6%95%B0\">5.Hive函数</a><ul>\n<li><a href=\"#51%E8%87%AA%E5%AE%9A%E4%B9%89%E5%87%BD%E6%95%B0\">5.1自定义函数</a></li>\n<li><a href=\"#52udaf\">5.2UDAF</a></li>\n<li><a href=\"#53udtf\">5.3UDTF</a></li>\n<li><a href=\"#54%E5%B8%B8%E8%A7%81%E8%87%AA%E5%B8%A6%E7%9A%84hive%E5%87%BD%E6%95%B0\">5.4常见自带的hive函数</a></li>\n<li><a href=\"#55%E5%85%B3%E4%BA%8Eunion%E5%92%8Cunion-all\">5.5关于union和union all</a></li>\n</ul>\n</li>\n<li><a href=\"#6hive%E8%AF%AD%E6%B3%95%E8%A6%81%E7%82%B9\">6.hive语法要点</a></li>\n<li><a href=\"#7hive%E4%BC%98%E5%8C%96\">7.hive优化</a><ul>\n<li><a href=\"#71%E5%A4%A7%E8%A1%A8join%E5%A4%A7%E8%A1%A8%E4%BC%98%E5%8C%96\">7.1大表join大表优化</a></li>\n</ul>\n</li>\n</ul>\n<!-- tocstop -->\n\n<p>[TOC]</p>\n<h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p>Hive是基于Hadoop的一个数据仓库工具，可以将结构化的数据文件映射为一张数据库表，并提供类SQL查询功能。</p>\n<p>本质是将SQL转换为MapReduce程序</p>\n<p>主要用途：用来做离线数据分析，比直接用MapReduce开发效率更高</p>","more":"<p><img src=\"/2020/12/29/hive%E7%9F%A5%E8%AF%86%E6%95%B4%E7%90%86/timg-1568381886490.jpg\" alt=\"img\"> </p>\n<p>数据仓库和数据库的区别</p>\n<ul>\n<li><p>数据库是面向事务的设计，数据仓库是面向主题设计的。</p>\n</li>\n<li><p>数据库一般存储业务数据，数据仓库存储的一般是历史数据。</p>\n</li>\n<li><p>数据库设计是尽量避免冗余，一般针对某一业务应用进行设计，比如一张简单的User表，记录用户名、密码等简单数据即可，符合业务应用，但是不符合分析。数据仓库在设计是有意引入冗余，依照分析需求，分析维度、分析指标进行设计。</p>\n</li>\n<li><p>数据库是为捕获数据而设计，数据仓库是为分析数据而设计。</p>\n</li>\n</ul>\n<p>数据仓库分层架构</p>\n<p>==源数据层（ODS）==：此层数据无任何更改，直接沿用外围系统数据结构和数据，不对外开放；为临时存储层，是接口数据的临时存储区域，为后一步的数据处理做准备。</p>\n<p>==数据仓库层（DW）==：也称为细节层，DW层的数据应该是一致的、准确的、干净的数据，即对源系统数据进行了清洗（去除了杂质）后的数据。</p>\n<p>==数据应用层（DA或APP）==：前端应用直接读取的数据源；根据报表、专题分析需求而计算生成的数据。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">先启动metastore服务再启动hiveserver2服务</span><br><span class=\"line\">/<span class=\"built_in\">export</span>/servers/hive/bin/beeline</span><br><span class=\"line\">beeline&gt; ! connect jdbc:hive2://hdp3:10000</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n<p>hive SQL语句中 select from where group by having order by 的==执行顺序==？</p>\n<p>执行顺序：</p>\n<p>from … where … select … group by … having … order by …</p>\n<p>其实总结hive的执行顺序也是总结mapreduce的执行顺序：</p>\n<p>MR程序的执行顺序：</p>\n<p>map阶段：</p>\n<p> 1.执行from加载，进行表的查找与加载</p>\n<p>2.执行where过滤，进行条件过滤与筛选</p>\n<p>3.执行select查询：进行输出项的筛选</p>\n<p>4.执行group by分组：描述了分组后需要计算的函数</p>\n<p>5.map端文件合并：map端本地溢出写文件的合并操作，每个map最终形成一个临时文件。 然后按列映射到对应的reduceReduce阶段：</p>\n<p>Reduce阶段：</p>\n<p>1.group by：对map端发送过来的数据进行分组并进行计算。</p>\n<p>2.select：最后过滤列用于输出结果</p>\n<p>3.limit排序后进行结果输出到HDFS文件</p>\n<p>所以通过上面的例子我们可以看到，在进行select之后我们会形成一张表，在这张表当中做分组排序这些操作。</p>\n<h2 id=\"1-DDL操作\"><a href=\"#1-DDL操作\" class=\"headerlink\" title=\"1.DDL操作\"></a>1.DDL操作</h2><p>设置hive程序本地运行模式：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">set</span> hive.exec.mode.local.auto=<span class=\"literal\">true</span>;</span><br></pre></td></tr></table></figure>\n<h3 id=\"1-1-创建表\"><a href=\"#1-1-创建表\" class=\"headerlink\" title=\"1.1  创建表\"></a>1.1  创建表</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create</span> [<span class=\"keyword\">external</span>] <span class=\"keyword\">table</span> [<span class=\"keyword\">if</span> <span class=\"keyword\">not</span> <span class=\"keyword\">exists</span>] tb_name (...) [<span class=\"keyword\">like</span>] existing_table;</span><br><span class=\"line\">[row format delimited fields terminated by char</span><br><span class=\"line\">\t\t\t\t\tcollection items terminated by char</span><br><span class=\"line\">\t\t\t\t\tmap keys terminated by char</span><br><span class=\"line\">\t\t\t\t\tlines terminated by char</span><br><span class=\"line\">\t\t\t\t\t...]</span><br><span class=\"line\">[partitioned by ]</span><br><span class=\"line\">[stored as file_format]</span><br><span class=\"line\">[CLUSTERED BY (col_name, col_name, ...) [SORTED BY (col_name [ASC|DESC], ...)] INTO num_buckets BUCKETS]</span><br><span class=\"line\">[LOCATION hdfs_path]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>1.create table 创建一个指定名字的表，如果表以存在可以用[if not exists]跳过异常</p>\n<p>2.[external] 关键字可以让给用户创建一个外部表。</p>\n<p>创建内部表时会将数据移动到数据仓库指向的路径，删除表时元数据和数据都被删除。</p>\n<p>外部表仅记录数据所在的路径，删除时只删除元数据，不删除数据。</p>\n<p>3.[like] 允许用户复制现有的表结构，但是不复制数据</p>\n<p>4.[row format delimited] 指定表列与列的分隔符。hive建表的时候默认分隔符是‘\\001’,</p>\n<p>5.[partitioned by] 分区命令。每个表可以有多个分区，每个分区以文件夹的形式单独存在表文件夹目录下。分区是以字段的形式在表结构中存在。</p>\n<p>6.[stored as sequencedile|textfile|refile]   如果文件数据是纯文本，可以使用textfile,如果数据需要压缩，使用sequencedile。</p>\n<p>textfile是默认的文件格式，使用delimited子句来读取分隔文件</p>\n<p>7.[clustered by (col_name,col_name,….)]   分桶</p>\n<p>8.[LOCATION hdfs_path]  指定这张表所在的hdfs上的目录，如果不指定，默认在数据库的目录下面</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span> tb_name <span class=\"keyword\">as</span> <span class=\"keyword\">select</span> <span class=\"keyword\">statement</span>;将sql语句的结果进行保存</span><br><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span> tb_new <span class=\"keyword\">like</span> tb_old;创建一张结构与tb_old一样的表</span><br><span class=\"line\"><span class=\"keyword\">drop</span> <span class=\"keyword\">table</span> [<span class=\"keyword\">if</span> <span class=\"keyword\">exists</span>] tb_name;删除表</span><br><span class=\"line\"><span class=\"keyword\">truncate</span> <span class=\"keyword\">table</span> tb_name;清空表</span><br><span class=\"line\"><span class=\"keyword\">show</span> functions;查看所有的函数</span><br><span class=\"line\"><span class=\"keyword\">show</span> <span class=\"keyword\">partitions</span> tb_name;查看所有分区</span><br><span class=\"line\">desc formatted tb_name；查看表信息</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4 id=\"1-1-1-管理表\"><a href=\"#1-1-1-管理表\" class=\"headerlink\" title=\"1.1.1 管理表\"></a>1.1.1 管理表</h4><p>最普通的表，默认表的类型就是管理表</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span> tb_name();</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4 id=\"1-1-2-外部表\"><a href=\"#1-1-2-外部表\" class=\"headerlink\" title=\"1.1.2 外部表\"></a>1.1.2 外部表</h4><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">external</span> <span class=\"keyword\">table</span> tb_name();</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>特点：在删除时，不会删除表数据</p>\n<p>应用场景：1-如果需要多张表共用同一份数据，都建立外部表，使用完以后，删除表互不影响。2-如果数据需要进行额外的使用：存档等等</p>\n<h4 id=\"1-1-3-分区表\"><a href=\"#1-1-3-分区表\" class=\"headerlink\" title=\"1.1.3 分区表\"></a>1.1.3 分区表</h4><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">external</span> <span class=\"keyword\">table</span> tb_part(</span><br><span class=\"line\"><span class=\"keyword\">id</span> <span class=\"keyword\">string</span></span><br><span class=\"line\"> <span class=\"keyword\">name</span> <span class=\"keyword\">string</span></span><br><span class=\"line\">)</span><br><span class=\"line\">partitioned <span class=\"keyword\">by</span> (<span class=\"keyword\">day</span> <span class=\"keyword\">string</span>)</span><br><span class=\"line\"><span class=\"keyword\">row</span> <span class=\"keyword\">format</span> <span class=\"keyword\">delimited</span> <span class=\"keyword\">fields</span> <span class=\"keyword\">terminated</span> <span class=\"keyword\">by</span> <span class=\"string\">&#x27;\\t&#x27;</span>;</span><br><span class=\"line\"><span class=\"comment\">--创建分区表，指定分区字段day</span></span><br><span class=\"line\"><span class=\"keyword\">load</span> <span class=\"keyword\">data</span> <span class=\"keyword\">local</span> inpath <span class=\"string\">&#x27;/export/datas/20180718&#x27;</span> <span class=\"keyword\">into</span> <span class=\"keyword\">table</span> tb_name <span class=\"keyword\">partition</span>(<span class=\"keyword\">day</span>=<span class=\"string\">&#x27;18&#x27;</span>);</span><br><span class=\"line\"><span class=\"comment\">--加载文件数据，创建分区字段day=18</span></span><br><span class=\"line\"><span class=\"keyword\">load</span> <span class=\"keyword\">data</span> <span class=\"keyword\">local</span> inpath <span class=\"string\">&#x27;/export/datas/20180719&#x27;</span> <span class=\"keyword\">into</span> <span class=\"keyword\">table</span> tb_name <span class=\"keyword\">partition</span>(<span class=\"keyword\">day</span>=<span class=\"string\">&#x27;19&#x27;</span>);</span><br><span class=\"line\"><span class=\"comment\">--加载文件数据，创建分区字段day=19</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> tb_part <span class=\"keyword\">where</span> <span class=\"keyword\">day</span> = <span class=\"number\">19</span>;</span><br><span class=\"line\"><span class=\"comment\">--过滤条件需是分区的字段，如果不是分区字段就会从整个分区目录中查找</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>手动分区：加载数据时，手动指定文件的分区</p>\n<p>分区字段为查询的语句的最后一个字段 </p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">insert</span> overwrite <span class=\"keyword\">table</span> tb_emp_part <span class=\"keyword\">partition</span> (deptno)</span><br><span class=\"line\">  <span class=\"keyword\">select</span> empno</span><br><span class=\"line\">  ename,</span><br><span class=\"line\">  job,</span><br><span class=\"line\">  manager,</span><br><span class=\"line\">  inday,</span><br><span class=\"line\">  salary,</span><br><span class=\"line\">  jiangjin,</span><br><span class=\"line\">  deptno</span><br><span class=\"line\"><span class=\"keyword\">from</span> tb_emp_normal;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>应用场景：将普通表的数据转换成一个分区表</p>\n<pre><code>       原始表【tb1】中的数据没有做分区\n         希望将原始表中的数据按照分区存放到新的分区表[tb2]</code></pre>\n</li>\n<li><p>自动分区：默认按照原始表的最后一列进行分区</p>\n</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">set</span> hive.exec.dynamic.partition.mode=nonstrict;</span><br><span class=\"line\">配置自动分区</span><br><span class=\"line\"><span class=\"keyword\">show</span> <span class=\"keyword\">partitions</span> tb_name;</span><br><span class=\"line\">查看当前所有分区</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>数据加载问题：<br>1-如果手动将数据文件放入一张普通表的目录下？表能不能读到数据？</p>\n<p>​    可以，元数据查询时直接将表的目录作为查询目录<br>2-如果手动将数据文件放入一张分区表的分区目录下？表能不能读到数据？表的分区能不能读到数据？<br>​    可以的，因为元数据查询时直接将分区的目录作为查询目录<br>3-如果手动在HDFS上创建一个分区的目录，将数据放入分区目录下，表能不能读到数据？<br>​    不能，因为Hive中没有该分区的元数据</p>\n<p>方案一：修复表的元数据（资源占用多）</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">msck <span class=\"keyword\">repair</span> <span class=\"keyword\">table</span> tb_emp;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>方案二：手动向表中添加一个分区</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">table</span> tb_name <span class=\"keyword\">add</span> [<span class=\"keyword\">if</span> <span class=\"keyword\">exists</span>] <span class=\"keyword\">partition</span> (dt=<span class=\"string\">&#x27;20&#x27;</span>) location <span class=\"string\">&#x27;/user/hadoop/dt=20&#x27;</span>;</span><br><span class=\"line\"><span class=\"comment\">--要求建立的目录必须与分区自动创建的目录格式一样</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>删除分区</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alter table tb_name drop [<span class=\"keyword\">if</span> exists] partition (dt=<span class=\"string\">&#x27;20&#x27;</span>);</span><br></pre></td></tr></table></figure>\n\n\n</li>\n</ul>\n<h4 id=\"1-1-4-分桶表\"><a href=\"#1-1-4-分桶表\" class=\"headerlink\" title=\"1.1.4  分桶表\"></a>1.1.4  分桶表</h4>  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span> tb_emp_bucket(</span><br><span class=\"line\">empno <span class=\"built_in\">int</span> ,</span><br><span class=\"line\">ename <span class=\"keyword\">string</span>,</span><br><span class=\"line\">job <span class=\"keyword\">string</span>,</span><br><span class=\"line\">manager <span class=\"built_in\">int</span>,</span><br><span class=\"line\">inday <span class=\"keyword\">string</span>,</span><br><span class=\"line\">salary <span class=\"keyword\">double</span>,</span><br><span class=\"line\">jiangjin <span class=\"keyword\">double</span>,</span><br><span class=\"line\">deptno <span class=\"built_in\">int</span></span><br><span class=\"line\">) </span><br><span class=\"line\">clustered <span class=\"keyword\">by</span> (deptno) <span class=\"keyword\">into</span> <span class=\"number\">3</span> BUCKETS</span><br><span class=\"line\"><span class=\"keyword\">row</span> <span class=\"keyword\">format</span> <span class=\"keyword\">delimited</span> <span class=\"keyword\">fields</span> <span class=\"keyword\">terminated</span> <span class=\"keyword\">by</span> <span class=\"string\">&#x27;\\t&#x27;</span>;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>  应用场景：大表join大表时</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--开启分桶</span></span><br><span class=\"line\"><span class=\"keyword\">set</span> hive.enforce.bucketing=<span class=\"literal\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">insert</span> overwrite <span class=\"keyword\">table</span> tb_emp_bucket</span><br><span class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> tb_emp_normal cluster <span class=\"keyword\">by</span> (deptno);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>  连个桶表桶的个数必须相同，或者b表桶是a表的倍数</p>\n<h3 id=\"1-2-修改表\"><a href=\"#1-2-修改表\" class=\"headerlink\" title=\"1.2 修改表\"></a>1.2 修改表</h3><p>  增加分区：</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">table</span> tb_name <span class=\"keyword\">add</span> <span class=\"keyword\">partition</span> (dt=<span class=\"string\">&#x27;20170101&#x27;</span>) location <span class=\"string\">&#x27;/user/hadoop/table_name/dt=20170101&#x27;</span>;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>  删除分区</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">table</span> tb_name <span class=\"keyword\">drop</span> <span class=\"keyword\">if</span> <span class=\"keyword\">exists</span> <span class=\"keyword\">partition</span> (dt=<span class=\"string\">&#x27;20170101&#x27;</span>)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>  修改分区</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">table</span> tb_name <span class=\"keyword\">partition</span> (dt=<span class=\"string\">&#x27;20170101&#x27;</span>) <span class=\"keyword\">rename</span> <span class=\"keyword\">to</span> <span class=\"keyword\">partition</span>(dt=<span class=\"string\">&#x27;20170202&#x27;</span>)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>  添加列</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--添加列</span></span><br><span class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">table</span> tb_name <span class=\"keyword\">add</span>|<span class=\"keyword\">replace</span> <span class=\"keyword\">columns</span> (col_name <span class=\"keyword\">string</span>);</span><br><span class=\"line\"><span class=\"comment\">--修改表名</span></span><br><span class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">table</span> stu_par <span class=\"keyword\">rename</span> <span class=\"keyword\">to</span> stu_par1</span><br><span class=\"line\"><span class=\"comment\">--增加列</span></span><br><span class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">table</span> stu1 <span class=\"keyword\">add</span> <span class=\"keyword\">columns</span>(score <span class=\"keyword\">string</span>);</span><br><span class=\"line\"><span class=\"comment\">--修改列类型</span></span><br><span class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">table</span> stu1 <span class=\"keyword\">change</span> <span class=\"keyword\">column</span> score score <span class=\"keyword\">double</span>;</span><br><span class=\"line\"><span class=\"comment\">--</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"2-DML操作\"><a href=\"#2-DML操作\" class=\"headerlink\" title=\"2.DML操作\"></a>2.DML操作</h2><h3 id=\"2-1-load\"><a href=\"#2-1-load\" class=\"headerlink\" title=\"2.1 load\"></a>2.1 load</h3><p>  在将数据加载到表中时，Hive不会进行任何转换。加载操作是将数据文件移动到与Hive表对应的位置的纯复制/移动操作。</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">load</span> <span class=\"keyword\">data</span> [<span class=\"keyword\">local</span>] inpath <span class=\"string\">&#x27;filepath&#x27;</span> [overwrite] <span class=\"keyword\">into</span> <span class=\"keyword\">table</span> tb_name [<span class=\"keyword\">partition</span>(partcol1=val1,partcol2=val2...)]</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"2-2-insert\"><a href=\"#2-2-insert\" class=\"headerlink\" title=\"2.2 insert\"></a>2.2 insert</h3><p>  Hive中insert主要是结合select查询语句使用，将查询结果插入到表中</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--查询结果的列数要和插入数据表格的列数一致</span></span><br><span class=\"line\"><span class=\"keyword\">insert</span> overwrite <span class=\"keyword\">table</span> tb_name <span class=\"keyword\">select</span> <span class=\"keyword\">statement</span></span><br><span class=\"line\"><span class=\"comment\">--将查询语句结果保存至HDFS中</span></span><br><span class=\"line\"><span class=\"keyword\">insert</span> overwrite <span class=\"keyword\">directory</span> <span class=\"string\">&quot;/movie/answer10/&quot;</span> <span class=\"keyword\">select</span> <span class=\"keyword\">statement</span>;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"2-3-join\"><a href=\"#2-3-join\" class=\"headerlink\" title=\"2.3 join\"></a>2.3 join</h3><p>  inner join: 两张表都有结果才有</p>\n<p>  left join: 左表有，结果就有</p>\n<p>  right join: 右表有，结果就有</p>\n<p>  full join：两边任意一边有，结果就有</p>\n<p>  cross join:笛卡尔积      –一般用于结果的漏斗计算</p>\n<h3 id=\"2-4-排序\"><a href=\"#2-4-排序\" class=\"headerlink\" title=\"2.4 排序\"></a>2.4 排序</h3>  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">set</span> hive.exec.reducers.bytes.per.reducer=&lt;<span class=\"built_in\">number</span>&gt;</span><br><span class=\"line\">\t每个reduce最多处理多少数据量</span><br><span class=\"line\"><span class=\"keyword\">set</span> hive.exec.reducers.max=&lt;<span class=\"built_in\">number</span>&gt;\t</span><br><span class=\"line\">\t最多启动多少个reduce</span><br><span class=\"line\"><span class=\"keyword\">set</span> mapreduce.job.reduces=&lt;<span class=\"built_in\">number</span>&gt;</span><br><span class=\"line\">\t设置reduce的个数</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4 id=\"order-by\"><a href=\"#order-by\" class=\"headerlink\" title=\"order by\"></a>order by</h4><p>  全局排序，对整体进行排序，只有一个reduce的情况下</p>\n<p>  在启用多个reduce的情况下如果使用order by 结果依旧全局有序，但只会启用一个reduce</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span>  empno,ename,salary,deptno <span class=\"keyword\">from</span> tb_emp_normal <span class=\"keyword\">order</span> <span class=\"keyword\">by</span> empno;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4 id=\"sort-by\"><a href=\"#sort-by\" class=\"headerlink\" title=\"sort by\"></a>sort by</h4><p>  局部排序，多个reduce的 情况下，每个reduce内部有序（分区内有序）</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">set</span> mapreduce.job.reduces=<span class=\"number\">3</span>;</span><br><span class=\"line\">设置reduce个数</span><br><span class=\"line\"><span class=\"keyword\">insert</span> overwrite <span class=\"keyword\">local</span> <span class=\"keyword\">directory</span> <span class=\"string\">&#x27;/export/datas/sort&#x27;</span> </span><br><span class=\"line\"><span class=\"keyword\">row</span> <span class=\"keyword\">format</span> <span class=\"keyword\">delimited</span> <span class=\"keyword\">fields</span> <span class=\"keyword\">terminated</span> <span class=\"keyword\">by</span> <span class=\"string\">&#x27;\\t&#x27;</span> </span><br><span class=\"line\"><span class=\"keyword\">select</span>  empno,ename,salary,deptno <span class=\"keyword\">from</span> tb_emp_normal </span><br><span class=\"line\"><span class=\"keyword\">sort</span> <span class=\"keyword\">by</span> empno;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4 id=\"distribute-by\"><a href=\"#distribute-by\" class=\"headerlink\" title=\"distribute by\"></a>distribute by</h4><p>  指定多个reduce情况下，以哪一列作为分区字段。将相同的数据放入同一个结果文件，类似MR中Partition，进行分区，结合sort by使用  </p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">insert</span> overwrite <span class=\"keyword\">local</span> <span class=\"keyword\">directory</span> <span class=\"string\">&#x27;/export/datas/dis&#x27;</span> </span><br><span class=\"line\"><span class=\"keyword\">row</span> <span class=\"keyword\">format</span> <span class=\"keyword\">delimited</span> <span class=\"keyword\">fields</span> <span class=\"keyword\">terminated</span> <span class=\"keyword\">by</span> <span class=\"string\">&#x27;\\t&#x27;</span> </span><br><span class=\"line\"><span class=\"keyword\">select</span>  empno,ename,salary,deptno <span class=\"keyword\">from</span> tb_emp_normal </span><br><span class=\"line\"><span class=\"keyword\">distribute</span> <span class=\"keyword\">by</span> deptno </span><br><span class=\"line\"><span class=\"keyword\">sort</span> <span class=\"keyword\">by</span> empno;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4 id=\"cluster-by\"><a href=\"#cluster-by\" class=\"headerlink\" title=\"cluster by\"></a>cluster by</h4><p>  如果sort by与distribute by使用同一个字段可以用此代替，但是排序只能是升序排序，不能指定排序规则为ASC或者DESC。</p>\n<h2 id=\"3-hive参数配置\"><a href=\"#3-hive参数配置\" class=\"headerlink\" title=\"3.hive参数配置\"></a>3.hive参数配置</h2><h3 id=\"3-1-Hive-shell命令行\"><a href=\"#3-1-Hive-shell命令行\" class=\"headerlink\" title=\"3.1 Hive shell命令行\"></a>3.1 Hive shell命令行</h3><p>针对bin/hive，除了可以当第一代客户端之外。还可以在hive中启动其他用途。</p>\n<p>1、 -i  初始化HQL文件。</p>\n<p>2、 -e从命令行执行指定的HQL </p>\n<p>3、 -f 执行HQL脚本 </p>\n<p>4、 -v 输出执行的HQL语句到控制台 </p>\n<p>5、 -p <port> connect to Hive Server on port number </port></p>\n<p>6、 -hiveconf x=y Use this to set hive/hadoop configuration variables.</p>\n<p>例如：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$HIVE_HOME</span>/bin/hive -e <span class=\"string\">&#x27;select * from table a&#x27;</span>\t</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable\">$HIVE_HOME</span>/bin/hive -f /home/my/hive-script.sql</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable\">$HIVE_HOME</span>/bin/hive -f hdfs://&lt;namenode&gt;:&lt;port&gt;/hive-script.sql</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable\">$HIVE_HOME</span>/bin/hive -i /home/my/hive-init.sql</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"3-2-Hive-参数配置方式\"><a href=\"#3-2-Hive-参数配置方式\" class=\"headerlink\" title=\"3.2 Hive 参数配置方式\"></a>3.2 Hive 参数配置方式</h3><p><em>Hive参数大全：</em></p>\n<p>[<em><a href=\"https://cwiki.apache.org/confluence/display/Hive/Configuration+Properties\">https://cwiki.apache.org/confluence/display/Hive/Configuration+Properties</a></em></p>\n<p> 开发Hive应用时，不可避免地需要设定Hive的参数。设定Hive的参数可以调优HQL代码的执行效率，或帮助定位问题。然而实践中经常遇到的一个问题是，为什么设定的参数没有起作用？这通常是错误的设定方式导致的。</p>\n<p>对于一般参数，有以下三种设定方式：</p>\n<p>配置文件   （全局有效）</p>\n<p>命令行参数   （对hive启动实例有效）</p>\n<p>参数声明   （对hive的连接session有效）</p>\n<p>配置文件 </p>\n<p>用户自定义配置文件：$HIVE_CONF_DIR/hive-site.xml</p>\n<p>默认配置文件：$HIVE_CONF_DIR/hive-default.xml </p>\n<p>用户自定义配置会覆盖默认配置。</p>\n<p>另外，Hive也会读入Hadoop的配置，因为Hive是作为Hadoop的客户端启动的，Hive的配置会覆盖Hadoop的配置。</p>\n<p>配置文件的设定对本机启动的所有Hive进程都有效。</p>\n<p> 命令行参数</p>\n<p>启动Hive（客户端或Server方式）时，可以在命令行添加-hiveconf来设定参数    例如：bin/hive -hiveconf hive.root.logger=INFO,console</p>\n<p>设定对本次启动的Session（对于Server方式启动，则是所有请求的Sessions）有效。</p>\n<p> 参数声明</p>\n<p>可以在HQL中使用SET关键字设定参数，这一设定的作用域也是session级的。</p>\n<p>比如：</p>\n<p>set hive.exec.reducers.bytes.per.reducer=<number>  每个reduce task的平均负载数据量</number></p>\n<p>set hive.exec.reducers.max=<number>   设置reduce task数量的上限</number></p>\n<p>set mapreduce.job.reduces=<number>    指定固定的reduce task数量</number></p>\n<p>但是，这个参数在必要时&lt;业务逻辑决定只能用一个reduce task&gt; hive会忽略</p>\n<p>上述三种设定方式的优先级依次递增。即参数声明覆盖命令行参数，命令行参数覆盖配置文件设定。注意某些系统级的参数，例如log4j相关的设定，必须用前两种方式设定，因为那些参数的读取在Session建立以前已经完成了。</p>\n<h2 id=\"4-hive中复杂数据类型的使用\"><a href=\"#4-hive中复杂数据类型的使用\" class=\"headerlink\" title=\"4.hive中复杂数据类型的使用\"></a>4.hive中复杂数据类型的使用</h2><h3 id=\"4-1-数组类型\"><a href=\"#4-1-数组类型\" class=\"headerlink\" title=\"4.1 数组类型\"></a>4.1 数组类型</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--数据如下：vim &#x2F;export&#x2F;datas&#x2F;array.txt</span><br><span class=\"line\">zhangsan\tbeijing,shanghai,tianjin,hangzhou</span><br><span class=\"line\">wangwu\tshanghai,chengdu,wuhan,haerbin</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--创建表</span></span><br><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span> complex_array(</span><br><span class=\"line\"><span class=\"keyword\">name</span> <span class=\"keyword\">string</span>,</span><br><span class=\"line\">work_locations <span class=\"built_in\">array</span>&lt;<span class=\"keyword\">string</span>&gt;</span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"keyword\">row</span> <span class=\"keyword\">format</span> <span class=\"keyword\">delimited</span> <span class=\"keyword\">fields</span> <span class=\"keyword\">terminated</span> <span class=\"keyword\">by</span> <span class=\"string\">&#x27;\\t&#x27;</span> <span class=\"comment\">--指定列的分隔符</span></span><br><span class=\"line\">collection items <span class=\"keyword\">terminated</span> <span class=\"keyword\">by</span> <span class=\"string\">&#x27;,&#x27;</span>;<span class=\"comment\">--指定数组中元素的分隔符</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--加载数据</span></span><br><span class=\"line\"><span class=\"keyword\">load</span> <span class=\"keyword\">data</span> <span class=\"keyword\">local</span> inpath <span class=\"string\">&#x27;/export/datas/array.txt&#x27;</span> <span class=\"keyword\">into</span> <span class=\"keyword\">table</span> complex_array;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--查询</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> complex_array;</span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"keyword\">size</span>(work_locations) <span class=\"keyword\">from</span> complex_array;</span><br><span class=\"line\"><span class=\"keyword\">select</span> work_locations[<span class=\"number\">0</span>],work_locations[<span class=\"number\">1</span>] <span class=\"keyword\">from</span> complex_array;</span><br></pre></td></tr></table></figure>\n<h3 id=\"4-2-map类型\"><a href=\"#4-2-map类型\" class=\"headerlink\" title=\"4.2 map类型\"></a>4.2 map类型</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--数据如下：vim &#x2F;export&#x2F;datas&#x2F;map.txt</span><br><span class=\"line\">1,zhangsan,唱歌:非常喜欢-跳舞:喜欢-游泳:一般般</span><br><span class=\"line\">2,lisi,打游戏:非常喜欢-篮球:不喜欢</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--创建表</span></span><br><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span> complex_map(</span><br><span class=\"line\"><span class=\"keyword\">id</span> <span class=\"built_in\">int</span>,</span><br><span class=\"line\"><span class=\"keyword\">name</span> <span class=\"keyword\">string</span>,</span><br><span class=\"line\">hobby <span class=\"keyword\">map</span>&lt;<span class=\"keyword\">string</span>,<span class=\"keyword\">string</span>&gt;)</span><br><span class=\"line\"><span class=\"keyword\">row</span> <span class=\"keyword\">format</span> <span class=\"keyword\">delimited</span> <span class=\"keyword\">fields</span> <span class=\"keyword\">terminated</span> <span class=\"keyword\">by</span> <span class=\"string\">&#x27;,&#x27;</span> <span class=\"comment\">--指定列的分隔符</span></span><br><span class=\"line\">collection items <span class=\"keyword\">terminated</span> <span class=\"keyword\">by</span> <span class=\"string\">&#x27;-&#x27;</span> <span class=\"keyword\">map</span> <span class=\"keyword\">keys</span> <span class=\"keyword\">terminated</span> <span class=\"keyword\">by</span> <span class=\"string\">&#x27;:&#x27;</span> ;<span class=\"comment\">--指定keyvalue的分割</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--加载数据</span></span><br><span class=\"line\"><span class=\"keyword\">load</span> <span class=\"keyword\">data</span> <span class=\"keyword\">local</span> inpath <span class=\"string\">&#x27;/export/datas/map.txt&#x27;</span> <span class=\"keyword\">into</span> <span class=\"keyword\">table</span> complex_map;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--查询</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> complex_map;</span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"keyword\">size</span>(hobby) <span class=\"keyword\">from</span> complex_map;</span><br><span class=\"line\"><span class=\"keyword\">select</span> hobby[<span class=\"string\">&quot;唱歌&quot;</span>] <span class=\"keyword\">from</span> complex_map;</span><br></pre></td></tr></table></figure>\n<h3 id=\"4-3-正则类型\"><a href=\"#4-3-正则类型\" class=\"headerlink\" title=\"4.3 正则类型\"></a>4.3 正则类型</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--数据如下:vim /export/datas/regex.txt</span></span><br><span class=\"line\">tom 男 23 上海</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--使用正则加载数据</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> user_regex(</span><br><span class=\"line\"><span class=\"keyword\">name</span> <span class=\"keyword\">string</span>,</span><br><span class=\"line\">sex <span class=\"keyword\">string</span>,</span><br><span class=\"line\">age <span class=\"built_in\">int</span>,</span><br><span class=\"line\">city <span class=\"keyword\">string</span></span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"keyword\">ROW</span> <span class=\"keyword\">FORMAT</span> SERDE <span class=\"string\">&#x27;org.apache.hadoop.hive.serde2.RegexSerDe&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">WITH</span> SERDEPROPERTIES (</span><br><span class=\"line\">  <span class=\"string\">&quot;input.regex&quot;</span> = <span class=\"string\">&quot;([^ ]+) ([^ ]+) ([0-9]+) (.+)&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"keyword\">STORED</span> <span class=\"keyword\">AS</span> TEXTFILE;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">load</span> <span class=\"keyword\">data</span> <span class=\"keyword\">local</span> inpath <span class=\"string\">&#x27;/root/regex.txt&#x27;</span> <span class=\"keyword\">into</span> <span class=\"keyword\">table</span> user_regex;</span><br></pre></td></tr></table></figure>\n<h3 id=\"4-4-json类型\"><a href=\"#4-4-json类型\" class=\"headerlink\" title=\"4.4 json类型\"></a>4.4 json类型</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--通过专门的解析类直接加载一个json格式的数据到Hive中</span></span><br><span class=\"line\"><span class=\"comment\">--数据如下:vim /export/datas/hivedata.json</span></span><br><span class=\"line\">&#123;&quot;id&quot;: 1701439105,&quot;ids&quot;: [2154137571,3889177061],&quot;total_number&quot;: 493&#125;</span><br><span class=\"line\">&#123;&quot;id&quot;: 1701439106,&quot;ids&quot;: [2154137571,3889177061],&quot;total_number&quot;: 494&#125;</span><br><span class=\"line\"><span class=\"comment\">--添加jar包</span></span><br><span class=\"line\">add jar /export/datas/json-serde-1.3.7-jar-<span class=\"keyword\">with</span>-dependencies.jar;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--创建表：</span></span><br><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span> tb_json_test2 (</span><br><span class=\"line\"><span class=\"keyword\">id</span> <span class=\"keyword\">string</span>,</span><br><span class=\"line\">ids <span class=\"built_in\">array</span>&lt;<span class=\"keyword\">string</span>&gt;,</span><br><span class=\"line\">total_number <span class=\"built_in\">int</span>)</span><br><span class=\"line\"><span class=\"keyword\">ROW</span> <span class=\"keyword\">FORMAT</span> SERDE <span class=\"string\">&#x27;org.openx.data.jsonserde.JsonSerDe&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">STORED</span> <span class=\"keyword\">AS</span> TEXTFILE;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--加载数据</span></span><br><span class=\"line\"><span class=\"keyword\">load</span> <span class=\"keyword\">data</span> <span class=\"keyword\">local</span> inpath <span class=\"string\">&#x27;/export/datas/hivedata.json&#x27;</span> <span class=\"keyword\">into</span> <span class=\"keyword\">table</span> tb_json_test2;</span><br></pre></td></tr></table></figure>\n<h3 id=\"4-5-python类型\"><a href=\"#4-5-python类型\" class=\"headerlink\" title=\"4.5 python类型\"></a>4.5 python类型</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--创建Python脚本实现将原始表的时间转为对应的星期几</span></span><br><span class=\"line\">vim /export/datas/weekday_mapper.py</span><br><span class=\"line\"></span><br><span class=\"line\">import sys</span><br><span class=\"line\">import datetime</span><br><span class=\"line\"></span><br><span class=\"line\">for line in sys.stdin:</span><br><span class=\"line\">  line = line.strip()</span><br><span class=\"line\">  userid, movieid, rating, unixtime = line.split(&#x27;\\t&#x27;)</span><br><span class=\"line\">  weekday = datetime.datetime.fromtimestamp(float(unixtime)).isoweekday()</span><br><span class=\"line\">  print &#x27;\\t&#x27;.join([userid, movieid, rating, str(weekday)])</span><br><span class=\"line\"> </span><br></pre></td></tr></table></figure>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--加载python脚本并将数据写入新表</span></span><br><span class=\"line\">add FILE /export/datas/weekday_mapper.py;</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> OVERWRITE <span class=\"keyword\">TABLE</span> u_data_new</span><br><span class=\"line\"><span class=\"keyword\">SELECT</span></span><br><span class=\"line\">  TRANSFORM (userid, movieid, rating, unixtime)</span><br><span class=\"line\">  <span class=\"keyword\">USING</span> <span class=\"string\">&#x27;python weekday_mapper.py&#x27;</span></span><br><span class=\"line\">  <span class=\"keyword\">AS</span> (userid, movieid, rating, <span class=\"keyword\">weekday</span>)</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> u_data;</span><br></pre></td></tr></table></figure>\n<h2 id=\"5-Hive函数\"><a href=\"#5-Hive函数\" class=\"headerlink\" title=\"5.Hive函数\"></a>5.Hive函数</h2><h3 id=\"5-1自定义函数\"><a href=\"#5-1自定义函数\" class=\"headerlink\" title=\"5.1自定义函数\"></a>5.1自定义函数</h3><h4 id=\"5-1-1-UDF\"><a href=\"#5-1-1-UDF\" class=\"headerlink\" title=\"5.1.1 UDF\"></a>5.1.1 UDF</h4><p>UDF（User-Defined-Function）普通函数 一进一出</p>\n<p>1、自定义一个类，继承UDF,实现一个或重载多个evaluate方法，打包上传jar包到linux环境</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">     <span class=\"comment\">&lt;!-- 指定该项目可以从哪些地方下载依赖包 --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">repository</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>aliyun<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public/<span class=\"tag\">&lt;/<span class=\"name\">url</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">repository</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">repository</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>cloudera<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">url</span>&gt;</span>https://repository.cloudera.com/artifactory/cloudera-repos/<span class=\"tag\">&lt;/<span class=\"name\">url</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">repository</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">repository</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>jboss<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">url</span>&gt;</span>http://repository.jboss.org/nexus/content/groups/public<span class=\"tag\">&lt;/<span class=\"name\">url</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">repository</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">repositories</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--指定字符编码--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class=\"tag\">&lt;/<span class=\"name\">project.build.sourceEncoding</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--指定依赖--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.hadoop<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>hadoop-common<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.6.0-cdh5.14.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.hadoop<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>hadoop-hdfs<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.6.0-cdh5.14.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.hadoop<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>hadoop-client<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.6.0-cdh5.14.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.hive<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>hive-exec<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.1.0-cdh5.14.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.hive<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>hive-common<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.1.0-cdh5.14.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.hive<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>hive-cli<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.1.0-cdh5.14.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.hive<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>hive-jdbc<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.1.0-cdh5.14.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> org.apache.hadoop.hive.ql.exec.UDF;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.hadoop.io.Text;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserUDF</span> <span class=\"keyword\">extends</span> <span class=\"title\">UDF</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Text <span class=\"title\">evaluate</span><span class=\"params\">(Text s)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(s==<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Text(s.toString().toLowerCase());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<p>2、将jar包添加到hive环境中</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">add jar &#x2F;export&#x2F;datas&#x2F;udf.jar;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>3、在hive中创建一个函数</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">create temporary function fc_name as &#39;com.neusoft.data.UserUDF&#39;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>4、使用函数</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select fc_name(age),name from tb_name;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4 id=\"5-1-2自定义udf-udtf-udaf开发\"><a href=\"#5-1-2自定义udf-udtf-udaf开发\" class=\"headerlink\" title=\"5.1.2自定义udf,udtf,udaf开发\"></a>5.1.2自定义udf,udtf,udaf开发</h4><p>UDF：<br>1-开发udf程序：继承UDF类，实现一个或者多个evaluate方法<br>2-打成jar包<br>3-上传jar包到集群中，并添加到hive的环境变量中，在hive中执行<br>    add jar /export/datas/udf.jar;<br>4-创建临时函数：<br>    create temporary function  transDate as ‘cn.itcast.bigdata.hive.TransDate’;<br>5-测试函数：<br>    select transDate(“18/Aug/2019:12:30:05”);<br>6-删除临时函数<br>    DROP TEMPORARY FUNCTION transDate;</p>\n<p>UDTF<br>1-开发udtf程序：继承UDTF类，重写process方法<br>2-打成jar包<br>3-上传jar包到集群中，并添加到hive的环境变量中，在hive中执行<br>    add jar /export/datas/udtf.jar;<br>4-创建临时函数：<br>    create temporary function  transMap as ‘cn.itcast.bigdata.hive.UserUDTF’;<br>5-测试函数：<br>    第一种用法：直接调用<br>        select transMap(“uuid=root&amp;url=<a href=\"http://www.taobao.com&quot;/\">www.taobao.com&quot;</a>) as (userCol1,userCol2);<br>    第二种用法：和侧视图一起使用<br>        select deptno,deptname,a.* from tb_dept lateral view transMap(“uuid=root&amp;url=<a href=\"http://www.taobao.com&quot;/\">www.taobao.com&quot;</a>) a as col1,col2;<br>    注意：<br>        1-udtf只能直接select中使用<br>        2-不可以添加其他字段使用<br>        3-不可以嵌套调用<br>        4-不可以和group by/cluster by/distribute by/sort by一起使用</p>\n<p>UDAF<br>1-开发udaf程序：继承UDAF类，重写iterate方法<br>2-打成jar包<br>3-上传jar包到集群中，并添加到hive的环境变量中，在hive中执行<br>    add jar /export/datas/udaf.jar;<br>4-创建临时函数：<br>    create temporary function  userMax as ‘cn.itcast.bigdata.hive.UserUDAF’;<br>5-测试函数：<br>    select userMax(deptno) from tb_dept;</p>\n<h3 id=\"5-2UDAF\"><a href=\"#5-2UDAF\" class=\"headerlink\" title=\"5.2UDAF\"></a>5.2UDAF</h3><p>UDAF（User-Defined Aggregation Function）聚合函数，多进一出</p>\n<h4 id=\"窗口函数：SUM、AVG、COUNT、MAX、MIN\"><a href=\"#窗口函数：SUM、AVG、COUNT、MAX、MIN\" class=\"headerlink\" title=\"窗口函数：SUM、AVG、COUNT、MAX、MIN\"></a>窗口函数：SUM、AVG、COUNT、MAX、MIN</h4><p>功能：用于实现数据分区后的聚合<br>    -》语法：fun_name(col1) over (partition by col2 order by col3)<br>                实现功能    over  按照什么分区，分区内部按照什么排序<br>    -》示例：实现分区内的累加，其他的原理类似</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cookie1,2018-04-10,1</span><br><span class=\"line\">cookie1,2018-04-11,5</span><br><span class=\"line\">cookie1,2018-04-12,7</span><br><span class=\"line\">cookie1,2018-04-13,3</span><br><span class=\"line\">cookie2,2018-04-13,3</span><br><span class=\"line\">cookie2,2018-04-14,2</span><br><span class=\"line\">cookie2,2018-04-15,4</span><br><span class=\"line\">cookie1,2018-04-14,2</span><br><span class=\"line\">cookie1,2018-04-15,4</span><br><span class=\"line\">cookie1,2018-04-16,4</span><br><span class=\"line\">cookie2,2018-04-10,1</span><br><span class=\"line\">cookie2,2018-04-11,5</span><br><span class=\"line\">cookie2,2018-04-12,7</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--创建表</span></span><br><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">database</span> db_function;</span><br><span class=\"line\"><span class=\"keyword\">use</span> db_function;</span><br><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span> user_f1(</span><br><span class=\"line\">cookieid <span class=\"keyword\">string</span>,</span><br><span class=\"line\">daystr <span class=\"keyword\">string</span>,</span><br><span class=\"line\">pv <span class=\"built_in\">int</span></span><br><span class=\"line\">) <span class=\"keyword\">row</span> <span class=\"keyword\">format</span> <span class=\"keyword\">delimited</span> <span class=\"keyword\">fields</span> <span class=\"keyword\">terminated</span> <span class=\"keyword\">by</span> <span class=\"string\">&#x27;,&#x27;</span>;</span><br><span class=\"line\"><span class=\"comment\">--加载数据</span></span><br><span class=\"line\"><span class=\"keyword\">load</span> <span class=\"keyword\">data</span> <span class=\"keyword\">local</span> inpath <span class=\"string\">&#x27;/export/datas/window.txt&#x27;</span> <span class=\"keyword\">into</span> <span class=\"keyword\">table</span> user_f1;</span><br><span class=\"line\"><span class=\"keyword\">set</span> hive.exec.mode.local.auto=<span class=\"literal\">true</span>;</span><br><span class=\"line\"><span class=\"comment\">--实现分区内起始到当前行的pv累加，默认窗口：取第一行开始到当前行的和</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> </span><br><span class=\"line\">  cookieid,</span><br><span class=\"line\">  daystr,</span><br><span class=\"line\">  pv,</span><br><span class=\"line\">  <span class=\"keyword\">sum</span>(pv) <span class=\"keyword\">over</span>(<span class=\"keyword\">partition</span> <span class=\"keyword\">by</span> cookieid <span class=\"keyword\">order</span> <span class=\"keyword\">by</span> daystr) <span class=\"keyword\">as</span> pv1 </span><br><span class=\"line\"><span class=\"keyword\">from</span> </span><br><span class=\"line\">  user_f1;</span><br><span class=\"line\">   </span><br><span class=\"line\"><span class=\"comment\">--实现分区内所有pv的累加，不指定排序默认窗口：从第一行到最后一行</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> </span><br><span class=\"line\">  cookieid,</span><br><span class=\"line\">  daystr,</span><br><span class=\"line\">  pv,</span><br><span class=\"line\">  <span class=\"keyword\">sum</span>(pv) <span class=\"keyword\">over</span>(<span class=\"keyword\">partition</span> <span class=\"keyword\">by</span> cookieid ) <span class=\"keyword\">as</span> pv2</span><br><span class=\"line\"><span class=\"keyword\">from</span> </span><br><span class=\"line\">  user_f1;</span><br><span class=\"line\">  </span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"comment\">--手动指定窗口的大小：分区</span></span><br><span class=\"line\">rows between 起始位置 and 结束位置</span><br><span class=\"line\">rows between unbounded preceding and current row</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--实现分区内起始到当前行的pv累加</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> </span><br><span class=\"line\">  cookieid,</span><br><span class=\"line\">  daystr,</span><br><span class=\"line\">  pv,</span><br><span class=\"line\">  <span class=\"keyword\">sum</span>(pv) <span class=\"keyword\">over</span>(<span class=\"keyword\">partition</span> <span class=\"keyword\">by</span> cookieid <span class=\"keyword\">order</span> <span class=\"keyword\">by</span> daystr <span class=\"keyword\">rows</span> <span class=\"keyword\">between</span> <span class=\"keyword\">unbounded</span> <span class=\"keyword\">preceding</span> <span class=\"keyword\">and</span> <span class=\"keyword\">current</span> <span class=\"keyword\">row</span>) <span class=\"keyword\">as</span> pv3</span><br><span class=\"line\"><span class=\"keyword\">from</span> </span><br><span class=\"line\">  user_f1;</span><br><span class=\"line\"><span class=\"comment\">--实现分区内指定前N行到当前行的pv累加</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> </span><br><span class=\"line\">  cookieid,</span><br><span class=\"line\">  daystr,</span><br><span class=\"line\">  pv,</span><br><span class=\"line\">  <span class=\"keyword\">sum</span>(pv) <span class=\"keyword\">over</span>(<span class=\"keyword\">partition</span> <span class=\"keyword\">by</span> cookieid <span class=\"keyword\">order</span> <span class=\"keyword\">by</span> daystr <span class=\"keyword\">rows</span> <span class=\"keyword\">between</span> <span class=\"number\">3</span> <span class=\"keyword\">preceding</span> <span class=\"keyword\">and</span> <span class=\"keyword\">current</span> <span class=\"keyword\">row</span>) <span class=\"keyword\">as</span> pv4</span><br><span class=\"line\"><span class=\"keyword\">from</span> </span><br><span class=\"line\">  user_f1;</span><br><span class=\"line\"><span class=\"comment\">--实现分区内指定前N行到后N行的pv累加 </span></span><br><span class=\"line\"><span class=\"keyword\">select</span> </span><br><span class=\"line\">  cookieid,</span><br><span class=\"line\">  daystr,</span><br><span class=\"line\">  pv,</span><br><span class=\"line\">  <span class=\"keyword\">sum</span>(pv) <span class=\"keyword\">over</span>(<span class=\"keyword\">partition</span> <span class=\"keyword\">by</span> cookieid <span class=\"keyword\">order</span> <span class=\"keyword\">by</span> daystr <span class=\"keyword\">rows</span> <span class=\"keyword\">between</span> <span class=\"number\">3</span> <span class=\"keyword\">preceding</span> <span class=\"keyword\">and</span> <span class=\"number\">1</span> <span class=\"keyword\">following</span>) <span class=\"keyword\">as</span> pv5</span><br><span class=\"line\"><span class=\"keyword\">from</span> </span><br><span class=\"line\">  user_f1;</span><br><span class=\"line\"><span class=\"comment\">--实现分区内指定当前行到后N行的pv累加   </span></span><br><span class=\"line\"><span class=\"keyword\">select</span> </span><br><span class=\"line\">  cookieid,</span><br><span class=\"line\">  daystr,</span><br><span class=\"line\">  pv,</span><br><span class=\"line\">  <span class=\"keyword\">sum</span>(pv) <span class=\"keyword\">over</span>(<span class=\"keyword\">partition</span> <span class=\"keyword\">by</span> cookieid <span class=\"keyword\">order</span> <span class=\"keyword\">by</span> daystr <span class=\"keyword\">rows</span> <span class=\"keyword\">between</span> <span class=\"keyword\">current</span> <span class=\"keyword\">row</span> <span class=\"keyword\">and</span> <span class=\"keyword\">unbounded</span> <span class=\"keyword\">following</span>) <span class=\"keyword\">as</span> pv6</span><br><span class=\"line\"><span class=\"keyword\">from</span> </span><br><span class=\"line\">  user_f1;</span><br><span class=\"line\">  </span><br><span class=\"line\">  </span><br><span class=\"line\">- preceding：往前</span><br><span class=\"line\">- following：往后</span><br><span class=\"line\">- current row：当前行</span><br><span class=\"line\">- unbounded：起点</span><br><span class=\"line\">- unbounded preceding 表示从前面的起点</span><br><span class=\"line\">- unbounded following：表示到后面的终点</span><br></pre></td></tr></table></figure>\n<h4 id=\"窗口函数：LAG、LEAD、FIRST-VALUE、LAST-VALUE\"><a href=\"#窗口函数：LAG、LEAD、FIRST-VALUE、LAST-VALUE\" class=\"headerlink\" title=\"窗口函数：LAG、LEAD、FIRST_VALUE、LAST_VALUE\"></a>窗口函数：LAG、LEAD、FIRST_VALUE、LAST_VALUE</h4><p>FIRST_VALUE<br>    功能：取每个分区内某列的第一个值<br>    语法：FIRST_VALUE(col) over (partition by col1 order by col2)</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--取每个部门薪资最高的员工编号</span></span><br><span class=\"line\"><span class=\"keyword\">select</span></span><br><span class=\"line\">  empno,</span><br><span class=\"line\">  ename,</span><br><span class=\"line\">  salary,</span><br><span class=\"line\">  deptno,</span><br><span class=\"line\">  <span class=\"keyword\">FIRST_VALUE</span>(ename) <span class=\"keyword\">over</span> (<span class=\"keyword\">partition</span> <span class=\"keyword\">by</span> deptno <span class=\"keyword\">order</span> <span class=\"keyword\">by</span> salary <span class=\"keyword\">desc</span>) <span class=\"keyword\">as</span> <span class=\"keyword\">first</span></span><br><span class=\"line\"><span class=\"keyword\">from</span></span><br><span class=\"line\">  db_emp.tb_emp_normal;</span><br></pre></td></tr></table></figure>\n<p>LAST_VALUE<br>    功能：取每个分区内某列的最后一个值<br>    语法：LAST_VALUE() over (partition by col1 order by col2)<br>    注意：默认窗口是从第一条到当前条</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--取每个部门薪资最低的员工编号</span></span><br><span class=\"line\"><span class=\"keyword\">select</span></span><br><span class=\"line\">  empno,</span><br><span class=\"line\">  ename,</span><br><span class=\"line\">  salary,</span><br><span class=\"line\">  deptno,</span><br><span class=\"line\">  <span class=\"keyword\">LAST_VALUE</span>(empno) <span class=\"keyword\">over</span> (<span class=\"keyword\">partition</span> <span class=\"keyword\">by</span> deptno <span class=\"keyword\">order</span> <span class=\"keyword\">by</span> salary <span class=\"keyword\">desc</span>) <span class=\"keyword\">as</span> <span class=\"keyword\">last</span></span><br><span class=\"line\"><span class=\"keyword\">from</span></span><br><span class=\"line\">  db_emp.tb_emp_normal; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">select</span></span><br><span class=\"line\">  empno,</span><br><span class=\"line\">  ename,</span><br><span class=\"line\">  salary,</span><br><span class=\"line\">  deptno,</span><br><span class=\"line\">  <span class=\"keyword\">LAST_VALUE</span>(empno) <span class=\"keyword\">over</span> (<span class=\"keyword\">partition</span> <span class=\"keyword\">by</span> deptno <span class=\"keyword\">order</span> <span class=\"keyword\">by</span> salary <span class=\"keyword\">desc</span> <span class=\"keyword\">rows</span> <span class=\"keyword\">between</span> <span class=\"keyword\">unbounded</span> <span class=\"keyword\">preceding</span> <span class=\"keyword\">and</span> <span class=\"keyword\">unbounded</span> <span class=\"keyword\">following</span>) <span class=\"keyword\">as</span> <span class=\"keyword\">last</span></span><br><span class=\"line\"><span class=\"keyword\">from</span></span><br><span class=\"line\">  db_emp.tb_emp_normal;</span><br></pre></td></tr></table></figure>\n<p>LAG<br>    功能：取每个分区内某列的前N个值<br>    语法：LAG(col,N,defaultValue) over (partition by col1 order by col2)</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span></span><br><span class=\"line\">  empno,</span><br><span class=\"line\">  ename,</span><br><span class=\"line\">  salary,</span><br><span class=\"line\">  deptno,</span><br><span class=\"line\">  LAG(salary,<span class=\"number\">1</span>,<span class=\"number\">0</span>) <span class=\"keyword\">over</span> (<span class=\"keyword\">partition</span> <span class=\"keyword\">by</span> deptno <span class=\"keyword\">order</span> <span class=\"keyword\">by</span> salary) <span class=\"keyword\">as</span> deptno2</span><br><span class=\"line\"><span class=\"keyword\">from</span></span><br><span class=\"line\">  db_emp.tb_emp_normal;</span><br></pre></td></tr></table></figure>\n<p>LEAD<br>    功能：向后取每个分区内某列的前N个值<br>    语法：LEAD(col,N,defaultValue) over (partition by col1 order by col2)</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span></span><br><span class=\"line\">  empno,</span><br><span class=\"line\">  ename,</span><br><span class=\"line\">  salary,</span><br><span class=\"line\">  deptno,</span><br><span class=\"line\">  <span class=\"keyword\">LEAD</span>(salary,<span class=\"number\">1</span>,<span class=\"number\">0</span>) <span class=\"keyword\">over</span> (<span class=\"keyword\">partition</span> <span class=\"keyword\">by</span> deptno <span class=\"keyword\">order</span> <span class=\"keyword\">by</span> salary) <span class=\"keyword\">as</span> deptno2</span><br><span class=\"line\"><span class=\"keyword\">from</span></span><br><span class=\"line\">  db_emp.tb_emp_normal;</span><br></pre></td></tr></table></figure>\n\n\n\n\n<h4 id=\"分析函数：ROW-NUMBER、RANK、DENSE-RANK、NTILE\"><a href=\"#分析函数：ROW-NUMBER、RANK、DENSE-RANK、NTILE\" class=\"headerlink\" title=\"分析函数：ROW_NUMBER、RANK、DENSE_RANK、NTILE\"></a>分析函数：ROW_NUMBER、RANK、DENSE_RANK、NTILE</h4><p>==ROW_NUMBER==<br>    功能：用于实现分区内记录编号<br>    语法：row_number() over (partition by col1 order by col2)</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--统计每个部门薪资最高的前两名</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> </span><br><span class=\"line\">(<span class=\"keyword\">select</span></span><br><span class=\"line\">  empno,</span><br><span class=\"line\">  ename,</span><br><span class=\"line\">  salary,</span><br><span class=\"line\">  deptno,</span><br><span class=\"line\">  row_number() <span class=\"keyword\">over</span> (<span class=\"keyword\">partition</span> <span class=\"keyword\">by</span> deptno <span class=\"keyword\">order</span> <span class=\"keyword\">by</span> salary <span class=\"keyword\">desc</span>) <span class=\"keyword\">as</span> <span class=\"keyword\">numb</span></span><br><span class=\"line\"><span class=\"keyword\">from</span></span><br><span class=\"line\">  db_emp.tb_emp_normal) t <span class=\"keyword\">where</span> t.numb &lt; <span class=\"number\">3</span>;</span><br></pre></td></tr></table></figure>\n<p>RANK<br>    功能：用于实现分区内排名编号[会留空位]<br>        与row_number的区别：<br>            row_number：如果排序时数值相同，继续编号<br>            rank：如果排序时数值相同，编号不变，但留下空位<br>    语法：rank() over (partition by col1 order by col2)</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--统计每个部门薪资排名</span></span><br><span class=\"line\"><span class=\"keyword\">select</span></span><br><span class=\"line\">  empno,</span><br><span class=\"line\">  ename,</span><br><span class=\"line\">  salary,</span><br><span class=\"line\">  deptno,</span><br><span class=\"line\">  <span class=\"keyword\">rank</span>() <span class=\"keyword\">over</span> (<span class=\"keyword\">partition</span> <span class=\"keyword\">by</span> deptno <span class=\"keyword\">order</span> <span class=\"keyword\">by</span> salary <span class=\"keyword\">desc</span>) <span class=\"keyword\">as</span> <span class=\"keyword\">numb</span></span><br><span class=\"line\"><span class=\"keyword\">from</span></span><br><span class=\"line\">  db_emp.tb_emp_normal;</span><br></pre></td></tr></table></figure>\n<p>DENSE_RANK<br>    功能：用于实现分区内排名编号[不留空位]<br>        与rank的区别：<br>            ==row_number：如果排序时数值相同，编号不变，并留下排名空位==<br>            ==dense_rank：如果排序时数值相同，编号不变，不留空位==<br>            ==rank：如果排序时数值相同，编号不变，但留下空位==<br>    语法：dense_rank() over (partition by col1 order by col2)</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--统计每个部门薪资排名</span></span><br><span class=\"line\"><span class=\"keyword\">select</span></span><br><span class=\"line\">  empno,</span><br><span class=\"line\">  ename,</span><br><span class=\"line\">  salary,</span><br><span class=\"line\">  deptno,</span><br><span class=\"line\">  <span class=\"keyword\">dense_rank</span>() <span class=\"keyword\">over</span> (<span class=\"keyword\">partition</span> <span class=\"keyword\">by</span> deptno <span class=\"keyword\">order</span> <span class=\"keyword\">by</span> salary <span class=\"keyword\">desc</span>) <span class=\"keyword\">as</span> <span class=\"keyword\">numb</span></span><br><span class=\"line\"><span class=\"keyword\">from</span></span><br><span class=\"line\">  db_emp.tb_emp_normal;</span><br></pre></td></tr></table></figure>\n<p>NTILE<br>    功能：将每个分区内排序后的结果均分成N份【如果不能均分，优先分配编号小的】<br>        本质：将每个分区拆分成更小的分区<br>    语法：NTILE(N) over (partition by col1 order by col2)</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--统计每个部门薪资排名，将每个部门的薪资分为两个部分，区分高薪和低薪</span></span><br><span class=\"line\"><span class=\"keyword\">select</span></span><br><span class=\"line\">  empno,</span><br><span class=\"line\">  ename,</span><br><span class=\"line\">  salary,</span><br><span class=\"line\">  deptno,</span><br><span class=\"line\">  NTILE(<span class=\"number\">2</span>) <span class=\"keyword\">over</span> (<span class=\"keyword\">partition</span> <span class=\"keyword\">by</span> deptno <span class=\"keyword\">order</span> <span class=\"keyword\">by</span> salary <span class=\"keyword\">desc</span>) <span class=\"keyword\">as</span> <span class=\"keyword\">numb</span></span><br><span class=\"line\"><span class=\"keyword\">from</span></span><br><span class=\"line\">  db_emp.tb_emp_normal;</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"5-3UDTF\"><a href=\"#5-3UDTF\" class=\"headerlink\" title=\"5.3UDTF\"></a>5.3UDTF</h3><p>UDTF（User-Defined Table-Generating Functions）表生成函数 一进多出</p>\n<h4 id=\"lateral-view\"><a href=\"#lateral-view\" class=\"headerlink\" title=\"lateral view\"></a>lateral view</h4><p>分类：视图<br>功能：配合UDTF来使用,把某一行数据拆分成多行数据<br>    与UDTF直接使用的区别：<br>        ==很多的UDTF不能将结果与源表进行关联，使用lateral view==<br>        可以将UDTF拆分的单个字段数据与原始表数据关联上==<br>使用方式：<br>    tabel A lateral view UDTF(xxx) 视图名 as a,b,c</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--准备数据:vim /export/datas/lateral.txt</span></span><br><span class=\"line\">1\thttp://facebook.com/path/p1.php?query=1</span><br><span class=\"line\">2\thttp://www.baidu.com/news/index.jsp?uuid=frank</span><br><span class=\"line\">3\thttp://www.jd.com/index?source=baidu</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--创建表</span></span><br><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span> tb_url(</span><br><span class=\"line\"><span class=\"keyword\">id</span> <span class=\"built_in\">int</span>,</span><br><span class=\"line\"><span class=\"keyword\">url</span> <span class=\"keyword\">string</span></span><br><span class=\"line\">) <span class=\"keyword\">row</span> <span class=\"keyword\">format</span> <span class=\"keyword\">delimited</span> <span class=\"keyword\">fields</span> <span class=\"keyword\">terminated</span> <span class=\"keyword\">by</span> <span class=\"string\">&#x27;\\t&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--加载数据</span></span><br><span class=\"line\"><span class=\"keyword\">load</span> <span class=\"keyword\">data</span> <span class=\"keyword\">local</span> inpath <span class=\"string\">&#x27;/export/datas/lateral.txt&#x27;</span> <span class=\"keyword\">into</span> <span class=\"keyword\">table</span> tb_url;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--使用UDTF解析</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> parse_url_tuple(<span class=\"keyword\">url</span>, <span class=\"string\">&#x27;HOST&#x27;</span>) <span class=\"keyword\">from</span> tb_url;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--使用UDTF+lateral view</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> a.id,b.* <span class=\"keyword\">from</span> tb_url a <span class=\"keyword\">lateral</span> <span class=\"keyword\">view</span> parse_url_tuple(<span class=\"keyword\">url</span>, <span class=\"string\">&#x27;HOST&#x27;</span>) b <span class=\"keyword\">as</span> host;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--对比</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">id</span>,parse_url_tuple(<span class=\"keyword\">url</span>, <span class=\"string\">&#x27;HOST&#x27;</span>) <span class=\"keyword\">from</span> tb_url;<span class=\"comment\">--失败，UDTF函数不能与字段连用</span></span><br></pre></td></tr></table></figure>\n\n\n<h4 id=\"explode\"><a href=\"#explode\" class=\"headerlink\" title=\"explode\"></a>explode</h4><p>功能：函数可以将一个array或者map展开<br>    explode(array)：<br>        将array列表里的每个元素生成一行<br>    explode(map)：<br>        每一对元素作为一行，key为一列，value为一列<br>使用方式：<br>    1-直接使用<br>    2-与lateral view连用</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--实现wordcount【explode(array)】</span></span><br><span class=\"line\">\t<span class=\"keyword\">select</span> <span class=\"keyword\">explode</span>(<span class=\"keyword\">split</span>(word,<span class=\"string\">&quot; &quot;</span>)) <span class=\"keyword\">from</span> wc1;</span><br><span class=\"line\"><span class=\"comment\">--将兴趣爱好展开【explode(map)】</span></span><br><span class=\"line\">\t<span class=\"keyword\">select</span> <span class=\"keyword\">explode</span>(hobby) <span class=\"keyword\">from</span> complex_map;</span><br><span class=\"line\"><span class=\"comment\">--与侧视图连用</span></span><br><span class=\"line\">\t<span class=\"keyword\">select</span> a.name,b.* <span class=\"keyword\">from</span> complex_map a <span class=\"keyword\">lateral</span> <span class=\"keyword\">view</span> <span class=\"keyword\">explode</span>(hobby) b <span class=\"keyword\">as</span> hobby,deep;</span><br></pre></td></tr></table></figure>\n<h4 id=\"reflect\"><a href=\"#reflect\" class=\"headerlink\" title=\"reflect\"></a>reflect</h4><p>功能：用于在Hive中直接调用Java中静态类的方法<br>    用法：reflect(classname,method,args)</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> reflect(<span class=\"string\">&quot;java.util.UUID&quot;</span>, <span class=\"string\">&quot;randomUUID&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">select</span> reflect(<span class=\"string\">&quot;java.lang.Math&quot;</span>,<span class=\"string\">&quot;max&quot;</span>,<span class=\"number\">20</span>,<span class=\"number\">30</span>);</span><br><span class=\"line\"><span class=\"keyword\">select</span> reflect(<span class=\"string\">&quot;org.apache.commons.lang.math.NumberUtils&quot;</span>,<span class=\"string\">&quot;isNumber&quot;</span>,<span class=\"string\">&quot;123&quot;</span>);</span><br></pre></td></tr></table></figure>\n<h4 id=\"get-json-object\"><a href=\"#get-json-object\" class=\"headerlink\" title=\"get_json_object\"></a>get_json_object</h4><p>处理json格式数据</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--创建数据：vim /export/datas/hivedata.json</span></span><br><span class=\"line\">&#123;&quot;id&quot;: 1701439105,&quot;ids&quot;: [2154137571,3889177061],&quot;total_number&quot;: 493&#125;</span><br><span class=\"line\">&#123;&quot;id&quot;: 1701439106,&quot;ids&quot;: [2154137571,3889177061],&quot;total_number&quot;: 494&#125;</span><br><span class=\"line\"><span class=\"comment\">--创建表：</span></span><br><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span> tb_json_test1 (</span><br><span class=\"line\"><span class=\"keyword\">json</span> <span class=\"keyword\">string</span></span><br><span class=\"line\">);</span><br><span class=\"line\"><span class=\"comment\">--加载数据</span></span><br><span class=\"line\"><span class=\"keyword\">load</span> <span class=\"keyword\">data</span> <span class=\"keyword\">local</span> inpath <span class=\"string\">&#x27;/export/datas/hivedata.json&#x27;</span> <span class=\"keyword\">into</span> <span class=\"keyword\">table</span> tb_json_test1;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--处理读取</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> </span><br><span class=\"line\">  get_json_object(t.json,<span class=\"string\">&#x27;$.id&#x27;</span>), </span><br><span class=\"line\">  get_json_object(t.json,<span class=\"string\">&#x27;$.total_number&#x27;</span>) </span><br><span class=\"line\"><span class=\"keyword\">from</span> </span><br><span class=\"line\">  tb_json_test1 t ;</span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"keyword\">select</span> </span><br><span class=\"line\">  t2.* </span><br><span class=\"line\"><span class=\"keyword\">from</span> </span><br><span class=\"line\">  tb_json_test1 t1 </span><br><span class=\"line\"><span class=\"keyword\">lateral</span> <span class=\"keyword\">view</span> </span><br><span class=\"line\">  json_tuple(t1.json, <span class=\"string\">&#x27;id&#x27;</span>, <span class=\"string\">&#x27;total_number&#x27;</span>) t2 <span class=\"keyword\">as</span> c1,c2;</span><br></pre></td></tr></table></figure>\n\n\n<h4 id=\"COALESCE\"><a href=\"#COALESCE\" class=\"headerlink\" title=\"COALESCE\"></a>COALESCE</h4><p>COALESCE(col,0)</p>\n<p>如果单列值为null，替换为默认值0</p>\n<p>concat</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">concat( &#x27;liubei&#x27;,&#x27;xihuan&#x27;,&#x27;xiaoqiao&#x27; )</span><br><span class=\"line\">liubeixihuanxiaoqiao</span><br></pre></td></tr></table></figure>\n\n\n<h4 id=\"concat-ws-amp-collect-set\"><a href=\"#concat-ws-amp-collect-set\" class=\"headerlink\" title=\"concat_ws&amp;collect_set\"></a>concat_ws&amp;collect_set</h4><p>concat_ws(‘|’, collect_set(c_id))</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">id    name</span><br><span class=\"line\">1001    A</span><br><span class=\"line\">1001    B</span><br><span class=\"line\">1001    C</span><br><span class=\"line\"><span class=\"comment\">-------------------------</span></span><br><span class=\"line\">id      name</span><br><span class=\"line\">1001    A,B,C</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"keyword\">id</span>,collect_list(<span class=\"keyword\">name</span>) <span class=\"keyword\">from</span> tb_ss <span class=\"keyword\">group</span> <span class=\"keyword\">by</span> <span class=\"keyword\">id</span></span><br><span class=\"line\"></span><br><span class=\"line\">如果需要去重课可以使用collect_set,返回的是数组</span><br><span class=\"line\"><span class=\"keyword\">concat_ws</span>(<span class=\"string\">&#x27;|&#x27;</span>,collect_set(c_id))可以将数组内容按|拼接</span><br><span class=\"line\"></span><br><span class=\"line\">如果该列不是<span class=\"keyword\">string</span>，先用<span class=\"keyword\">cast</span>(<span class=\"keyword\">col</span>) <span class=\"keyword\">as</span> <span class=\"keyword\">string</span> 转换为<span class=\"keyword\">string</span>类型</span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"keyword\">id</span>,<span class=\"keyword\">concat_ws</span>(<span class=\"string\">&#x27;,&#x27;</span>,collect_list(<span class=\"keyword\">cast</span> (<span class=\"keyword\">name</span> <span class=\"keyword\">as</span> <span class=\"keyword\">string</span>))) <span class=\"keyword\">from</span> tb_ss <span class=\"keyword\">group</span> <span class=\"keyword\">by</span> <span class=\"keyword\">id</span></span><br></pre></td></tr></table></figure>\n\n\n<h4 id=\"instr\"><a href=\"#instr\" class=\"headerlink\" title=\"instr\"></a>instr</h4><p>查找字符串str中子字符串substr的位置， 如果查找失败将返回0，如果任一参数为Null将返回null，注意位置为从1开始的 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">instr(string str, string substr)</span><br></pre></td></tr></table></figure>\n\n\n<h4 id=\"substring\"><a href=\"#substring\" class=\"headerlink\" title=\"substring\"></a>substring</h4><p>截取字符串</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hello</span><br><span class=\"line\">substring(col,1,2) -&gt; &#39;he&#39;</span><br><span class=\"line\">substring(col,-2,2) -&gt; &#39;lo&#39;</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"5-4常见自带的hive函数\"><a href=\"#5-4常见自带的hive函数\" class=\"headerlink\" title=\"5.4常见自带的hive函数\"></a>5.4常见自带的hive函数</h3><p>show functions;</p>\n<p>使用desc function  extended 函数名查看帮助</p>\n<p>•UNIX时间戳转日期函数: from_unixtime</p>\n<p>• 获取当前UNIX时间戳函数: unix_timestamp</p>\n<p>•日期转UNIX时间戳函数: unix_timestamp</p>\n<p>• 指定格式日期转UNIX时间戳函数: unix_timestamp</p>\n<p>•日期时间转日期函数: to_date</p>\n<p>•日期转年函数: year</p>\n<p>• 日期转月函数: month</p>\n<p>• 日期转天函数: day</p>\n<p>• 日期转小时函数: hour</p>\n<p>• 日期转分钟函数: minute</p>\n<p>• 日期转秒函数: second</p>\n<p>• 日期转周函数: weekofyear</p>\n<p>• 两个日期之间有多少个月:months_between(‘2020-01-10’, u.birthday)(多用户得出用户年龄)</p>\n<p>• 日期比较函数: datediff</p>\n<p>• 日期增加函数: date_add</p>\n<p>• 日期减少函数: date_sub</p>\n<p>• 取当前天的下一周的周几：next_day(“xxxx-xx-xx”,”Mo”)</p>\n<p>• 取当前月的最后一天：last_day(“xxxx-xx-xx”)</p>\n<p>•If函数: if</p>\n<p>•非空查找函数: COALESCE</p>\n<p>•条件判断函数：CASE</p>\n<p>•字符串长度函数：length</p>\n<p>•字符串反转函数：reverse</p>\n<p>•字符串连接函数：concat</p>\n<p>• 带分隔符字符串连接函数：concat_ws</p>\n<p>• 字符串截取函数：substr,substring</p>\n<p>•正则表达式替换函数：regexp_replace</p>\n<p>•正则表达式解析函数：regexp_extract</p>\n<p>•URL解析函数：parse_url</p>\n<p>​                            parse_url_tuple</p>\n<p>•json解析函数：get_json_object</p>\n<p>​                            json_tuple</p>\n<p>•分割字符串函数: split</p>\n<p>•集合查找函数: find_in_set</p>\n<h3 id=\"5-5关于union和union-all\"><a href=\"#5-5关于union和union-all\" class=\"headerlink\" title=\"5.5关于union和union all\"></a>5.5关于union和union all</h3><p>总结分析</p>\n<ol>\n<li><p>子查询相当于表名，使用 from 关键字需要指定真实表名或表别名。</p>\n</li>\n<li><p>hive 不支持union ，只支持union all </p>\n</li>\n<li><p>子查询中使用union all 时，在子查询里不能使用count、sum 等 聚合函数 </p>\n</li>\n<li><p>两表直接进行union all 可以使用count、sum 等聚合函数 </p>\n</li>\n<li><p>两张表进行union all 取相同的字段名称，可正常输出指定数据内容，且结果为两张表的结果集</p>\n</li>\n</ol>\n<h2 id=\"6-hive语法要点\"><a href=\"#6-hive语法要点\" class=\"headerlink\" title=\"6.hive语法要点\"></a>6.hive语法要点</h2><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(1).Hive不支持join的非等值连接,不支持or</span><br><span class=\"line\">分别举例如下及实现解决办法。</span><br><span class=\"line\">  不支持不等值连接</span><br><span class=\"line\">       错误:<span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> a <span class=\"keyword\">inner</span> <span class=\"keyword\">join</span> b <span class=\"keyword\">on</span> a.id&lt;&gt;b.id</span><br><span class=\"line\">       替代方法:<span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> a <span class=\"keyword\">inner</span> <span class=\"keyword\">join</span> b <span class=\"keyword\">on</span> a.id=b.id <span class=\"keyword\">and</span> a.id <span class=\"keyword\">is</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\"> 不支持or</span><br><span class=\"line\">       错误:<span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> a <span class=\"keyword\">inner</span> <span class=\"keyword\">join</span> b <span class=\"keyword\">on</span> a.id=b.id <span class=\"keyword\">or</span> a.name=b.name</span><br><span class=\"line\">       替代方法:<span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> a <span class=\"keyword\">inner</span> <span class=\"keyword\">join</span> b <span class=\"keyword\">on</span> a.id=b.id</span><br><span class=\"line\">                <span class=\"keyword\">union</span> <span class=\"keyword\">all</span></span><br><span class=\"line\">                <span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> a <span class=\"keyword\">inner</span> <span class=\"keyword\">join</span> b <span class=\"keyword\">on</span> a.name=b.name</span><br><span class=\"line\">  两个<span class=\"keyword\">sql</span> <span class=\"keyword\">union</span> <span class=\"keyword\">all</span>的字段名必须一样或者列别名要一样。</span><br><span class=\"line\">        </span><br><span class=\"line\">(<span class=\"number\">2</span>).分号字符:不能智能识别<span class=\"keyword\">concat</span>(‘;’,key)，只会将‘；’当做SQL结束符号。</span><br><span class=\"line\">    •分号是SQL语句结束标记，在HiveQL中也是，但是在HiveQL中，对分号的识别没有那么智慧，例如：</span><br><span class=\"line\">        •<span class=\"keyword\">select</span> <span class=\"keyword\">concat</span>(<span class=\"keyword\">key</span>,<span class=\"keyword\">concat</span>(<span class=\"string\">&#x27;;&#x27;</span>,<span class=\"keyword\">key</span>)) <span class=\"keyword\">from</span> dual;</span><br><span class=\"line\">    •但HiveQL在解析语句时提示：</span><br><span class=\"line\">        FAILED: Parse Error: line 0:-1 mismatched input &#x27;&lt;EOF&gt;&#x27; expecting ) in function specification</span><br><span class=\"line\">    •解决的办法是，使用分号的八进制的ASCII码进行转义，那么上述语句应写成：</span><br><span class=\"line\">        •<span class=\"keyword\">select</span> <span class=\"keyword\">concat</span>(<span class=\"keyword\">key</span>,<span class=\"keyword\">concat</span>(<span class=\"string\">&#x27;\\073&#x27;</span>,<span class=\"keyword\">key</span>)) <span class=\"keyword\">from</span> dual;</span><br><span class=\"line\"></span><br><span class=\"line\">(3).不支持<span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> 表 <span class=\"keyword\">Values</span>（）, <span class=\"keyword\">UPDATE</span>, <span class=\"keyword\">DELETE</span>等操作.这样的话，就不要很复杂的锁机制来读写数据。</span><br><span class=\"line\">    <span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> syntax <span class=\"keyword\">is</span> <span class=\"keyword\">only</span> available <span class=\"keyword\">starting</span> <span class=\"keyword\">in</span> <span class=\"keyword\">version</span> <span class=\"number\">0.8</span>。<span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span>就是在表或分区中追加数据。</span><br><span class=\"line\"></span><br><span class=\"line\">(<span class=\"number\">4</span>).HiveQL中<span class=\"keyword\">String</span>类型的字段若是空(<span class=\"keyword\">empty</span>)字符串, 即长度为<span class=\"number\">0</span>, 那么对它进行<span class=\"keyword\">IS</span> <span class=\"literal\">NULL</span>的判断结果是<span class=\"literal\">False</span>，使用<span class=\"keyword\">left</span> <span class=\"keyword\">join</span>可以进行筛选行。</span><br><span class=\"line\"></span><br><span class=\"line\">(<span class=\"number\">5</span>).不支持 ‘&lt; dt &lt;’这种格式的范围查找，可以用dt <span class=\"keyword\">in</span>(”,”)或者<span class=\"keyword\">between</span>替代。</span><br><span class=\"line\"></span><br><span class=\"line\">(<span class=\"number\">6</span>).Hive不支持将数据插入现有的表或分区中，仅支持覆盖重写整个表，示例如下：</span><br><span class=\"line\">    <span class=\"keyword\">INSERT</span> OVERWRITE <span class=\"keyword\">TABLE</span> t1 <span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> t2;</span><br><span class=\"line\">    </span><br><span class=\"line\">(7).group by的字段,必须是<span class=\"keyword\">select</span>后面的字段，<span class=\"keyword\">select</span>后面的字段不能比<span class=\"keyword\">group</span> <span class=\"keyword\">by</span>的字段多.</span><br><span class=\"line\">    如果<span class=\"keyword\">select</span>后面有聚合函数,则该<span class=\"keyword\">select</span>语句中必须有<span class=\"keyword\">group</span> <span class=\"keyword\">by</span>语句</span><br><span class=\"line\">    而且<span class=\"keyword\">group</span> <span class=\"keyword\">by</span>后面不能使用别名</span><br><span class=\"line\">    </span><br><span class=\"line\">(<span class=\"number\">8</span>).hive的<span class=\"number\">0.13</span>版之前<span class=\"keyword\">select</span> , <span class=\"keyword\">where</span> 及 <span class=\"keyword\">having</span> 之后不能跟子查询语句(一般使用<span class=\"keyword\">left</span> <span class=\"keyword\">join</span>、<span class=\"keyword\">right</span> <span class=\"keyword\">join</span> 或者<span class=\"keyword\">inner</span> <span class=\"keyword\">join</span>替代)</span><br><span class=\"line\"></span><br><span class=\"line\">(<span class=\"number\">9</span>).先<span class=\"keyword\">join</span>(及<span class=\"keyword\">inner</span> <span class=\"keyword\">join</span>) 然后<span class=\"keyword\">left</span> <span class=\"keyword\">join</span>或<span class=\"keyword\">right</span> <span class=\"keyword\">join</span></span><br><span class=\"line\"></span><br><span class=\"line\">(<span class=\"number\">10</span>).hive不支持<span class=\"keyword\">group_concat</span>方法,可用 <span class=\"keyword\">concat_ws</span>(<span class=\"string\">&#x27;|&#x27;</span>, collect_set(<span class=\"keyword\">str</span>)) 实现</span><br><span class=\"line\"></span><br><span class=\"line\">(<span class=\"number\">11</span>).not <span class=\"keyword\">in</span> 后不能包含查询语句,可用<span class=\"keyword\">left</span> <span class=\"keyword\">join</span> tmp <span class=\"keyword\">on</span> tableName.id = tmp.id <span class=\"keyword\">where</span> tmp.id <span class=\"keyword\">is</span> <span class=\"literal\">null</span> 替代实现</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">1.</span><span class=\"keyword\">case</span> <span class=\"keyword\">when</span> ... <span class=\"keyword\">then</span> ... <span class=\"keyword\">else</span> ... <span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">2.</span><span class=\"keyword\">length</span>(<span class=\"keyword\">string</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">3.</span><span class=\"keyword\">cast</span>(<span class=\"keyword\">string</span> <span class=\"keyword\">as</span> <span class=\"built_in\">bigint</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">4.</span><span class=\"keyword\">rand</span>()       返回一个<span class=\"number\">0</span>到<span class=\"number\">1</span>范围内的随机数</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">5.</span><span class=\"keyword\">ceiling</span>(<span class=\"keyword\">double</span>)    向上取整</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">6.</span><span class=\"keyword\">substr</span>(<span class=\"keyword\">string</span> A, <span class=\"built_in\">int</span> <span class=\"keyword\">start</span>, <span class=\"built_in\">int</span> <span class=\"keyword\">len</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">7.</span>collect_set(<span class=\"keyword\">col</span>)函数只接受基本数据类型，它的主要作用是将某字段的值进行去重汇总，产生<span class=\"built_in\">array</span>类型字段</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">8.</span><span class=\"keyword\">concat</span>()函数</span><br><span class=\"line\">    <span class=\"number\">1</span>、功能：将多个字符串连接成一个字符串。</span><br><span class=\"line\">    <span class=\"number\">2</span>、语法：<span class=\"keyword\">concat</span>(str1, str2,...)</span><br><span class=\"line\">    返回结果为连接参数产生的字符串，如果有任何一个参数为<span class=\"literal\">null</span>，则返回值为<span class=\"literal\">null</span>。</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"number\">9.</span><span class=\"keyword\">concat_ws</span>()函数</span><br><span class=\"line\">    <span class=\"number\">1</span>、功能：和<span class=\"keyword\">concat</span>()一样，将多个字符串连接成一个字符串，但是可以一次性指定分隔符～（<span class=\"keyword\">concat_ws</span>就是<span class=\"keyword\">concat</span> <span class=\"keyword\">with</span> separator）</span><br><span class=\"line\">    <span class=\"number\">2</span>、语法：<span class=\"keyword\">concat_ws</span>(separator, str1, str2, ...)</span><br><span class=\"line\">    说明：第一个参数指定分隔符。需要注意的是分隔符不能为<span class=\"literal\">null</span>，如果为<span class=\"literal\">null</span>，则返回结果为<span class=\"literal\">null</span>。</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"number\">10.</span>nvl(expr1, expr2)：空值转换函数  nvl(x,y)    <span class=\"keyword\">Returns</span> y <span class=\"keyword\">if</span> x <span class=\"keyword\">is</span> <span class=\"literal\">null</span> <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> x</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">11.</span><span class=\"keyword\">if</span>(<span class=\"built_in\">boolean</span> testCondition, T valueTrue, T valueFalse)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">12.</span>row_number()<span class=\"keyword\">over</span>()分组排序功能,<span class=\"keyword\">over</span>()里头的分组以及排序的执行晚于 <span class=\"keyword\">where</span> <span class=\"keyword\">group</span> <span class=\"keyword\">by</span>  <span class=\"keyword\">order</span> <span class=\"keyword\">by</span> 的执行。</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">13.</span>获取年、月、日、小时、分钟、秒、当年第几周</span><br><span class=\"line\">    <span class=\"keyword\">select</span> </span><br><span class=\"line\">        <span class=\"keyword\">year</span>(<span class=\"string\">&#x27;2018-02-27 10:00:00&#x27;</span>)       <span class=\"keyword\">as</span> <span class=\"keyword\">year</span></span><br><span class=\"line\">        ,<span class=\"keyword\">month</span>(<span class=\"string\">&#x27;2018-02-27 10:00:00&#x27;</span>)      <span class=\"keyword\">as</span> <span class=\"keyword\">month</span></span><br><span class=\"line\">        ,<span class=\"keyword\">day</span>(<span class=\"string\">&#x27;2018-02-27 10:00:00&#x27;</span>)        <span class=\"keyword\">as</span> <span class=\"keyword\">day</span></span><br><span class=\"line\">        ,<span class=\"keyword\">hour</span>(<span class=\"string\">&#x27;2018-02-27 10:00:00&#x27;</span>)       <span class=\"keyword\">as</span> <span class=\"keyword\">hour</span></span><br><span class=\"line\">        ,<span class=\"keyword\">minute</span>(<span class=\"string\">&#x27;2018-02-27 10:00:00&#x27;</span>)     <span class=\"keyword\">as</span> <span class=\"keyword\">minute</span></span><br><span class=\"line\">        ,<span class=\"keyword\">second</span>(<span class=\"string\">&#x27;2018-02-27 10:00:00&#x27;</span>)     <span class=\"keyword\">as</span> <span class=\"keyword\">second</span></span><br><span class=\"line\">        ,<span class=\"keyword\">weekofyear</span>(<span class=\"string\">&#x27;2018-02-27 10:00:00&#x27;</span>) <span class=\"keyword\">as</span> <span class=\"keyword\">weekofyear</span></span><br><span class=\"line\">  获取当前时间:</span><br><span class=\"line\">        <span class=\"number\">1</span>).current_timestamp</span><br><span class=\"line\">        <span class=\"number\">2</span>).unix_timestamp()</span><br><span class=\"line\">        <span class=\"number\">3</span>).from_unixtime(<span class=\"keyword\">unix_timestamp</span>())</span><br><span class=\"line\">        <span class=\"number\">4</span>).CURRENT_DATE</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"7-hive优化\"><a href=\"#7-hive优化\" class=\"headerlink\" title=\"7.hive优化\"></a>7.hive优化</h2><h3 id=\"7-1大表join大表优化\"><a href=\"#7-1大表join大表优化\" class=\"headerlink\" title=\"7.1大表join大表优化\"></a>7.1大表join大表优化</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br><span class=\"line\">320</span><br><span class=\"line\">321</span><br><span class=\"line\">322</span><br><span class=\"line\">323</span><br><span class=\"line\">324</span><br><span class=\"line\">325</span><br><span class=\"line\">326</span><br><span class=\"line\">327</span><br><span class=\"line\">328</span><br><span class=\"line\">329</span><br><span class=\"line\">330</span><br><span class=\"line\">331</span><br><span class=\"line\">332</span><br><span class=\"line\">333</span><br><span class=\"line\">334</span><br><span class=\"line\">335</span><br><span class=\"line\">336</span><br><span class=\"line\">337</span><br><span class=\"line\">338</span><br><span class=\"line\">339</span><br><span class=\"line\">340</span><br><span class=\"line\">341</span><br><span class=\"line\">342</span><br><span class=\"line\">343</span><br><span class=\"line\">344</span><br><span class=\"line\">345</span><br><span class=\"line\">346</span><br><span class=\"line\">347</span><br><span class=\"line\">348</span><br><span class=\"line\">349</span><br><span class=\"line\">350</span><br><span class=\"line\">351</span><br><span class=\"line\">352</span><br><span class=\"line\">353</span><br><span class=\"line\">354</span><br><span class=\"line\">355</span><br><span class=\"line\">356</span><br><span class=\"line\">357</span><br><span class=\"line\">358</span><br><span class=\"line\">359</span><br><span class=\"line\">360</span><br><span class=\"line\">361</span><br><span class=\"line\">362</span><br><span class=\"line\">363</span><br><span class=\"line\">364</span><br><span class=\"line\">365</span><br><span class=\"line\">366</span><br><span class=\"line\">367</span><br><span class=\"line\">368</span><br><span class=\"line\">369</span><br><span class=\"line\">370</span><br><span class=\"line\">371</span><br><span class=\"line\">372</span><br><span class=\"line\">373</span><br><span class=\"line\">374</span><br><span class=\"line\">375</span><br><span class=\"line\">376</span><br><span class=\"line\">377</span><br><span class=\"line\">378</span><br><span class=\"line\">379</span><br><span class=\"line\">380</span><br><span class=\"line\">381</span><br><span class=\"line\">382</span><br><span class=\"line\">383</span><br><span class=\"line\">384</span><br><span class=\"line\">385</span><br><span class=\"line\">386</span><br><span class=\"line\">387</span><br><span class=\"line\">388</span><br><span class=\"line\">389</span><br><span class=\"line\">390</span><br><span class=\"line\">391</span><br><span class=\"line\">392</span><br><span class=\"line\">393</span><br><span class=\"line\">394</span><br><span class=\"line\">395</span><br><span class=\"line\">396</span><br><span class=\"line\">397</span><br><span class=\"line\">398</span><br><span class=\"line\">399</span><br><span class=\"line\">400</span><br><span class=\"line\">401</span><br><span class=\"line\">402</span><br><span class=\"line\">403</span><br><span class=\"line\">404</span><br><span class=\"line\">405</span><br><span class=\"line\">406</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">如果Hive优化实战2中mapjoin中小表dim_seller很大呢？比如超过了1GB大小？这种就是大表join大表的问题。首先引入一个具体的问题场景，然后基于此介绍各自优化方案。</span><br><span class=\"line\"></span><br><span class=\"line\">1、问题场景</span><br><span class=\"line\">问题场景如下：</span><br><span class=\"line\"></span><br><span class=\"line\">A表为一个汇总表，汇总的是卖家买家最近N天交易汇总信息，即对于每个卖家最近N天，其每个买家共成交了多少单，总金额是多少，假设N取90天，汇总值仅取成交单数。</span><br><span class=\"line\"></span><br><span class=\"line\">A表的字段有：buyer_id、seller_id、pay_cnt_90day。</span><br><span class=\"line\"></span><br><span class=\"line\">B表为卖家基本信息表，其字段有seller_id、sale_level，其中sale_levels是卖家的一个分层评级信息，比如吧卖家分为6个级别：S0、S1、S2、S3、S4和S5。</span><br><span class=\"line\"></span><br><span class=\"line\">要获得的结果是每个买家在各个级别的卖家的成交比例信息，比如：</span><br><span class=\"line\"></span><br><span class=\"line\">某买家：S0:10%；S1:20%；S2:20%；S3:10%；S4:20%；S5:10%。</span><br><span class=\"line\"></span><br><span class=\"line\">正如mapjoin中的例子一样，第一反应是直接join两表并统计：</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">select</span></span><br><span class=\"line\"></span><br><span class=\"line\">m.buyer_id,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">sum</span>(pay_cnt_90day)  <span class=\"keyword\">as</span> pay_cnt_90day,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">sum</span>(<span class=\"keyword\">case</span> <span class=\"keyword\">when</span> m.sale_level = <span class=\"number\">0</span>  <span class=\"keyword\">then</span> pay_cnt_90day  <span class=\"keyword\">end</span>)  <span class=\"keyword\">as</span> pay_cnt_90day_s0,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">sum</span>(<span class=\"keyword\">case</span> <span class=\"keyword\">when</span> m.sale_level = <span class=\"number\">1</span>  <span class=\"keyword\">then</span> pay_cnt_90day  <span class=\"keyword\">end</span>)  <span class=\"keyword\">as</span> pay_cnt_90day_s1,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">sum</span>(<span class=\"keyword\">case</span> <span class=\"keyword\">when</span> m.sale_level = <span class=\"number\">2</span>  <span class=\"keyword\">then</span> pay_cnt_90day  <span class=\"keyword\">end</span>)  <span class=\"keyword\">as</span> pay_cnt_90day_s2,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">sum</span>(<span class=\"keyword\">case</span> <span class=\"keyword\">when</span> m.sale_level = <span class=\"number\">3</span>  <span class=\"keyword\">then</span> pay_cnt_90day  <span class=\"keyword\">end</span>)  <span class=\"keyword\">as</span> pay_cnt_90day_s3,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">sum</span>(<span class=\"keyword\">case</span> <span class=\"keyword\">when</span> m.sale_level = <span class=\"number\">4</span>  <span class=\"keyword\">then</span> pay_cnt_90day  <span class=\"keyword\">end</span>)  <span class=\"keyword\">as</span> pay_cnt_90day_s4,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">sum</span>(<span class=\"keyword\">case</span> <span class=\"keyword\">when</span> m.sale_level = <span class=\"number\">5</span>  <span class=\"keyword\">then</span> pay_cnt_90day  <span class=\"keyword\">end</span>)  <span class=\"keyword\">as</span> pay_cnt_90day_s5</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> (</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">select</span>  a.buer_id,  a.seller_id,  b.sale_level, a.pay_cnt_90day</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> (  <span class=\"keyword\">select</span> buyer_id,  seller_id,  pay_cnt_90day   <span class=\"keyword\">from</span> table_A)  a</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">join</span></span><br><span class=\"line\"></span><br><span class=\"line\">(<span class=\"keyword\">select</span> seller_id,  sale_level  <span class=\"keyword\">from</span> table_B)  b</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">on</span>  a.seller_id  = b.seller_id</span><br><span class=\"line\"></span><br><span class=\"line\">)  m</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">group</span> <span class=\"keyword\">by</span> m.buyer_id</span><br><span class=\"line\"></span><br><span class=\"line\">但是此<span class=\"keyword\">SQL</span>会引起数据倾斜，原因在于卖家的二八准则，某些卖家<span class=\"number\">90</span>天内会有几百万甚至上千万的买家，但是大部分的卖家<span class=\"number\">90</span>天内买家的数目并不多，<span class=\"keyword\">join</span> table_A和table_B的时候，</span><br><span class=\"line\"></span><br><span class=\"line\">ODPS会按照seller_id进行分发，table_A的大卖家引起了数据倾斜。</span><br><span class=\"line\"></span><br><span class=\"line\">但是数据本身无法用mapjoin table_B解决，因为卖家超过千万条，文件大小有几个GB，超过了<span class=\"number\">1</span>GB的限制。</span><br><span class=\"line\"></span><br><span class=\"line\">优化方案<span class=\"number\">1</span>：转为mapjoin</span><br><span class=\"line\">一个很正常的想法是，尽管B表无法直接mapjoin, 但是是否可以间接mapjoin它呢？</span><br><span class=\"line\"></span><br><span class=\"line\">实际上此思路有两种途径：限制行和限制列。</span><br><span class=\"line\"></span><br><span class=\"line\">限制行的思路是不需要<span class=\"keyword\">join</span> B全表，而只需要<span class=\"keyword\">join</span>其在A表中存在的，对于本问题场景，就是过滤掉<span class=\"number\">90</span>天内没有成交的卖家。</span><br><span class=\"line\"></span><br><span class=\"line\">限制列的思路是只取需要的字段。</span><br><span class=\"line\"></span><br><span class=\"line\">加上如上的限制后，检查过滤后的B表是否满足了Hive  mapjoin的条件，如果能满足，那么添加过滤条件生成一个临时B表，然后mapjoin该表即可。采用此思路的语句如下：</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">select</span></span><br><span class=\"line\"></span><br><span class=\"line\">m.buyer_id,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">sum</span>(pay_cnt_90day)  <span class=\"keyword\">as</span> pay_cnt_90day,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">sum</span>(<span class=\"keyword\">case</span> <span class=\"keyword\">when</span> m.sale_level = <span class=\"number\">0</span>  <span class=\"keyword\">then</span> pay_cnt_90day  <span class=\"keyword\">end</span>)  <span class=\"keyword\">as</span> pay_cnt_90day_s0,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">sum</span>(<span class=\"keyword\">case</span> <span class=\"keyword\">when</span> m.sale_level = <span class=\"number\">1</span>  <span class=\"keyword\">then</span> pay_cnt_90day  <span class=\"keyword\">end</span>)  <span class=\"keyword\">as</span> pay_cnt_90day_s1,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">sum</span>(<span class=\"keyword\">case</span> <span class=\"keyword\">when</span> m.sale_level = <span class=\"number\">2</span>  <span class=\"keyword\">then</span> pay_cnt_90day  <span class=\"keyword\">end</span>)  <span class=\"keyword\">as</span> pay_cnt_90day_s2,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">sum</span>(<span class=\"keyword\">case</span> <span class=\"keyword\">when</span> m.sale_level = <span class=\"number\">3</span>  <span class=\"keyword\">then</span> pay_cnt_90day  <span class=\"keyword\">end</span>)  <span class=\"keyword\">as</span> pay_cnt_90day_s3,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">sum</span>(<span class=\"keyword\">case</span> <span class=\"keyword\">when</span> m.sale_level = <span class=\"number\">4</span>  <span class=\"keyword\">then</span> pay_cnt_90day  <span class=\"keyword\">end</span>)  <span class=\"keyword\">as</span> pay_cnt_90day_s4,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">sum</span>(<span class=\"keyword\">case</span> <span class=\"keyword\">when</span> m.sale_level = <span class=\"number\">5</span>  <span class=\"keyword\">then</span> pay_cnt_90day  <span class=\"keyword\">end</span>)  <span class=\"keyword\">as</span> pay_cnt_90day_s5</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> ( </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">select</span>  <span class=\"comment\">/*+mapjoin(b)*/</span></span><br><span class=\"line\"></span><br><span class=\"line\">a.buer_id,  a.seller_id,  b.sale_level, a.pay_cnt_90day</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> (  <span class=\"keyword\">select</span> buyer_id,  seller_id,  pay_cnt_90day   <span class=\"keyword\">from</span> table_A)  a</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">join</span></span><br><span class=\"line\"></span><br><span class=\"line\">(</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">select</span> seller_id,  sale_level  <span class=\"keyword\">from</span> table_B b0</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">join</span> </span><br><span class=\"line\"></span><br><span class=\"line\">    (<span class=\"keyword\">select</span> seller_id <span class=\"keyword\">from</span> table_A <span class=\"keyword\">group</span> <span class=\"keyword\">by</span> seller_id) a0</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">on</span> b0.seller_id = a0.selller_id</span><br><span class=\"line\"></span><br><span class=\"line\">)  b</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">on</span>  a.seller_id  = b.seller_id</span><br><span class=\"line\"></span><br><span class=\"line\">)  m</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">group</span> <span class=\"keyword\">by</span> m.buyer_id</span><br><span class=\"line\"></span><br><span class=\"line\">此方案在一些情况可以起作用，但是很多时候还是无法解决上述问题，因为大部分卖家尽管<span class=\"number\">90</span>天内买家不多，但还是有一些的，过滤后的B表仍然很多。</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">优化方案<span class=\"number\">2</span>：<span class=\"keyword\">join</span>时用<span class=\"keyword\">case</span> <span class=\"keyword\">when</span>语句</span><br><span class=\"line\">此种解决方案应用场景是：倾斜的值是明确的而且数量很少，比如<span class=\"literal\">null</span>值引起的倾斜。其核心是将这些引起倾斜的值随机分发到Reduce,其主要核心逻辑在于<span class=\"keyword\">join</span>时对这些特殊值<span class=\"keyword\">concat</span>随机数，</span><br><span class=\"line\"></span><br><span class=\"line\">从而达到随机分发的目的。此方案的核心逻辑如下：</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">select</span> a.user_id, a.order_id, b.user_id</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> table_a a <span class=\"keyword\">join</span> table_b b</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">on</span> (<span class=\"keyword\">case</span> <span class=\"keyword\">when</span> a.user_is <span class=\"keyword\">is</span> <span class=\"literal\">null</span> <span class=\"keyword\">then</span> <span class=\"keyword\">concat</span>(<span class=\"string\">&#x27;hive&#x27;</span>, <span class=\"keyword\">rand</span>()) <span class=\"keyword\">else</span> a.user_id <span class=\"keyword\">end</span>) = b.user_id</span><br><span class=\"line\"></span><br><span class=\"line\">Hive 已对此进行了优化，只需要设置参数skewinfo和skewjoin参数，不修改<span class=\"keyword\">SQL</span>代码，例如，由于table_B的值“<span class=\"number\">0</span>” 和“<span class=\"number\">1</span>”引起了倾斜，值需要做如下设置：</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">set</span> hive.optimize.skewinfo=table_B:(selleer_id) [ ( <span class=\"string\">&quot;0&quot;</span>) (<span class=\"string\">&quot;1&quot;</span>) ) ] </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">set</span> hive.optimize.skewjoin = <span class=\"literal\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">但是方案2因为无法解决本问题场景的倾斜问题，因为倾斜的卖家大量存在而且动态变化。</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">优化方案3：倍数B表，再取模join</span><br><span class=\"line\">1、通用方案</span><br><span class=\"line\">此方案的思路是建立一个numbers表，其值只有一列int 行，比如从1到10（具体值可根据倾斜程度确定），然后放大B表10倍，再取模join。代码如下：</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">select</span></span><br><span class=\"line\"></span><br><span class=\"line\">m.buyer_id,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">sum</span>(pay_cnt_90day)  <span class=\"keyword\">as</span> pay_cnt_90day,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">sum</span>(<span class=\"keyword\">case</span> <span class=\"keyword\">when</span> m.sale_level = <span class=\"number\">0</span>  <span class=\"keyword\">then</span> pay_cnt_90day  <span class=\"keyword\">end</span>)  <span class=\"keyword\">as</span> pay_cnt_90day_s0,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">sum</span>(<span class=\"keyword\">case</span> <span class=\"keyword\">when</span> m.sale_level = <span class=\"number\">1</span>  <span class=\"keyword\">then</span> pay_cnt_90day  <span class=\"keyword\">end</span>)  <span class=\"keyword\">as</span> pay_cnt_90day_s1,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">sum</span>(<span class=\"keyword\">case</span> <span class=\"keyword\">when</span> m.sale_level = <span class=\"number\">2</span>  <span class=\"keyword\">then</span> pay_cnt_90day  <span class=\"keyword\">end</span>)  <span class=\"keyword\">as</span> pay_cnt_90day_s2,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">sum</span>(<span class=\"keyword\">case</span> <span class=\"keyword\">when</span> m.sale_level = <span class=\"number\">3</span>  <span class=\"keyword\">then</span> pay_cnt_90day  <span class=\"keyword\">end</span>)  <span class=\"keyword\">as</span> pay_cnt_90day_s3,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">sum</span>(<span class=\"keyword\">case</span> <span class=\"keyword\">when</span> m.sale_level = <span class=\"number\">4</span>  <span class=\"keyword\">then</span> pay_cnt_90day  <span class=\"keyword\">end</span>)  <span class=\"keyword\">as</span> pay_cnt_90day_s4,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">sum</span>(<span class=\"keyword\">case</span> <span class=\"keyword\">when</span> m.sale_level = <span class=\"number\">5</span>  <span class=\"keyword\">then</span> pay_cnt_90day  <span class=\"keyword\">end</span>)  <span class=\"keyword\">as</span> pay_cnt_90day_s5</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> (</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">select</span>  a.buer_id,  a.seller_id,  b.sale_level, a.pay_cnt_90day</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> (  <span class=\"keyword\">select</span> buyer_id,  seller_id,  pay_cnt_90day   <span class=\"keyword\">from</span> table_A)  a</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">join</span></span><br><span class=\"line\"></span><br><span class=\"line\">(</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">select</span>  <span class=\"comment\">/*+mapjoin(members)*/</span></span><br><span class=\"line\"></span><br><span class=\"line\">seller_id,  sale_level ,<span class=\"keyword\">member</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> table_B</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">join</span> members</span><br><span class=\"line\"></span><br><span class=\"line\">)  b</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">on</span>  a.seller_id  = b.seller_id</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">and</span> <span class=\"keyword\">mod</span>(a.pay_cnt_90day,<span class=\"number\">10</span>)+<span class=\"number\">1</span> = b.number </span><br><span class=\"line\"></span><br><span class=\"line\">)  m</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">group</span> <span class=\"keyword\">by</span> m.buyer_id</span><br><span class=\"line\"></span><br><span class=\"line\">此思路的核心在于，既然按照seller_id分发会倾斜，那么再人工增加一列进行分发，这样之前倾斜的值的倾斜程度会减少到原来的<span class=\"number\">1</span>/<span class=\"number\">10</span>，可以通过配置numbers表改放大倍数来降低倾斜程度，</span><br><span class=\"line\"></span><br><span class=\"line\">但这样做的一个弊端是B表也会膨胀N倍。</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">2</span>、专用方案</span><br><span class=\"line\">通用方案的思路把B表的每条数据都放大了相同的倍数，实际上这是不需要的，只需要把大卖家放大倍数即可：需要首先知道大卖家的名单，即先建立一个临时表动态存放每天最新的大卖家（</span><br><span class=\"line\"></span><br><span class=\"line\">比如dim_big_seller）,同时此表的大卖家要膨胀预先设定的倍数（<span class=\"number\">1000</span>倍）。</span><br><span class=\"line\"></span><br><span class=\"line\">在A表和B表分别新建一个<span class=\"keyword\">join</span>列，其逻辑为：如果是大卖家，那么<span class=\"keyword\">concat</span>一个随机分配正整数（<span class=\"number\">0</span>到预定义的倍数之间，本例为<span class=\"number\">0</span>~<span class=\"number\">1000</span>）；如果不是，保持不变。具体代码如下：</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">select</span></span><br><span class=\"line\"></span><br><span class=\"line\">m.buyer_id,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">sum</span>(pay_cnt_90day)  <span class=\"keyword\">as</span> pay_cnt_90day,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">sum</span>(<span class=\"keyword\">case</span> <span class=\"keyword\">when</span> m.sale_level = <span class=\"number\">0</span>  <span class=\"keyword\">then</span> pay_cnt_90day  <span class=\"keyword\">end</span>)  <span class=\"keyword\">as</span> pay_cnt_90day_s0,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">sum</span>(<span class=\"keyword\">case</span> <span class=\"keyword\">when</span> m.sale_level = <span class=\"number\">1</span>  <span class=\"keyword\">then</span> pay_cnt_90day  <span class=\"keyword\">end</span>)  <span class=\"keyword\">as</span> pay_cnt_90day_s1,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">sum</span>(<span class=\"keyword\">case</span> <span class=\"keyword\">when</span> m.sale_level = <span class=\"number\">2</span>  <span class=\"keyword\">then</span> pay_cnt_90day  <span class=\"keyword\">end</span>)  <span class=\"keyword\">as</span> pay_cnt_90day_s2,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">sum</span>(<span class=\"keyword\">case</span> <span class=\"keyword\">when</span> m.sale_level = <span class=\"number\">3</span>  <span class=\"keyword\">then</span> pay_cnt_90day  <span class=\"keyword\">end</span>)  <span class=\"keyword\">as</span> pay_cnt_90day_s3,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">sum</span>(<span class=\"keyword\">case</span> <span class=\"keyword\">when</span> m.sale_level = <span class=\"number\">4</span>  <span class=\"keyword\">then</span> pay_cnt_90day  <span class=\"keyword\">end</span>)  <span class=\"keyword\">as</span> pay_cnt_90day_s4,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">sum</span>(<span class=\"keyword\">case</span> <span class=\"keyword\">when</span> m.sale_level = <span class=\"number\">5</span>  <span class=\"keyword\">then</span> pay_cnt_90day  <span class=\"keyword\">end</span>)  <span class=\"keyword\">as</span> pay_cnt_90day_s5</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> (</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">select</span>  a.buer_id,  a.seller_id,  b.sale_level, a.pay_cnt_90day</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> (  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">select</span>  <span class=\"comment\">/*+mapjoin(big)*/</span></span><br><span class=\"line\"></span><br><span class=\"line\">buyer_id,  seller_id,  pay_cnt_90day,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span>(big.seller_id <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">null</span>, <span class=\"keyword\">concat</span>(  table_A.seller_id,  <span class=\"string\">&#x27;rnd&#x27;</span>,  <span class=\"keyword\">cast</span>(  <span class=\"keyword\">rand</span>() * <span class=\"number\">1000</span> <span class=\"keyword\">as</span> <span class=\"built_in\">bigint</span> ), table_A.seller_id)  <span class=\"keyword\">as</span> seller_id_joinkey</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> table_A</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">left</span> <span class=\"keyword\">outer</span> <span class=\"keyword\">join</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--big表seller_id有重复，请注意一定要group by 后再join,保证table_A的行数保持不变</span></span><br><span class=\"line\"></span><br><span class=\"line\">（<span class=\"keyword\">select</span> seller_id  <span class=\"keyword\">from</span> dim_big_seller  <span class=\"keyword\">group</span> <span class=\"keyword\">by</span> seller_id）<span class=\"keyword\">big</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">on</span> table_A.seller_id = big.seller_id</span><br><span class=\"line\"></span><br><span class=\"line\">)  a</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">join</span></span><br><span class=\"line\"></span><br><span class=\"line\">(</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">select</span>  <span class=\"comment\">/*+mapjoin(big)*/</span></span><br><span class=\"line\"></span><br><span class=\"line\">seller_id,  sale_level ,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--big表的seller_id_joinkey生成逻辑和上面的生成逻辑一样</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">coalesce</span>(seller_id_joinkey,table_B.seller_id) <span class=\"keyword\">as</span> seller_id_joinkey</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> table_B</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">left</span> <span class=\"keyword\">out</span> <span class=\"keyword\">join</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--table_B表join大卖家表后大卖家行数扩大1000倍，其它卖家行数保持不变</span></span><br><span class=\"line\"></span><br><span class=\"line\">(<span class=\"keyword\">select</span> seller_id, seller_id_joinkey <span class=\"keyword\">from</span> dim_big_seller) <span class=\"keyword\">big</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">on</span> table_B.seller_id= big.seller_id</span><br><span class=\"line\"></span><br><span class=\"line\">)  b</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">on</span>  a.seller_id_joinkey= b.seller_id_joinkey</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">and</span> <span class=\"keyword\">mod</span>(a.pay_cnt_90day,<span class=\"number\">10</span>)+<span class=\"number\">1</span> = b.number </span><br><span class=\"line\"></span><br><span class=\"line\">)  m</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">group</span> <span class=\"keyword\">by</span> m.buyer_id</span><br><span class=\"line\"></span><br><span class=\"line\">相比通用方案，专用方案的运行效率明细好了许多，因为只是将B表中大卖家的行数放大了<span class=\"number\">1000</span>倍，其它卖家的行数保持不变，但同时代码复杂了很多，而且必须首先建立大数据表。</span><br><span class=\"line\"></span><br><span class=\"line\">方案<span class=\"number\">4</span>：动态一分为二</span><br><span class=\"line\">实际上方案<span class=\"number\">2</span>和<span class=\"number\">3</span>都用了一分为二的思想，但是都不彻底，对于mapjoin不能解决的问题，终极解决方案是动态一分为二，即对倾斜的键值和不倾斜的键值分开处理，不倾斜的正常<span class=\"keyword\">join</span>即可，倾斜的把他们找出来做mapjoin，最后<span class=\"keyword\">union</span> <span class=\"keyword\">all</span>其结果即可。</span><br><span class=\"line\"></span><br><span class=\"line\">但是此种解决方案比较麻烦，代码复杂而且需要一个临时表存放倾斜的键值。代码如下：</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--由于数据倾斜，先找出90天买家超过10000的卖家</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">insert</span> overwrite <span class=\"keyword\">table</span>  temp_table_B</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">select</span> </span><br><span class=\"line\"></span><br><span class=\"line\">m.seller_id,  n.sale_level</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> (</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">select</span>   seller_id</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> (</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">select</span> seller_id,<span class=\"keyword\">count</span>(buyer_id) <span class=\"keyword\">as</span> byr_cnt</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> table_A</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">group</span> <span class=\"keyword\">by</span> seller_id</span><br><span class=\"line\"></span><br><span class=\"line\">) a</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">where</span> a.byr_cnt &gt;<span class=\"number\">10000</span></span><br><span class=\"line\"></span><br><span class=\"line\">) m</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">left</span> <span class=\"keyword\">join</span> </span><br><span class=\"line\"></span><br><span class=\"line\">(</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">select</span> seller_id, sale_level  <span class=\"keyword\">from</span> table_B</span><br><span class=\"line\"></span><br><span class=\"line\">) n</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">on</span> m.seller_id = n.seller_id;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--对于90天买家超过10000的卖家直接mapjoin,对其它卖家直接正常join即可。</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">select</span></span><br><span class=\"line\"></span><br><span class=\"line\">m.buyer_id,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">sum</span>(pay_cnt_90day)  <span class=\"keyword\">as</span> pay_cnt_90day,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">sum</span>(<span class=\"keyword\">case</span> <span class=\"keyword\">when</span> m.sale_level = <span class=\"number\">0</span>  <span class=\"keyword\">then</span> pay_cnt_90day  <span class=\"keyword\">end</span>)  <span class=\"keyword\">as</span> pay_cnt_90day_s0,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">sum</span>(<span class=\"keyword\">case</span> <span class=\"keyword\">when</span> m.sale_level = <span class=\"number\">1</span>  <span class=\"keyword\">then</span> pay_cnt_90day  <span class=\"keyword\">end</span>)  <span class=\"keyword\">as</span> pay_cnt_90day_s1,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">sum</span>(<span class=\"keyword\">case</span> <span class=\"keyword\">when</span> m.sale_level = <span class=\"number\">2</span>  <span class=\"keyword\">then</span> pay_cnt_90day  <span class=\"keyword\">end</span>)  <span class=\"keyword\">as</span> pay_cnt_90day_s2,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">sum</span>(<span class=\"keyword\">case</span> <span class=\"keyword\">when</span> m.sale_level = <span class=\"number\">3</span>  <span class=\"keyword\">then</span> pay_cnt_90day  <span class=\"keyword\">end</span>)  <span class=\"keyword\">as</span> pay_cnt_90day_s3,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">sum</span>(<span class=\"keyword\">case</span> <span class=\"keyword\">when</span> m.sale_level = <span class=\"number\">4</span>  <span class=\"keyword\">then</span> pay_cnt_90day  <span class=\"keyword\">end</span>)  <span class=\"keyword\">as</span> pay_cnt_90day_s4,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">sum</span>(<span class=\"keyword\">case</span> <span class=\"keyword\">when</span> m.sale_level = <span class=\"number\">5</span>  <span class=\"keyword\">then</span> pay_cnt_90day  <span class=\"keyword\">end</span>)  <span class=\"keyword\">as</span> pay_cnt_90day_s5</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> (</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">select</span>  a.buer_id,  a.seller_id,  b.sale_level, a.pay_cnt_90day</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> (  <span class=\"keyword\">select</span> buyer_id,  seller_id,  pay_cnt_90day   <span class=\"keyword\">from</span> table_A)  a</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">join</span></span><br><span class=\"line\"></span><br><span class=\"line\">(</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">select</span> seller_id,  a.sale_level </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> table_A  a</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">left</span> <span class=\"keyword\">join</span> temp_table_B b</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">on</span> a.seller_id = b.seller_id</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">where</span> b.seller_id <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">null</span></span><br><span class=\"line\"></span><br><span class=\"line\">)  b</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">on</span>  a.seller_id  = b.seller_id</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">union</span> <span class=\"keyword\">all</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">select</span>  <span class=\"comment\">/*+mapjoin(b)*/</span></span><br><span class=\"line\"></span><br><span class=\"line\">a.buer_id,  a.seller_id,  b.sale_level, a.pay_cnt_90day</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> ( </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">select</span> buyer_id,  seller_id,  pay_cnt_90day   </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> table_A</span><br><span class=\"line\"></span><br><span class=\"line\">)  a</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">join</span></span><br><span class=\"line\"></span><br><span class=\"line\">(</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">select</span> seller_id,  sale_level  <span class=\"keyword\">from</span> table_B </span><br><span class=\"line\"></span><br><span class=\"line\">)  b</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">on</span>  a.seller_id  = b.seller_id</span><br><span class=\"line\"></span><br><span class=\"line\">)  m  <span class=\"keyword\">group</span> <span class=\"keyword\">by</span> m.buyer_id</span><br><span class=\"line\"></span><br><span class=\"line\">) m</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">group</span> <span class=\"keyword\">by</span> m.buyer_id</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">总结：方案<span class=\"number\">1</span>、<span class=\"number\">2</span>以及方案<span class=\"number\">3</span>中的同用方案不能保证解决大表<span class=\"keyword\">join</span>大表问题，因为它们都存在种种不同的限制和特定使用场景。</span><br><span class=\"line\"></span><br><span class=\"line\">而方案<span class=\"number\">3</span>的专用方案和方案<span class=\"number\">4</span>是推荐的优化方案，但是它们都需要新建一个临时表来存储每日动态变化的大卖家。相对方案<span class=\"number\">4</span>来说，方案<span class=\"number\">3</span>的专用方案不需要对代码框架进行修改，但是B表会被放大，所以一定要是是维度表，不然统计结果会是错误的。方案<span class=\"number\">4</span>最通用，自由度最高，但是对代码的更改也最大，甚至修改更难代码框架，可以作为终极方案使用。</span><br></pre></td></tr></table></figure>"},{"title":"数据结构整理","date":"2021-01-01T14:32:07.000Z","_content":"\n<!-- toc -->\n\n[TOC]\n\n\n\n## 前言\n\n​\t由于面试的时候数据结构在其占不可获取的地位，所以简单总结下数据结构相关知识，以便复习。\n\n<!--more-->\n\n## 一、队列\n\n**队列介绍**\n\n\n\n1.队列是一个有序列表，可以用**数组**或是**链表**来实现。\n\n2.遵循**先入先出**的原则。即：先存入队列的数据，要先取出。后存入的要后取出\n\n示意图：(使用数组模拟队列示意图)\n\n![image-20210101224039379](数据结构整理/image-20210101224039379.png)\n\n### 数组队列代码\n\n```java\npackage queue;\n\nimport java.util.Scanner;\n\npublic class ArrayQueueDemo {\n\n\tpublic static void main(String[] args) {\n\t\t//测试一把\n\t\t//创建一个队列\n\t\tArrayQueue queue = new ArrayQueue(3);\n\t\tchar key = ' '; //接收用户输入\n\t\tScanner scanner = new Scanner(System.in);//\n\t\tboolean loop = true;\n\t\t//输出一个菜单\n\t\twhile(loop) {\n\t\t\tSystem.out.println(\"s(show): 显示队列\");\n\t\t\tSystem.out.println(\"e(exit): 退出程序\");\n\t\t\tSystem.out.println(\"a(add): 添加数据到队列\");\n\t\t\tSystem.out.println(\"g(get): 从队列取出数据\");\n\t\t\tSystem.out.println(\"h(head): 查看队列头的数据\");\n\t\t\tkey = scanner.next().charAt(0);//接收一个字符\n\t\t\tswitch (key) {\n\t\t\tcase 's':\n\t\t\t\tqueue.showQueue();\n\t\t\t\tbreak;\n\t\t\tcase 'a':\n\t\t\t\tSystem.out.println(\"输出一个数\");\n\t\t\t\tint value = scanner.nextInt();\n\t\t\t\tqueue.addQueue(value);\n\t\t\t\tbreak;\n\t\t\tcase 'g': //取出数据\n\t\t\t\ttry {\n\t\t\t\t\tint res = queue.getQueue();\n\t\t\t\t\tSystem.out.printf(\"取出的数据是%d\\n\", res);\n\t\t\t\t} catch (Exception e) {\n\t\t\t\t\t// TODO: handle exception\n\t\t\t\t\tSystem.out.println(e.getMessage());\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'h': //查看队列头的数据\n\t\t\t\ttry {\n\t\t\t\t\tint res = queue.headQueue();\n\t\t\t\t\tSystem.out.printf(\"队列头的数据是%d\\n\", res);\n\t\t\t\t} catch (Exception e) {\n\t\t\t\t\t// TODO: handle exception\n\t\t\t\t\tSystem.out.println(e.getMessage());\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'e': //退出\n\t\t\t\tscanner.close();\n\t\t\t\tloop = false;\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t\n\t\tSystem.out.println(\"程序退出~~\");\n\t}\n\n}\n\n// 使用数组模拟队列-编写一个ArrayQueue类\nclass ArrayQueue {\n\tprivate int maxSize; // 表示数组的最大容量\n\tprivate int front; // 队列头\n\tprivate int rear; // 队列尾\n\tprivate int[] arr; // 该数据用于存放数据, 模拟队列\n\n\t// 创建队列的构造器\n\tpublic ArrayQueue(int arrMaxSize) {\n\t\tmaxSize = arrMaxSize;\n\t\tarr = new int[maxSize];\n\t\tfront = -1; // 指向队列头部，分析出front是指向队列头的前一个位置.\n\t\trear = -1; // 指向队列尾，指向队列尾的数据(即就是队列最后一个数据)\n\t}\n\n\t// 判断队列是否满\n\tpublic boolean isFull() {\n\t\treturn rear == maxSize - 1;\n\t}\n\n\t// 判断队列是否为空\n\tpublic boolean isEmpty() {\n\t\treturn rear == front;\n\t}\n\n\t// 添加数据到队列\n\tpublic void addQueue(int n) {\n\t\t// 判断队列是否满\n\t\tif (isFull()) {\n\t\t\tSystem.out.println(\"队列满，不能加入数据~\");\n\t\t\treturn;\n\t\t}\n\t\trear++; // 让rear 后移\n\t\tarr[rear] = n;\n\t}\n\n\t// 获取队列的数据, 出队列\n\tpublic int getQueue() {\n\t\t// 判断队列是否空\n\t\tif (isEmpty()) {\n\t\t\t// 通过抛出异常\n\t\t\tthrow new RuntimeException(\"队列空，不能取数据\");\n\t\t}\n\t\tfront++; // front后移\n\t\treturn arr[front];\n\n\t}\n\n\t// 显示队列的所有数据\n\tpublic void showQueue() {\n\t\t// 遍历\n\t\tif (isEmpty()) {\n\t\t\tSystem.out.println(\"队列空的，没有数据~~\");\n\t\t\treturn;\n\t\t}\n\t\tfor (int i = 0; i < arr.length; i++) {\n\t\t\tSystem.out.printf(\"arr[%d]=%d\\n\", i, arr[i]);\n\t\t}\n\t}\n\n\t// 显示队列的头数据， 注意不是取出数据\n\tpublic int headQueue() {\n\t\t// 判断\n\t\tif (isEmpty()) {\n\t\t\tthrow new RuntimeException(\"队列空的，没有数据~~\");\n\t\t}\n\t\treturn arr[front + 1];\n\t}\n}\n\n```\n\n### 数组模拟环形队列\n\n​\t对前面的数组模拟队列的优化，充分利用数组. \n 因此将数组看做是一个环形的。(通过取模的方\n 式来实现即可)\n\n```java\nclass CircleQueue {\n    private int maxSize;\n    private int[] arr; // 该数组存放数据，模拟队列\n    private int front; // 指向队列头部\n    private int rear; // 指向队列的尾部\n    public CircleArrayQueue(int arrMaxSize) {\n        maxSize = arrMaxSize;\n        arr = new int[maxSize];\n    } \n    public boolean isFull()  {\n        //尾索引的下一个为头索引时表示队列满，即将队列容量空出一个作为约定(!!!)\n        return (rear + 1) % maxSize == front; }\n\n    public boolean isEmpty()  {\n        this.tail == this.head }\n\n    public void addQueue(int n) {\n        if (isFull()) {\n            System.out.println(\"队列满，无法加入..\");\n            return;}\n        arr[rear] = n;\n        rear = (rear + 1) % maxSize;}  \n    public int getQueue() {\n        if (isEmpty()) {\n            throw new RuntimeException(\"队列空~\");}\n        int value = arr[front];\n        front = (front + 1) % maxSize;\n        return value;}\n    //计算队列有多个元素\n    public int size()  {\n        return (rear + maxSize - front) % maxSize;}}\n```\n\n## 二、链表\n\n链表是有序的列表，但是它在内存中是存储如下\n\n![image-20210101225223666](数据结构整理/image-20210101225223666.png)\n\n小结:\n\n1)链表是以节点的方式来存储,是链式存储\n\n2)每个节点包含 data 域， next 域：指向下一个节点.\n\n3)如图：发现链表的**各个节点不一定是连续存储**.\n\n4)链表分带头节点的链表和没有头节点的链表，根据实际的需求来确定\n\n### 单链表\n\n![image-20210101225427642](数据结构整理/image-20210101225427642.png)\n\n```java\n\n//定义SingleLinkedList 管理我们的英雄\nclass SingleLinkedList {\n    //先初始化一个头节点, 头节点不要动, 不存放具体的数据\n    private HeroNode head = new HeroNode(0, \"\", \"\");\n\n\n    //返回头节点\n    public HeroNode getHead() {\n        return head;\n    }\n\n    //添加节点到单向链表\n    //思路，当不考虑编号顺序时\n    //1. 找到当前链表的最后节点\n    //2. 将最后这个节点的next 指向 新的节点\n    public void add(HeroNode heroNode) {\n\n        //因为head节点不能动，因此我们需要一个辅助遍历 temp\n        HeroNode temp = head;\n        //遍历链表，找到最后\n        while (true) {\n            //找到链表的最后\n            if (temp.next == null) {//\n                break;\n            }\n            //如果没有找到最后, 将将temp后移\n            temp = temp.next;\n        }\n        //当退出while循环时，temp就指向了链表的最后\n        //将最后这个节点的next 指向 新的节点\n        temp.next = heroNode;\n\n    }\n\n    //第二种方式在添加英雄时，根据排名将英雄插入到指定位置\n    //(如果有这个排名，则添加失败，并给出提示)\n    public void addByOrder(HeroNode heroNode) {\n\t\t//因为头节点不能动，因此我们仍然通过一个辅助指针(变量)来帮助找到添加的位置\n\t\t//因为单链表，因为我们找的temp 是位于 添加位置的前一个节点，否则插入不了\n\t\tHeroNode temp = head;\n\t\tboolean flag = false; // flag标志添加的编号是否存在，默认为false\n\t\twhile(true) {\n\t\t\tif(temp.next == null) {//说明temp已经在链表的最后\n\t\t\t\tbreak; //\n\t\t\t}\n\t\t\tif(temp.next.no > heroNode.no) { //位置找到，就在temp的后面插入\n\t\t\t\tbreak;\n\t\t\t} else if (temp.next.no == heroNode.no) {//说明希望添加的heroNode的编号已然存在\n\n\t\t\t\tflag = true; //说明编号存在\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\ttemp = temp.next; //后移，遍历当前链表\n\t\t}\n\t\t//判断flag 的值\n\t\tif(flag) { //不能添加，说明编号存在\n\t\t\tSystem.out.printf(\"准备插入的英雄的编号 %d 已经存在了, 不能加入\\n\", heroNode.no);\n\t\t} else {\n\t\t\t//插入到链表中, temp的后面\n\t\t\theroNode.next = temp.next;\n\t\t\ttemp.next = heroNode;\n\t\t}\n    }\n\n    //修改节点的信息, 根据no编号来修改，即no编号不能改.\n    //说明\n    //1. 根据 newHeroNode 的 no 来修改即可\n    public void update(HeroNode newHeroNode) {\n        //判断是否空\n        if (head.next == null) {\n            System.out.println(\"链表为空~\");\n            return;\n        }\n        //找到需要修改的节点, 根据no编号\n        //定义一个辅助变量\n        HeroNode temp = head.next;\n        boolean flag = false; //表示是否找到该节点\n        while (true) {\n            if (temp == null) {\n                break; //已经遍历完链表\n            }\n            if (temp.no == newHeroNode.no) {\n                //找到\n                flag = true;\n                break;\n            }\n            temp = temp.next;\n        }\n        //根据flag 判断是否找到要修改的节点\n        if (flag) {\n            temp.name = newHeroNode.name;\n            temp.nickname = newHeroNode.nickname;\n        } else { //没有找到\n            System.out.printf(\"没有找到 编号 %d 的节点，不能修改\\n\", newHeroNode.no);\n        }\n\n\n    }\n\n    //删除节点\n    //思路\n    //1. head 不能动，因此我们需要一个temp辅助节点找到待删除节点的前一个节点\n    //2. 说明我们在比较时，是temp.next.no 和  需要删除的节点的no比较\n    public void del(int no) {\n        HeroNode temp = head;\n        boolean flag = false; // 标志是否找到待删除节点的\n        while (true) {\n            if (temp.next == null) { //已经到链表的最后\n                break;\n            }\n            if (temp.next.no == no) {\n                //找到的待删除节点的前一个节点temp\n                flag = true;\n                break;\n            }\n            temp = temp.next; //temp后移，遍历\n        }\n        //判断flag\n        if (flag) { //找到\n            //可以删除\n            temp.next = temp.next.next;\n        } else {\n            System.out.printf(\"要删除的 %d 节点不存在\\n\", no);\n        }\n    }\n\n    //显示链表[遍历]\n    public void list() {\n\t\t//判断链表是否为空\n\t\tif(head.next == null) {\n\t\t\tSystem.out.println(\"链表为空\");\n\t\t\treturn;\n\t\t}\n\t\t//因为头节点，不能动，因此我们需要一个辅助变量来遍历\n\t\tHeroNode temp = head.next;\n\t\twhile(true) {\n\t\t\t//判断是否到链表最后\n\t\t\tif(temp == null) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\t//输出节点的信息\n\t\t\tSystem.out.println(temp);\n\t\t\t//将temp后移， 一定小心\n\t\t\ttemp = temp.next;\n\t\t}\n    }\n}\n\n//定义HeroNode ， 每个HeroNode 对象就是一个节点\nclass HeroNode {\n    public int no;\n    public String name;\n    public String nickname;\n    public HeroNode next; //指向下一个节点\n\n    //构造器\n    public HeroNode(int no, String name, String nickname) {\n        this.no = no;\n        this.name = name;\n        this.nickname = nickname;\n    }\n\n    //为了显示方法，我们重新toString\n    @Override\n    public String toString() {\n        return \"HeroNode [no=\" + no + \", name=\" + name + \", nickname=\" + nickname + \"]\";\n    }\n\n}\n\n```\n\n#### 1.求单链表的有效节点个数\n\n```java\n //方法：获取到单链表的节点的个数(如果是带头结点的链表，需求不统计头节点)\n\n    /**\n     * @param head 链表的头节点\n     * @return 返回的就是有效节点的个数\n     */\n    public static int getLength(HeroNode head) {\n\t\tif(head.next == null) { //空链表\n\t\t\treturn 0;\n\t\t}\n\t\tint length = 0;\n\t\t//定义一个辅助的变量, 这里我们没有统计头节点\n\t\tHeroNode cur = head.next;\n\t\twhile(cur != null) {\n\t\t\tlength++;\n\t\t\tcur = cur.next; //遍历\n\t\t}\n\t\treturn length;\n    }\n```\n\n#### 2.查找单链表中的倒数第k个结点 \n\n```java\n\t//查找单链表中的倒数第k个结点 【新浪面试题】\n    //思路\n    //1. 编写一个方法，接收head节点，同时接收一个index\n    //2. index 表示是倒数第index个节点\n    //3. 先把链表从头到尾遍历，得到链表的总的长度 getLength\n    //4. 得到size 后，我们从链表的第一个开始遍历 (size-index)个，就可以得到\n    //5. 如果找到了，则返回该节点，否则返回nulll\n//判断如果链表为空，返回null\n\t\tif(head.next == null) {\n\t\t\treturn null;//没有找到\n\t\t}\n\t\t//第一个遍历得到链表的长度(节点个数)\n\t\tint size = getLength(head);\n\t\t//第二次遍历  size-index 位置，就是我们倒数的第K个节点\n\t\t//先做一个index的校验\n\t\tif(index <=0 || index > size) {\n\t\t\treturn null;\n\t\t}\n\t\t//定义给辅助变量， for 循环定位到倒数的index\n\t\tHeroNode cur = head.next; //3 // 3 - 1 = 2\n\t\tfor(int i =0; i< size - index; i++) {\n\t\t\tcur = cur.next;\n\t\t}\n\t\treturn cur;\n\t\t}\n```\n\n#### 3.单链表的反转\n\n```java\n  //将单链表反转\n    public static void reversetList(HeroNode head) {\n        //如果当前链表为空，或者只有一个节点，无需反转，直接返回\n        if (head.next == null || head.next.next == null) {\n            return;\n        }\n\n        //定义一个辅助的指针(变量)，帮助我们遍历原来的链表\n        HeroNode cur = head.next;\n        HeroNode next = null;// 指向当前节点[cur]的下一个节点\n        HeroNode reverseHead = new HeroNode(0, \"\", \"\");\n        //遍历原来的链表，每遍历一个节点，就将其取出，并放在新的链表reverseHead 的最前端\n        //动脑筋\n        while (cur != null) {\n            next = cur.next;//先暂时保存当前节点的下一个节点，因为后面需要使用\n            cur.next = reverseHead.next;//将cur的下一个节点指向新的链表的最前端\n            reverseHead.next = cur; //将cur 连接到新的链表上\n            cur = next;//让cur后移\n        }\n        //将head.next 指向 reverseHead.next , 实现单链表的反转\n        head.next = reverseHead.next;\n    }\n```\n\n#### 4.从尾到头打印单链表\n\n```java\n //方式2：\n    //可以利用栈这个数据结构，将各个节点压入到栈中，然后利用栈的先进后出的特点，就实现了逆序打印的效果\n    public static void reversePrint(HeroNode head) {\n\t\tif(head.next == null) {\n\t\t\treturn;//空链表，不能打印\n\t\t}\n\t\t//创建要给一个栈，将各个节点压入栈\n\t\tStack<HeroNode> stack = new Stack<HeroNode>();\n\t\tHeroNode cur = head.next;\n\t\t//将链表的所有节点压入栈\n\t\twhile(cur != null) {\n\t\t\tstack.push(cur);\n\t\t\tcur = cur.next; //cur后移，这样就可以压入下一个节点\n\t\t}\n\t\t//将栈中的节点进行打印,pop 出栈\n\t\twhile (stack.size() > 0) {\n\t\t\tSystem.out.println(stack.pop()); //stack的特点是先进后出\n\t\t}\n\t}\n```\n\n\n\n### 双端链表\n\n```java\n// 创建一个双向链表的类\nclass DoubleLinkedList {\n\n    // 先初始化一个头节点, 头节点不要动, 不存放具体的数据\n    private HeroNode2 head = new HeroNode2(0, \"\", \"\");\n\n    // 返回头节点\n    public HeroNode2 getHead() {\n        return head;\n    }\n\n    // 遍历双向链表的方法\n    // 显示链表[遍历]\n    public void list() {\n        // 判断链表是否为空\n        if (head.next == null) {\n            System.out.println(\"链表为空\");\n            return;\n        }\n        // 因为头节点，不能动，因此我们需要一个辅助变量来遍历\n        HeroNode2 temp = head.next;\n        while (true) {\n            // 判断是否到链表最后\n            if (temp == null) {\n                break;\n            }\n            // 输出节点的信息\n            System.out.println(temp);\n            // 将temp后移， 一定小心\n            temp = temp.next;\n        }\n    }\n\n\n    public void addByorder(HeroNode2 heroNode) {\n        HeroNode2 temp = head;\n        Boolean flag = false;\n        while (true) {\n            if (temp.next == null) {\n                break;\n            }\n            if (temp.next.no > heroNode.no) {\n                break;\n            } else if (temp.next.no == heroNode.no) {\n                flag = true;\n                break;\n            }\n            temp = temp.next;\n        }\n        if (flag) {\n            System.out.printf(\"准备插入的英雄的编号 %d 已经存在了, 不能加入\\n\", heroNode.no);\n        } else {\n            //大坑，需要先将temp.next保存起来防止结构变动影响pre指针\n            HeroNode2 s1 = temp.next;\n            heroNode.next = temp.next;\n            temp.next = heroNode;\n\n            heroNode.pre = temp;\n            if (s1 != null)\n                s1.pre = heroNode;\n\n        }\n    }\n\n    // 添加一个节点到双向链表的最后.\n    public void add(HeroNode2 heroNode) {\n\n        // 因为head节点不能动，因此我们需要一个辅助遍历 temp\n        HeroNode2 temp = head;\n        // 遍历链表，找到最后\n        while (true) {\n            // 找到链表的最后\n            if (temp.next == null) {//\n                break;\n            }\n            // 如果没有找到最后, 将将temp后移\n            temp = temp.next;\n        }\n        // 当退出while循环时，temp就指向了链表的最后\n        // 形成一个双向链表\n        temp.next = heroNode;\n        heroNode.pre = temp;\n    }\n\n    // 修改一个节点的内容, 可以看到双向链表的节点内容修改和单向链表一样\n    // 只是 节点类型改成 HeroNode2\n    public void update(HeroNode2 newHeroNode) {\n        // 判断是否空\n        if (head.next == null) {\n            System.out.println(\"链表为空~\");\n            return;\n        }\n        // 找到需要修改的节点, 根据no编号\n        // 定义一个辅助变量\n        HeroNode2 temp = head.next;\n        boolean flag = false; // 表示是否找到该节点\n        while (true) {\n            if (temp == null) {\n                break; // 已经遍历完链表\n            }\n            if (temp.no == newHeroNode.no) {\n                // 找到\n                flag = true;\n                break;\n            }\n            temp = temp.next;\n        }\n        // 根据flag 判断是否找到要修改的节点\n        if (flag) {\n            temp.name = newHeroNode.name;\n            temp.nickname = newHeroNode.nickname;\n        } else { // 没有找到\n            System.out.printf(\"没有找到 编号 %d 的节点，不能修改\\n\", newHeroNode.no);\n        }\n    }\n\n    // 从双向链表中删除一个节点,\n    // 说明\n    // 1 对于双向链表，我们可以直接找到要删除的这个节点\n    // 2 找到后，自我删除即可\n    public void del(int no) {\n\n        // 判断当前链表是否为空\n        if (head.next == null) {// 空链表\n            System.out.println(\"链表为空，无法删除\");\n            return;\n        }\n\n        HeroNode2 temp = head.next; // 辅助变量(指针)\n        boolean flag = false; // 标志是否找到待删除节点的\n        while (true) {\n            if (temp == null) { // 已经到链表的最后\n                break;\n            }\n            if (temp.no == no) {\n                // 找到的待删除节点的前一个节点temp\n                flag = true;\n                break;\n            }\n            temp = temp.next; // temp后移，遍历\n        }\n        // 判断flag\n        if (flag) { // 找到\n            // 可以删除\n            // temp.next = temp.next.next;[单向链表]\n            temp.pre.next = temp.next;\n            // 这里我们的代码有问题?\n            // 如果是最后一个节点，就不需要执行下面这句话，否则出现空指针\n            if (temp.next != null) {\n                temp.next.pre = temp.pre;\n            }\n        } else {\n            System.out.printf(\"要删除的 %d 节点不存在\\n\", no);\n        }\n    }\n\n}\n\n// 定义HeroNode2 ， 每个HeroNode 对象就是一个节点\nclass HeroNode2 {\n    public int no;\n    public String name;\n    public String nickname;\n    public HeroNode2 next; // 指向下一个节点, 默认为null\n    public HeroNode2 pre; // 指向前一个节点, 默认为null\n    // 构造器\n\n    public HeroNode2(int no, String name, String nickname) {\n        this.no = no;\n        this.name = name;\n        this.nickname = nickname;\n    }\n\n    // 为了显示方法，我们重新toString\n    @Override\n    public String toString() {\n        return \"HeroNode [no=\" + no + \", name=\" + name + \", nickname=\" + nickname + \"]\";\n    }\n\n}\n\n```\n\n### 单向环形链表\n\n#### Josephu 问题\n\nJosephu 问题为：设编号为1，2，… n的n个人围坐一圈，约定编号为k（1<=k<=n）的人从1开始报数，数到m 的那个人出列，它的下一位又从1开始报数，数到m的那个人又出列，依次类推，直到所有人出列为止，由此产生一个出队编号的序列。\n\n\n\n**提示**\n\n用一个不带头结点的循环链表来处理Josephu 问题：先构成一个有n个结点的单循环链表，然后由k结点起从1开始计数，计到m时，对应结点从链表中删除，然后再从被删除结点的下一个结点又从1开始计数，直到最后一个结点从链表中删除算法结束。\n\n单向环形列表代码\n\n```java\n// 创建一个环形的单向链表\nclass CircleSingleLinkedList {\n    // 创建一个first节点,当前没有编号\n    private Boy first = null;\n\n    // 添加小孩节点，构建成一个环形的链表\n    public void addBoy(int nums) {\n        // nums 做一个数据校验\n        if (nums < 1) {\n            System.out.println(\"nums的值不正确\");\n            return;\n        }\n        Boy curBoy = null; //辅助指针，帮助构建环形链表\n        //使用for来创建我们的环形链表\n        for (int i = 1; i <= nums; i++) {\n            //根据编号，创建小孩节点\n            Boy boy = new Boy(i);\n            //如果是第一个小孩\n            if (i == 1) {\n                first = boy;\n                first.setNext(first); //构成环\n                curBoy = first; //\n            } else {\n                curBoy.setNext(boy);\n                boy.setNext(first);\n                curBoy = boy;\n            }\n        }\n    }\n\n    //遍历当前的环形链表\n    public void showBoy() {\n        //判断链表是否为空\n        if (first == null) {\n            System.out.println(\"没有任何小孩~~~\");\n            return;\n        }\n        // 因为first不能动，因此我们仍然使用一个辅助指针完成遍历\n        Boy curBoy = first;\n        while (true) {\n            System.out.printf(\"小孩的编号 %d \\n\", curBoy.getNo());\n            if (curBoy.getNext() == first) {// 说明已经遍历完毕\n                break;\n            }\n            curBoy = curBoy.getNext(); // curBoy后移\n        }\n    }\n\n\n    //根据用户的输入，计算出小孩出圈的顺序\n\n    /**\n     * @param startNo  表示从第几个小孩开始数数\n     * @param countNum 表示数几下\n     * @param nums     表示最初有多少小孩在圈中\n     */\n    public void countBoy(int startNo, int countNum, int nums) {\n        // 先对数据进行校验\n        if (first == null || startNo < 1 || startNo > nums) {\n            System.out.println(\"参数输入有误， 请重新输入\");\n            return;\n        }\n        // 创建要给辅助指针,帮助完成小孩出圈\n        Boy helper = first;\n        // 需求创建一个辅助指针(变量) helper , 事先应该指向环形链表的最后这个节点\n        while (true) {\n            if (helper.getNext() == first) {// 说明helper指向最后小孩节点\n                break;\n            }\n            helper = helper.getNext();\n        }\n        //小孩报数前，先让 first 和  helper 移动 k - 1次\n        for (int j = 0; j < startNo - 1; j++) {\n            first = first.getNext();\n            helper = helper.getNext();\n        }\n        //当小孩报数时，让first 和 helper 指针同时 的移动  m  - 1 次, 然后出圈\n        //这里是一个循环操作，知道圈中只有一个节点\n        while (true) {\n            if (helper == first) {\n                break;\n            }\n            //让 first 和 helper 指针同时 的移动 countNum - 1\n            for(int j = 0; j < countNum - 1; j++) {\n                first = first.getNext();\n                helper = helper.getNext();\n            }\n            //这时first指向的节点，就是要出圈的小孩节点\n            System.out.printf(\"小孩%d出圈\\n\", first.getNo());\n            //这时将first指向的小孩节点出圈\n            first = first.getNext();\n            helper.setNext(first); //\n        }\n        System.out.printf(\"最后留在圈中的小孩编号%d \\n\", first.getNo());\n    }\n}\n\n// 创建一个By类，表示一个节点\nclass Boy {\n    private int no;// 编号\n    private Boy next; // 指向下一个节点,默认null\n\n    public Boy(int no) {\n        this.no = no;\n    }\n\n    public int getNo() {\n        return no;\n    }\n\n    public void setNo(int no) {\n        this.no = no;\n    }\n\n    public Boy getNext() {\n        return next;\n    }\n\n    public void setNext(Boy next) {\n        this.next = next;\n    }\n\n}\n```\n\n## 三、栈\n\n栈的介绍：\n\n1)栈的英文为(stack)\n\n2)栈是一个**先入后出**(FILO-First In Last Out)的有序列表。\n\n3)栈(stack)是限制线性表中元素的插入和删除**只能在线性表的同一端**进行的一种特殊线性表。允许插入和删除的一端，为变化的一端，称为**栈顶**(Top)，另一端为固定的一端，称为**栈底**(Bottom)。\n\n4)根据栈的定义可知，最先放入栈中元素在栈底，最后放入的元素在栈顶，而删除元素刚好相反，最后放入的元素最先删除，最先放入的元素最后删除\n\n5)出栈(pop)和入栈(push)的概念(如图所示)\n\n![image-20210102132901736](数据结构整理/image-20210102132901736.png)![image-20210102132915893](数据结构整理/image-20210102132915893.png)\n\n栈的应用场景：\n\n1)子程序的调用：在跳往子程序前，会先将下个指令的地址存到堆栈中，直到子程序执行完后再将地址取出，以回到原来的程序中。  \n\n2)处理递归调用：和子程序的调用类似，只是除了储存下一个指令的地址外，也将参数、区域变量等数据存入堆栈中。\n\n3)表达式的转换[中缀表达式转后缀表达式]与求值(实际解决)。\n\n4)二叉树的遍历。\n\n5)图形的深度优先(depth一first)搜索法。\n\n```java\n//定义一个 ArrayStack 表示栈\nclass ArrayStack {\n\tprivate int maxSize; // 栈的大小\n\tprivate int[] stack; // 数组，数组模拟栈，数据就放在该数组\n\tprivate int top = -1;// top表示栈顶，初始化为-1\n\t\n\t//构造器\n\tpublic ArrayStack(int maxSize) {\n\t\tthis.maxSize = maxSize;\n\t\tstack = new int[this.maxSize];\n\t}\n\t\n\t//栈满\n\tpublic boolean isFull() {\n\t\treturn top == maxSize - 1;\n\t}\n\t//栈空\n\tpublic boolean isEmpty() {\n\t\treturn top == -1;\n\t}\n\t//入栈-push\n\tpublic void push(int value) {\n\t\t//先判断栈是否满\n\t\tif(isFull()) {\n\t\t\tSystem.out.println(\"栈满\");\n\t\t\treturn;\n\t\t}\n\t\ttop++;\n\t\tstack[top] = value;\n\t}\n\t//出栈-pop, 将栈顶的数据返回\n\tpublic int pop() {\n\t\t//先判断栈是否空\n\t\tif(isEmpty()) {\n\t\t\t//抛出异常\n\t\t\tthrow new RuntimeException(\"栈空，没有数据~\");\n\t\t}\n\t\tint value = stack[top];\n\t\ttop--;\n\t\treturn value;\n\t}\n\t//显示栈的情况[遍历栈]， 遍历时，需要从栈顶开始显示数据\n\tpublic void list() {\n\t\tif(isEmpty()) {\n\t\t\tSystem.out.println(\"栈空，没有数据~~\");\n\t\t\treturn;\n\t\t}\n\t\t//需要从栈顶开始显示数据\n\t\tfor(int i = top; i >= 0 ; i--) {\n\t\t\tSystem.out.printf(\"stack[%d]=%d\\n\", i, stack[i]);\n\t\t}\n\t}\n\t\n}\n\n```\n\n## 四、递归\n\n简单的说: 递归就是方法自己调用自己,每次调用时传入不同的变量，递归有助于编程者解决复杂的问题,同时可以让代码变得简洁。\n\n阶乘问题:\n\n```java\n\t//阶乘问题\n\tpublic static int factorial(int n) {\n\t\tif (n == 1) { \n\t\t\treturn 1;\n\t\t} else {\n\t\t\treturn factorial(n - 1) * n; // 1 * 2 * 3\n\t\t}\n\t}\n```\n迷宫问题：\n```java\npackage recursion;\n\npublic class MiGong {\n\n    public static void main(String[] args) {\n        // 先创建一个二维数组，模拟迷宫\n        // 地图\n        int[][] map = new int[8][7];\n        // 使用1 表示墙\n        // 上下全部置为1\n        for (int i = 0; i < 7; i++) {\n            map[0][i] = 1;\n            map[7][i] = 1;\n        }\n\n        // 左右全部置为1\n        for (int i = 0; i < 8; i++) {\n            map[i][0] = 1;\n            map[i][6] = 1;\n        }\n        //设置挡板, 1 表示\n        map[3][1] = 1;\n        map[3][2] = 1;\n//\t\tmap[1][2] = 1;\n//\t\tmap[2][2] = 1;\n\n        // 输出地图\n        System.out.println(\"地图的情况\");\n        for (int i = 0; i < 8; i++) {\n            for (int j = 0; j < 7; j++) {\n                System.out.print(map[i][j] + \" \");\n            }\n            System.out.println();\n        }\n\n        //使用递归回溯给小球找路\n        setWay(map, 1, 1);\n        //setWay2(map, 1, 1);\n\n        //输出新的地图, 小球走过，并标识过的递归\n        System.out.println(\"小球走过，并标识过的 地图的情况\");\n        for (int i = 0; i < 8; i++) {\n            for (int j = 0; j < 7; j++) {\n                System.out.print(map[i][j] + \" \");\n            }\n            System.out.println();\n        }\n\n    }\n\n    //使用递归回溯来给小球找路\n    //说明\n    //1. map 表示地图\n    //2. i,j 表示从地图的哪个位置开始出发 (1,1)\n    //3. 如果小球能到 map[6][5] 位置，则说明通路找到.\n    //4. 约定： 当map[i][j] 为 0 表示该点没有走过 当为 1 表示墙  ； 2 表示通路可以走 ； 3 表示该点已经走过，但是走不通\n    //5. 在走迷宫时，需要确定一个策略(方法) 下->右->上->左 , 如果该点走不通，再回溯\n\n    /**\n     * @param map 表示地图\n     * @param i   从哪个位置开始找\n     * @param j\n     * @return 如果找到通路，就返回true, 否则返回false\n     */\n    public static boolean setWay(int[][] map, int i, int j) {\n        if (map[6][5] == 2) {\n            return true;\n        } else {\n            if (map[i][j] == 0) { //如果当前这个点还没有走过\n                //按照策略 下->右->上->左\n                map[i][j] = 2; // 假定该点是可以走通.\n                if (setWay(map, i + 1, j)) {\n                    return true;\n                } else if (setWay(map, i, j + 1)) {\n                    return true;\n                } else if (setWay(map, i - 1, j)) {\n                    return true;\n                } else if (setWay(map, i, j - 1)) {\n                    return true;\n                } else {\n                    //说明该点是走不通，是死路\n                    map[i][j] = 3;\n                    return false;\n                }\n            } else {\n                return false;\n            }\n        }\n    }\n\n    //修改找路的策略，改成 上->右->下->左\n    public static boolean setWay2(int[][] map, int i, int j) {\n        if (map[6][5] == 2) { // 通路已经找到ok\n            return true;\n        } else {\n            if (map[i][j] == 0) { //如果当前这个点还没有走过\n                //按照策略 上->右->下->左\n                map[i][j] = 2; // 假定该点是可以走通.\n                if (setWay2(map, i - 1, j)) {//向上走\n                    return true;\n                } else if (setWay2(map, i, j + 1)) { //向右走\n                    return true;\n                } else if (setWay2(map, i + 1, j)) { //向下\n                    return true;\n                } else if (setWay2(map, i, j - 1)) { // 向左走\n                    return true;\n                } else {\n                    //说明该点是走不通，是死路\n                    map[i][j] = 3;\n                    return false;\n                }\n            } else { // 如果map[i][j] != 0 , 可能是 1， 2， 3\n                return false;\n            }\n        }\n    }\n\n}\n\n```\n\n八皇后问题：\n\n​\t八皇后问题，是一个古老而著名的问题，是**回溯算法的典型案例**。该问题是国际西洋棋棋手马克斯·贝瑟尔于1848年提出：在8×8格的国际象棋上摆放八个皇后，使其不能互相攻击，即：任意两个皇后都不能处于同一行、同一列或同一斜线上，问有多少种摆法。【92】\n\n```java\npackage recursion;\n\npublic class Queen8 {\n\n    //定义一个max表示共有多少个皇后\n    int max = 8;\n    //定义数组array, 保存皇后放置位置的结果,比如 arr = {0 , 4, 7, 5, 2, 6, 1, 3}\n    int[] array = new int[max];\n    static int count = 0;\n    static int judgeCount = 0;\n\n    public static void main(String[] args) {\n        //测试一把 ， 8皇后是否正确\n        Queen8 queen8 = new Queen8();\n        queen8.check(0);\n        System.out.printf(\"一共有%d解法\", count);\n        System.out.printf(\"一共判断冲突的次数%d次\", judgeCount); // 1.5w\n\n    }\n\n    //编写一个方法，放置第n个皇后\n    //特别注意： check 是 每一次递归时，进入到check中都有  for(int i = 0; i < max; i++)，因此会有回溯\n    private void check(int n) {\n        if (n == max) {  //n = 8 , 其实8个皇后就既然放好\n            print();\n            return;\n        }\n\n        //依次放入皇后，并判断是否冲突\n        for (int i = 0; i < max; i++) {\n            //先把当前这个皇后 n , 放到该行的第1列\n            array[n] = i;\n            //判断当放置第n个皇后到i列时，是否冲突\n            if (judge(n)) { // 不冲突\n                //接着放n+1个皇后,即开始递归\n                check(n + 1); //\n            }\n            //如果冲突，就继续执行 array[n] = i; 即将第n个皇后，放置在本行得 后移的一个位置\n        }\n    }\n\n    //查看当我们放置第n个皇后，就去检查该皇后是否和前面已经摆放的皇后冲突\n    private boolean judge(int n) {\n        //说明\n        //1.array[i] == array[n] 表示判断第n个皇后是否和前面的n-1个皇后在同一列\n        //2.Math.abs(array[n] - array[i]) 表示判断第n个皇后和第i个皇后是否再同一斜线\n        // n = 1  放置第 2列 1 n = 1 array[1] = 1\n        // Math.abs(1-0) == 1  Math.abs(array[n] - array[i]) = Math.abs(1-0) = 1\n        //3. 判断是否在同一行, 没有必要，n 每次都在递增\n        judgeCount++;\n        for (int i = 0; i < n; i++) {\n            if (array[i] == array[n] || Math.abs(n - i) == Math.abs(array[n] - array[i])) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    //写一个方法，可以将皇后摆放的位置输出\n    private void print() {\n        count++;\n        for (int i = 0; i < array.length; i++) {\n            System.out.print(array[i] + \" \");\n        }\n        System.out.println();\n    }\n}\n\n```\n\n## 五、算法的时间复杂度及空间复杂度\n\n**时间复杂度**\n\n1)一般情况下，算法中的基本操作语句的重复执行次数是问题规模n的某个函数，用T(n)表示，若有某个辅助函数f(n)，使得当n趋近于无穷大时，T(n) / f(n) 的极限值为不等于零的常数，则称f(n)是T(n)的同数量级函数。记作 T(n)=Ｏ( f(n) )，称Ｏ( f(n) ) 为算法的渐进时间复杂度，简称时间复杂度。\n\n2)T(n) 不同，但时间复杂度可能相同。 如：T(n)=n²+7n+6 与 T(n)=3n²+2n+2 它们的T(n) 不同，但时间复杂度相同，都为O(n²)。\n\n3)计算时间复杂度的方法：\n\n​\t•用常数1代替运行时间中的所有加法常数 T(n)=n²+7n+6  => T(n)=n²+7n+1\n\n​\t•修改后的运行次数函数中，只保留最高阶项 T(n)=n²+7n+1 => T(n) = n²\n\n​\t•去除最高阶项的系数 T(n) = n² => T(n) = n² => O(n²)\n\n**1/常见的算法的时间复杂度**\n\n1)常数阶O(1)\n\n2)对数阶O(**log2n**)\n\n3)线性阶O(n)\n\n4)线性对数阶O(n**log2n**)\n\n5)平方阶O(n^2)\n\n6)立方阶O(n^3)\n\n7)k次方阶O(n^k)\n\n8)指数阶O(2^n)\n\n![image-20210102141112949](数据结构整理/image-20210102141112949.png)\n\n**说明**：\n\n•常见的算法时间复杂度由小到大依次为：Ο(1)＜Ο(log2n)＜Ο(n)＜Ο(nlog2n)＜Ο(n2)＜Ο(n3)＜Ο(nk) ＜Ο(2n) ，随着问题规模n的不断增大，上述时间复杂度不断增大，算法的执行效率越低\n\n•从图中可见，我们应该尽可能避免使用指数阶的算法\n\n\n\n### 1)常数阶O(1)\n\n无论代码执行了多少行，只要是没有循环等复杂结构，那这个代码的时间复杂度就都是O(1)\n\n![image-20210102141307586](数据结构整理/image-20210102141307586.png)\n\n上述代码在执行的时候，它消耗的时候并不随着某个变量的增长而增长，那么无论这类代码有多长，即使有几万几十万行，都可以用O(1)来表示它的时间复杂度。\n\n\n\n**常见的时间复杂度**\n\n### 2)对数阶O(log2<sup>n</sup>)\n\n注：\n\n![image-20210102141540407](数据结构整理/image-20210102141540407.png)\n\n![image-20210102141434749](数据结构整理/image-20210102141434749.png)\n\n**说明**：在while循环里面，每次都将 i 乘以 2，乘完之后，i 距离 n 就越来越近了。假设循环x次之后，i 就大于 2 了，此时这个循环就退出了，也就是说 2 的 x 次方等于 n，那么 x = log2^n也就是说当循环 log2^n 次以后，这个代码就结束了。因此这个代码的时间复杂度为：O(log2^n) 。 O(log2^n) 的这个2 时间上是根据代码变化的，i = i * 3 ，则是 O(log3^n)。\n\n\n\n### 3)线性阶O(n)\n\n![image-20210102141959933](数据结构整理/image-20210102141959933.png)\n\n**说明**：这段代码，for循环里面的代码会执行n遍，因此它消耗的时间是随着n的变化而变化的，因此这类代码都可以用O(n)来表示它的时间复杂度\n\n### 4)线性对数阶O(nlogN)\n\n![image-20210102142138277](数据结构整理/image-20210102142138277.png)\n\n**说明**：线性对数阶O(nlogN) 其实非常容易理解，将时间复杂度为O(logn)的代码循环N遍的话，那么它的时间复杂度就是 n * O(logN)，也就是了O(nlogN)\n\n### 5)平方阶O(n²)\n\n![image-20210102163741163](数据结构整理/image-20210102163741163.png)\n\n**说明**：平方阶O(n²) 就更容易理解了，如果把 O(n) 的代码再嵌套循环一遍，它的时间复杂度就是 O(n²)，这段代码其实就是嵌套了2层n循环，它的时间复杂度就是 O(n*n)，即 O(n²) 如果将其中一层循环的n改成m，那它的时间复杂度就变成了 O(m*n)\n\n### 6)立方阶O(n³)**、**K次方阶O(n^k)\n\n**说明**：参考上面的O(n²) 去理解就好了，O(n³)相当于三层n循环，其它的类似\n\n\n\n---\n\n\n\n**算法的空间复杂度:**\n\n基本介绍\n\n1)类似于时间复杂度的讨论，一个算法的空间复杂度(Space Complexity)定义为该算法所耗费的存储空间，它也是问题规模n的函数。\n\n2)空间复杂度(Space Complexity)是对一个算法在运行过程中临时占用存储空间大小的量度。有的算法需要占用的临时工作单元数与解决问题的规模n有关，它随着n的增大而增大，当n较大时，将占用较多的存储单元，例如快速排序和归并排序算法就属于这种情况\n\n3)在做算法分析时，主要讨论的是时间复杂度。从用户使用体验上看，更看重的程序执行的速度。一些缓存产品(redis, memcache)和算法(基数排序)本质就是用空间换时间.\n\n\n\n\n\n## 六、排序\n\n### 1.冒泡排序\n\n```java\n   public static void bubbleSort(int[] arr) {\n        int temp = 0;\n        Boolean flag = false;\n        for (int i = 0; i < arr.length - 1; i++) {\n            for (int j = 0; j < arr.length - 1 - i; j++) {\n                if(arr[j] > arr[j+1]){\n                    flag = true;\n                    temp = arr[j];\n                    arr[j] = arr[j+1];\n                    arr[j+1] = temp;\n                }\n            }\n            if(!flag){\n                break;\n            }else{\n                flag = false;\n            }\n        }\n    }\n```\n\n\n\n### 2.选择排序\n\n```java\npublic static void selectSort(int[] arr) {\n        for (int i = 0; i < arr.length-1; i++) {\n            int min = arr[i];\n            int minIndex  = i;\n            for (int j = i + 1; j < arr.length; j++) {\n                if (min>arr[j]){\n                    min=arr[j];\n                    minIndex = j;\n                }\n            }\n            if(minIndex != i){\n                arr[minIndex] = arr[i];\n                arr[i] = min;\n            }\n\n        }\n    }\n```\n\n\n\n### 3.插入排序\n\n​\t插入排序（Insertion Sorting）的**基本思想**是：把n个待排序的元素看成为一个有序表和一个无序表，开始时有序表中只包含一个元素，无序表中包含有n-1个元素，排序过程中每次从无序表中取出第一个元素，把它的排序码依次与有序表元素的排序码进行比较，将它插入到有序表中的适当位置，使之成为新的有序表。\n\n```java\n  /**\n     * 插入排序最开始为1个元素的有序列表，和n-1的无序列表\n     *\n     * @param arr\n     */\n    public static void insertSort(int[] arr) {\n        int insertIndex = 0; //记录待插入排序元素的索引\n        int insertValue = 0; //记录待插入的元素的值\n        //index=0的元素看作一个元素的有序列表，从1开始为待插入的元素\n        for (int i = 1; i < arr.length; i++) {\n            insertIndex = i;\n            insertValue = arr[i];\n            //待插入值和前面的元素比较找到需要插入的位置\n            //insertIndex > 0保证索引不越界\n            while (insertIndex - 1 > 0 && insertValue < arr[insertIndex - 1]) {\n                arr[insertIndex] = arr[insertIndex - 1]; //往后移\n                insertIndex--;\n            }\n            if (i != insertIndex) {\n                arr[insertIndex] = insertValue;\n            }\n        }\n    }\n```\n\n\n\n### 4.希尔排序\n\n希尔排序是希尔（Donald Shell）于1959年提出的一种排序算法。希尔排序也是一种**插入排序**，它是简单插入排序经过改进之后的一个**更高效的版本**，也称为缩小增量排序。\n\n![image-20210102193620447](数据结构整理/image-20210102193620447.png)\n\n```java\npublic static void shellSort(int[] arr) {\n        //step:步长\n        int insertValue = 0; //记录待插入的元素的值\n        int insertIndex = 0;\n        for (int step = arr.length / 2; step > 0; step /= 2) {\n           // System.out.println(step);\n            //插入排序\n            for (int i = step; i < arr.length; i++) {\n                insertValue = arr[i];\n                //insertIndex - step >= 0\n                for (insertIndex = i; insertIndex - step >= 0 && arr[insertIndex - step] > insertValue; insertIndex -= step) {\n                    arr[insertIndex] = arr[insertIndex - step];\n                }\n                if (insertIndex != i) {\n                    arr[insertIndex] = insertValue;\n                }\n\n            }\n        }\n    }\n```\n\n\n\n### 5.快速排序\n\n​\t快速排序（Quicksort）是对冒泡排序的一种改进。基本思想是：通过一趟排序将要排序的数据分割成独立的两部分，其中一部分的所有数据都比另外一部分的所有数据都要小，然后再按此方法对这两部分数据分别进行快速排序，整个排序过程可以递归进行，以此达到整个数据变成有序序列\n\n![image-20210102194545635](数据结构整理/image-20210102194545635.png)\n\n```java\n  public static void quickSort(int[] arr, int low, int high) {\n        int i, j, temp, t;\n        if (low < high) {\n            i = low;\n            j = high;\n            // temp就是基准位\n            temp = arr[i];\n\n            while (i < j) {\n                // 先看右边，依次往左递减\n                while (temp <= arr[j] && i < j) {\n                    j--;\n                }\n                // 再看左边，依次往右递增\n                while (temp >= arr[i] && i < j) {\n                    i++;\n                }\n                // 如果满足条件则交换\n                if (i < j) {\n                    t = arr[j];\n                    arr[j] = arr[i];\n                    arr[i] = t;\n                }\n\n            }\n            // 这里i == j\n            // 最后将基准为与i和j相等位置的数字交换\n            arr[low] = arr[i];\n            arr[i] = temp;\n            // 递归调用左半数组\n            quickSort(arr, low, i - 1);\n            // 递归调用右半数组\n            quickSort(arr, i + 1, high);\n        }\n    }\n```\n\n\n\n### 6.基数排序\n\n1)将所有待比较数值统一为同样的数位长度，数位较短的数前面补零。然后，从最低位开始，依次进行一次排序。这样从最低位排序一直到最高位排序完成以后, 数列就变成一个有序序列。\n\n2)这样说明，比较难理解，下面我们看一个图文解释，理解基数排序的步骤\n\n**基数排序图文说明**\n\n将数组 {53, 3, 542, 748, 14, 214} 使用基数排序, 进行升序排序。\n\n![image-20210102200322572](数据结构整理/image-20210102200322572.png)\n\n![image-20210102200443841](数据结构整理/image-20210102200443841.png)\n\n![image-20210102200539559](数据结构整理/image-20210102200539559.png)\n\n```java\n//基数排序方法\n\tpublic static void radixSort(int[] arr) {\n\t\t\n\t\t//根据前面的推导过程，我们可以得到最终的基数排序代码\n\t\t\n\t\t//1. 得到数组中最大的数的位数\n\t\tint max = arr[0]; //假设第一数就是最大数\n\t\tfor(int i = 1; i < arr.length; i++) {\n\t\t\tif (arr[i] > max) {\n\t\t\t\tmax = arr[i];\n\t\t\t}\n\t\t}\n\t\t//得到最大数是几位数\n\t\tint maxLength = (max + \"\").length();\n\t\t\n\t\t\n\t\t//定义一个二维数组，表示10个桶, 每个桶就是一个一维数组\n\t\t//说明\n\t\t//1. 二维数组包含10个一维数组\n\t\t//2. 为了防止在放入数的时候，数据溢出，则每个一维数组(桶)，大小定为arr.length\n\t\t//3. 名明确，基数排序是使用空间换时间的经典算法\n\t\tint[][] bucket = new int[10][arr.length];\n\t\t\n\t\t//为了记录每个桶中，实际存放了多少个数据,我们定义一个一维数组来记录各个桶的每次放入的数据个数\n\t\t//可以这里理解\n\t\t//比如：bucketElementCounts[0] , 记录的就是  bucket[0] 桶的放入数据个数\n\t\tint[] bucketElementCounts = new int[10];\n\t\t\n\t\t\n\t\t//这里我们使用循环将代码处理\n\t\t\n\t\tfor(int i = 0 , n = 1; i < maxLength; i++, n *= 10) {\n\t\t\t//(针对每个元素的对应位进行排序处理)， 第一次是个位，第二次是十位，第三次是百位..\n\t\t\tfor(int j = 0; j < arr.length; j++) {\n\t\t\t\t//取出每个元素的对应位的值\n\t\t\t\tint digitOfElement = arr[j] / n % 10;\n\t\t\t\t//放入到对应的桶中\n\t\t\t\tbucket[digitOfElement][bucketElementCounts[digitOfElement]] = arr[j];\n\t\t\t\tbucketElementCounts[digitOfElement]++;\n\t\t\t}\n\t\t\t//按照这个桶的顺序(一维数组的下标依次取出数据，放入原来数组)\n\t\t\tint index = 0;\n\t\t\t//遍历每一桶，并将桶中是数据，放入到原数组\n\t\t\tfor(int k = 0; k < bucketElementCounts.length; k++) {\n\t\t\t\t//如果桶中，有数据，我们才放入到原数组\n\t\t\t\tif(bucketElementCounts[k] != 0) {\n\t\t\t\t\t//循环该桶即第k个桶(即第k个一维数组), 放入\n\t\t\t\t\tfor(int l = 0; l < bucketElementCounts[k]; l++) {\n\t\t\t\t\t\t//取出元素放入到arr\n\t\t\t\t\t\tarr[index++] = bucket[k][l];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t//第i+1轮处理后，需要将每个 bucketElementCounts[k] = 0 ！！！！\n\t\t\t\tbucketElementCounts[k] = 0;\n\t\t\t\t\n\t\t\t}\n\t\t\t//System.out.println(\"第\"+(i+1)+\"轮，对个位的排序处理 arr =\" + Arrays.toString(arr));\n\t\t\t\n\t\t}\n```\n\n\n\n### 7.归并排序\n\n![image-20210102202017455](数据结构整理/image-20210102202017455.png)\n\n```java\n/**\n     * https://baijiahao.baidu.com/s?id=1631406377431334840&wfr=spider&for=pc&isFailFlag=1\n     * 归并排序介绍\n     * <p>\n     * 归并排序（MERGE-SORT）是建立在归并操作上的一种有效的排序算法，该算法是采用分治法（Divide and Conquer）的一个非常典型的应用。将已有序的子序列合并，得到完全有序的序列；即先使每个子序列有序，再使子序列段间有序。若将两个有序表合并成一个有序表，称为二路归并。\n     * <p>\n     * 归并排序原理\n     * <p>\n     * 归并排序在字面意思上已经简要显示出了他的核心原理，即递归再合并。\n     * <p>\n     * 我们举个例子，将两个有序数组合并成一个有序数组，如下图。\n     * 4 7 9       1 3 8\n     * |           |\n     * 4和1进行比较，1<4,将1取出来放在新的数组中{1}\n     * 4 7 9         3 8\n     * |             |\n     * 4和3进行比较，3<4，将3取出来放在新的数组中{1，3}\n     * 4 7 9           8\n     * |               |\n     * 4和8比较，4<8，将4取出来放在新的数组中{1，3，4}\n     * 7 9           8\n     * |             |\n     * 7和8比较，4<8，将7取出来放在新的数组中{1，3，4，7}\n     * 9           8\n     * |           |\n     * 9和8比较，4<8，将8取出来放在新的数组中{1，3，4，7，8}\n     * 9\n     * |\n     * 只剩一个9，插入到新数组后得到有序数组{1，3，4，7，8，9}\n     * <p>\n     * 合并数组\n     * 现在我们来学习归并排序的步骤，我们给定一个无序数组{9, 2, 6, 3, 5, 7, 10, 11}\n     * <p>\n     * 首先我们对它递归进行二分操作\n     * 9   2   6   3 | 5   7   10   11\n     * 9   2 | 6   3 | 5   7 | 10   11\n     * 9 | 2 | 6 | 3 | 5 | 7 | 10 | 11\n     * <p>\n     * 二分递归\n     * 不断递归直至每个分组中都只有一个元素，即每个分组都是一个有序数组，不过只有一个元素一定是有序的。\n     * <p>\n     * 下面进行向上递归合并，如下图。\n     * 9 | 2 | 6 | 3 | 5 | 7 | 10 | 11\n     * 2   9 | 3   6 | 5   7 | 10   11\n     * 2   3   6   9 | 5   7   10   11\n     * 2   3   5   6   7   9   10   11\n     * <p>\n     * <p>\n     * 递归合并\n     * 经过递归合并，我们得到有序数组{2,3,5,6,7,9,10,11}。\n     * <p>\n     * 功能：合并子序列\n     *\n     * @param a\n     * @param left\n     * @param mid\n     * @param right\n     */\n    public static void merge(int[] a, int left, int mid, int right) {\n        int[] tmp = new int[a.length];// 辅助数组\n        int p1 = left, p2 = mid + 1, k = left;// p1、p2是检测指针，k是存放指针\n\n        //System.out.println(\"a:\" + Arrays.toString(a));\n        // 对比左右两个数组并将较小的数先放到辅助数组\n        while (p1 <= mid && p2 <= right) {\n            if (a[p1] <= a[p2])\n                tmp[k++] = a[p1++];\n            else\n                tmp[k++] = a[p2++];\n        }\n\n\n        while (p1 <= mid)\n            tmp[k++] = a[p1++];//將左边剩余一个或多个元素放入temp中，剩餘的元素是合并序列中最大的值\n        while (p2 <= right)\n            tmp[k++] = a[p2++];//同上\n\n        // 复制回原素组\n        for (int i = left; i <= right; i++)\n            a[i] = tmp[i];\n    }\n\n public void mergeSort(int[] a, int start, int end) {\n        if (start < end) {// 当子序列中只有一个元素时结束递归\n            int mid = (start + end) / 2;// 划分子序列\n            mergeSort(a, start, mid);// 对左侧子序列进行递归排序\n            mergeSort(a, mid + 1, end);// 对右侧子序列进行递归排序\n            merge(a, start, mid, end);// 合并\n        }\n    }\n```\n\n\n\n### 8.堆排序\n\n1)堆排序是利用**堆**这种数据结构而设计的一种排序算法，堆排序是一种**选择排序，**它的最坏，最好，平均时间复杂度均为O(nlogn)，它也是不稳定排序。\n\n2)堆是具有以下性质的完全二叉树：每个结点的值都大于或等于其左右孩子结点的值，称为大顶堆, **注****意** : 没有要求结点的左孩子的值和右孩子的值的大小关系。\n\n3)每个结点的值都小于或等于其左右孩子结点的值，称为小顶堆\n\n4)大顶堆举例说明\n\n大顶堆用于升序排序，小顶堆用于降序排序\n\n![image-20210102203535568](数据结构整理/image-20210102203535568.png)\n\n![image-20210102203605120](数据结构整理/image-20210102203605120.png)\n\n```java\n static void HeapAdjust(int[] a, int start, int len) {\n        //这里的start表示树节点（非叶子节点）\n        int temp, j;\n        temp = a[start];\n        for (j = 2 * start + 1; j < len; j = j * 2 + 1) { /* 从index最大的有孩子的节点开始筛选，堆排 */\n            if (j + 1 < len && a[j] < a[j + 1]) /* 是index=j的元素为较大的元素 */\n                j++;\n            if (a[j] > temp) {\n                a[start] = a[j]; /* 将较大元素赋值给父节点 */\n                start = j;\n            } else {\n                break;\n            }\n        }\n        //循环结束后，可能剩下的一个元素填入对应的位置\n        a[start] = temp;\n    }\n\n    static void swap(int a[], int low, int high) {\n        int temp = a[low];\n        a[low] = a[high];\n        a[high] = temp;\n    }\n\n static void heapSort(int[] arr) {\n        int i;\n      //（arr.length-1） / 2 - 1为最后一个非叶子节点索引\n        for (i = (arr.length-1) / 2 - 1; i >= 0; i--) { /* 把a[]构造成一个大顶堆 */\n            HeapAdjust(arr, i, arr.length);\n        }\n        for (i = arr.length - 1; i > 0; i--) {\n            swap(arr, 0, i); /* 交换堆顶最大元素和堆尾元素 */\n            HeapAdjust(arr, 0, i); /* 把交换后的堆a[0,i-1]，再次构造成大顶顶，使堆顶元素为最大值 */\n        }\n    }\n```\n\n**各排序之间对比**：\n\n![image-20210102170510025](数据结构整理/image-20210102170510025.png)\n\n**相关术语解释：**\n\n1)**稳定**：如果a原本在b前面，而a=b，排序之后a仍然在b的前面；\n\n2)**不稳定**：如果a原本在b的前面，而a=b，排序之后a可能会出现在b的后面；\n\n3)**内排序**：所有排序操作都在内存中完成；\n\n4)**外排序**：由于数据太大，因此把数据放在磁盘中，而排序通过磁盘和内存的数据传输才能进行；\n\n5)**时间复杂度**： 一个算法执行所耗费的时间。\n\n6)**空间复杂度**：运行完一个程序所需内存的大小。\n\n7)**n**: 数据规模\n\n8)**k**: “桶”的个数\n\n9)**In-place**:  不占用额外内存\n\n10)**Out-place**:占用额外内存\n\n## 七、哈希表\n\n```java\npackage hashtable;\n\nimport java.util.Scanner;\n\npublic class HashTabDemo {\n\n\tpublic static void main(String[] args) {\n\t\t\n\t\t//创建哈希表\n\t\tHashTab hashTab = new HashTab(7);\n\t\t\n\t\t//写一个简单的菜单\n\t\tString key = \"\";\n\t\tScanner scanner = new Scanner(System.in);\n\t\twhile(true) {\n\t\t\tSystem.out.println(\"add:  添加雇员\");\n\t\t\tSystem.out.println(\"list: 显示雇员\");\n\t\t\tSystem.out.println(\"find: 查找雇员\");\n\t\t\tSystem.out.println(\"exit: 退出系统\");\n\t\t\t\n\t\t\tkey = scanner.next();\n\t\t\tswitch (key) {\n\t\t\tcase \"add\":\n\t\t\t\tSystem.out.println(\"输入id\");\n\t\t\t\tint id = scanner.nextInt();\n\t\t\t\tSystem.out.println(\"输入名字\");\n\t\t\t\tString name = scanner.next();\n\t\t\t\t//创建 雇员\n\t\t\t\tEmp emp = new Emp(id, name);\n\t\t\t\thashTab.add(emp);\n\t\t\t\tbreak;\n\t\t\tcase \"list\":\n\t\t\t\thashTab.list();\n\t\t\t\tbreak;\n\t\t\tcase \"find\":\n\t\t\t\tSystem.out.println(\"请输入要查找的id\");\n\t\t\t\tid = scanner.nextInt();\n\t\t\t\thashTab.findEmpById(id);\n\t\t\t\tbreak;\n\t\t\tcase \"exit\":\n\t\t\t\tscanner.close();\n\t\t\t\tSystem.exit(0);\n\t\t\tdefault:\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t\n\t}\n\n}\n\n//创建HashTab 管理多条链表\nclass HashTab {\n\tprivate EmpLinkedList[] empLinkedListArray;\n\tprivate int size; //表示有多少条链表\n\t\n\t//构造器\n\tpublic HashTab(int size) {\n\t\tthis.size = size;\n\t\t//初始化empLinkedListArray\n\t\tempLinkedListArray = new EmpLinkedList[size];\n\t\t//？留一个坑, 这时不要分别初始化每个链表\n\t\tfor(int i = 0; i < size; i++) {\n\t\t\tempLinkedListArray[i] = new EmpLinkedList();\n\t\t}\n\t}\n\t\n\t//添加雇员\n\tpublic void add(Emp emp) {\n\t\t//根据员工的id ,得到该员工应当添加到哪条链表\n\t\tint empLinkedListNO = hashFun(emp.id);\n\t\t//将emp 添加到对应的链表中\n\t\tempLinkedListArray[empLinkedListNO].add(emp);\n\t\t\n\t}\n\t//遍历所有的链表,遍历hashtab\n\tpublic void list() {\n\t\tfor(int i = 0; i < size; i++) {\n\t\t\tempLinkedListArray[i].list(i);\n\t\t}\n\t}\n\t\n\t//根据输入的id,查找雇员\n\tpublic void findEmpById(int id) {\n\t\t//使用散列函数确定到哪条链表查找\n\t\tint empLinkedListNO = hashFun(id);\n\t\tEmp emp = empLinkedListArray[empLinkedListNO].findEmpById(id);\n\t\tif(emp != null) {//找到\n\t\t\tSystem.out.printf(\"在第%d条链表中找到 雇员 id = %d\\n\", (empLinkedListNO + 1), id);\n\t\t}else{\n\t\t\tSystem.out.println(\"在哈希表中，没有找到该雇员~\");\n\t\t}\n\t}\n\t\n\t//编写散列函数, 使用一个简单取模法\n\tpublic int hashFun(int id) {\n\t\treturn id % size;\n\t}\n\t\n\t\n}\n\n//表示一个雇员\nclass Emp {\n\tpublic int id;\n\tpublic String name;\n\tpublic Emp next; //next 默认为 null\n\tpublic Emp(int id, String name) {\n\t\tsuper();\n\t\tthis.id = id;\n\t\tthis.name = name;\n\t}\n}\n\n//创建EmpLinkedList ,表示链表\nclass EmpLinkedList {\n\t//头指针，执行第一个Emp,因此我们这个链表的head 是直接指向第一个Emp\n\tprivate Emp head; //默认null\n\t\n\t//添加雇员到链表\n\t//说明\n\t//1. 假定，当添加雇员时，id 是自增长，即id的分配总是从小到大\n\t//   因此我们将该雇员直接加入到本链表的最后即可\n\tpublic void add(Emp emp) {\n\t\t//如果是添加第一个雇员\n\t\tif(head == null) {\n\t\t\thead = emp;\n\t\t\treturn;\n\t\t}\n\t\t//如果不是第一个雇员，则使用一个辅助的指针，帮助定位到最后\n\t\tEmp curEmp = head;\n\t\twhile(true) {\n\t\t\tif(curEmp.next == null) {//说明到链表最后\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcurEmp = curEmp.next; //后移\n\t\t}\n\t\t//退出时直接将emp 加入链表\n\t\tcurEmp.next = emp;\n\t}\n\t\n\t//遍历链表的雇员信息\n\tpublic void list(int no) {\n\t\tif(head == null) { //说明链表为空\n\t\t\tSystem.out.println(\"第 \"+(no+1)+\" 链表为空\");\n\t\t\treturn;\n\t\t}\n\t\tSystem.out.print(\"第 \"+(no+1)+\" 链表的信息为\");\n\t\tEmp curEmp = head; //辅助指针\n\t\twhile(true) {\n\t\t\tSystem.out.printf(\" => id=%d name=%s\\t\", curEmp.id, curEmp.name);\n\t\t\tif(curEmp.next == null) {//说明curEmp已经是最后结点\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcurEmp = curEmp.next; //后移，遍历\n\t\t}\n\t\tSystem.out.println();\n\t}\n\t\n\t//根据id查找雇员\n\t//如果查找到，就返回Emp, 如果没有找到，就返回null\n\tpublic Emp findEmpById(int id) {\n\t\t//判断链表是否为空\n\t\tif(head == null) {\n\t\t\tSystem.out.println(\"链表为空\");\n\t\t\treturn null;\n\t\t}\n\t\t//辅助指针\n\t\tEmp curEmp = head;\n\t\twhile(true) {\n\t\t\tif(curEmp.id == id) {//找到\n\t\t\t\tbreak;//这时curEmp就指向要查找的雇员\n\t\t\t}\n\t\t\t//退出\n\t\t\tif(curEmp.next == null) {//说明遍历当前链表没有找到该雇员\n\t\t\t\tcurEmp = null;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcurEmp = curEmp.next;//以后\n\t\t}\n\t\t\n\t\treturn curEmp;\n\t}\n\t\n}\n\n\n```\n\n\n\n## 八、二叉树\n\n### 1.普通二叉树\n\n```java\npackage tree;\n\npublic class BinaryTreeDemo {\n\n\tpublic static void main(String[] args) {\n\t\t//先需要创建一颗二叉树\n\t\tBinaryTree binaryTree = new BinaryTree();\n\t\t//创建需要的结点\n\t\tHeroNode root = new HeroNode(1, \"宋江\");\n\t\tHeroNode node2 = new HeroNode(2, \"吴用\");\n\t\tHeroNode node3 = new HeroNode(3, \"卢俊义\");\n\t\tHeroNode node4 = new HeroNode(4, \"林冲\");\n\t\tHeroNode node5 = new HeroNode(5, \"关胜\");\n\t\t\n\t\t//说明，我们先手动创建该二叉树，后面我们学习递归的方式创建二叉树\n\t\troot.setLeft(node2);\n\t\troot.setRight(node3);\n\t\tnode3.setRight(node4);\n\t\tnode3.setLeft(node5);\n\t\tbinaryTree.setRoot(root);\n\t\t\n\t\t//测试\n//\t\tSystem.out.println(\"前序遍历\"); // 1,2,3,5,4\n//\t\tbinaryTree.preOrder();\n\t\t\n\t\t//测试 \n//\t\tSystem.out.println(\"中序遍历\");\n//\t\tbinaryTree.infixOrder(); // 2,1,5,3,4\n//\t\t\n//\t\tSystem.out.println(\"后序遍历\");\n//\t\tbinaryTree.postOrder(); // 2,5,4,3,1\n\t\t\n\t\t//前序遍历\n\t\t//前序遍历的次数 ：4 \n//\t\tSystem.out.println(\"前序遍历方式~~~\");\n//\t\tHeroNode resNode = binaryTree.preOrderSearch(5);\n//\t\tif (resNode != null) {\n//\t\t\tSystem.out.printf(\"找到了，信息为 no=%d name=%s\", resNode.getNo(), resNode.getName());\n//\t\t} else {\n//\t\t\tSystem.out.printf(\"没有找到 no = %d 的英雄\", 5);\n//\t\t}\n\t\t\n\t\t//中序遍历查找\n\t\t//中序遍历3次\n//\t\tSystem.out.println(\"中序遍历方式~~~\");\n//\t\tHeroNode resNode = binaryTree.infixOrderSearch(5);\n//\t\tif (resNode != null) {\n//\t\t\tSystem.out.printf(\"找到了，信息为 no=%d name=%s\", resNode.getNo(), resNode.getName());\n//\t\t} else {\n//\t\t\tSystem.out.printf(\"没有找到 no = %d 的英雄\", 5);\n//\t\t}\n\t\t\n\t\t//后序遍历查找\n\t\t//后序遍历查找的次数  2次\n//\t\tSystem.out.println(\"后序遍历方式~~~\");\n//\t\tHeroNode resNode = binaryTree.postOrderSearch(5);\n//\t\tif (resNode != null) {\n//\t\t\tSystem.out.printf(\"找到了，信息为 no=%d name=%s\", resNode.getNo(), resNode.getName());\n//\t\t} else {\n//\t\t\tSystem.out.printf(\"没有找到 no = %d 的英雄\", 5);\n//\t\t}\n\t\t\n\t\t//测试一把删除结点\n\t\t\n\t\tSystem.out.println(\"删除前,前序遍历\");\n\t\tbinaryTree.preOrder(); //  1,2,3,5,4\n\t\tbinaryTree.delNode(5);\n\t\t//binaryTree.delNode(3);\n\t\tSystem.out.println(\"删除后，前序遍历\");\n\t\tbinaryTree.preOrder(); // 1,2,3,4\n\t\t\n\t\t\n\t\t\n\t}\n\n}\n\n//定义BinaryTree 二叉树\nclass BinaryTree {\n\tprivate HeroNode root;\n\n\tpublic void setRoot(HeroNode root) {\n\t\tthis.root = root;\n\t}\n\t\n\t//删除结点\n\tpublic void delNode(int no) {\n\t\tif(root != null) {\n\t\t\t//如果只有一个root结点, 这里立即判断root是不是就是要删除结点\n\t\t\tif(root.getNo() == no) {\n\t\t\t\troot = null;\n\t\t\t} else {\n\t\t\t\t//递归删除\n\t\t\t\troot.delNode(no);\n\t\t\t}\n\t\t}else{\n\t\t\tSystem.out.println(\"空树，不能删除~\");\n\t\t}\n\t}\n\t//前序遍历\n\tpublic void preOrder() {\n\t\tif(this.root != null) {\n\t\t\tthis.root.preOrder();\n\t\t}else {\n\t\t\tSystem.out.println(\"二叉树为空，无法遍历\");\n\t\t}\n\t}\n\t\n\t//中序遍历\n\tpublic void infixOrder() {\n\t\tif(this.root != null) {\n\t\t\tthis.root.infixOrder();\n\t\t}else {\n\t\t\tSystem.out.println(\"二叉树为空，无法遍历\");\n\t\t}\n\t}\n\t//后序遍历\n\tpublic void postOrder() {\n\t\tif(this.root != null) {\n\t\t\tthis.root.postOrder();\n\t\t}else {\n\t\t\tSystem.out.println(\"二叉树为空，无法遍历\");\n\t\t}\n\t}\n\t\n\t//前序遍历\n\tpublic HeroNode preOrderSearch(int no) {\n\t\tif(root != null) {\n\t\t\treturn root.preOrderSearch(no);\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n\t//中序遍历\n\tpublic HeroNode infixOrderSearch(int no) {\n\t\tif(root != null) {\n\t\t\treturn root.infixOrderSearch(no);\n\t\t}else {\n\t\t\treturn null;\n\t\t}\n\t}\n\t//后序遍历\n\tpublic HeroNode postOrderSearch(int no) {\n\t\tif(root != null) {\n\t\t\treturn this.root.postOrderSearch(no);\n\t\t}else {\n\t\t\treturn null;\n\t\t}\n\t}\n}\n\n//先创建HeroNode 结点\nclass HeroNode {\n\tprivate int no;\n\tprivate String name;\n\tprivate HeroNode left; //默认null\n\tprivate HeroNode right; //默认null\n\tpublic HeroNode(int no, String name) {\n\t\tthis.no = no;\n\t\tthis.name = name;\n\t}\n\tpublic int getNo() {\n\t\treturn no;\n\t}\n\tpublic void setNo(int no) {\n\t\tthis.no = no;\n\t}\n\tpublic String getName() {\n\t\treturn name;\n\t}\n\tpublic void setName(String name) {\n\t\tthis.name = name;\n\t}\n\tpublic HeroNode getLeft() {\n\t\treturn left;\n\t}\n\tpublic void setLeft(HeroNode left) {\n\t\tthis.left = left;\n\t}\n\tpublic HeroNode getRight() {\n\t\treturn right;\n\t}\n\tpublic void setRight(HeroNode right) {\n\t\tthis.right = right;\n\t}\n\t@Override\n\tpublic String toString() {\n\t\treturn \"HeroNode [no=\" + no + \", name=\" + name + \"]\";\n\t}\n\t\n\t//递归删除结点\n\t//1.如果删除的节点是叶子节点，则删除该节点\n\t//2.如果删除的节点是非叶子节点，则删除该子树\n\tpublic void delNode(int no) {\n\t\t\n\t\t//思路\n\t\t/*\n\t\t * \t1. 因为我们的二叉树是单向的，所以我们是判断当前结点的子结点是否需要删除结点，而不能去判断当前这个结点是不是需要删除结点.\n\t\t\t2. 如果当前结点的左子结点不为空，并且左子结点 就是要删除结点，就将this.left = null; 并且就返回(结束递归删除)\n\t\t\t3. 如果当前结点的右子结点不为空，并且右子结点 就是要删除结点，就将this.right= null ;并且就返回(结束递归删除)\n\t\t\t4. 如果第2和第3步没有删除结点，那么我们就需要向左子树进行递归删除\n\t\t\t5.  如果第4步也没有删除结点，则应当向右子树进行递归删除.\n\n\t\t */\n\t\t//2. 如果当前结点的左子结点不为空，并且左子结点 就是要删除结点，就将this.left = null; 并且就返回(结束递归删除)\n\t\tif(this.left != null && this.left.no == no) {\n\t\t\tthis.left = null;\n\t\t\treturn;\n\t\t}\n\t\t//3.如果当前结点的右子结点不为空，并且右子结点 就是要删除结点，就将this.right= null ;并且就返回(结束递归删除)\n\t\tif(this.right != null && this.right.no == no) {\n\t\t\tthis.right = null;\n\t\t\treturn;\n\t\t}\n\t\t//4.我们就需要向左子树进行递归删除\n\t\tif(this.left != null) {\n\t\t\tthis.left.delNode(no);\n\t\t}\n\t\t//5.则应当向右子树进行递归删除\n\t\tif(this.right != null) {\n\t\t\tthis.right.delNode(no);\n\t\t}\n\t}\n\t\n\t//编写前序遍历的方法\n\tpublic void preOrder() {\n\t\tSystem.out.println(this); //先输出父结点\n\t\t//递归向左子树前序遍历\n\t\tif(this.left != null) {\n\t\t\tthis.left.preOrder();\n\t\t}\n\t\t//递归向右子树前序遍历\n\t\tif(this.right != null) {\n\t\t\tthis.right.preOrder();\n\t\t}\n\t}\n\t//中序遍历\n\tpublic void infixOrder() {\n\t\t\n\t\t//递归向左子树中序遍历\n\t\tif(this.left != null) {\n\t\t\tthis.left.infixOrder();\n\t\t}\n\t\t//输出父结点\n\t\tSystem.out.println(this);\n\t\t//递归向右子树中序遍历\n\t\tif(this.right != null) {\n\t\t\tthis.right.infixOrder();\n\t\t}\n\t}\n\t//后序遍历\n\tpublic void postOrder() {\n\t\tif(this.left != null) {\n\t\t\tthis.left.postOrder();\n\t\t}\n\t\tif(this.right != null) {\n\t\t\tthis.right.postOrder();\n\t\t}\n\t\tSystem.out.println(this);\n\t}\n\t\n\t//前序遍历查找\n\t/**\n\t * \n\t * @param no 查找no\n\t * @return 如果找到就返回该Node ,如果没有找到返回 null\n\t */\n\tpublic HeroNode preOrderSearch(int no) {\n\t\tSystem.out.println(\"进入前序遍历\");\n\t\t//比较当前结点是不是\n\t\tif(this.no == no) {\n\t\t\treturn this;\n\t\t}\n\t\t//1.则判断当前结点的左子节点是否为空，如果不为空，则递归前序查找\n\t\t//2.如果左递归前序查找，找到结点，则返回\n\t\tHeroNode resNode = null;\n\t\tif(this.left != null) {\n\t\t\tresNode = this.left.preOrderSearch(no);\n\t\t}\n\t\tif(resNode != null) {//说明我们左子树找到\n\t\t\treturn resNode;\n\t\t}\n\t\t//1.左递归前序查找，找到结点，则返回，否继续判断，\n\t\t//2.当前的结点的右子节点是否为空，如果不空，则继续向右递归前序查找\n\t\tif(this.right != null) {\n\t\t\tresNode = this.right.preOrderSearch(no);\n\t\t}\n\t\treturn resNode;\n\t}\n\t\n\t//中序遍历查找\n\tpublic HeroNode infixOrderSearch(int no) {\n\t\t//判断当前结点的左子节点是否为空，如果不为空，则递归中序查找\n\t\tHeroNode resNode = null;\n\t\tif(this.left != null) {\n\t\t\tresNode = this.left.infixOrderSearch(no);\n\t\t}\n\t\tif(resNode != null) {\n\t\t\treturn resNode;\n\t\t}\n\t\tSystem.out.println(\"进入中序查找\");\n\t\t//如果找到，则返回，如果没有找到，就和当前结点比较，如果是则返回当前结点\n\t\tif(this.no == no) {\n\t\t\treturn this;\n\t\t}\n\t\t//否则继续进行右递归的中序查找\n\t\tif(this.right != null) {\n\t\t\tresNode = this.right.infixOrderSearch(no);\n\t\t}\n\t\treturn resNode;\n\t\t\n\t}\n\t\n\t//后序遍历查找\n\tpublic HeroNode postOrderSearch(int no) {\n\t\t\n\t\t//判断当前结点的左子节点是否为空，如果不为空，则递归后序查找\n\t\tHeroNode resNode = null;\n\t\tif(this.left != null) {\n\t\t\tresNode = this.left.postOrderSearch(no);\n\t\t}\n\t\tif(resNode != null) {//说明在左子树找到\n\t\t\treturn resNode;\n\t\t}\n\t\t\n\t\t//如果左子树没有找到，则向右子树递归进行后序遍历查找\n\t\tif(this.right != null) {\n\t\t\tresNode = this.right.postOrderSearch(no);\n\t\t}\n\t\tif(resNode != null) {\n\t\t\treturn resNode;\n\t\t}\n\t\tSystem.out.println(\"进入后序查找\");\n\t\t//如果左右子树都没有找到，就比较当前结点是不是\n\t\tif(this.no == no) {\n\t\t\treturn this;\n\t\t}\n\t\treturn resNode;\n\t}\n\t\n}\n\n\n\n```\n\n### 2.顺序二叉树\n\n顺序存储二叉树的**特点**:\n\n1)顺序二叉树通常只考虑完全二叉树\n\n2)第n个元素的左子节点为 2 * n + 1 \n\n3)第n个元素的右子节点为 2 * n + 2\n\n4)第n个元素的父节点为 (n-1) / 2\n\n5)n : 表示二叉树中的第几个元素(按0开始编号\n 如图所示)\n\n![image-20210106203601993](数据结构整理/image-20210106203601993.png)\n\n```java\npackage tree;\n\npublic class ArrBinaryTreeDemo {\n\n\tpublic static void main(String[] args) {\n\t\tint[] arr = { 1, 2, 3, 4, 5, 6, 7 };\n\t\t//创建一个 ArrBinaryTree\n\t\tArrBinaryTree arrBinaryTree = new ArrBinaryTree(arr);\n\t\tarrBinaryTree.preOrder(); // 1,2,4,5,3,6,7\n\t}\n\n}\n\n//编写一个ArrayBinaryTree, 实现顺序存储二叉树遍历\n\nclass ArrBinaryTree {\n\tprivate int[] arr;//存储数据结点的数组\n\n\tpublic ArrBinaryTree(int[] arr) {\n\t\tthis.arr = arr;\n\t}\n\t\n\t//重载preOrder\n\tpublic void preOrder() {\n\t\tthis.preOrder(0);\n\t}\n\t\n\t//编写一个方法，完成顺序存储二叉树的前序遍历\n\t/**\n\t * \n\t * @param index 数组的下标 \n\t */\n\tpublic void preOrder(int index) {\n\t\t//如果数组为空，或者 arr.length = 0\n\t\tif(arr == null || arr.length == 0) {\n\t\t\tSystem.out.println(\"数组为空，不能按照二叉树的前序遍历\");\n\t\t}\n\t\t//输出当前这个元素\n\t\tSystem.out.println(arr[index]); \n\t\t//向左递归遍历\n\t\tif((index * 2 + 1) < arr.length) {\n\t\t\tpreOrder(2 * index + 1 );\n\t\t}\n\t\t//向右递归遍历\n\t\tif((index * 2 + 2) < arr.length) {\n\t\t\tpreOrder(2 * index + 2);\n\t\t}\n\t}\n\t\n}\n\n```\n\n### 3.线索化二叉树\n\n**线索二叉树基本介绍**\n\n1)n个结点的二叉链表中含有n+1 【公式 2n-(n-1)=n+1】 个空指针域。利用二叉链表中的空指针域，存放指向该结点在**某种遍历次序**下的前驱和后继结点的指针（这种附加的指针称为\"线索\"）\n\n2)这种加上了线索的二叉链表称为**线索链表**，相应的二叉树称为**线索二叉树(Threaded  BinaryTree)**。根据线索性质的不同，线索二叉树可分为**前序线索二叉树、中序线索二叉树**和**后序线索二叉树**三种\n\n3)一个结点的前一个结点，称为**前驱**结点\n\n4)一个结点的后一个结点，称为**后继**结点\n\n```java\npackage tree.threadedbinarytree;\n\npublic class ThreadedBinaryTreeDemo {\n\n\tpublic static void main(String[] args) {\n\t\t//测试一把中序线索二叉树的功能\n\t\tHeroNode root = new HeroNode(1, \"tom\");\n\t\tHeroNode node2 = new HeroNode(3, \"jack\");\n\t\tHeroNode node3 = new HeroNode(6, \"smith\");\n\t\tHeroNode node4 = new HeroNode(8, \"mary\");\n\t\tHeroNode node5 = new HeroNode(10, \"king\");\n\t\tHeroNode node6 = new HeroNode(14, \"dim\");\n\t\t\n\t\t//二叉树，后面我们要递归创建, 现在简单处理使用手动创建\n\t\troot.setLeft(node2);\n\t\troot.setRight(node3);\n\t\tnode2.setLeft(node4);\n\t\tnode2.setRight(node5);\n\t\tnode3.setLeft(node6);\n\t\t\n\t\t//测试中序线索化\n\t\tThreadedBinaryTree threadedBinaryTree = new ThreadedBinaryTree();\n\t\tthreadedBinaryTree.setRoot(root);\n\t\tthreadedBinaryTree.threadedNodes();\n\t\t\n\t\t//测试: 以10号节点测试\n\t\tHeroNode leftNode = node5.getLeft();\n\t\tHeroNode rightNode = node5.getRight();\n\t\tSystem.out.println(\"10号结点的前驱结点是 =\"  + leftNode); //3\n\t\tSystem.out.println(\"10号结点的后继结点是=\"  + rightNode); //1\n\t\t\n\t\t//当线索化二叉树后，能在使用原来的遍历方法\n\t\t//threadedBinaryTree.infixOrder();\n\t\tSystem.out.println(\"使用线索化的方式遍历 线索化二叉树\");\n\t\tthreadedBinaryTree.threadedList(); // 8, 3, 10, 1, 14, 6\n\t\t\n\t}\n\n}\n\n\n\n\n//定义ThreadedBinaryTree 实现了线索化功能的二叉树\nclass ThreadedBinaryTree {\n\tprivate HeroNode root;\n\t\n\t//为了实现线索化，需要创建要给指向当前结点的前驱结点的指针\n\t//在递归进行线索化时，pre 总是保留前一个结点\n\tprivate HeroNode pre = null;\n\n\tpublic void setRoot(HeroNode root) {\n\t\tthis.root = root;\n\t}\n\t\n\t//重载一把threadedNodes方法\n\tpublic void threadedNodes() {\n\t\tthis.threadedNodes(root);\n\t}\n\t\n\t//遍历线索化二叉树的方法\n\tpublic void threadedList() {\n\t\t//定义一个变量，存储当前遍历的结点，从root开始\n\t\tHeroNode node = root;\n\t\twhile(node != null) {\n\t\t\t//循环的找到leftType == 1的结点，第一个找到就是8结点\n\t\t\t//后面随着遍历而变化,因为当leftType==1时，说明该结点是按照线索化\n\t\t\t//处理后的有效结点\n\t\t\twhile(node.getLeftType() == 0) {\n\t\t\t\tnode = node.getLeft();\n\t\t\t}\n\t\t\t\n\t\t\t//打印当前这个结点\n\t\t\tSystem.out.println(node);\n\t\t\t//如果当前结点的右指针指向的是后继结点,就一直输出\n\t\t\twhile(node.getRightType() == 1) {\n\t\t\t\t//获取到当前结点的后继结点\n\t\t\t\tnode = node.getRight();\n\t\t\t\tSystem.out.println(node);\n\t\t\t}\n\t\t\t//替换这个遍历的结点\n\t\t\tnode = node.getRight();\n\t\t\t\n\t\t}\n\t}\n\t\n\t//编写对二叉树进行中序线索化的方法\n\t/**\n\t * \n\t * @param node 就是当前需要线索化的结点\n\t */\n\tpublic void threadedNodes(HeroNode node) {\n\t\t\n\t\t//如果node==null, 不能线索化\n\t\tif(node == null) {\n\t\t\treturn;\n\t\t}\n\t\t\n\t\t//(一)先线索化左子树\n\t\tthreadedNodes(node.getLeft());\n\t\t//(二)线索化当前结点[有难度]\n\t\t\n\t\t//处理当前结点的前驱结点\n\t\t//以8结点来理解\n\t\t//8结点的.left = null , 8结点的.leftType = 1\n\t\tif(node.getLeft() == null) {\n\t\t\t//让当前结点的左指针指向前驱结点 \n\t\t\tnode.setLeft(pre); \n\t\t\t//修改当前结点的左指针的类型,指向前驱结点\n\t\t\tnode.setLeftType(1);\n\t\t}\n\t\t\n\t\t//处理后继结点\n\t\tif (pre != null && pre.getRight() == null) {\n\t\t\t//让前驱结点的右指针指向当前结点\n\t\t\tpre.setRight(node);\n\t\t\t//修改前驱结点的右指针类型\n\t\t\tpre.setRightType(1);\n\t\t}\n\t\t//!!! 每处理一个结点后，让当前结点是下一个结点的前驱结点\n\t\tpre = node;\n\t\t\n\t\t//(三)在线索化右子树\n\t\tthreadedNodes(node.getRight());\n\t\t\n\t\t\n\t}\n\t\n\t//删除结点\n\tpublic void delNode(int no) {\n\t\tif(root != null) {\n\t\t\t//如果只有一个root结点, 这里立即判断root是不是就是要删除结点\n\t\t\tif(root.getNo() == no) {\n\t\t\t\troot = null;\n\t\t\t} else {\n\t\t\t\t//递归删除\n\t\t\t\troot.delNode(no);\n\t\t\t}\n\t\t}else{\n\t\t\tSystem.out.println(\"空树，不能删除~\");\n\t\t}\n\t}\n\t//前序遍历\n\tpublic void preOrder() {\n\t\tif(this.root != null) {\n\t\t\tthis.root.preOrder();\n\t\t}else {\n\t\t\tSystem.out.println(\"二叉树为空，无法遍历\");\n\t\t}\n\t}\n\t\n\t//中序遍历\n\tpublic void infixOrder() {\n\t\tif(this.root != null) {\n\t\t\tthis.root.infixOrder();\n\t\t}else {\n\t\t\tSystem.out.println(\"二叉树为空，无法遍历\");\n\t\t}\n\t}\n\t//后序遍历\n\tpublic void postOrder() {\n\t\tif(this.root != null) {\n\t\t\tthis.root.postOrder();\n\t\t}else {\n\t\t\tSystem.out.println(\"二叉树为空，无法遍历\");\n\t\t}\n\t}\n\t\n\t//前序遍历\n\tpublic HeroNode preOrderSearch(int no) {\n\t\tif(root != null) {\n\t\t\treturn root.preOrderSearch(no);\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n\t//中序遍历\n\tpublic HeroNode infixOrderSearch(int no) {\n\t\tif(root != null) {\n\t\t\treturn root.infixOrderSearch(no);\n\t\t}else {\n\t\t\treturn null;\n\t\t}\n\t}\n\t//后序遍历\n\tpublic HeroNode postOrderSearch(int no) {\n\t\tif(root != null) {\n\t\t\treturn this.root.postOrderSearch(no);\n\t\t}else {\n\t\t\treturn null;\n\t\t}\n\t}\n}\n\n//先创建HeroNode 结点\nclass HeroNode {\n\tprivate int no;\n\tprivate String name;\n\tprivate HeroNode left; //默认null\n\tprivate HeroNode right; //默认null\n\t//说明\n\t//1. 如果leftType == 0 表示指向的是左子树, 如果 1 则表示指向前驱结点\n\t//2. 如果rightType == 0 表示指向是右子树, 如果 1表示指向后继结点\n\tprivate int leftType;\n\tprivate int rightType;\n\t\n\t\n\t\n\tpublic int getLeftType() {\n\t\treturn leftType;\n\t}\n\tpublic void setLeftType(int leftType) {\n\t\tthis.leftType = leftType;\n\t}\n\tpublic int getRightType() {\n\t\treturn rightType;\n\t}\n\tpublic void setRightType(int rightType) {\n\t\tthis.rightType = rightType;\n\t}\n\tpublic HeroNode(int no, String name) {\n\t\tthis.no = no;\n\t\tthis.name = name;\n\t}\n\tpublic int getNo() {\n\t\treturn no;\n\t}\n\tpublic void setNo(int no) {\n\t\tthis.no = no;\n\t}\n\tpublic String getName() {\n\t\treturn name;\n\t}\n\tpublic void setName(String name) {\n\t\tthis.name = name;\n\t}\n\tpublic HeroNode getLeft() {\n\t\treturn left;\n\t}\n\tpublic void setLeft(HeroNode left) {\n\t\tthis.left = left;\n\t}\n\tpublic HeroNode getRight() {\n\t\treturn right;\n\t}\n\tpublic void setRight(HeroNode right) {\n\t\tthis.right = right;\n\t}\n\t@Override\n\tpublic String toString() {\n\t\treturn \"HeroNode [no=\" + no + \", name=\" + name + \"]\";\n\t}\n\t\n\t//递归删除结点\n\t//1.如果删除的节点是叶子节点，则删除该节点\n\t//2.如果删除的节点是非叶子节点，则删除该子树\n\tpublic void delNode(int no) {\n\t\t\n\t\t//思路\n\t\t/*\n\t\t * \t1. 因为我们的二叉树是单向的，所以我们是判断当前结点的子结点是否需要删除结点，而不能去判断当前这个结点是不是需要删除结点.\n\t\t\t2. 如果当前结点的左子结点不为空，并且左子结点 就是要删除结点，就将this.left = null; 并且就返回(结束递归删除)\n\t\t\t3. 如果当前结点的右子结点不为空，并且右子结点 就是要删除结点，就将this.right= null ;并且就返回(结束递归删除)\n\t\t\t4. 如果第2和第3步没有删除结点，那么我们就需要向左子树进行递归删除\n\t\t\t5.  如果第4步也没有删除结点，则应当向右子树进行递归删除.\n\n\t\t */\n\t\t//2. 如果当前结点的左子结点不为空，并且左子结点 就是要删除结点，就将this.left = null; 并且就返回(结束递归删除)\n\t\tif(this.left != null && this.left.no == no) {\n\t\t\tthis.left = null;\n\t\t\treturn;\n\t\t}\n\t\t//3.如果当前结点的右子结点不为空，并且右子结点 就是要删除结点，就将this.right= null ;并且就返回(结束递归删除)\n\t\tif(this.right != null && this.right.no == no) {\n\t\t\tthis.right = null;\n\t\t\treturn;\n\t\t}\n\t\t//4.我们就需要向左子树进行递归删除\n\t\tif(this.left != null) {\n\t\t\tthis.left.delNode(no);\n\t\t}\n\t\t//5.则应当向右子树进行递归删除\n\t\tif(this.right != null) {\n\t\t\tthis.right.delNode(no);\n\t\t}\n\t}\n\t\n\t//编写前序遍历的方法\n\tpublic void preOrder() {\n\t\tSystem.out.println(this); //先输出父结点\n\t\t//递归向左子树前序遍历\n\t\tif(this.left != null) {\n\t\t\tthis.left.preOrder();\n\t\t}\n\t\t//递归向右子树前序遍历\n\t\tif(this.right != null) {\n\t\t\tthis.right.preOrder();\n\t\t}\n\t}\n\t//中序遍历\n\tpublic void infixOrder() {\n\t\t\n\t\t//递归向左子树中序遍历\n\t\tif(this.left != null) {\n\t\t\tthis.left.infixOrder();\n\t\t}\n\t\t//输出父结点\n\t\tSystem.out.println(this);\n\t\t//递归向右子树中序遍历\n\t\tif(this.right != null) {\n\t\t\tthis.right.infixOrder();\n\t\t}\n\t}\n\t//后序遍历\n\tpublic void postOrder() {\n\t\tif(this.left != null) {\n\t\t\tthis.left.postOrder();\n\t\t}\n\t\tif(this.right != null) {\n\t\t\tthis.right.postOrder();\n\t\t}\n\t\tSystem.out.println(this);\n\t}\n\t\n\t//前序遍历查找\n\t/**\n\t * \n\t * @param no 查找no\n\t * @return 如果找到就返回该Node ,如果没有找到返回 null\n\t */\n\tpublic HeroNode preOrderSearch(int no) {\n\t\tSystem.out.println(\"进入前序遍历\");\n\t\t//比较当前结点是不是\n\t\tif(this.no == no) {\n\t\t\treturn this;\n\t\t}\n\t\t//1.则判断当前结点的左子节点是否为空，如果不为空，则递归前序查找\n\t\t//2.如果左递归前序查找，找到结点，则返回\n\t\tHeroNode resNode = null;\n\t\tif(this.left != null) {\n\t\t\tresNode = this.left.preOrderSearch(no);\n\t\t}\n\t\tif(resNode != null) {//说明我们左子树找到\n\t\t\treturn resNode;\n\t\t}\n\t\t//1.左递归前序查找，找到结点，则返回，否继续判断，\n\t\t//2.当前的结点的右子节点是否为空，如果不空，则继续向右递归前序查找\n\t\tif(this.right != null) {\n\t\t\tresNode = this.right.preOrderSearch(no);\n\t\t}\n\t\treturn resNode;\n\t}\n\t\n\t//中序遍历查找\n\tpublic HeroNode infixOrderSearch(int no) {\n\t\t//判断当前结点的左子节点是否为空，如果不为空，则递归中序查找\n\t\tHeroNode resNode = null;\n\t\tif(this.left != null) {\n\t\t\tresNode = this.left.infixOrderSearch(no);\n\t\t}\n\t\tif(resNode != null) {\n\t\t\treturn resNode;\n\t\t}\n\t\tSystem.out.println(\"进入中序查找\");\n\t\t//如果找到，则返回，如果没有找到，就和当前结点比较，如果是则返回当前结点\n\t\tif(this.no == no) {\n\t\t\treturn this;\n\t\t}\n\t\t//否则继续进行右递归的中序查找\n\t\tif(this.right != null) {\n\t\t\tresNode = this.right.infixOrderSearch(no);\n\t\t}\n\t\treturn resNode;\n\t\t\n\t}\n\t\n\t//后序遍历查找\n\tpublic HeroNode postOrderSearch(int no) {\n\t\t\n\t\t//判断当前结点的左子节点是否为空，如果不为空，则递归后序查找\n\t\tHeroNode resNode = null;\n\t\tif(this.left != null) {\n\t\t\tresNode = this.left.postOrderSearch(no);\n\t\t}\n\t\tif(resNode != null) {//说明在左子树找到\n\t\t\treturn resNode;\n\t\t}\n\t\t\n\t\t//如果左子树没有找到，则向右子树递归进行后序遍历查找\n\t\tif(this.right != null) {\n\t\t\tresNode = this.right.postOrderSearch(no);\n\t\t}\n\t\tif(resNode != null) {\n\t\t\treturn resNode;\n\t\t}\n\t\tSystem.out.println(\"进入后序查找\");\n\t\t//如果左右子树都没有找到，就比较当前结点是不是\n\t\tif(this.no == no) {\n\t\t\treturn this;\n\t\t}\n\t\treturn resNode;\n\t}\n\t\n}\n\n```\n\n### 4.霍夫曼树\n\n**基本介绍**\n\n1)给定n个权值作为n个[叶子结点](https://baike.baidu.com/item/叶子结点/3620239)，构造一棵二叉树，若该树的带权路径长度(wpl)达到最小，称这样的二叉树为**最优二叉树**，也称为**哈夫曼树**(Huffman Tree)**, 还有的书翻译为**霍夫曼树。\n\n2)赫夫曼树是带权路径长度最短的树，权值较大的结点离根较近。\n\n```java\npackage huffmantree;\n\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.List;\n\npublic class HuffmanTree {\n\n\tpublic static void main(String[] args) {\n\t\tint arr[] = { 13, 7, 8, 3, 29, 6, 1 };\n\t\tNode root = createHuffmanTree(arr);\n\t\t\n\t\t//测试一把\n\t\tpreOrder(root); //\n\t\t\n\t}\n\t\n\t//编写一个前序遍历的方法\n\tpublic static void preOrder(Node root) {\n\t\tif(root != null) {\n\t\t\troot.preOrder();\n\t\t}else{\n\t\t\tSystem.out.println(\"是空树，不能遍历~~\");\n\t\t}\n\t}\n\n\t// 创建赫夫曼树的方法\n\t/**\n\t * \n\t * @param arr 需要创建成哈夫曼树的数组\n\t * @return 创建好后的赫夫曼树的root结点\n\t */\n\tpublic static Node createHuffmanTree(int[] arr) {\n\t\t// 第一步为了操作方便\n\t\t// 1. 遍历 arr 数组\n\t\t// 2. 将arr的每个元素构成成一个Node\n\t\t// 3. 将Node 放入到ArrayList中\n\t\tList<Node> nodes = new ArrayList<Node>();\n\t\tfor (int value : arr) {\n\t\t\tnodes.add(new Node(value));\n\t\t}\n\t\t\n\t\t//我们处理的过程是一个循环的过程\n\t\t\n\t\t\n\t\twhile(nodes.size() > 1) {\n\t\t\n\t\t\t//排序 从小到大 \n\t\t\tCollections.sort(nodes);\n\t\t\t\n\t\t\tSystem.out.println(\"nodes =\" + nodes);\n\t\t\t\n\t\t\t//取出根节点权值最小的两颗二叉树 \n\t\t\t//(1) 取出权值最小的结点（二叉树）\n\t\t\tNode leftNode = nodes.get(0);\n\t\t\t//(2) 取出权值第二小的结点（二叉树）\n\t\t\tNode rightNode = nodes.get(1);\n\t\t\t\n\t\t\t//(3)构建一颗新的二叉树\n\t\t\tNode parent = new Node(leftNode.value + rightNode.value);\n\t\t\tparent.left = leftNode;\n\t\t\tparent.right = rightNode;\n\t\t\t\n\t\t\t//(4)从ArrayList删除处理过的二叉树\n\t\t\tnodes.remove(leftNode);\n\t\t\tnodes.remove(rightNode);\n\t\t\t//(5)将parent加入到nodes\n\t\t\tnodes.add(parent);\n\t\t}\n\t\t\n\t\t//返回哈夫曼树的root结点\n\t\treturn nodes.get(0);\n\t\t\n\t}\n}\n\n// 创建结点类\n// 为了让Node 对象持续排序Collections集合排序\n// 让Node 实现Comparable接口\nclass Node implements Comparable<Node> {\n\tint value; // 结点权值\n\tchar c; //字符\n\tNode left; // 指向左子结点\n\tNode right; // 指向右子结点\n\n\t//写一个前序遍历\n\tpublic void preOrder() {\n\t\tSystem.out.println(this);\n\t\tif(this.left != null) {\n\t\t\tthis.left.preOrder();\n\t\t}\n\t\tif(this.right != null) {\n\t\t\tthis.right.preOrder();\n\t\t}\n\t}\n\t\n\tpublic Node(int value) {\n\t\tthis.value = value;\n\t}\n\n\t@Override\n\tpublic String toString() {\n\t\treturn \"Node [value=\" + value + \"]\";\n\t}\n\n\t@Override\n\tpublic int compareTo(Node o) {\n\t\t// TODO Auto-generated method stub\n\t\t// 表示从小到大排序\n\t\treturn this.value - o.value;\n\t}\n\n}\n\n```\n\n### 5.二叉排序树\n\n**介绍**\n\n二叉排序树：BST: (Binary Sort(Search) Tree), 对于二叉排序树的任何一个非叶子节点，要求左子节点的值比当前节点的值小，右子节点的值比当前节点的值大。\n\n**特别说明**：如果有相同的值，可以将该节点放在左子节点或右子节点\n\n\n\n比如针对前面的数据 (7, 3, 10, 12, 5, 1, 9) ，对应的二叉排序树为：\n\n![image-20210106222122233](数据结构整理/image-20210106222122233.png)\n\n```java\npackage binarysorttree;\n\npublic class BinarySortTreeDemo {\n\n\tpublic static void main(String[] args) {\n\t\tint[] arr = {7, 3, 10, 12, 5, 1, 9, 2};\n\t\tBinarySortTree binarySortTree = new BinarySortTree();\n\t\t//循环的添加结点到二叉排序树\n\t\tfor(int i = 0; i< arr.length; i++) {\n\t\t\tbinarySortTree.add(new Node(arr[i]));\n\t\t}\n\t\t\n\t\t//中序遍历二叉排序树\n\t\tSystem.out.println(\"中序遍历二叉排序树~\");\n\t\tbinarySortTree.infixOrder(); // 1, 3, 5, 7, 9, 10, 12\n\t\t\n\t\t//测试一下删除叶子结点\n\t    \n\t   \n\t    binarySortTree.delNode(12);\n\t   \n\t \n\t    binarySortTree.delNode(5);\n\t    binarySortTree.delNode(10);\n\t    binarySortTree.delNode(2);\n\t    binarySortTree.delNode(3);\n\t\t   \n\t    binarySortTree.delNode(9);\n\t    binarySortTree.delNode(1);\n\t    binarySortTree.delNode(7);\n\t    \n\t\t\n\t\tSystem.out.println(\"root=\" + binarySortTree.getRoot());\n\t\t\n\t\t\n\t\tSystem.out.println(\"删除结点后\");\n\t\tbinarySortTree.infixOrder();\n\t}\n\n}\n\n//创建二叉排序树\nclass BinarySortTree {\n\tprivate Node root;\n\t\n\t\n\t\n\t\n\tpublic Node getRoot() {\n\t\treturn root;\n\t}\n\n\t//查找要删除的结点\n\tpublic Node search(int value) {\n\t\tif(root == null) {\n\t\t\treturn null;\n\t\t} else {\n\t\t\treturn root.search(value);\n\t\t}\n\t}\n\t\n\t//查找父结点\n\tpublic Node searchParent(int value) {\n\t\tif(root == null) {\n\t\t\treturn null;\n\t\t} else {\n\t\t\treturn root.searchParent(value);\n\t\t}\n\t}\n\t\n\t//编写方法: \n\t//1. 返回的 以node 为根结点的二叉排序树的最小结点的值\n\t//2. 删除node 为根结点的二叉排序树的最小结点\n\t/**\n\t * \n\t * @param node 传入的结点(当做二叉排序树的根结点)\n\t * @return 返回的 以node 为根结点的二叉排序树的最小结点的值\n\t */\n\tpublic int delRightTreeMin(Node node) {\n\t\tNode target = node;\n\t\t//循环的查找左子节点，就会找到最小值\n\t\twhile(target.left != null) {\n\t\t\ttarget = target.left;\n\t\t}\n\t\t//这时 target就指向了最小结点\n\t\t//删除最小结点\n\t\tdelNode(target.value);\n\t\treturn target.value;\n\t}\n\t\n\t\n\t//删除结点\n\tpublic void delNode(int value) {\n\t\tif(root == null) {\n\t\t\treturn;\n\t\t}else {\n\t\t\t//1.需求先去找到要删除的结点  targetNode\n\t\t\tNode targetNode = search(value);\n\t\t\t//如果没有找到要删除的结点\n\t\t\tif(targetNode == null) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t//如果我们发现当前这颗二叉排序树只有一个结点\n\t\t\tif(root.left == null && root.right == null) {\n\t\t\t\troot = null;\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t\n\t\t\t//去找到targetNode的父结点\n\t\t\tNode parent = searchParent(value);\n\t\t\t//如果要删除的结点是叶子结点\n\t\t\tif(targetNode.left == null && targetNode.right == null) {\n\t\t\t\t//判断targetNode 是父结点的左子结点，还是右子结点\n\t\t\t\tif(parent.left != null && parent.left.value == value) { //是左子结点\n\t\t\t\t\tparent.left = null;\n\t\t\t\t} else if (parent.right != null && parent.right.value == value) {//是由子结点\n\t\t\t\t\tparent.right = null;\n\t\t\t\t}\n\t\t\t} else if (targetNode.left != null && targetNode.right != null) { //删除有两颗子树的节点\n\t\t\t\tint minVal = delRightTreeMin(targetNode.right);\n\t\t\t\ttargetNode.value = minVal;\n\t\t\t\t\n\t\t\t\t\n\t\t\t} else { // 删除只有一颗子树的结点\n\t\t\t\t//如果要删除的结点有左子结点 \n\t\t\t\tif(targetNode.left != null) {\n\t\t\t\t\tif(parent != null) {\n\t\t\t\t\t\t//如果 targetNode 是 parent 的左子结点\n\t\t\t\t\t\tif(parent.left.value == value) {\n\t\t\t\t\t\t\tparent.left = targetNode.left;\n\t\t\t\t\t\t} else { //  targetNode 是 parent 的右子结点\n\t\t\t\t\t\t\tparent.right = targetNode.left;\n\t\t\t\t\t\t} \n\t\t\t\t\t} else {\n\t\t\t\t\t\troot = targetNode.left;\n\t\t\t\t\t}\n\t\t\t\t} else { //如果要删除的结点有右子结点 \n\t\t\t\t\tif(parent != null) {\n\t\t\t\t\t\t//如果 targetNode 是 parent 的左子结点\n\t\t\t\t\t\tif(parent.left.value == value) {\n\t\t\t\t\t\t\tparent.left = targetNode.right;\n\t\t\t\t\t\t} else { //如果 targetNode 是 parent 的右子结点\n\t\t\t\t\t\t\tparent.right = targetNode.right;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\troot = targetNode.right;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t}\n\t}\n\t\n\t//添加结点的方法\n\tpublic void add(Node node) {\n\t\tif(root == null) {\n\t\t\troot = node;//如果root为空则直接让root指向node\n\t\t} else {\n\t\t\troot.add(node);\n\t\t}\n\t}\n\t//中序遍历\n\tpublic void infixOrder() {\n\t\tif(root != null) {\n\t\t\troot.infixOrder();\n\t\t} else {\n\t\t\tSystem.out.println(\"二叉排序树为空，不能遍历\");\n\t\t}\n\t}\n}\n\n//创建Node结点\nclass Node {\n\tint value;\n\tNode left;\n\tNode right;\n\tpublic Node(int value) {\n\t\t\n\t\tthis.value = value;\n\t}\n\t\n\t\n\t//查找要删除的结点\n\t/**\n\t * \n\t * @param value 希望删除的结点的值\n\t * @return 如果找到返回该结点，否则返回null\n\t */\n\tpublic Node search(int value) {\n\t\tif(value == this.value) { //找到就是该结点\n\t\t\treturn this;\n\t\t} else if(value < this.value) {//如果查找的值小于当前结点，向左子树递归查找\n\t\t\t//如果左子结点为空\n\t\t\tif(this.left  == null) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\treturn this.left.search(value);\n\t\t} else { //如果查找的值不小于当前结点，向右子树递归查找\n\t\t\tif(this.right == null) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\treturn this.right.search(value);\n\t\t}\n\t\t\n\t}\n\t//查找要删除结点的父结点\n\t/**\n\t * \n\t * @param value 要找到的结点的值\n\t * @return 返回的是要删除的结点的父结点，如果没有就返回null\n\t */\n\tpublic Node searchParent(int value) {\n\t\t//如果当前结点就是要删除的结点的父结点，就返回\n\t\tif((this.left != null && this.left.value == value) || \n\t\t\t\t(this.right != null && this.right.value == value)) {\n\t\t\treturn this;\n\t\t} else {\n\t\t\t//如果查找的值小于当前结点的值, 并且当前结点的左子结点不为空\n\t\t\tif(value < this.value && this.left != null) {\n\t\t\t\treturn this.left.searchParent(value); //向左子树递归查找\n\t\t\t} else if (value >= this.value && this.right != null) {\n\t\t\t\treturn this.right.searchParent(value); //向右子树递归查找\n\t\t\t} else {\n\t\t\t\treturn null; // 没有找到父结点\n\t\t\t}\n\t\t}\n\t\t\n\t}\n\t\n\t@Override\n\tpublic String toString() {\n\t\treturn \"Node [value=\" + value + \"]\";\n\t}\n\n\n\t//添加结点的方法\n\t//递归的形式添加结点，注意需要满足二叉排序树的要求\n\tpublic void add(Node node) {\n\t\tif(node == null) {\n\t\t\treturn;\n\t\t}\n\t\t\n\t\t//判断传入的结点的值，和当前子树的根结点的值关系\n\t\tif(node.value < this.value) {\n\t\t\t//如果当前结点左子结点为null\n\t\t\tif(this.left == null) {\n\t\t\t\tthis.left = node;\n\t\t\t} else {\n\t\t\t\t//递归的向左子树添加\n\t\t\t\tthis.left.add(node);\n\t\t\t}\n\t\t} else { //添加的结点的值大于 当前结点的值\n\t\t\tif(this.right == null) {\n\t\t\t\tthis.right = node;\n\t\t\t} else {\n\t\t\t\t//递归的向右子树添加\n\t\t\t\tthis.right.add(node);\n\t\t\t}\n\t\t\t\n\t\t}\n\t}\n\t\n\t//中序遍历\n\tpublic void infixOrder() {\n\t\tif(this.left != null) {\n\t\t\tthis.left.infixOrder();\n\t\t}\n\t\tSystem.out.println(this);\n\t\tif(this.right != null) {\n\t\t\tthis.right.infixOrder();\n\t\t}\n\t}\n\t\n}\n\n```\n\n\n\n### 6.平衡二叉树\n\n**基本介绍**\n\n\n\n1)平衡二叉树也叫平衡二叉搜索树（Self-balancing binary search tree）又被称为AVL树， 可以**保证查询效率较高**。\n\n2)具有以下**特点**：它是一 棵空树或它的左右两个子树的高度差的绝对值不超过1，并且左右两个子树都是一棵平衡二叉树。平衡二叉树的常用实现方法有[红黑树](https://baike.baidu.com/item/红黑树/2413209)、[AVL](https://baike.baidu.com/item/AVL/7543015)、[替罪羊树](https://baike.baidu.com/item/替罪羊树/13859070)、[Treap](https://baike.baidu.com/item/Treap)、[伸展树](https://baike.baidu.com/item/伸展树/7003945)等。\n\n```java\n\npublic class AVLTreeDemo {\n\n\tpublic static void main(String[] args) {\n\t\t//int[] arr = {4,3,6,5,7,8};\n\t\t//int[] arr = { 10, 12, 8, 9, 7, 6 };\n\t\tint[] arr = { 10, 11, 7, 6, 8, 9 };  \n\t\t//创建一个 AVLTree对象\n\t\tAVLTree avlTree = new AVLTree();\n\t\t//添加结点\n\t\tfor(int i=0; i < arr.length; i++) {\n\t\t\tavlTree.add(new Node(arr[i]));\n\t\t}\n\t\t\n\t\t//遍历\n\t\tSystem.out.println(\"中序遍历\");\n\t\tavlTree.infixOrder();\n\t\t\n\t\tSystem.out.println(\"在平衡处理~~\");\n\t\tSystem.out.println(\"树的高度=\" + avlTree.getRoot().height()); //3\n\t\tSystem.out.println(\"树的左子树高度=\" + avlTree.getRoot().leftHeight()); // 2\n\t\tSystem.out.println(\"树的右子树高度=\" + avlTree.getRoot().rightHeight()); // 2\n\t\tSystem.out.println(\"当前的根结点=\" + avlTree.getRoot());//8\n\t\t\n\t\t\n\t}\n\n}\n\n// 创建AVLTree\nclass AVLTree {\n\tprivate Node root;\n\n\tpublic Node getRoot() {\n\t\treturn root;\n\t}\n\n\t// 查找要删除的结点\n\tpublic Node search(int value) {\n\t\tif (root == null) {\n\t\t\treturn null;\n\t\t} else {\n\t\t\treturn root.search(value);\n\t\t}\n\t}\n\n\t// 查找父结点\n\tpublic Node searchParent(int value) {\n\t\tif (root == null) {\n\t\t\treturn null;\n\t\t} else {\n\t\t\treturn root.searchParent(value);\n\t\t}\n\t}\n\n\t// 编写方法:\n\t// 1. 返回的 以node 为根结点的二叉排序树的最小结点的值\n\t// 2. 删除node 为根结点的二叉排序树的最小结点\n\t/**\n\t * \n\t * @param node\n\t *            传入的结点(当做二叉排序树的根结点)\n\t * @return 返回的 以node 为根结点的二叉排序树的最小结点的值\n\t */\n\tpublic int delRightTreeMin(Node node) {\n\t\tNode target = node;\n\t\t// 循环的查找左子节点，就会找到最小值\n\t\twhile (target.left != null) {\n\t\t\ttarget = target.left;\n\t\t}\n\t\t// 这时 target就指向了最小结点\n\t\t// 删除最小结点\n\t\tdelNode(target.value);\n\t\treturn target.value;\n\t}\n\n\t// 删除结点\n\tpublic void delNode(int value) {\n\t\tif (root == null) {\n\t\t\treturn;\n\t\t} else {\n\t\t\t// 1.需求先去找到要删除的结点 targetNode\n\t\t\tNode targetNode = search(value);\n\t\t\t// 如果没有找到要删除的结点\n\t\t\tif (targetNode == null) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t// 如果我们发现当前这颗二叉排序树只有一个结点\n\t\t\tif (root.left == null && root.right == null) {\n\t\t\t\troot = null;\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// 去找到targetNode的父结点\n\t\t\tNode parent = searchParent(value);\n\t\t\t// 如果要删除的结点是叶子结点\n\t\t\tif (targetNode.left == null && targetNode.right == null) {\n\t\t\t\t// 判断targetNode 是父结点的左子结点，还是右子结点\n\t\t\t\tif (parent.left != null && parent.left.value == value) { // 是左子结点\n\t\t\t\t\tparent.left = null;\n\t\t\t\t} else if (parent.right != null && parent.right.value == value) {// 是由子结点\n\t\t\t\t\tparent.right = null;\n\t\t\t\t}\n\t\t\t} else if (targetNode.left != null && targetNode.right != null) { // 删除有两颗子树的节点\n\t\t\t\tint minVal = delRightTreeMin(targetNode.right);\n\t\t\t\ttargetNode.value = minVal;\n\n\t\t\t} else { // 删除只有一颗子树的结点\n\t\t\t\t// 如果要删除的结点有左子结点\n\t\t\t\tif (targetNode.left != null) {\n\t\t\t\t\tif (parent != null) {\n\t\t\t\t\t\t// 如果 targetNode 是 parent 的左子结点\n\t\t\t\t\t\tif (parent.left.value == value) {\n\t\t\t\t\t\t\tparent.left = targetNode.left;\n\t\t\t\t\t\t} else { // targetNode 是 parent 的右子结点\n\t\t\t\t\t\t\tparent.right = targetNode.left;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\troot = targetNode.left;\n\t\t\t\t\t}\n\t\t\t\t} else { // 如果要删除的结点有右子结点\n\t\t\t\t\tif (parent != null) {\n\t\t\t\t\t\t// 如果 targetNode 是 parent 的左子结点\n\t\t\t\t\t\tif (parent.left.value == value) {\n\t\t\t\t\t\t\tparent.left = targetNode.right;\n\t\t\t\t\t\t} else { // 如果 targetNode 是 parent 的右子结点\n\t\t\t\t\t\t\tparent.right = targetNode.right;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\troot = targetNode.right;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\t}\n\n\t// 添加结点的方法\n\tpublic void add(Node node) {\n\t\tif (root == null) {\n\t\t\troot = node;// 如果root为空则直接让root指向node\n\t\t} else {\n\t\t\troot.add(node);\n\t\t}\n\t}\n\n\t// 中序遍历\n\tpublic void infixOrder() {\n\t\tif (root != null) {\n\t\t\troot.infixOrder();\n\t\t} else {\n\t\t\tSystem.out.println(\"二叉排序树为空，不能遍历\");\n\t\t}\n\t}\n}\n\n// 创建Node结点\nclass Node {\n\tint value;\n\tNode left;\n\tNode right;\n\n\tpublic Node(int value) {\n\n\t\tthis.value = value;\n\t}\n\n\t// 返回左子树的高度\n\tpublic int leftHeight() {\n\t\tif (left == null) {\n\t\t\treturn 0;\n\t\t}\n\t\treturn left.height();\n\t}\n\n\t// 返回右子树的高度\n\tpublic int rightHeight() {\n\t\tif (right == null) {\n\t\t\treturn 0;\n\t\t}\n\t\treturn right.height();\n\t}\n\n\t// 返回 以该结点为根结点的树的高度\n\tpublic int height() {\n\t\treturn Math.max(left == null ? 0 : left.height(), right == null ? 0 : right.height()) + 1;\n\t}\n\t\n\t//左旋转方法\n\tprivate void leftRotate() {\n\t\t\n\t\t//创建新的结点，以当前根结点的值\n\t\tNode newNode = new Node(value);\n\t\t//把新的结点的左子树设置成当前结点的左子树\n\t\tnewNode.left = left;\n\t\t//把新的结点的右子树设置成带你过去结点的右子树的左子树\n\t\tnewNode.right = right.left;\n\t\t//把当前结点的值替换成右子结点的值\n\t\tvalue = right.value;\n\t\t//把当前结点的右子树设置成当前结点右子树的右子树\n\t\tright = right.right;\n\t\t//把当前结点的左子树(左子结点)设置成新的结点\n\t\tleft = newNode;\n\t\t\n\t\t\n\t}\n\t\n\t//右旋转\n\tprivate void rightRotate() {\n\t\tNode newNode = new Node(value);\n\t\tnewNode.right = right;\n\t\tnewNode.left = left.right;\n\t\tvalue = left.value;\n\t\tleft = left.left;\n\t\tright = newNode;\n\t}\n\n\t// 查找要删除的结点\n\t/**\n\t * \n\t * @param value\n\t *            希望删除的结点的值\n\t * @return 如果找到返回该结点，否则返回null\n\t */\n\tpublic Node search(int value) {\n\t\tif (value == this.value) { // 找到就是该结点\n\t\t\treturn this;\n\t\t} else if (value < this.value) {// 如果查找的值小于当前结点，向左子树递归查找\n\t\t\t// 如果左子结点为空\n\t\t\tif (this.left == null) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\treturn this.left.search(value);\n\t\t} else { // 如果查找的值不小于当前结点，向右子树递归查找\n\t\t\tif (this.right == null) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\treturn this.right.search(value);\n\t\t}\n\n\t}\n\n\t// 查找要删除结点的父结点\n\t/**\n\t * \n\t * @param value\n\t *            要找到的结点的值\n\t * @return 返回的是要删除的结点的父结点，如果没有就返回null\n\t */\n\tpublic Node searchParent(int value) {\n\t\t// 如果当前结点就是要删除的结点的父结点，就返回\n\t\tif ((this.left != null && this.left.value == value) || (this.right != null && this.right.value == value)) {\n\t\t\treturn this;\n\t\t} else {\n\t\t\t// 如果查找的值小于当前结点的值, 并且当前结点的左子结点不为空\n\t\t\tif (value < this.value && this.left != null) {\n\t\t\t\treturn this.left.searchParent(value); // 向左子树递归查找\n\t\t\t} else if (value >= this.value && this.right != null) {\n\t\t\t\treturn this.right.searchParent(value); // 向右子树递归查找\n\t\t\t} else {\n\t\t\t\treturn null; // 没有找到父结点\n\t\t\t}\n\t\t}\n\n\t}\n\n\t@Override\n\tpublic String toString() {\n\t\treturn \"Node [value=\" + value + \"]\";\n\t}\n\n\t// 添加结点的方法\n\t// 递归的形式添加结点，注意需要满足二叉排序树的要求\n\tpublic void add(Node node) {\n\t\tif (node == null) {\n\t\t\treturn;\n\t\t}\n\n\t\t// 判断传入的结点的值，和当前子树的根结点的值关系\n\t\tif (node.value < this.value) {\n\t\t\t// 如果当前结点左子结点为null\n\t\t\tif (this.left == null) {\n\t\t\t\tthis.left = node;\n\t\t\t} else {\n\t\t\t\t// 递归的向左子树添加\n\t\t\t\tthis.left.add(node);\n\t\t\t}\n\t\t} else { // 添加的结点的值大于 当前结点的值\n\t\t\tif (this.right == null) {\n\t\t\t\tthis.right = node;\n\t\t\t} else {\n\t\t\t\t// 递归的向右子树添加\n\t\t\t\tthis.right.add(node);\n\t\t\t}\n\n\t\t}\n\t\t\n\t\t//当添加完一个结点后，如果: (右子树的高度-左子树的高度) > 1 , 左旋转\n\t\tif(rightHeight() - leftHeight() > 1) {\n\t\t\t//如果它的右子树的左子树的高度大于它的右子树的右子树的高度\n\t\t\tif(right != null && right.leftHeight() > right.rightHeight()) {\n\t\t\t\t//先对右子结点进行右旋转\n\t\t\t\tright.rightRotate();\n\t\t\t\t//然后在对当前结点进行左旋转\n\t\t\t\tleftRotate(); //左旋转..\n\t\t\t} else {\n\t\t\t\t//直接进行左旋转即可\n\t\t\t\tleftRotate();\n\t\t\t}\n\t\t\treturn ; //必须要!!!\n\t\t}\n\t\t\n\t\t//当添加完一个结点后，如果 (左子树的高度 - 右子树的高度) > 1, 右旋转\n\t\tif(leftHeight() - rightHeight() > 1) {\n\t\t\t//如果它的左子树的右子树高度大于它的左子树的高度\n\t\t\tif(left != null && left.rightHeight() > left.leftHeight()) {\n\t\t\t\t//先对当前结点的左结点(左子树)->左旋转\n\t\t\t\tleft.leftRotate();\n\t\t\t\t//再对当前结点进行右旋转\n\t\t\t\trightRotate();\n\t\t\t} else {\n\t\t\t\t//直接进行右旋转即可\n\t\t\t\trightRotate();\n\t\t\t}\n\t\t}\n\t}\n\n\t// 中序遍历\n\tpublic void infixOrder() {\n\t\tif (this.left != null) {\n\t\t\tthis.left.infixOrder();\n\t\t}\n\t\tSystem.out.println(this);\n\t\tif (this.right != null) {\n\t\t\tthis.right.infixOrder();\n\t\t}\n\t}\n\n}\n\n```\n\n## 九、图\n\n### 1.图的表示方式\n\n​\t邻接矩阵\n\n​\t邻接表\n\n```java\npackage graph;\n\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.LinkedList;\n\npublic class Graph {\n\n\tprivate ArrayList<String> vertexList; //存储顶点集合\n\tprivate int[][] edges; //存储图对应的邻结矩阵\n\tprivate int numOfEdges; //表示边的数目\n\t//定义给数组boolean[], 记录某个结点是否被访问\n\tprivate boolean[] isVisited;\n\t\n\tpublic static void main(String[] args) {\n\t\t//测试一把图是否创建ok\n\t\tint n = 8;  //结点的个数\n\t\t//String Vertexs[] = {\"A\", \"B\", \"C\", \"D\", \"E\"};\n\t\tString Vertexs[] = {\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\"};\n\t\t\n\t\t//创建图对象\n\t\tGraph graph = new Graph(n);\n\t\t//循环的添加顶点\n\t\tfor(String vertex: Vertexs) {\n\t\t\tgraph.insertVertex(vertex);\n\t\t}\n\t\t\n\t\t//添加边\n\t\t//A-B A-C B-C B-D B-E \n//\t\tgraph.insertEdge(0, 1, 1); // A-B\n//\t\tgraph.insertEdge(0, 2, 1); // \n//\t\tgraph.insertEdge(1, 2, 1); // \n//\t\tgraph.insertEdge(1, 3, 1); // \n//\t\tgraph.insertEdge(1, 4, 1); // \n\t\t\n\t\t//更新边的关系\n\t\tgraph.insertEdge(0, 1, 1);\n\t\tgraph.insertEdge(0, 2, 1);\n\t\tgraph.insertEdge(1, 3, 1);\n\t\tgraph.insertEdge(1, 4, 1);\n\t\tgraph.insertEdge(3, 7, 1);\n\t\tgraph.insertEdge(4, 7, 1);\n\t\tgraph.insertEdge(2, 5, 1);\n\t\tgraph.insertEdge(2, 6, 1);\n\t\tgraph.insertEdge(5, 6, 1);\n\n\t\t\n\t\t\n\t\t//显示一把邻结矩阵\n\t\tgraph.showGraph();\n\t\t\n\t\t//测试一把，我们的dfs遍历是否ok\n\t\tSystem.out.println(\"深度遍历\");\n\t\tgraph.dfs(); // A->B->C->D->E [1->2->4->8->5->3->6->7]\n//\t\tSystem.out.println();\n\t\tSystem.out.println(\"广度优先!\");\n\t\tgraph.bfs(); // A->B->C->D-E [1->2->3->4->5->6->7->8]\n\t\t\n\t}\n\t\n\t//构造器\n\tpublic Graph(int n) {\n\t\t//初始化矩阵和vertexList\n\t\tedges = new int[n][n];\n\t\tvertexList = new ArrayList<String>(n);\n\t\tnumOfEdges = 0;\n\t\t\n\t}\n\t\n\t//得到第一个邻接结点的下标 w \n\t/**\n\t * \n\t * @param index \n\t * @return 如果存在就返回对应的下标，否则返回-1\n\t */\n\tpublic int getFirstNeighbor(int index) {\n\t\tfor(int j = 0; j < vertexList.size(); j++) {\n\t\t\tif(edges[index][j] > 0) {\n\t\t\t\treturn j;\n\t\t\t}\n\t\t}\n\t\treturn -1;\n\t}\n\t//根据前一个邻接结点的下标来获取下一个邻接结点\n\tpublic int getNextNeighbor(int v1, int v2) {\n\t\tfor(int j = v2 + 1; j < vertexList.size(); j++) {\n\t\t\tif(edges[v1][j] > 0) {\n\t\t\t\treturn j;\n\t\t\t}\n\t\t}\n\t\treturn -1;\n\t}\n\t\n\t//深度优先遍历算法\n\t//i 第一次就是 0\n\tprivate void dfs(boolean[] isVisited, int i) {\n\t\t//首先我们访问该结点,输出\n\t\tSystem.out.print(getValueByIndex(i) + \"->\");\n\t\t//将结点设置为已经访问\n\t\tisVisited[i] = true;\n\t\t//查找结点i的第一个邻接结点w\n\t\tint w = getFirstNeighbor(i);\n\t\twhile(w != -1) {//说明有\n\t\t\tif(!isVisited[w]) {\n\t\t\t\tdfs(isVisited, w);\n\t\t\t}\n\t\t\t//如果w结点已经被访问过\n\t\t\tw = getNextNeighbor(i, w);\n\t\t}\n\t\t\n\t}\n\t\n\t//对dfs 进行一个重载, 遍历我们所有的结点，并进行 dfs\n\tpublic void dfs() {\n\t\tisVisited = new boolean[vertexList.size()];\n\t\t//遍历所有的结点，进行dfs[回溯]\n\t\tfor(int i = 0; i < getNumOfVertex(); i++) {\n\t\t\tif(!isVisited[i]) {\n\t\t\t\tdfs(isVisited, i);\n\t\t\t}\n\t\t}\n\t}\n\t\n\t//对一个结点进行广度优先遍历的方法\n\tprivate void bfs(boolean[] isVisited, int i) {\n\t\tint u ; // 表示队列的头结点对应下标\n\t\tint w ; // 邻接结点w\n\t\t//队列，记录结点访问的顺序\n\t\tLinkedList queue = new LinkedList();\n\t\t//访问结点，输出结点信息\n\t\tSystem.out.print(getValueByIndex(i) + \"=>\");\n\t\t//标记为已访问\n\t\tisVisited[i] = true;\n\t\t//将结点加入队列\n\t\tqueue.addLast(i);\n\t\t\n\t\twhile( !queue.isEmpty()) {\n\t\t\t//取出队列的头结点下标\n\t\t\tu = (Integer)queue.removeFirst();\n\t\t\t//得到第一个邻接结点的下标 w \n\t\t\tw = getFirstNeighbor(u);\n\t\t\twhile(w != -1) {//找到\n\t\t\t\t//是否访问过\n\t\t\t\tif(!isVisited[w]) {\n\t\t\t\t\tSystem.out.print(getValueByIndex(w) + \"=>\");\n\t\t\t\t\t//标记已经访问\n\t\t\t\t\tisVisited[w] = true;\n\t\t\t\t\t//入队\n\t\t\t\t\tqueue.addLast(w);\n\t\t\t\t}\n\t\t\t\t//以u为前驱点，找w后面的下一个邻结点\n\t\t\t\tw = getNextNeighbor(u, w); //体现出我们的广度优先\n\t\t\t}\n\t\t}\n\t\t\n\t} \n\t\n\t//遍历所有的结点，都进行广度优先搜索\n\tpublic void bfs() {\n\t\tisVisited = new boolean[vertexList.size()];\n\t\tfor(int i = 0; i < getNumOfVertex(); i++) {\n\t\t\tif(!isVisited[i]) {\n\t\t\t\tbfs(isVisited, i);\n\t\t\t}\n\t\t}\n\t}\n\t\n\t//图中常用的方法\n\t//返回结点的个数\n\tpublic int getNumOfVertex() {\n\t\treturn vertexList.size();\n\t}\n\t//显示图对应的矩阵\n\tpublic void showGraph() {\n\t\tfor(int[] link : edges) {\n\t\t\tSystem.err.println(Arrays.toString(link));\n\t\t}\n\t}\n\t//得到边的数目\n\tpublic int getNumOfEdges() {\n\t\treturn numOfEdges;\n\t}\n\t//返回结点i(下标)对应的数据 0->\"A\" 1->\"B\" 2->\"C\"\n\tpublic String getValueByIndex(int i) {\n\t\treturn vertexList.get(i);\n\t}\n\t//返回v1和v2的权值\n\tpublic int getWeight(int v1, int v2) {\n\t\treturn edges[v1][v2];\n\t}\n\t//插入结点\n\tpublic void insertVertex(String vertex) {\n\t\tvertexList.add(vertex);\n\t}\n\t//添加边\n\t/**\n\t * \n\t * @param v1 表示点的下标即使第几个顶点  \"A\"-\"B\" \"A\"->0 \"B\"->1\n\t * @param v2 第二个顶点对应的下标\n\t * @param weight 表示 \n\t */\n\tpublic void insertEdge(int v1, int v2, int weight) {\n\t\tedges[v1][v2] = weight;\n\t\tedges[v2][v1] = weight;\n\t\tnumOfEdges++;\n\t}\n}\n\n```\n\n\n\n## 十、常用算法\n\n### 1.查找算法\n\n#### 二分查找和插值查找\n\n```java\n /**\n     * 循环实现二分查找算法，已排好序得数组arrays,-1无法查到数据\n     *\n     * @param ele\n     * @return\n     */\n    public static int binSearch(int[] arr, int ele) {\n        //第一个下标\n        int sIndex = 0;\n        //最后一个下标\n        int eIndex = arr.length - 1;\n        while (sIndex <= eIndex) {\n            int mIndex = sIndex + (eIndex - sIndex) / 2;\n            if (ele == arr[mIndex]) {\n                return mIndex;\n            } else if (ele < arr[mIndex]) {\n                eIndex = mIndex - 1;\n            } else {\n                sIndex = mIndex + 1;\n            }\n        }\n        return -1;\n    }\n\n    /**\n     * 递归实现二分查找\n     */\n    public static int recurSeach(int[] arr, int ele, int sIndex, int eIndex) {\n        int mIndex = sIndex + (eIndex - sIndex) / 2;\n        if (ele < arr[sIndex] || ele > arr[eIndex] || sIndex > eIndex) {\n            return -1;\n        }\n        if (arr[mIndex] == ele) {\n            return mIndex;\n        } else if (ele < arr[mIndex]) {\n            return recurSeach(arr, ele, sIndex, mIndex - 1);\n        } else {\n            return recurSeach(arr, ele, mIndex + 1, eIndex);\n        }\n    }\n\n//编写插值查找算法\n\t//说明：插值查找算法，也要求数组是有序的\n\t/**\n\t * \n\t * @param arr 数组\n\t * @param left 左边索引\n\t * @param right 右边索引\n\t * @param findVal 查找值\n\t * @return 如果找到，就返回对应的下标，如果没有找到，返回-1\n\t */\n\tpublic static int insertValueSearch(int[] arr, int left, int right, int findVal) { \n\n\t\tSystem.out.println(\"插值查找次数~~\");\n\t\t\n\t\t//注意：findVal < arr[0]  和  findVal > arr[arr.length - 1] 必须需要\n\t\t//否则我们得到的 mid 可能越界\n\t\tif (left > right || findVal < arr[0] || findVal > arr[arr.length - 1]) {\n\t\t\treturn -1;\n\t\t}\n\n\t\t// 求出mid, 自适应 应用数据公式 y=kx + b，这里mid不是中值的意思，而是找到最接近的索引，(left,arr[left]),(right,arr[right])\n\t\tint mid = left + (right - left) * (findVal - arr[left]) / (arr[right] - arr[left]);\n\t\tint midVal = arr[mid];\n\t\tif (findVal > midVal) { // 说明应该向右边递归\n\t\t\treturn insertValueSearch(arr, mid + 1, right, findVal);\n\t\t} else if (findVal < midVal) { // 说明向左递归查找\n\t\t\treturn insertValueSearch(arr, left, mid - 1, findVal);\n\t\t} else {\n\t\t\treturn mid;\n\t\t}\n\n\t}\n\n\n\n/**\n\t * 这里我们实现的线性查找是找到一个满足条件的值，就返回\n\t * @param arr\n\t * @param value\n\t * @return\n\t */\n\tpublic static int seqSearch(int[] arr, int value) {\n\t\t// 线性查找是逐一比对，发现有相同值，就返回下标\n\t\tfor (int i = 0; i < arr.length; i++) {\n\t\t\tif(arr[i] == value) {\n\t\t\t\treturn i;\n\t\t\t}\n\t\t}\n\t\treturn -1;\n\t}\n```\n#### 斐波那契(黄金分割法)查找算法\n\n**斐波那契(黄金分割法)原理**:\n\n**斐波那契查找**原理与前两种相似，仅仅\n 改变了中间结点（mid）的位置，mid不\n 再是中间或插值得到，而是位于黄金分\n 割点附近，即**mid=low+F(k-1)-1\n** （F代表斐波那契数列），如下图所示\n\n![image-20210109154304890](数据结构整理/image-20210109154304890.png)\n\n对F(k-1)-1的理解：\n\n1)由斐波那契数列 **F[k]=F[k-1]+F[k-2]** 的性质，可以得到 **（F[k]-1）=（F[k-1]-1）+（F[k-2]-1+1** 。该式说明：只要顺序表的长度为**F[k]-1**，则可以将该表分成长度为**F[k-1]-1**和**F[k-2]-1**的两段，即如上图所示。从而中间位置为mid=low+Fk-1)-1\n\n2)类似的，每一子段也可以用相同的方式分割\n\n3)但顺序表长度n不一定刚好等于F[k]-1，所以需要将原来的顺序表长度n增加至F[k]-1。这里的k值只要能使得F[k]-1恰好大于或等于n即可，由以下代码得到,顺序表长度增加后，新增的位置（从n+1到F[k]-1位置），都赋为n位置的值即可。\n\n\n```java\npackage search;\n\nimport java.util.Arrays;\n\npublic class FibonacciSearch {\n\n    public static int maxSize = 20;\n\n    public static void main(String[] args) {\n        int[] arr = {1, 8, 10, 89, 1000, 1234};\n\n        System.out.println(\"index=\" + fibSearch(arr, 189));// 0\n\n    }\n\n    //因为后面我们mid=low+F(k-1)-1，需要使用到斐波那契数列，因此我们需要先获取到一个斐波那契数列\n    //非递归方法得到一个斐波那契数列\n    public static int[] fib() {\n        int[] f = new int[maxSize];\n        f[0] = 1;\n        f[1] = 1;\n        for (int i = 2; i < maxSize; i++) {\n            f[i] = f[i - 1] + f[i - 2];\n        }\n        return f;\n    }\n\n    //编写斐波那契查找算法\n    //使用非递归的方式编写算法\n\n    /**\n     * @param a   数组\n     * @param key 我们需要查找的关键码(值)\n     * @return 返回对应的下标，如果没有-1\n     */\n    public static int fibSearch(int[] a, int key) {\n        int low = 0;\n        int high = a.length - 1;\n        int k = 0; //表示斐波那契分割数值的下标\n        int mid = 0; //存放mid值\n        int[] f = fib(); //获取到斐波那契数列\n        //获取到斐波那契分割数值的下标\n        while (high > f[k] - 1) {\n            k++;\n        }\n        //因为 f[k] 值 可能大于 a 的 长度，因此我们需要使用Arrays类，构造一个新的数组，并指向temp[]\n        //不足的部分会使用0填充\n        int[] temp = Arrays.copyOf(a, f[k]);\n//\t\tSystem.out.println(Arrays.toString(temp));\n        //实际上需求使用a数组最后的数填充 temp\n        //举例:\n        //temp = {1,8, 10, 89, 1000, 1234, 0, 0}  => {1,8, 10, 89, 1000, 1234, 1234, 1234,}\n        for (int i = high + 1; i < temp.length; i++) {\n            temp[i] = a[high];\n        }\n\n        // 使用while来循环处理，找到我们的数 key\n        while (low <= high) { // 只要这个条件满足，就可以找\n            mid = low + f[k - 1] - 1;\n            if (key < temp[mid]) { //我们应该继续向数组的前面查找(左边)\n                high = mid - 1;\n                //为甚是 k--\n                //说明\n                //1. 全部元素 = 前面的元素 + 后边元素\n                //2. f[k] = f[k-1] + f[k-2]\n                //因为 前面有 f[k-1]个元素,所以可以继续拆分 f[k-1] = f[k-2] + f[k-3]\n                //即 在 f[k-1] 的前面继续查找 k--\n                //即下次循环 mid = f[k-1-1]-1\n                k--;\n            } else if (key > temp[mid]) { // 我们应该继续向数组的后面查找(右边)\n                low = mid + 1;\n                //为什么是k -=2\n                //说明\n                //1. 全部元素 = 前面的元素 + 后边元素\n                //2. f[k] = f[k-1] + f[k-2]\n                //3. 因为后面我们有f[k-2] 所以可以继续拆分 f[k-1] = f[k-3] + f[k-4]\n                //4. 即在f[k-2] 的前面进行查找 k -=2\n                //5. 即下次循环 mid = f[k - 1 - 2] - 1\n                k -= 2;\n            } else { //找到\n                //需要确定，返回的是哪个下标\n                if (mid <= high) {\n                    return mid;\n                } else {\n                    return high;\n                }\n            }\n        }\n        return -1;\n    }\n}\n\n```\n\n\n\n### 2.全排列\n\n```java\n    \n\t/** 完整代码如下：\n     * fullSort方法接收三个参数，数组arr，起始位置start，终止为止end，意思就是完成arr数组从start到end之间记录的全排列。\n     * 分两个步骤：\n     * （1）确定第一位的字符\n     * 数组arr从start到end的所有记录都可以出现在第一个位置，所以直接一个for循环，考虑了这所有的情况。在for循环中，swap方法就是交换i和start位置的数，保证当前i指向的记录出现在第一个位置，也就是start指向的位置\n     * （2）剩下的记录继续做全排列\n     * 这个就是一个递归函数的调用，只需要修改起始位置，也就是start+1，因为start的位置已经放了记录，所以只需要继续做从start+1到end的全排列即可\n     * 至于紧接着的一个swap方法是做什么的呢？因为数组传递的是地址，所以所有的修改对所有人都是共享的，因此为了保证每一次的交换不会对下一次的交换产生影响，要重新交换一下位置，也就是复原，不然对下一次的交换就有影响了\n     * 递归的终止条件就是当start==end，也就是只有一个记录需要做全排列，也就是到了最后一个记录，这就是全排列的一种情况，输入本次的记录，也就是数组arr即可。\n     *\n     * @param arr\n     * @param start\n     * @param end\n     */  \npublic static void fullSort(int arr[], int start, int end) {\n        //递归终止条件\n        if (start == end) {\n            for (int i : arr) {\n                System.out.print(i);\n            }\n            System.out.println();\n            return;\n        }\n        for (int i = start; i <= end; i++) {\n            swap(arr, i, start);\n            fullSort(arr, start + 1, end);\n            swap(arr, i, start);\n        }\n    }\n```\n\n### 3.分治算法\n\n**分治算法的基本步骤**\n\n\n\n分治法在每一层递归上都有三个步骤：\n\n1)分解：将原问题分解为若干个规模较小，相互独立，与原问题形式相同的子问题\n\n2)解决：若子问题规模较小而容易被解决则直接解，否则递归地解各个子问题\n\n3)合并：将各个子问题的解合并为原问题的解。\n\n常见的分治算法有汉诺塔和归并排序等\n\n```java\n//汉诺塔的移动的方法\n\t//使用分治算法\n\t\n\tpublic static void hanoiTower(int num, char a, char b, char c) {\n\t\t//如果只有一个盘\n\t\tif(num == 1) {\n\t\t\tSystem.out.println(\"第1个盘从 \" + a + \"->\" + c);\n\t\t} else {\n\t\t\t//如果我们有 n >= 2 情况，我们总是可以看做是两个盘 1.最下边的一个盘 2. 上面的所有盘\n\t\t\t//1. 先把 最上面的所有盘 A->B， 移动过程会使用到 c\n\t\t\thanoiTower(num - 1, a, c, b);\n\t\t\t//2. 把最下边的盘 A->C\n\t\t\tSystem.out.println(\"第\" + num + \"个盘从 \" + a + \"->\" + c);\n\t\t\t//3. 把B塔的所有盘 从 B->C , 移动过程使用到 a塔  \n\t\t\thanoiTower(num - 1, b, a, c);\n\t\t\t\n\t\t}\n\t}\n```\n\n### 4.动态规划\n\n**应用场景背包问题**\n\n\n\n背包问题：有一个背包，容量为4磅 ， 现有如下物品\n\n| **物品** | **重量** | **价格** |\n| -------- | -------- | -------- |\n| 吉他(G)  | 1        | 1500     |\n| 音响(S)  | 4        | 3000     |\n| 电脑(L)  | 3        | 2000     |\n\n1)要求达到的目标为装入的背包的总价值最大，并且重量不超出\n\n2)要求装入的物品不能重复\n\n| **物品** | **0** **磅** | **1磅** | **2磅** | **3磅** | **4磅**   |\n| -------- | ------------ | ------- | ------- | ------- | --------- |\n|          | 0            | 0       | 0       | 0       | 0         |\n| 吉他(G)  | 0            | 1500(G) | 1500(G) | 1500(G) | 1500(G)   |\n| 音响(S)  | 0            | 1500(G) | 1500(G) | 1500(G) | 3000(S)   |\n| 电脑(L)  | 0            | 1500(G) | 1500(G) | 2000(L) | 3500(L+G) |\n**思路分析和图解**\n算法的主要思想，利用动态规划来解决。每次遍历到的第i个物品，根据w[i]和v[i]来确定是否需要将该物品放入背包中。即对于给定的n个物品，设v[i]、w[i]分别为第i个物品的价值和重量，C为背包的容量。再令v[i][j]表示在前i个物品中能够装入容量为j的背包中的最大价值。则我们有下面的结果：\u000b\u000b(1)  v[i][0]=v[0][j]=0; //表示 填入表 第一行和第一列是0\n      (2) 当w[i]> j 时：v[i][j]=v[i-1][j]   // 当准备加入新增的商品的容量大于 当前背包的容量时，就直接使用上一个单元格的装入策略\n      (3) 当j>=w[i]时： v[i][j]=max{v[i-1][j], v[i]+v[i-1][j-w[i]]}  \n// 当 准备加入的新增的商品的容量小于等于当前背包的容量,\n// 装入的方式:\nv[i-1][j]： 就是上一个单元格的装入的最大值\nv[i] : 表示当前商品的价值 \nv[i-1][j-w[i]] ： 装入i-1商品，到剩余空间j-w[i]的最大值\n当j>=w[i]时： v[i][j]=max{v[i-1][j], v[i]+v[i-1][j-w[i]]} : \n\n```java\npackage algorithm.dynamic;\n\npublic class KnapsackProblem {\n    public static void main(String[] args) {\n        int[] w = {1, 4, 3};//物品的重量\n        int[] val = {1500, 3000, 2000}; //物品的价值\n        int m = 4; //背包的容量\n        int n = val.length; //物品的个数\n\n        //创建二维数组，\n        //v[i][j] 表示在前i个物品中能够装入容量为j的背包中的最大价值\n        int[][] v = new int[n + 1][m + 1];\n        //用来存放物品放入当前的情况记录到path\n        int[][] path = new int[n + 1][m + 1];\n\n        //初始化第一行和第一列, 这里在本程序中，可以不去处理，因为默认就是0\n        for (int i = 0; i < v.length; i++) {\n            v[i][0] = 0;//将第一列设置为0\n        }\n        for (int i = 0; i < v[0].length; i++) {\n            v[0][i] = 0;//将第一行设置0\n        }\n\n        //根据前面得到公式来动态规划处理\n        for (int i = 1; i < v.length; i++) { //不处理第一行 i是从1开始的\n            for (int j = 1; j < v[0].length; j++) {//不处理第一列, j是从1开始的\n                //公式\n                if (w[i - 1] > j) {\n                    v[i][j] = v[i - 1][j];\n                } else {\n//                    v[i][j] = Math.max(v[i - 1][j], val[i - 1] + v[i - 1][j - w[i - 1]]);\n                    if (v[i - 1][j] < val[i - 1] + v[i - 1][j - w[i - 1]]) {\n                        v[i][j] = val[i - 1] + v[i - 1][j - w[i - 1]];\n                        //把当前的情况记录到path\n                        path[i][j] = 1;\n                    } else {\n                        v[i][j] = v[i - 1][j];\n                    }\n                }\n            }\n        }\n\n        //输出一下v 看看目前的情况\n        for (int i = 0; i < v.length; i++) {\n            for (int j = 0; j < v[0].length; j++) {\n                System.out.print(v[i][j] + \" \");\n            }\n            System.out.println();\n        }\n\n        //输出一下path 看看目前的情况\n        for (int i = 0; i < v.length; i++) {\n            for (int j = 0; j < v[0].length; j++) {\n                System.out.print(path[i][j] + \" \");\n            }\n            System.out.println();\n        }\n\n        //动脑筋\n        int i = path.length - 1; //行的最大下标\n        int j = path[0].length - 1;  //列的最大下标\n        while (i > 0 && j > 0) {\n            if (path[i][j] == 1) {\n                System.out.printf(\"第%d个商品放入到背包\\n\", i);\n                j -= w[i - 1];\n            }\n            i--;\n        }\n//        while (i > 0 && j > 0) { //从path的最后开始找\n//            if (path[i][j] == 1) {\n//                System.out.printf(\"第%d个商品放入到背包\\n\", i);\n//                j -= w[i - 1]; //w[i-1]\n//            }\n//            i--;\n//        }\n    }\n}\n```\n\n\n\n### 5.kmp算法\n\n**应用场景**-字符串匹配问题\n\n字符串匹配问题：：\n\n1)有一个字符串 str1= \"\"硅硅谷 尚硅谷你尚硅 尚硅谷你尚硅谷你尚硅你好\"\"，和一个子串 str2=\"尚硅谷你尚硅你\"\n\n2)现在要判断 **str1** **是否含有** **str2**, 如果存在，就返回第一次出现的位置, 如果没有，则返回-1\n\n暴力匹配代码：\n\n```java\npackage algorithm.kmp;\n\npublic class ViolenceMatch {\n    public static void main(String[] args) {\n        String str1 = \"硅硅谷 尚硅谷你尚硅 尚硅谷你尚硅谷你尚硅你好\";\n        String str2 = \"尚硅谷你尚硅你\";\n        int index = violenceMatch(str1, str2);\n        System.out.println(\"index=\" + index);\n    }\n\n    // 暴力匹配算法实现\n    public static int violenceMatch(String str1, String str2) {\n        char[] s1 = str1.toCharArray();\n        char[] s2 = str2.toCharArray();\n        int s1Len = s1.length;\n        int s2Len = s2.length;\n\n        int i = 0; // i索引指向s1\n        int j = 0; // j索引指向s2\n\n        while ( i < s1Len && j < s2Len) {\n            if (s1[i] == s2[j]) {//匹配ok\n                i++;\n                j++;\n            } else { //没有匹配成功\n                //如果失配（即str1[i]! = str2[j]），令i = i - (j - 1)，j = 0。\n                i = i - (j - 1);\n                j = 0;\n            }\n        }\n        //判断是否匹配成功\n        if (j == s2Len) {\n            return i - j;\n        } else {\n            return -1;\n        }\n\n    }\n}\n\n```\n\n**KMP**算法介绍\n\n\n\n1)KMP是一个解决模式串在文本串是否出现过，如果出现过，最早出现的位置的经典算法\n\n2)Knuth-Morris-Pratt **字符串查找算法**，简称为 “KMP算法”，常用于在一个文本串S内查找一个模式串P 的出现位置，这个算法由Donald Knuth、Vaughan Pratt、James H. Morris三人于1977年联合发表，故取这3人的姓氏命名此算法.\n\n3)KMP方法算法就利用之前判断过信息，通过一个next数组，保存模式串中前后最长公共子序列的长度，每次回溯时，通过next数组找到，前面匹配过的位置，省去了大量的计算时间\n\n4)参考资料：[https://](https://www.cnblogs.com/ZuoAndFutureGirl/p/9028287.html)[www.cnblogs.com/ZuoAndFutureGirl/p/9028287.html](https://www.cnblogs.com/ZuoAndFutureGirl/p/9028287.html) \n\n**核心：**\n\n”部分匹配”的实质是，有时候，字符串头部和尾部会有重复。比如，”ABCDAB”之中有两个”AB”，那么它的”部分匹配值”就是2（”AB”的长度）。搜索词移动的时候，第一个”AB”向后移动 4 位（字符串长度-部分匹配值），就可以来到第二个”AB”的位置。 \n\n![img](数据结构整理/clip_image002.jpg)\n\n```java\npackage algorithm.kmp;\n\nimport java.util.Arrays;\n\npublic class KMPAlgorithm {\n    public static void main(String[] args) {\n        String str1 = \"BBC ABCDAB ABCDABCDABDE\"; // ABCDABD\n        String str2 = \"ABCDABD\"; // 0 0 0 0 1 2 0\n\n        int[] next = kmpNext(\"ABCDABD\"); //[0 0 0 0 1 2 0]\n        System.out.println(\"next=\" + Arrays.toString(next));\n\n        int index = kmpSearch(str1, str2, next);\n        System.out.println(\"index=\" + index); // 15了\n    }\n\n    private static int kmpSearch(String str1, String str2, int[] next) {\n        //遍历\n        for (int i = 0, j = 0; i < str1.length(); i++) {\n            //需要处理 str1.charAt(i) ！= str2.charAt(j), 去调整j的大小\n            //KMP算法核心点, 可以验证...\n            while (j > 0 && str1.charAt(i) != str2.charAt(j)) {\n                j = next[j - 1];\n            }\n\n            if (str1.charAt(i) == str2.charAt(j)) {\n                j++;\n            }\n            if (j == str2.length()) {\n                //获取起始索引(最后)\n                return i - j + 1;\n            }\n        }\n        return -1;\n    }\n\n    //获取到一个字符串(子串) 的部分匹配值表\n    private static int[] kmpNext(String dest) {\n        //创建一个next 数组保存部分匹配值\n        int[] next = new int[dest.length()];\n        next[0] = 0; //如果字符串是长度为1 部分匹配值就是0\n        for (int i = 1, j = 0; i < dest.length(); i++) {\n            //当dest.charAt(i) != dest.charAt(j) ，我们需要从next[j-1]获取新的j\n            //直到我们发现 有  dest.charAt(i) == dest.charAt(j)成立才退出\n            //这是kmp算法的核心点\n            while (j > 0 && dest.charAt(i) != dest.charAt(j)) {\n                j = next[j - 1];\n            }\n            //当dest.charAt(i) == dest.charAt(j) 满足时，部分匹配值就是+1\n            if (dest.charAt(i) == dest.charAt(j)) {\n                j++;\n            }\n            next[i] = j;\n        }\n        return next;\n    }\n}\n```\n\n \n\n### 6.贪心算法\n\n**应用场景**-集合覆盖问题\n\n假设存在下面需要付费的广播台，以及广播台信号可以覆盖的地区。 **如何选择最少的广播台**，让所有的地区都可以接收到信号\n\n| 广播台 | 覆盖地区               |\n| ------ | ---------------------- |\n| K1     | \"北京\", \"上海\", \"天津\" |\n| K2     | \"广州\", \"北京\", \"深圳\" |\n| K3     | \"成都\", \"上海\", \"杭州\" |\n| K4     | \"上海\", \"天津\"         |\n| K5     | \"杭州\", \"大连\"         |\n\n解决方案：\n\n1.穷举法 2<sup>n</sup>-1种可能\n\n2.贪心算法\n\n**贪心算法介绍**\n\n1)贪婪算法(贪心算法)是指在对问题进行求解时，在每一步选择中都采取最好或者最优(即最有利)的选择，从而希望能够导致结果是最好或者最优的算法\n\n2)贪婪算法所得到的结果**不一定是最优的结果(有时候会是最优解)**，但是都是相对近似(接近)最优解的结果\n\n**实现思路分析:** \n\n使用贪婪算法，效率高:\n\n目前并没有算法可以快速计算得到准备的值， 使用贪婪算法，则可以得到非常接近的解，并且效率高。选择策略上，因为需要覆盖全部地区的最小集合:\n\n1)遍历所有的广播电台, 找到一个覆盖了最多**未覆盖的地**区**的电台(此电台可能包含一些已覆盖的地区，但没有关系）\n\n2)将这个电台加入到一个集合中(比如ArrayList), 想办法把该电台覆盖的地区在下次比较时去掉。\n\n3)重复第1步直到覆盖了全部的地区\n\n```java\npackage algorithm.greedy;\n\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.HashSet;\n\npublic class GreedyAlgorithm {\n\n\tpublic static void main(String[] args) {\n\t\t//创建广播电台,放入到Map\n\t\tHashMap<String,HashSet<String>> broadcasts = new HashMap<String, HashSet<String>>();\n\t\t//将各个电台放入到broadcasts\n\t\tHashSet<String> hashSet1 = new HashSet<String>();\n\t\thashSet1.add(\"北京\");\n\t\thashSet1.add(\"上海\");\n\t\thashSet1.add(\"天津\");\n\t\t\n\t\tHashSet<String> hashSet2 = new HashSet<String>();\n\t\thashSet2.add(\"广州\");\n\t\thashSet2.add(\"北京\");\n\t\thashSet2.add(\"深圳\");\n\t\t\n\t\tHashSet<String> hashSet3 = new HashSet<String>();\n\t\thashSet3.add(\"成都\");\n\t\thashSet3.add(\"上海\");\n\t\thashSet3.add(\"杭州\");\n\t\t\n\t\t\n\t\tHashSet<String> hashSet4 = new HashSet<String>();\n\t\thashSet4.add(\"上海\");\n\t\thashSet4.add(\"天津\");\n\t\t\n\t\tHashSet<String> hashSet5 = new HashSet<String>();\n\t\thashSet5.add(\"杭州\");\n\t\thashSet5.add(\"大连\");\n\t\n\t\t//加入到map\n\t\tbroadcasts.put(\"K1\", hashSet1);\n\t\tbroadcasts.put(\"K2\", hashSet2);\n\t\tbroadcasts.put(\"K3\", hashSet3);\n\t\tbroadcasts.put(\"K4\", hashSet4);\n\t\tbroadcasts.put(\"K5\", hashSet5);\n\t\t\n\t\t//allAreas 存放所有的地区\n\t\tHashSet<String> allAreas = new HashSet<String>();\n\t\tallAreas.add(\"北京\");\n\t\tallAreas.add(\"上海\");\n\t\tallAreas.add(\"天津\");\n\t\tallAreas.add(\"广州\");\n\t\tallAreas.add(\"深圳\");\n\t\tallAreas.add(\"成都\");\n\t\tallAreas.add(\"杭州\");\n\t\tallAreas.add(\"大连\");\n\t\t\n\t\t//创建ArrayList, 存放选择的电台集合\n\t\tArrayList<String> selects = new ArrayList<String>();\n\t\t\n\t\t//定义一个临时的集合， 在遍历的过程中，存放遍历过程中的电台覆盖的地区和当前还没有覆盖的地区的交集\n\t\tHashSet<String> tempSet = new HashSet<String>();\n\t\t\n\t\t//定义给maxKey ， 保存在一次遍历过程中，能够覆盖最大未覆盖的地区对应的电台的key\n\t\t//如果maxKey 不为null , 则会加入到 selects\n\t\tString maxKey = null;\n\t\twhile(allAreas.size() != 0) { // 如果allAreas 不为0, 则表示还没有覆盖到所有的地区\n\t\t\t//每进行一次while,需要\n\t\t\tmaxKey = null;\n\t\t\t\n\t\t\t//遍历 broadcasts, 取出对应key\n\t\t\tfor(String key : broadcasts.keySet()) {\n\t\t\t\t//每进行一次for\n\t\t\t\ttempSet.clear();\n\t\t\t\t//当前这个key能够覆盖的地区\n\t\t\t\tHashSet<String> areas = broadcasts.get(key);\n\t\t\t\ttempSet.addAll(areas);\n\t\t\t\t//求出tempSet 和   allAreas 集合的交集, 交集会赋给 tempSet\n\t\t\t\ttempSet.retainAll(allAreas);\n\t\t\t\t//如果当前这个集合包含的未覆盖地区的数量，比maxKey指向的集合地区还多\n\t\t\t\t//就需要重置maxKey\n\t\t\t\t// tempSet.size() >broadcasts.get(maxKey).size()) 体现出贪心算法的特点,每次都选择最优的\n\t\t\t\tif(tempSet.size() > 0 && \n\t\t\t\t\t\t(maxKey == null || tempSet.size() >broadcasts.get(maxKey).size())){\n\t\t\t\t\tmaxKey = key;\n\t\t\t\t}\n\t\t\t}\n\t\t\t//maxKey != null, 就应该将maxKey 加入selects\n\t\t\tif(maxKey != null) {\n\t\t\t\tselects.add(maxKey);\n\t\t\t\t//将maxKey指向的广播电台覆盖的地区，从 allAreas 去掉\n\t\t\t\tallAreas.removeAll(broadcasts.get(maxKey));\n\t\t\t}\n\t\t\t\n\t\t}\n\t\t\n\t\tSystem.out.println(\"得到的选择结果是\" + selects);//[K1,K2,K3,K5]\n\t\t\n\t\t\n\t\t\n\t}\n\n}\n\n```\n\n\n\n### 7.普利姆算法\n\n**应用场景**-修路问题\n\n看一个应用场景和问题：2<sup>n</sup>\n\n![image-20210110111607853](数据结构整理/image-20210110111607853.png)\n\n1)有胜利乡有7个村庄(A, B, C, D, E, F, G) ，现在需要修路把7个村庄连通\n\n2)各个村庄的距离用边线表示(权) ，比如 A – B 距离 5公里\n\n3)问：如何修路保证各个村庄都能连通，并且总的修建公路总里程最短?\n\n思路: 将10条边，连接即可，但是总的里程数不是最小.\n\n**正确的思路**，就是尽可能的选择少的路线，并且每条路线最小，保证总里程数最少. \n\n**最小生成树:**\n\n![image-20210110114746786](数据结构整理/image-20210110114746786.png)\n\n修路问题本质就是就是最小生成树问题， 先介绍一下最小生成树(Minimum Cost Spanning Tree)，简称MST\n\n1)给定一个带权的无向连通图,如何选取一棵生成树,使树上所有**边上权的总和为最小**,这叫最小生成树 \n\n2)N个顶点，一定有N-1条边\n\n3)包含全部顶点\n\n4)N-1条边都在图中\n\n5)举例说明(如图:)\n\n求最小生成树的算法主要是**普里姆**算法和**克鲁斯卡尔**算法\n\n```java\npackage algorithm.prim;\n\n\nimport java.util.Arrays;\n\npublic class PrimAlgorithm {\n    public static void main(String[] args) {\n    //测试看看图是否创建ok\n        char[] data = new char[]{'A', 'B', 'C', 'D', 'E', 'F', 'G'};\n        int verxs = data.length;\n        //邻接矩阵的关系使用二维数组表示,10000这个大数，表示两个点不联通\n        int[][] weight = new int[][]{\n                {10000, 5, 7, 10000, 10000, 10000, 2},\n                {5, 10000, 10000, 9, 10000, 10000, 3},\n                {7, 10000, 10000, 10000, 8, 10000, 10000},\n                {10000, 9, 10000, 10000, 10000, 4, 10000},\n                {10000, 10000, 8, 10000, 10000, 5, 4},\n                {10000, 10000, 10000, 4, 5, 10000, 6},\n                {2, 3, 10000, 10000, 4, 6, 10000},};\n\n        //创建MGraph对象\n        MGraph graph = new MGraph(verxs);\n        MinTree minTree = new MinTree();\n        minTree.createGraph(graph, verxs, data, weight);\n        //输出\n        minTree.showGraph(graph);\n        minTree.prim(graph,1);\n    }\n}\n\n//创建最小生成树->村庄的图\nclass MinTree {\n    //创建图的邻接矩阵\n\n    /**\n     * @param graph  图对象\n     * @param verxs  图对应的顶点个数\n     * @param data   图的各个顶点的值\n     * @param weight 图的邻接矩阵\n     */\n    public void createGraph(MGraph graph, int verxs, char[] data, int[][] weight) {\n        int i, j;\n        for (i = 0; i < verxs; i++) { //顶点\n            graph.data[i] = data[i];\n            for (j = 0; j < verxs; j++) {\n                graph.weight[i][j] = weight[i][j];\n            }\n        }\n    }\n\n    //显示图的邻接矩阵\n    public void showGraph(MGraph graph) {\n        for (int[] link : graph.weight) {\n            System.out.println(Arrays.toString(link));\n        }\n    }\n\n    ///编写prim算法，得到最小生成树\n    /**\n     *\n     * @param graph 图\n     * @param v 表示从图的第几个顶点开始生成'A'->0 'B'->1...\n     */\n    public void prim(MGraph graph, int v) {\n        //visited[] 标记结点(顶点)是否被访问过\n        int visited[] = new int[graph.verxs];\n        //visited[] 默认元素的值都是0, 表示没有访问过\n//\t\tfor(int i =0; i <graph.verxs; i++) {\n//\t\t\tvisited[i] = 0;\n//\t\t}\n\n        //把当前这个结点标记为已访问\n        visited[v] = 1;\n        //h1 和 h2 记录两个顶点的下标\n        int h1 = -1;\n        int h2 = -1;\n        int minWeight = 10000;//将 minWeight 初始成一个大数，后面在遍历过程中，会被替换\n        for (int k = 1; k < graph.verxs; k++) {//因为有 graph.verxs顶点，普利姆算法结束后，有 graph.verxs-1边\n\n\n            //这个是确定每一次生成的子图 ，和哪个结点的距离最近\n            for (int i = 0; i < graph.verxs ; i++) {// i结点表示被访问过的结点\n                for(int j = 0; j< graph.verxs;j++) {//j结点表示还没有访问过的结点\n                    if(visited[i] == 1 && visited[j] == 0 && graph.weight[i][j] < minWeight) {\n                        //替换minWeight(寻找已经访问过的结点和未访问过的结点间的权值最小的边)\n                        minWeight = graph.weight[i][j];\n                        h1 = i;\n                        h2 = j;\n                    }\n                }\n\n            }\n            //找到一条边是最小\n            System.out.println(\"边<\" + graph.data[h1] + \",\" + graph.data[h2] + \"> 权值:\" + minWeight);\n            //将当前这个结点标记为已经访问\n            visited[h2] = 1;\n            //minWeight 重新设置为最大值 10000\n            minWeight = 10000;\n        }\n    }\n}\n\nclass MGraph {\n    int verxs; //表示图的节点个数\n    char[] data; //存放节点数据\n    int[][] weight; //存放边，就是我们的邻接矩阵\n\n    public MGraph(int verxs) {\n        this.verxs = verxs;\n        data = new char[verxs];\n        weight = new int[verxs][verxs];\n    }\n}\n\n```\n\n### 8.克鲁斯卡尔算法\n\n应用场景-公交站问题\n\n\n\n看一个应用场景和问题：\n\n![image-20210110115039736](数据结构整理/image-20210110115039736.png)\n\n1)某城市新增7个站点(A, B, C, D, E, F, G) ，现在需要修路把7个站点连通\n\n2)各个站点的距离用边线表示(权) ，比如 A – B 距离 12公里\n\n3)问：如何修路保证各个站点都能连通，并且总的修建公路总里程最短? \n\n\n\n**克鲁斯卡**尔算法介绍 \n\n1)克鲁斯卡尔(Kruskal)算法，是用来求加权连通图的最小生成树的算法。\n\n2)基本思想：按照权值从小到大的顺序选择n-1条边，并保证这n-1条边不构成回路\n\n3)具体做法：首先构造一个只含n个顶点的森林，然后依权值从小到大从连通网中选择边加入到森林中，并使森林中不产生回路，直至森林变成一棵树为止\n\n![image-20210110140634167](数据结构整理/image-20210110140634167.png)\n\n```java\npackage algorithm.kruskal;\n\nimport java.util.Arrays;\n\npublic class KruskalCase {\n\n\tprivate int edgeNum; //边的个数\n\tprivate char[] vertexs; //顶点数组\n\tprivate int[][] matrix; //邻接矩阵\n\t//使用 INF 表示两个顶点不能连通\n\tprivate static final int INF = Integer.MAX_VALUE;\n\t\n\tpublic static void main(String[] args) {\n\t\tchar[] vertexs = {'A', 'B', 'C', 'D', 'E', 'F', 'G'};\n\t\t//克鲁斯卡尔算法的邻接矩阵  \n\t      int matrix[][] = {\n\t      /*A*//*B*//*C*//*D*//*E*//*F*//*G*/\n\t/*A*/ {   0,  12, INF, INF, INF,  16,  14},\n\t/*B*/ {  12,   0,  10, INF, INF,   7, INF},\n\t/*C*/ { INF,  10,   0,   3,   5,   6, INF},\n\t/*D*/ { INF, INF,   3,   0,   4, INF, INF},\n\t/*E*/ { INF, INF,   5,   4,   0,   2,   8},\n\t/*F*/ {  16,   7,   6, INF,   2,   0,   9},\n\t/*G*/ {  14, INF, INF, INF,   8,   9,   0}}; \n\t      //大家可以在去测试其它的邻接矩阵，结果都可以得到最小生成树.\n\t      \n\t      //创建KruskalCase 对象实例\n\t      KruskalCase kruskalCase = new KruskalCase(vertexs, matrix);\n\t      //输出构建的\n\t      kruskalCase.print();\n\t      kruskalCase.kruskal();\n\t      \n\t}\n\t\n\t//构造器\n\tpublic KruskalCase(char[] vertexs, int[][] matrix) {\n\t\t//初始化顶点数和边的个数\n\t\tint vlen = vertexs.length;\n\t\t\n\t\t//初始化顶点, 复制拷贝的方式\n\t\tthis.vertexs = new char[vlen];\n\t\tfor(int i = 0; i < vertexs.length; i++) {\n\t\t\tthis.vertexs[i] = vertexs[i];\n\t\t}\n\t\t\n\t\t//初始化边, 使用的是复制拷贝的方式\n\t\tthis.matrix = new int[vlen][vlen];\n\t\tfor(int i = 0; i < vlen; i++) {\n\t\t\tfor(int j= 0; j < vlen; j++) {\n\t\t\t\tthis.matrix[i][j] = matrix[i][j];\n\t\t\t}\n\t\t}\n\t\t//统计边的条数\n\t\tfor(int i =0; i < vlen; i++) {\n\t\t\tfor(int j = i+1; j < vlen; j++) {\n\t\t\t\tif(this.matrix[i][j] != INF) {\n\t\t\t\t\tedgeNum++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t}\n\tpublic void kruskal() {\n\t\tint index = 0; //表示最后结果数组的索引\n\t\tint[] ends = new int[edgeNum]; //用于保存\"已有最小生成树\" 中的每个顶点在最小生成树中的终点\n\t\t//创建结果数组, 保存最后的最小生成树\n\t\tEData[] rets = new EData[edgeNum];\n\t\t\n\t\t//获取图中 所有的边的集合 ， 一共有12边\n\t\tEData[] edges = getEdges();\n\t\tSystem.out.println(\"图的边的集合=\" + Arrays.toString(edges) + \" 共\"+ edges.length); //12\n\t\t\n\t\t//按照边的权值大小进行排序(从小到大)\n\t\tsortEdges(edges);\n\t\t\n\t\t//遍历edges 数组，将边添加到最小生成树中时，判断是准备加入的边否形成了回路，如果没有，就加入 rets, 否则不能加入\n\t\tfor(int i=0; i < edgeNum; i++) {\n\t\t\t//获取到第i条边的第一个顶点(起点)\n\t\t\tint p1 = getPosition(edges[i].start); //p1=4\n\t\t\t//获取到第i条边的第2个顶点\n\t\t\tint p2 = getPosition(edges[i].end); //p2 = 5\n\t\t\t\n\t\t\t//获取p1这个顶点在已有最小生成树中的终点\n\t\t\tint m = getEnd(ends, p1); //m = 4\n\t\t\t//获取p2这个顶点在已有最小生成树中的终点\n\t\t\tint n = getEnd(ends, p2); // n = 5\n\t\t\t//是否构成回路\n\t\t\tif(m != n) { //没有构成回路\n\t\t\t\tends[m] = n; // 设置m 在\"已有最小生成树\"中的终点 <E,F> [0,0,0,0,5,0,0,0,0,0,0,0]\n\t\t\t\trets[index++] = edges[i]; //有一条边加入到rets数组\n\t\t\t}\n\t\t}\n\t\t//<E,F> <C,D> <D,E> <B,F> <E,G> <A,B>。\n\t\t//统计并打印 \"最小生成树\", 输出  rets\n\t\tSystem.out.println(\"最小生成树为\");\n\t\tfor(int i = 0; i < index; i++) {\n\t\t\tSystem.out.println(rets[i]);\n\t\t}\n\t\t\n\t\t\n\t}\n\t\n\t//打印邻接矩阵\n\tpublic void print() {\n\t\tSystem.out.println(\"邻接矩阵为: \\n\");\n\t\tfor(int i = 0; i < vertexs.length; i++) {\n\t\t\tfor(int j=0; j < vertexs.length; j++) {\n\t\t\t\tSystem.out.printf(\"%12d\", matrix[i][j]);\n\t\t\t}\n\t\t\tSystem.out.println();//换行\n\t\t}\n\t}\n\n\t/**\n\t * 功能：对边进行排序处理, 冒泡排序\n\t * @param edges 边的集合\n\t */\n\tprivate void sortEdges(EData[] edges) {\n\t\tfor(int i = 0; i < edges.length - 1; i++) {\n\t\t\tfor(int j = 0; j < edges.length - 1 - i; j++) {\n\t\t\t\tif(edges[j].weight > edges[j+1].weight) {//交换\n\t\t\t\t\tEData tmp = edges[j];\n\t\t\t\t\tedges[j] = edges[j+1];\n\t\t\t\t\tedges[j+1] = tmp;\n\t\t\t\t}\n\t\t\t}\n \t\t}\n\t}\n\t/**\n\t * \n\t * @param ch 顶点的值，比如'A','B'\n\t * @return 返回ch顶点对应的下标，如果找不到，返回-1\n\t */\n\tprivate int getPosition(char ch) {\n\t\tfor(int i = 0; i < vertexs.length; i++) {\n\t\t\tif(vertexs[i] == ch) {//找到\n\t\t\t\treturn i;\n\t\t\t}\n\t\t}\n\t\t//找不到,返回-1\n\t\treturn -1;\n\t}\n\t/**\n\t * 功能: 获取图中边，放到EData[] 数组中，后面我们需要遍历该数组\n\t * 是通过matrix 邻接矩阵来获取\n\t * EData[] 形式 [['A','B', 12], ['B','F',7], .....]\n\t * @return\n\t */\n\tprivate EData[] getEdges() {\n\t\tint index = 0;\n\t\tEData[] edges = new EData[edgeNum];\n\t\tfor(int i = 0; i < vertexs.length; i++) {\n\t\t\tfor(int j=i+1; j <vertexs.length; j++) {\n\t\t\t\tif(matrix[i][j] != INF) {\n\t\t\t\t\tedges[index++] = new EData(vertexs[i], vertexs[j], matrix[i][j]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn edges;\n\t}\n\t/**\n\t * 功能: 获取下标为i的顶点的终点(), 用于后面判断两个顶点的终点是否相同\n\t * @param ends ： 数组就是记录了各个顶点对应的终点是哪个,ends 数组是在遍历过程中，逐步形成\n\t * @param i : 表示传入的顶点对应的下标\n\t * @return 返回的就是 下标为i的这个顶点对应的终点的下标, 一会回头还有来理解\n\t */\n\tprivate int getEnd(int[] ends, int i) { // i = 4 [0,0,0,0,5,0,0,0,0,0,0,0]\n\t\twhile(ends[i] != 0) {\n\t\t\ti = ends[i];\n\t\t}\n\t\treturn i;\n\t}\n \n}\n\n//创建一个类EData ，它的对象实例就表示一条边\nclass EData {\n\tchar start; //边的一个点\n\tchar end; //边的另外一个点\n\tint weight; //边的权值\n\t//构造器\n\tpublic EData(char start, char end, int weight) {\n\t\tthis.start = start;\n\t\tthis.end = end;\n\t\tthis.weight = weight;\n\t}\n\t//重写toString, 便于输出边信息\n\t@Override\n\tpublic String toString() {\n\t\treturn \"EData [<\" + start + \", \" + end + \">= \" + weight + \"]\";\n\t}\n\t\n\t\n}\n\n```\n\n\n\n### 9.迪杰斯特拉算法\n\n应用场景最短路径问题\n\n看一应用场景和问题：\n\n![image-20210110141059564](数据结构整理/image-20210110141059564.png)\n\n1)战争时期，胜利乡有7个村庄(A, B, C, D, E, F, G) ，现在有六个邮差，从G点出发，需要分别把邮件分别送到 A, B, C , D, E, F 六个村庄\n\n2)各个村庄的距离用边线表示(权) ，比如 A – B 距离 5公里\n\n3)问：如何计算出G村庄到 其它各个村庄的最短距离? \n\n如果从其它点出发到各个点的最短距离又是多少?\n\n**迪杰斯特拉(Dijkstra)**算法介绍\n\n\n\n迪杰斯特拉(Dijkstra)算法是**典型最短路径算法**，用于计算一个结点到其他结点的最短路径。 它的主要特点是以起始点为中心向外层层扩展(**广度优先**搜索思想)，直到扩展到终点为止**。**\n\n迪杰斯特拉(Dijkstra)算法过程:\n\n设置发顶点为v，顶点集合V{v1,v2,vi...}，v到V中各顶点的距离构成距离集合Dis，Dis{d1,d2,di...}，Dis集合记录着v到图中各顶点的距离(到自身可以看作0，v到vi距离对应为di)\n\n1)从Dis中选择值最小的di并移出Dis集合，同时移出V集合中对应的顶点vi，此时的v到vi即为最短路径\n\n2)更新Dis集合，更新规则为：比较v到V集合中顶点的距离值，与v通过vi到V集合中顶点的距离值，保留值较小的一个(同时也应该更新顶点的前驱节点为vi，表明是通过vi到达的)\n\n3)重复执行两步骤，直到最短路径顶点为目标顶点即可结束\n\n\n\n```java\npackage com.atguigu.dijkstra;\n\nimport java.util.Arrays;\n\npublic class DijkstraAlgorithm {\n\n\tpublic static void main(String[] args) {\n\t\tchar[] vertex = { 'A', 'B', 'C', 'D', 'E', 'F', 'G' };\n\t\t//邻接矩阵\n\t\tint[][] matrix = new int[vertex.length][vertex.length];\n\t\tfinal int N = 65535;// 表示不可以连接\n\t\tmatrix[0]=new int[]{N,5,7,N,N,N,2};  \n        matrix[1]=new int[]{5,N,N,9,N,N,3};  \n        matrix[2]=new int[]{7,N,N,N,8,N,N};  \n        matrix[3]=new int[]{N,9,N,N,N,4,N};  \n        matrix[4]=new int[]{N,N,8,N,N,5,4};  \n        matrix[5]=new int[]{N,N,N,4,5,N,6};  \n        matrix[6]=new int[]{2,3,N,N,4,6,N};\n        //创建 Graph对象\n        Graph graph = new Graph(vertex, matrix);\n        //测试, 看看图的邻接矩阵是否ok\n        graph.showGraph();\n        //测试迪杰斯特拉算法\n        graph.dsj(2);//C\n        graph.showDijkstra();\n        \n        \n\t}\n\n}\n\nclass Graph {\n\tprivate char[] vertex; // 顶点数组\n\tprivate int[][] matrix; // 邻接矩阵\n\tprivate VisitedVertex vv; //已经访问的顶点的集合\n\n\t// 构造器\n\tpublic Graph(char[] vertex, int[][] matrix) {\n\t\tthis.vertex = vertex;\n\t\tthis.matrix = matrix;\n\t}\n\t\n\t//显示结果\n\tpublic void showDijkstra() {\n\t\tvv.show();\n\t}\n\n\t// 显示图\n\tpublic void showGraph() {\n\t\tfor (int[] link : matrix) {\n\t\t\tSystem.out.println(Arrays.toString(link));\n\t\t}\n\t}\n\t\n\t//迪杰斯特拉算法实现\n\t/**\n\t * \n\t * @param index 表示出发顶点对应的下标\n\t */\n\tpublic void dsj(int index) {\n\t\tvv = new VisitedVertex(vertex.length, index);\n\t\tupdate(index);//更新index顶点到周围顶点的距离和前驱顶点\n\t\tfor(int j = 1; j <vertex.length; j++) {\n\t\t\tindex = vv.updateArr();// 选择并返回新的访问顶点\n\t\t\tupdate(index); // 更新index顶点到周围顶点的距离和前驱顶点\n\t\t} \n\t}\n\t\n\t\n\t\n\t//更新index下标顶点到周围顶点的距离和周围顶点的前驱顶点,\n\tprivate void update(int index) {\n\t\tint len = 0;\n\t\t//根据遍历我们的邻接矩阵的  matrix[index]行\n\t\tfor(int j = 0; j < matrix[index].length; j++) {\n\t\t\t// len 含义是 : 出发顶点到index顶点的距离 + 从index顶点到j顶点的距离的和 \n\t\t\tlen = vv.getDis(index) + matrix[index][j];\n\t\t\t// 如果j顶点没有被访问过，并且 len 小于出发顶点到j顶点的距离，就需要更新\n\t\t\tif(!vv.in(j) && len < vv.getDis(j)) {\n\t\t\t\tvv.updatePre(j, index); //更新j顶点的前驱为index顶点\n\t\t\t\tvv.updateDis(j, len); //更新出发顶点到j顶点的距离\n\t\t\t}\n\t\t}\n\t}\n}\n\n// 已访问顶点集合\nclass VisitedVertex {\n\t// 记录各个顶点是否访问过 1表示访问过,0未访问,会动态更新\n\tpublic int[] already_arr;\n\t// 每个下标对应的值为前一个顶点下标, 会动态更新\n\tpublic int[] pre_visited;\n\t// 记录出发顶点到其他所有顶点的距离,比如G为出发顶点，就会记录G到其它顶点的距离，会动态更新，求的最短距离就会存放到dis\n\tpublic int[] dis;\n\t\n\t//构造器\n\t/**\n\t * \n\t * @param length :表示顶点的个数 \n\t * @param index: 出发顶点对应的下标, 比如G顶点，下标就是6\n\t */\n\tpublic VisitedVertex(int length, int index) {\n\t\tthis.already_arr = new int[length];\n\t\tthis.pre_visited = new int[length];\n\t\tthis.dis = new int[length];\n\t\t//初始化 dis数组\n\t\tArrays.fill(dis, 65535);\n\t\tthis.already_arr[index] = 1; //设置出发顶点被访问过\n\t\tthis.dis[index] = 0;//设置出发顶点的访问距离为0\n\t\t\t\t\n\t}\n\t/**\n\t * 功能: 判断index顶点是否被访问过\n\t * @param index\n\t * @return 如果访问过，就返回true, 否则访问false\n\t */\n\tpublic boolean in(int index) {\n\t\treturn already_arr[index] == 1;\n\t}\n\t\n\t/**\n\t * 功能: 更新出发顶点到index顶点的距离\n\t * @param index\n\t * @param len\n\t */\n\tpublic void updateDis(int index, int len) {\n\t\tdis[index] = len;\n\t}\n\t/**\n\t * 功能: 更新pre这个顶点的前驱顶点为index顶点\n\t * @param pre\n\t * @param index\n\t */\n\tpublic void updatePre(int pre, int index) {\n\t\tpre_visited[pre] = index;\n\t}\n\t/**\n\t * 功能:返回出发顶点到index顶点的距离\n\t * @param index\n\t */\n\tpublic int getDis(int index) {\n\t\treturn dis[index];\n\t}\n\t\n\t\n\t/**\n\t * 继续选择并返回新的访问顶点， 比如这里的G 完后，就是 A点作为新的访问顶点(注意不是出发顶点)\n\t * @return\n\t */\n\tpublic int updateArr() {\n\t\tint min = 65535, index = 0;\n\t\tfor(int i = 0; i < already_arr.length; i++) {\n\t\t\tif(already_arr[i] == 0 && dis[i] < min ) {\n\t\t\t\tmin = dis[i];\n\t\t\t\tindex = i;\n\t\t\t}\n\t\t}\n\t\t//更新 index 顶点被访问过\n\t\talready_arr[index] = 1;\n\t\treturn index;\n\t}\n\t\n\t//显示最后的结果\n\t//即将三个数组的情况输出\n\tpublic void show() {\n\t\t\n\t\tSystem.out.println(\"==========================\");\n\t\t//输出already_arr\n\t\tfor(int i : already_arr) {\n\t\t\tSystem.out.print(i + \" \");\n\t\t}\n\t\tSystem.out.println();\n\t\t//输出pre_visited\n\t\tfor(int i : pre_visited) {\n\t\t\tSystem.out.print(i + \" \");\n\t\t}\n\t\tSystem.out.println();\n\t\t//输出dis\n\t\tfor(int i : dis) {\n\t\t\tSystem.out.print(i + \" \");\n\t\t}\n\t\tSystem.out.println();\n\t\t//为了好看最后的最短距离，我们处理\n\t\tchar[] vertex = { 'A', 'B', 'C', 'D', 'E', 'F', 'G' };\n\t\tint count = 0;\n\t\tfor (int i : dis) {\n\t\t\tif (i != 65535) {\n\t\t\t\tSystem.out.print(vertex[count] + \"(\"+i+\") \");\n\t\t\t} else {\n\t\t\t\tSystem.out.println(\"N \");\n\t\t\t}\n\t\t\tcount++;\n\t\t}\n\t\tSystem.out.println();\n\t\t\n\t}\n\n}\n\n\n```\n\n\n\n### 10.弗洛伊德算法\n\n### 11.马踏棋盘算法\n\n","source":"_posts/数据结构整理.md","raw":"---\ntitle: 数据结构整理\ndate: 2021-01-01 22:32:07\ntags:\n- 数据结构\ncategories: \n- 复习\n---\n\n<!-- toc -->\n\n[TOC]\n\n\n\n## 前言\n\n​\t由于面试的时候数据结构在其占不可获取的地位，所以简单总结下数据结构相关知识，以便复习。\n\n<!--more-->\n\n## 一、队列\n\n**队列介绍**\n\n\n\n1.队列是一个有序列表，可以用**数组**或是**链表**来实现。\n\n2.遵循**先入先出**的原则。即：先存入队列的数据，要先取出。后存入的要后取出\n\n示意图：(使用数组模拟队列示意图)\n\n![image-20210101224039379](数据结构整理/image-20210101224039379.png)\n\n### 数组队列代码\n\n```java\npackage queue;\n\nimport java.util.Scanner;\n\npublic class ArrayQueueDemo {\n\n\tpublic static void main(String[] args) {\n\t\t//测试一把\n\t\t//创建一个队列\n\t\tArrayQueue queue = new ArrayQueue(3);\n\t\tchar key = ' '; //接收用户输入\n\t\tScanner scanner = new Scanner(System.in);//\n\t\tboolean loop = true;\n\t\t//输出一个菜单\n\t\twhile(loop) {\n\t\t\tSystem.out.println(\"s(show): 显示队列\");\n\t\t\tSystem.out.println(\"e(exit): 退出程序\");\n\t\t\tSystem.out.println(\"a(add): 添加数据到队列\");\n\t\t\tSystem.out.println(\"g(get): 从队列取出数据\");\n\t\t\tSystem.out.println(\"h(head): 查看队列头的数据\");\n\t\t\tkey = scanner.next().charAt(0);//接收一个字符\n\t\t\tswitch (key) {\n\t\t\tcase 's':\n\t\t\t\tqueue.showQueue();\n\t\t\t\tbreak;\n\t\t\tcase 'a':\n\t\t\t\tSystem.out.println(\"输出一个数\");\n\t\t\t\tint value = scanner.nextInt();\n\t\t\t\tqueue.addQueue(value);\n\t\t\t\tbreak;\n\t\t\tcase 'g': //取出数据\n\t\t\t\ttry {\n\t\t\t\t\tint res = queue.getQueue();\n\t\t\t\t\tSystem.out.printf(\"取出的数据是%d\\n\", res);\n\t\t\t\t} catch (Exception e) {\n\t\t\t\t\t// TODO: handle exception\n\t\t\t\t\tSystem.out.println(e.getMessage());\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'h': //查看队列头的数据\n\t\t\t\ttry {\n\t\t\t\t\tint res = queue.headQueue();\n\t\t\t\t\tSystem.out.printf(\"队列头的数据是%d\\n\", res);\n\t\t\t\t} catch (Exception e) {\n\t\t\t\t\t// TODO: handle exception\n\t\t\t\t\tSystem.out.println(e.getMessage());\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'e': //退出\n\t\t\t\tscanner.close();\n\t\t\t\tloop = false;\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t\n\t\tSystem.out.println(\"程序退出~~\");\n\t}\n\n}\n\n// 使用数组模拟队列-编写一个ArrayQueue类\nclass ArrayQueue {\n\tprivate int maxSize; // 表示数组的最大容量\n\tprivate int front; // 队列头\n\tprivate int rear; // 队列尾\n\tprivate int[] arr; // 该数据用于存放数据, 模拟队列\n\n\t// 创建队列的构造器\n\tpublic ArrayQueue(int arrMaxSize) {\n\t\tmaxSize = arrMaxSize;\n\t\tarr = new int[maxSize];\n\t\tfront = -1; // 指向队列头部，分析出front是指向队列头的前一个位置.\n\t\trear = -1; // 指向队列尾，指向队列尾的数据(即就是队列最后一个数据)\n\t}\n\n\t// 判断队列是否满\n\tpublic boolean isFull() {\n\t\treturn rear == maxSize - 1;\n\t}\n\n\t// 判断队列是否为空\n\tpublic boolean isEmpty() {\n\t\treturn rear == front;\n\t}\n\n\t// 添加数据到队列\n\tpublic void addQueue(int n) {\n\t\t// 判断队列是否满\n\t\tif (isFull()) {\n\t\t\tSystem.out.println(\"队列满，不能加入数据~\");\n\t\t\treturn;\n\t\t}\n\t\trear++; // 让rear 后移\n\t\tarr[rear] = n;\n\t}\n\n\t// 获取队列的数据, 出队列\n\tpublic int getQueue() {\n\t\t// 判断队列是否空\n\t\tif (isEmpty()) {\n\t\t\t// 通过抛出异常\n\t\t\tthrow new RuntimeException(\"队列空，不能取数据\");\n\t\t}\n\t\tfront++; // front后移\n\t\treturn arr[front];\n\n\t}\n\n\t// 显示队列的所有数据\n\tpublic void showQueue() {\n\t\t// 遍历\n\t\tif (isEmpty()) {\n\t\t\tSystem.out.println(\"队列空的，没有数据~~\");\n\t\t\treturn;\n\t\t}\n\t\tfor (int i = 0; i < arr.length; i++) {\n\t\t\tSystem.out.printf(\"arr[%d]=%d\\n\", i, arr[i]);\n\t\t}\n\t}\n\n\t// 显示队列的头数据， 注意不是取出数据\n\tpublic int headQueue() {\n\t\t// 判断\n\t\tif (isEmpty()) {\n\t\t\tthrow new RuntimeException(\"队列空的，没有数据~~\");\n\t\t}\n\t\treturn arr[front + 1];\n\t}\n}\n\n```\n\n### 数组模拟环形队列\n\n​\t对前面的数组模拟队列的优化，充分利用数组. \n 因此将数组看做是一个环形的。(通过取模的方\n 式来实现即可)\n\n```java\nclass CircleQueue {\n    private int maxSize;\n    private int[] arr; // 该数组存放数据，模拟队列\n    private int front; // 指向队列头部\n    private int rear; // 指向队列的尾部\n    public CircleArrayQueue(int arrMaxSize) {\n        maxSize = arrMaxSize;\n        arr = new int[maxSize];\n    } \n    public boolean isFull()  {\n        //尾索引的下一个为头索引时表示队列满，即将队列容量空出一个作为约定(!!!)\n        return (rear + 1) % maxSize == front; }\n\n    public boolean isEmpty()  {\n        this.tail == this.head }\n\n    public void addQueue(int n) {\n        if (isFull()) {\n            System.out.println(\"队列满，无法加入..\");\n            return;}\n        arr[rear] = n;\n        rear = (rear + 1) % maxSize;}  \n    public int getQueue() {\n        if (isEmpty()) {\n            throw new RuntimeException(\"队列空~\");}\n        int value = arr[front];\n        front = (front + 1) % maxSize;\n        return value;}\n    //计算队列有多个元素\n    public int size()  {\n        return (rear + maxSize - front) % maxSize;}}\n```\n\n## 二、链表\n\n链表是有序的列表，但是它在内存中是存储如下\n\n![image-20210101225223666](数据结构整理/image-20210101225223666.png)\n\n小结:\n\n1)链表是以节点的方式来存储,是链式存储\n\n2)每个节点包含 data 域， next 域：指向下一个节点.\n\n3)如图：发现链表的**各个节点不一定是连续存储**.\n\n4)链表分带头节点的链表和没有头节点的链表，根据实际的需求来确定\n\n### 单链表\n\n![image-20210101225427642](数据结构整理/image-20210101225427642.png)\n\n```java\n\n//定义SingleLinkedList 管理我们的英雄\nclass SingleLinkedList {\n    //先初始化一个头节点, 头节点不要动, 不存放具体的数据\n    private HeroNode head = new HeroNode(0, \"\", \"\");\n\n\n    //返回头节点\n    public HeroNode getHead() {\n        return head;\n    }\n\n    //添加节点到单向链表\n    //思路，当不考虑编号顺序时\n    //1. 找到当前链表的最后节点\n    //2. 将最后这个节点的next 指向 新的节点\n    public void add(HeroNode heroNode) {\n\n        //因为head节点不能动，因此我们需要一个辅助遍历 temp\n        HeroNode temp = head;\n        //遍历链表，找到最后\n        while (true) {\n            //找到链表的最后\n            if (temp.next == null) {//\n                break;\n            }\n            //如果没有找到最后, 将将temp后移\n            temp = temp.next;\n        }\n        //当退出while循环时，temp就指向了链表的最后\n        //将最后这个节点的next 指向 新的节点\n        temp.next = heroNode;\n\n    }\n\n    //第二种方式在添加英雄时，根据排名将英雄插入到指定位置\n    //(如果有这个排名，则添加失败，并给出提示)\n    public void addByOrder(HeroNode heroNode) {\n\t\t//因为头节点不能动，因此我们仍然通过一个辅助指针(变量)来帮助找到添加的位置\n\t\t//因为单链表，因为我们找的temp 是位于 添加位置的前一个节点，否则插入不了\n\t\tHeroNode temp = head;\n\t\tboolean flag = false; // flag标志添加的编号是否存在，默认为false\n\t\twhile(true) {\n\t\t\tif(temp.next == null) {//说明temp已经在链表的最后\n\t\t\t\tbreak; //\n\t\t\t}\n\t\t\tif(temp.next.no > heroNode.no) { //位置找到，就在temp的后面插入\n\t\t\t\tbreak;\n\t\t\t} else if (temp.next.no == heroNode.no) {//说明希望添加的heroNode的编号已然存在\n\n\t\t\t\tflag = true; //说明编号存在\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\ttemp = temp.next; //后移，遍历当前链表\n\t\t}\n\t\t//判断flag 的值\n\t\tif(flag) { //不能添加，说明编号存在\n\t\t\tSystem.out.printf(\"准备插入的英雄的编号 %d 已经存在了, 不能加入\\n\", heroNode.no);\n\t\t} else {\n\t\t\t//插入到链表中, temp的后面\n\t\t\theroNode.next = temp.next;\n\t\t\ttemp.next = heroNode;\n\t\t}\n    }\n\n    //修改节点的信息, 根据no编号来修改，即no编号不能改.\n    //说明\n    //1. 根据 newHeroNode 的 no 来修改即可\n    public void update(HeroNode newHeroNode) {\n        //判断是否空\n        if (head.next == null) {\n            System.out.println(\"链表为空~\");\n            return;\n        }\n        //找到需要修改的节点, 根据no编号\n        //定义一个辅助变量\n        HeroNode temp = head.next;\n        boolean flag = false; //表示是否找到该节点\n        while (true) {\n            if (temp == null) {\n                break; //已经遍历完链表\n            }\n            if (temp.no == newHeroNode.no) {\n                //找到\n                flag = true;\n                break;\n            }\n            temp = temp.next;\n        }\n        //根据flag 判断是否找到要修改的节点\n        if (flag) {\n            temp.name = newHeroNode.name;\n            temp.nickname = newHeroNode.nickname;\n        } else { //没有找到\n            System.out.printf(\"没有找到 编号 %d 的节点，不能修改\\n\", newHeroNode.no);\n        }\n\n\n    }\n\n    //删除节点\n    //思路\n    //1. head 不能动，因此我们需要一个temp辅助节点找到待删除节点的前一个节点\n    //2. 说明我们在比较时，是temp.next.no 和  需要删除的节点的no比较\n    public void del(int no) {\n        HeroNode temp = head;\n        boolean flag = false; // 标志是否找到待删除节点的\n        while (true) {\n            if (temp.next == null) { //已经到链表的最后\n                break;\n            }\n            if (temp.next.no == no) {\n                //找到的待删除节点的前一个节点temp\n                flag = true;\n                break;\n            }\n            temp = temp.next; //temp后移，遍历\n        }\n        //判断flag\n        if (flag) { //找到\n            //可以删除\n            temp.next = temp.next.next;\n        } else {\n            System.out.printf(\"要删除的 %d 节点不存在\\n\", no);\n        }\n    }\n\n    //显示链表[遍历]\n    public void list() {\n\t\t//判断链表是否为空\n\t\tif(head.next == null) {\n\t\t\tSystem.out.println(\"链表为空\");\n\t\t\treturn;\n\t\t}\n\t\t//因为头节点，不能动，因此我们需要一个辅助变量来遍历\n\t\tHeroNode temp = head.next;\n\t\twhile(true) {\n\t\t\t//判断是否到链表最后\n\t\t\tif(temp == null) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\t//输出节点的信息\n\t\t\tSystem.out.println(temp);\n\t\t\t//将temp后移， 一定小心\n\t\t\ttemp = temp.next;\n\t\t}\n    }\n}\n\n//定义HeroNode ， 每个HeroNode 对象就是一个节点\nclass HeroNode {\n    public int no;\n    public String name;\n    public String nickname;\n    public HeroNode next; //指向下一个节点\n\n    //构造器\n    public HeroNode(int no, String name, String nickname) {\n        this.no = no;\n        this.name = name;\n        this.nickname = nickname;\n    }\n\n    //为了显示方法，我们重新toString\n    @Override\n    public String toString() {\n        return \"HeroNode [no=\" + no + \", name=\" + name + \", nickname=\" + nickname + \"]\";\n    }\n\n}\n\n```\n\n#### 1.求单链表的有效节点个数\n\n```java\n //方法：获取到单链表的节点的个数(如果是带头结点的链表，需求不统计头节点)\n\n    /**\n     * @param head 链表的头节点\n     * @return 返回的就是有效节点的个数\n     */\n    public static int getLength(HeroNode head) {\n\t\tif(head.next == null) { //空链表\n\t\t\treturn 0;\n\t\t}\n\t\tint length = 0;\n\t\t//定义一个辅助的变量, 这里我们没有统计头节点\n\t\tHeroNode cur = head.next;\n\t\twhile(cur != null) {\n\t\t\tlength++;\n\t\t\tcur = cur.next; //遍历\n\t\t}\n\t\treturn length;\n    }\n```\n\n#### 2.查找单链表中的倒数第k个结点 \n\n```java\n\t//查找单链表中的倒数第k个结点 【新浪面试题】\n    //思路\n    //1. 编写一个方法，接收head节点，同时接收一个index\n    //2. index 表示是倒数第index个节点\n    //3. 先把链表从头到尾遍历，得到链表的总的长度 getLength\n    //4. 得到size 后，我们从链表的第一个开始遍历 (size-index)个，就可以得到\n    //5. 如果找到了，则返回该节点，否则返回nulll\n//判断如果链表为空，返回null\n\t\tif(head.next == null) {\n\t\t\treturn null;//没有找到\n\t\t}\n\t\t//第一个遍历得到链表的长度(节点个数)\n\t\tint size = getLength(head);\n\t\t//第二次遍历  size-index 位置，就是我们倒数的第K个节点\n\t\t//先做一个index的校验\n\t\tif(index <=0 || index > size) {\n\t\t\treturn null;\n\t\t}\n\t\t//定义给辅助变量， for 循环定位到倒数的index\n\t\tHeroNode cur = head.next; //3 // 3 - 1 = 2\n\t\tfor(int i =0; i< size - index; i++) {\n\t\t\tcur = cur.next;\n\t\t}\n\t\treturn cur;\n\t\t}\n```\n\n#### 3.单链表的反转\n\n```java\n  //将单链表反转\n    public static void reversetList(HeroNode head) {\n        //如果当前链表为空，或者只有一个节点，无需反转，直接返回\n        if (head.next == null || head.next.next == null) {\n            return;\n        }\n\n        //定义一个辅助的指针(变量)，帮助我们遍历原来的链表\n        HeroNode cur = head.next;\n        HeroNode next = null;// 指向当前节点[cur]的下一个节点\n        HeroNode reverseHead = new HeroNode(0, \"\", \"\");\n        //遍历原来的链表，每遍历一个节点，就将其取出，并放在新的链表reverseHead 的最前端\n        //动脑筋\n        while (cur != null) {\n            next = cur.next;//先暂时保存当前节点的下一个节点，因为后面需要使用\n            cur.next = reverseHead.next;//将cur的下一个节点指向新的链表的最前端\n            reverseHead.next = cur; //将cur 连接到新的链表上\n            cur = next;//让cur后移\n        }\n        //将head.next 指向 reverseHead.next , 实现单链表的反转\n        head.next = reverseHead.next;\n    }\n```\n\n#### 4.从尾到头打印单链表\n\n```java\n //方式2：\n    //可以利用栈这个数据结构，将各个节点压入到栈中，然后利用栈的先进后出的特点，就实现了逆序打印的效果\n    public static void reversePrint(HeroNode head) {\n\t\tif(head.next == null) {\n\t\t\treturn;//空链表，不能打印\n\t\t}\n\t\t//创建要给一个栈，将各个节点压入栈\n\t\tStack<HeroNode> stack = new Stack<HeroNode>();\n\t\tHeroNode cur = head.next;\n\t\t//将链表的所有节点压入栈\n\t\twhile(cur != null) {\n\t\t\tstack.push(cur);\n\t\t\tcur = cur.next; //cur后移，这样就可以压入下一个节点\n\t\t}\n\t\t//将栈中的节点进行打印,pop 出栈\n\t\twhile (stack.size() > 0) {\n\t\t\tSystem.out.println(stack.pop()); //stack的特点是先进后出\n\t\t}\n\t}\n```\n\n\n\n### 双端链表\n\n```java\n// 创建一个双向链表的类\nclass DoubleLinkedList {\n\n    // 先初始化一个头节点, 头节点不要动, 不存放具体的数据\n    private HeroNode2 head = new HeroNode2(0, \"\", \"\");\n\n    // 返回头节点\n    public HeroNode2 getHead() {\n        return head;\n    }\n\n    // 遍历双向链表的方法\n    // 显示链表[遍历]\n    public void list() {\n        // 判断链表是否为空\n        if (head.next == null) {\n            System.out.println(\"链表为空\");\n            return;\n        }\n        // 因为头节点，不能动，因此我们需要一个辅助变量来遍历\n        HeroNode2 temp = head.next;\n        while (true) {\n            // 判断是否到链表最后\n            if (temp == null) {\n                break;\n            }\n            // 输出节点的信息\n            System.out.println(temp);\n            // 将temp后移， 一定小心\n            temp = temp.next;\n        }\n    }\n\n\n    public void addByorder(HeroNode2 heroNode) {\n        HeroNode2 temp = head;\n        Boolean flag = false;\n        while (true) {\n            if (temp.next == null) {\n                break;\n            }\n            if (temp.next.no > heroNode.no) {\n                break;\n            } else if (temp.next.no == heroNode.no) {\n                flag = true;\n                break;\n            }\n            temp = temp.next;\n        }\n        if (flag) {\n            System.out.printf(\"准备插入的英雄的编号 %d 已经存在了, 不能加入\\n\", heroNode.no);\n        } else {\n            //大坑，需要先将temp.next保存起来防止结构变动影响pre指针\n            HeroNode2 s1 = temp.next;\n            heroNode.next = temp.next;\n            temp.next = heroNode;\n\n            heroNode.pre = temp;\n            if (s1 != null)\n                s1.pre = heroNode;\n\n        }\n    }\n\n    // 添加一个节点到双向链表的最后.\n    public void add(HeroNode2 heroNode) {\n\n        // 因为head节点不能动，因此我们需要一个辅助遍历 temp\n        HeroNode2 temp = head;\n        // 遍历链表，找到最后\n        while (true) {\n            // 找到链表的最后\n            if (temp.next == null) {//\n                break;\n            }\n            // 如果没有找到最后, 将将temp后移\n            temp = temp.next;\n        }\n        // 当退出while循环时，temp就指向了链表的最后\n        // 形成一个双向链表\n        temp.next = heroNode;\n        heroNode.pre = temp;\n    }\n\n    // 修改一个节点的内容, 可以看到双向链表的节点内容修改和单向链表一样\n    // 只是 节点类型改成 HeroNode2\n    public void update(HeroNode2 newHeroNode) {\n        // 判断是否空\n        if (head.next == null) {\n            System.out.println(\"链表为空~\");\n            return;\n        }\n        // 找到需要修改的节点, 根据no编号\n        // 定义一个辅助变量\n        HeroNode2 temp = head.next;\n        boolean flag = false; // 表示是否找到该节点\n        while (true) {\n            if (temp == null) {\n                break; // 已经遍历完链表\n            }\n            if (temp.no == newHeroNode.no) {\n                // 找到\n                flag = true;\n                break;\n            }\n            temp = temp.next;\n        }\n        // 根据flag 判断是否找到要修改的节点\n        if (flag) {\n            temp.name = newHeroNode.name;\n            temp.nickname = newHeroNode.nickname;\n        } else { // 没有找到\n            System.out.printf(\"没有找到 编号 %d 的节点，不能修改\\n\", newHeroNode.no);\n        }\n    }\n\n    // 从双向链表中删除一个节点,\n    // 说明\n    // 1 对于双向链表，我们可以直接找到要删除的这个节点\n    // 2 找到后，自我删除即可\n    public void del(int no) {\n\n        // 判断当前链表是否为空\n        if (head.next == null) {// 空链表\n            System.out.println(\"链表为空，无法删除\");\n            return;\n        }\n\n        HeroNode2 temp = head.next; // 辅助变量(指针)\n        boolean flag = false; // 标志是否找到待删除节点的\n        while (true) {\n            if (temp == null) { // 已经到链表的最后\n                break;\n            }\n            if (temp.no == no) {\n                // 找到的待删除节点的前一个节点temp\n                flag = true;\n                break;\n            }\n            temp = temp.next; // temp后移，遍历\n        }\n        // 判断flag\n        if (flag) { // 找到\n            // 可以删除\n            // temp.next = temp.next.next;[单向链表]\n            temp.pre.next = temp.next;\n            // 这里我们的代码有问题?\n            // 如果是最后一个节点，就不需要执行下面这句话，否则出现空指针\n            if (temp.next != null) {\n                temp.next.pre = temp.pre;\n            }\n        } else {\n            System.out.printf(\"要删除的 %d 节点不存在\\n\", no);\n        }\n    }\n\n}\n\n// 定义HeroNode2 ， 每个HeroNode 对象就是一个节点\nclass HeroNode2 {\n    public int no;\n    public String name;\n    public String nickname;\n    public HeroNode2 next; // 指向下一个节点, 默认为null\n    public HeroNode2 pre; // 指向前一个节点, 默认为null\n    // 构造器\n\n    public HeroNode2(int no, String name, String nickname) {\n        this.no = no;\n        this.name = name;\n        this.nickname = nickname;\n    }\n\n    // 为了显示方法，我们重新toString\n    @Override\n    public String toString() {\n        return \"HeroNode [no=\" + no + \", name=\" + name + \", nickname=\" + nickname + \"]\";\n    }\n\n}\n\n```\n\n### 单向环形链表\n\n#### Josephu 问题\n\nJosephu 问题为：设编号为1，2，… n的n个人围坐一圈，约定编号为k（1<=k<=n）的人从1开始报数，数到m 的那个人出列，它的下一位又从1开始报数，数到m的那个人又出列，依次类推，直到所有人出列为止，由此产生一个出队编号的序列。\n\n\n\n**提示**\n\n用一个不带头结点的循环链表来处理Josephu 问题：先构成一个有n个结点的单循环链表，然后由k结点起从1开始计数，计到m时，对应结点从链表中删除，然后再从被删除结点的下一个结点又从1开始计数，直到最后一个结点从链表中删除算法结束。\n\n单向环形列表代码\n\n```java\n// 创建一个环形的单向链表\nclass CircleSingleLinkedList {\n    // 创建一个first节点,当前没有编号\n    private Boy first = null;\n\n    // 添加小孩节点，构建成一个环形的链表\n    public void addBoy(int nums) {\n        // nums 做一个数据校验\n        if (nums < 1) {\n            System.out.println(\"nums的值不正确\");\n            return;\n        }\n        Boy curBoy = null; //辅助指针，帮助构建环形链表\n        //使用for来创建我们的环形链表\n        for (int i = 1; i <= nums; i++) {\n            //根据编号，创建小孩节点\n            Boy boy = new Boy(i);\n            //如果是第一个小孩\n            if (i == 1) {\n                first = boy;\n                first.setNext(first); //构成环\n                curBoy = first; //\n            } else {\n                curBoy.setNext(boy);\n                boy.setNext(first);\n                curBoy = boy;\n            }\n        }\n    }\n\n    //遍历当前的环形链表\n    public void showBoy() {\n        //判断链表是否为空\n        if (first == null) {\n            System.out.println(\"没有任何小孩~~~\");\n            return;\n        }\n        // 因为first不能动，因此我们仍然使用一个辅助指针完成遍历\n        Boy curBoy = first;\n        while (true) {\n            System.out.printf(\"小孩的编号 %d \\n\", curBoy.getNo());\n            if (curBoy.getNext() == first) {// 说明已经遍历完毕\n                break;\n            }\n            curBoy = curBoy.getNext(); // curBoy后移\n        }\n    }\n\n\n    //根据用户的输入，计算出小孩出圈的顺序\n\n    /**\n     * @param startNo  表示从第几个小孩开始数数\n     * @param countNum 表示数几下\n     * @param nums     表示最初有多少小孩在圈中\n     */\n    public void countBoy(int startNo, int countNum, int nums) {\n        // 先对数据进行校验\n        if (first == null || startNo < 1 || startNo > nums) {\n            System.out.println(\"参数输入有误， 请重新输入\");\n            return;\n        }\n        // 创建要给辅助指针,帮助完成小孩出圈\n        Boy helper = first;\n        // 需求创建一个辅助指针(变量) helper , 事先应该指向环形链表的最后这个节点\n        while (true) {\n            if (helper.getNext() == first) {// 说明helper指向最后小孩节点\n                break;\n            }\n            helper = helper.getNext();\n        }\n        //小孩报数前，先让 first 和  helper 移动 k - 1次\n        for (int j = 0; j < startNo - 1; j++) {\n            first = first.getNext();\n            helper = helper.getNext();\n        }\n        //当小孩报数时，让first 和 helper 指针同时 的移动  m  - 1 次, 然后出圈\n        //这里是一个循环操作，知道圈中只有一个节点\n        while (true) {\n            if (helper == first) {\n                break;\n            }\n            //让 first 和 helper 指针同时 的移动 countNum - 1\n            for(int j = 0; j < countNum - 1; j++) {\n                first = first.getNext();\n                helper = helper.getNext();\n            }\n            //这时first指向的节点，就是要出圈的小孩节点\n            System.out.printf(\"小孩%d出圈\\n\", first.getNo());\n            //这时将first指向的小孩节点出圈\n            first = first.getNext();\n            helper.setNext(first); //\n        }\n        System.out.printf(\"最后留在圈中的小孩编号%d \\n\", first.getNo());\n    }\n}\n\n// 创建一个By类，表示一个节点\nclass Boy {\n    private int no;// 编号\n    private Boy next; // 指向下一个节点,默认null\n\n    public Boy(int no) {\n        this.no = no;\n    }\n\n    public int getNo() {\n        return no;\n    }\n\n    public void setNo(int no) {\n        this.no = no;\n    }\n\n    public Boy getNext() {\n        return next;\n    }\n\n    public void setNext(Boy next) {\n        this.next = next;\n    }\n\n}\n```\n\n## 三、栈\n\n栈的介绍：\n\n1)栈的英文为(stack)\n\n2)栈是一个**先入后出**(FILO-First In Last Out)的有序列表。\n\n3)栈(stack)是限制线性表中元素的插入和删除**只能在线性表的同一端**进行的一种特殊线性表。允许插入和删除的一端，为变化的一端，称为**栈顶**(Top)，另一端为固定的一端，称为**栈底**(Bottom)。\n\n4)根据栈的定义可知，最先放入栈中元素在栈底，最后放入的元素在栈顶，而删除元素刚好相反，最后放入的元素最先删除，最先放入的元素最后删除\n\n5)出栈(pop)和入栈(push)的概念(如图所示)\n\n![image-20210102132901736](数据结构整理/image-20210102132901736.png)![image-20210102132915893](数据结构整理/image-20210102132915893.png)\n\n栈的应用场景：\n\n1)子程序的调用：在跳往子程序前，会先将下个指令的地址存到堆栈中，直到子程序执行完后再将地址取出，以回到原来的程序中。  \n\n2)处理递归调用：和子程序的调用类似，只是除了储存下一个指令的地址外，也将参数、区域变量等数据存入堆栈中。\n\n3)表达式的转换[中缀表达式转后缀表达式]与求值(实际解决)。\n\n4)二叉树的遍历。\n\n5)图形的深度优先(depth一first)搜索法。\n\n```java\n//定义一个 ArrayStack 表示栈\nclass ArrayStack {\n\tprivate int maxSize; // 栈的大小\n\tprivate int[] stack; // 数组，数组模拟栈，数据就放在该数组\n\tprivate int top = -1;// top表示栈顶，初始化为-1\n\t\n\t//构造器\n\tpublic ArrayStack(int maxSize) {\n\t\tthis.maxSize = maxSize;\n\t\tstack = new int[this.maxSize];\n\t}\n\t\n\t//栈满\n\tpublic boolean isFull() {\n\t\treturn top == maxSize - 1;\n\t}\n\t//栈空\n\tpublic boolean isEmpty() {\n\t\treturn top == -1;\n\t}\n\t//入栈-push\n\tpublic void push(int value) {\n\t\t//先判断栈是否满\n\t\tif(isFull()) {\n\t\t\tSystem.out.println(\"栈满\");\n\t\t\treturn;\n\t\t}\n\t\ttop++;\n\t\tstack[top] = value;\n\t}\n\t//出栈-pop, 将栈顶的数据返回\n\tpublic int pop() {\n\t\t//先判断栈是否空\n\t\tif(isEmpty()) {\n\t\t\t//抛出异常\n\t\t\tthrow new RuntimeException(\"栈空，没有数据~\");\n\t\t}\n\t\tint value = stack[top];\n\t\ttop--;\n\t\treturn value;\n\t}\n\t//显示栈的情况[遍历栈]， 遍历时，需要从栈顶开始显示数据\n\tpublic void list() {\n\t\tif(isEmpty()) {\n\t\t\tSystem.out.println(\"栈空，没有数据~~\");\n\t\t\treturn;\n\t\t}\n\t\t//需要从栈顶开始显示数据\n\t\tfor(int i = top; i >= 0 ; i--) {\n\t\t\tSystem.out.printf(\"stack[%d]=%d\\n\", i, stack[i]);\n\t\t}\n\t}\n\t\n}\n\n```\n\n## 四、递归\n\n简单的说: 递归就是方法自己调用自己,每次调用时传入不同的变量，递归有助于编程者解决复杂的问题,同时可以让代码变得简洁。\n\n阶乘问题:\n\n```java\n\t//阶乘问题\n\tpublic static int factorial(int n) {\n\t\tif (n == 1) { \n\t\t\treturn 1;\n\t\t} else {\n\t\t\treturn factorial(n - 1) * n; // 1 * 2 * 3\n\t\t}\n\t}\n```\n迷宫问题：\n```java\npackage recursion;\n\npublic class MiGong {\n\n    public static void main(String[] args) {\n        // 先创建一个二维数组，模拟迷宫\n        // 地图\n        int[][] map = new int[8][7];\n        // 使用1 表示墙\n        // 上下全部置为1\n        for (int i = 0; i < 7; i++) {\n            map[0][i] = 1;\n            map[7][i] = 1;\n        }\n\n        // 左右全部置为1\n        for (int i = 0; i < 8; i++) {\n            map[i][0] = 1;\n            map[i][6] = 1;\n        }\n        //设置挡板, 1 表示\n        map[3][1] = 1;\n        map[3][2] = 1;\n//\t\tmap[1][2] = 1;\n//\t\tmap[2][2] = 1;\n\n        // 输出地图\n        System.out.println(\"地图的情况\");\n        for (int i = 0; i < 8; i++) {\n            for (int j = 0; j < 7; j++) {\n                System.out.print(map[i][j] + \" \");\n            }\n            System.out.println();\n        }\n\n        //使用递归回溯给小球找路\n        setWay(map, 1, 1);\n        //setWay2(map, 1, 1);\n\n        //输出新的地图, 小球走过，并标识过的递归\n        System.out.println(\"小球走过，并标识过的 地图的情况\");\n        for (int i = 0; i < 8; i++) {\n            for (int j = 0; j < 7; j++) {\n                System.out.print(map[i][j] + \" \");\n            }\n            System.out.println();\n        }\n\n    }\n\n    //使用递归回溯来给小球找路\n    //说明\n    //1. map 表示地图\n    //2. i,j 表示从地图的哪个位置开始出发 (1,1)\n    //3. 如果小球能到 map[6][5] 位置，则说明通路找到.\n    //4. 约定： 当map[i][j] 为 0 表示该点没有走过 当为 1 表示墙  ； 2 表示通路可以走 ； 3 表示该点已经走过，但是走不通\n    //5. 在走迷宫时，需要确定一个策略(方法) 下->右->上->左 , 如果该点走不通，再回溯\n\n    /**\n     * @param map 表示地图\n     * @param i   从哪个位置开始找\n     * @param j\n     * @return 如果找到通路，就返回true, 否则返回false\n     */\n    public static boolean setWay(int[][] map, int i, int j) {\n        if (map[6][5] == 2) {\n            return true;\n        } else {\n            if (map[i][j] == 0) { //如果当前这个点还没有走过\n                //按照策略 下->右->上->左\n                map[i][j] = 2; // 假定该点是可以走通.\n                if (setWay(map, i + 1, j)) {\n                    return true;\n                } else if (setWay(map, i, j + 1)) {\n                    return true;\n                } else if (setWay(map, i - 1, j)) {\n                    return true;\n                } else if (setWay(map, i, j - 1)) {\n                    return true;\n                } else {\n                    //说明该点是走不通，是死路\n                    map[i][j] = 3;\n                    return false;\n                }\n            } else {\n                return false;\n            }\n        }\n    }\n\n    //修改找路的策略，改成 上->右->下->左\n    public static boolean setWay2(int[][] map, int i, int j) {\n        if (map[6][5] == 2) { // 通路已经找到ok\n            return true;\n        } else {\n            if (map[i][j] == 0) { //如果当前这个点还没有走过\n                //按照策略 上->右->下->左\n                map[i][j] = 2; // 假定该点是可以走通.\n                if (setWay2(map, i - 1, j)) {//向上走\n                    return true;\n                } else if (setWay2(map, i, j + 1)) { //向右走\n                    return true;\n                } else if (setWay2(map, i + 1, j)) { //向下\n                    return true;\n                } else if (setWay2(map, i, j - 1)) { // 向左走\n                    return true;\n                } else {\n                    //说明该点是走不通，是死路\n                    map[i][j] = 3;\n                    return false;\n                }\n            } else { // 如果map[i][j] != 0 , 可能是 1， 2， 3\n                return false;\n            }\n        }\n    }\n\n}\n\n```\n\n八皇后问题：\n\n​\t八皇后问题，是一个古老而著名的问题，是**回溯算法的典型案例**。该问题是国际西洋棋棋手马克斯·贝瑟尔于1848年提出：在8×8格的国际象棋上摆放八个皇后，使其不能互相攻击，即：任意两个皇后都不能处于同一行、同一列或同一斜线上，问有多少种摆法。【92】\n\n```java\npackage recursion;\n\npublic class Queen8 {\n\n    //定义一个max表示共有多少个皇后\n    int max = 8;\n    //定义数组array, 保存皇后放置位置的结果,比如 arr = {0 , 4, 7, 5, 2, 6, 1, 3}\n    int[] array = new int[max];\n    static int count = 0;\n    static int judgeCount = 0;\n\n    public static void main(String[] args) {\n        //测试一把 ， 8皇后是否正确\n        Queen8 queen8 = new Queen8();\n        queen8.check(0);\n        System.out.printf(\"一共有%d解法\", count);\n        System.out.printf(\"一共判断冲突的次数%d次\", judgeCount); // 1.5w\n\n    }\n\n    //编写一个方法，放置第n个皇后\n    //特别注意： check 是 每一次递归时，进入到check中都有  for(int i = 0; i < max; i++)，因此会有回溯\n    private void check(int n) {\n        if (n == max) {  //n = 8 , 其实8个皇后就既然放好\n            print();\n            return;\n        }\n\n        //依次放入皇后，并判断是否冲突\n        for (int i = 0; i < max; i++) {\n            //先把当前这个皇后 n , 放到该行的第1列\n            array[n] = i;\n            //判断当放置第n个皇后到i列时，是否冲突\n            if (judge(n)) { // 不冲突\n                //接着放n+1个皇后,即开始递归\n                check(n + 1); //\n            }\n            //如果冲突，就继续执行 array[n] = i; 即将第n个皇后，放置在本行得 后移的一个位置\n        }\n    }\n\n    //查看当我们放置第n个皇后，就去检查该皇后是否和前面已经摆放的皇后冲突\n    private boolean judge(int n) {\n        //说明\n        //1.array[i] == array[n] 表示判断第n个皇后是否和前面的n-1个皇后在同一列\n        //2.Math.abs(array[n] - array[i]) 表示判断第n个皇后和第i个皇后是否再同一斜线\n        // n = 1  放置第 2列 1 n = 1 array[1] = 1\n        // Math.abs(1-0) == 1  Math.abs(array[n] - array[i]) = Math.abs(1-0) = 1\n        //3. 判断是否在同一行, 没有必要，n 每次都在递增\n        judgeCount++;\n        for (int i = 0; i < n; i++) {\n            if (array[i] == array[n] || Math.abs(n - i) == Math.abs(array[n] - array[i])) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    //写一个方法，可以将皇后摆放的位置输出\n    private void print() {\n        count++;\n        for (int i = 0; i < array.length; i++) {\n            System.out.print(array[i] + \" \");\n        }\n        System.out.println();\n    }\n}\n\n```\n\n## 五、算法的时间复杂度及空间复杂度\n\n**时间复杂度**\n\n1)一般情况下，算法中的基本操作语句的重复执行次数是问题规模n的某个函数，用T(n)表示，若有某个辅助函数f(n)，使得当n趋近于无穷大时，T(n) / f(n) 的极限值为不等于零的常数，则称f(n)是T(n)的同数量级函数。记作 T(n)=Ｏ( f(n) )，称Ｏ( f(n) ) 为算法的渐进时间复杂度，简称时间复杂度。\n\n2)T(n) 不同，但时间复杂度可能相同。 如：T(n)=n²+7n+6 与 T(n)=3n²+2n+2 它们的T(n) 不同，但时间复杂度相同，都为O(n²)。\n\n3)计算时间复杂度的方法：\n\n​\t•用常数1代替运行时间中的所有加法常数 T(n)=n²+7n+6  => T(n)=n²+7n+1\n\n​\t•修改后的运行次数函数中，只保留最高阶项 T(n)=n²+7n+1 => T(n) = n²\n\n​\t•去除最高阶项的系数 T(n) = n² => T(n) = n² => O(n²)\n\n**1/常见的算法的时间复杂度**\n\n1)常数阶O(1)\n\n2)对数阶O(**log2n**)\n\n3)线性阶O(n)\n\n4)线性对数阶O(n**log2n**)\n\n5)平方阶O(n^2)\n\n6)立方阶O(n^3)\n\n7)k次方阶O(n^k)\n\n8)指数阶O(2^n)\n\n![image-20210102141112949](数据结构整理/image-20210102141112949.png)\n\n**说明**：\n\n•常见的算法时间复杂度由小到大依次为：Ο(1)＜Ο(log2n)＜Ο(n)＜Ο(nlog2n)＜Ο(n2)＜Ο(n3)＜Ο(nk) ＜Ο(2n) ，随着问题规模n的不断增大，上述时间复杂度不断增大，算法的执行效率越低\n\n•从图中可见，我们应该尽可能避免使用指数阶的算法\n\n\n\n### 1)常数阶O(1)\n\n无论代码执行了多少行，只要是没有循环等复杂结构，那这个代码的时间复杂度就都是O(1)\n\n![image-20210102141307586](数据结构整理/image-20210102141307586.png)\n\n上述代码在执行的时候，它消耗的时候并不随着某个变量的增长而增长，那么无论这类代码有多长，即使有几万几十万行，都可以用O(1)来表示它的时间复杂度。\n\n\n\n**常见的时间复杂度**\n\n### 2)对数阶O(log2<sup>n</sup>)\n\n注：\n\n![image-20210102141540407](数据结构整理/image-20210102141540407.png)\n\n![image-20210102141434749](数据结构整理/image-20210102141434749.png)\n\n**说明**：在while循环里面，每次都将 i 乘以 2，乘完之后，i 距离 n 就越来越近了。假设循环x次之后，i 就大于 2 了，此时这个循环就退出了，也就是说 2 的 x 次方等于 n，那么 x = log2^n也就是说当循环 log2^n 次以后，这个代码就结束了。因此这个代码的时间复杂度为：O(log2^n) 。 O(log2^n) 的这个2 时间上是根据代码变化的，i = i * 3 ，则是 O(log3^n)。\n\n\n\n### 3)线性阶O(n)\n\n![image-20210102141959933](数据结构整理/image-20210102141959933.png)\n\n**说明**：这段代码，for循环里面的代码会执行n遍，因此它消耗的时间是随着n的变化而变化的，因此这类代码都可以用O(n)来表示它的时间复杂度\n\n### 4)线性对数阶O(nlogN)\n\n![image-20210102142138277](数据结构整理/image-20210102142138277.png)\n\n**说明**：线性对数阶O(nlogN) 其实非常容易理解，将时间复杂度为O(logn)的代码循环N遍的话，那么它的时间复杂度就是 n * O(logN)，也就是了O(nlogN)\n\n### 5)平方阶O(n²)\n\n![image-20210102163741163](数据结构整理/image-20210102163741163.png)\n\n**说明**：平方阶O(n²) 就更容易理解了，如果把 O(n) 的代码再嵌套循环一遍，它的时间复杂度就是 O(n²)，这段代码其实就是嵌套了2层n循环，它的时间复杂度就是 O(n*n)，即 O(n²) 如果将其中一层循环的n改成m，那它的时间复杂度就变成了 O(m*n)\n\n### 6)立方阶O(n³)**、**K次方阶O(n^k)\n\n**说明**：参考上面的O(n²) 去理解就好了，O(n³)相当于三层n循环，其它的类似\n\n\n\n---\n\n\n\n**算法的空间复杂度:**\n\n基本介绍\n\n1)类似于时间复杂度的讨论，一个算法的空间复杂度(Space Complexity)定义为该算法所耗费的存储空间，它也是问题规模n的函数。\n\n2)空间复杂度(Space Complexity)是对一个算法在运行过程中临时占用存储空间大小的量度。有的算法需要占用的临时工作单元数与解决问题的规模n有关，它随着n的增大而增大，当n较大时，将占用较多的存储单元，例如快速排序和归并排序算法就属于这种情况\n\n3)在做算法分析时，主要讨论的是时间复杂度。从用户使用体验上看，更看重的程序执行的速度。一些缓存产品(redis, memcache)和算法(基数排序)本质就是用空间换时间.\n\n\n\n\n\n## 六、排序\n\n### 1.冒泡排序\n\n```java\n   public static void bubbleSort(int[] arr) {\n        int temp = 0;\n        Boolean flag = false;\n        for (int i = 0; i < arr.length - 1; i++) {\n            for (int j = 0; j < arr.length - 1 - i; j++) {\n                if(arr[j] > arr[j+1]){\n                    flag = true;\n                    temp = arr[j];\n                    arr[j] = arr[j+1];\n                    arr[j+1] = temp;\n                }\n            }\n            if(!flag){\n                break;\n            }else{\n                flag = false;\n            }\n        }\n    }\n```\n\n\n\n### 2.选择排序\n\n```java\npublic static void selectSort(int[] arr) {\n        for (int i = 0; i < arr.length-1; i++) {\n            int min = arr[i];\n            int minIndex  = i;\n            for (int j = i + 1; j < arr.length; j++) {\n                if (min>arr[j]){\n                    min=arr[j];\n                    minIndex = j;\n                }\n            }\n            if(minIndex != i){\n                arr[minIndex] = arr[i];\n                arr[i] = min;\n            }\n\n        }\n    }\n```\n\n\n\n### 3.插入排序\n\n​\t插入排序（Insertion Sorting）的**基本思想**是：把n个待排序的元素看成为一个有序表和一个无序表，开始时有序表中只包含一个元素，无序表中包含有n-1个元素，排序过程中每次从无序表中取出第一个元素，把它的排序码依次与有序表元素的排序码进行比较，将它插入到有序表中的适当位置，使之成为新的有序表。\n\n```java\n  /**\n     * 插入排序最开始为1个元素的有序列表，和n-1的无序列表\n     *\n     * @param arr\n     */\n    public static void insertSort(int[] arr) {\n        int insertIndex = 0; //记录待插入排序元素的索引\n        int insertValue = 0; //记录待插入的元素的值\n        //index=0的元素看作一个元素的有序列表，从1开始为待插入的元素\n        for (int i = 1; i < arr.length; i++) {\n            insertIndex = i;\n            insertValue = arr[i];\n            //待插入值和前面的元素比较找到需要插入的位置\n            //insertIndex > 0保证索引不越界\n            while (insertIndex - 1 > 0 && insertValue < arr[insertIndex - 1]) {\n                arr[insertIndex] = arr[insertIndex - 1]; //往后移\n                insertIndex--;\n            }\n            if (i != insertIndex) {\n                arr[insertIndex] = insertValue;\n            }\n        }\n    }\n```\n\n\n\n### 4.希尔排序\n\n希尔排序是希尔（Donald Shell）于1959年提出的一种排序算法。希尔排序也是一种**插入排序**，它是简单插入排序经过改进之后的一个**更高效的版本**，也称为缩小增量排序。\n\n![image-20210102193620447](数据结构整理/image-20210102193620447.png)\n\n```java\npublic static void shellSort(int[] arr) {\n        //step:步长\n        int insertValue = 0; //记录待插入的元素的值\n        int insertIndex = 0;\n        for (int step = arr.length / 2; step > 0; step /= 2) {\n           // System.out.println(step);\n            //插入排序\n            for (int i = step; i < arr.length; i++) {\n                insertValue = arr[i];\n                //insertIndex - step >= 0\n                for (insertIndex = i; insertIndex - step >= 0 && arr[insertIndex - step] > insertValue; insertIndex -= step) {\n                    arr[insertIndex] = arr[insertIndex - step];\n                }\n                if (insertIndex != i) {\n                    arr[insertIndex] = insertValue;\n                }\n\n            }\n        }\n    }\n```\n\n\n\n### 5.快速排序\n\n​\t快速排序（Quicksort）是对冒泡排序的一种改进。基本思想是：通过一趟排序将要排序的数据分割成独立的两部分，其中一部分的所有数据都比另外一部分的所有数据都要小，然后再按此方法对这两部分数据分别进行快速排序，整个排序过程可以递归进行，以此达到整个数据变成有序序列\n\n![image-20210102194545635](数据结构整理/image-20210102194545635.png)\n\n```java\n  public static void quickSort(int[] arr, int low, int high) {\n        int i, j, temp, t;\n        if (low < high) {\n            i = low;\n            j = high;\n            // temp就是基准位\n            temp = arr[i];\n\n            while (i < j) {\n                // 先看右边，依次往左递减\n                while (temp <= arr[j] && i < j) {\n                    j--;\n                }\n                // 再看左边，依次往右递增\n                while (temp >= arr[i] && i < j) {\n                    i++;\n                }\n                // 如果满足条件则交换\n                if (i < j) {\n                    t = arr[j];\n                    arr[j] = arr[i];\n                    arr[i] = t;\n                }\n\n            }\n            // 这里i == j\n            // 最后将基准为与i和j相等位置的数字交换\n            arr[low] = arr[i];\n            arr[i] = temp;\n            // 递归调用左半数组\n            quickSort(arr, low, i - 1);\n            // 递归调用右半数组\n            quickSort(arr, i + 1, high);\n        }\n    }\n```\n\n\n\n### 6.基数排序\n\n1)将所有待比较数值统一为同样的数位长度，数位较短的数前面补零。然后，从最低位开始，依次进行一次排序。这样从最低位排序一直到最高位排序完成以后, 数列就变成一个有序序列。\n\n2)这样说明，比较难理解，下面我们看一个图文解释，理解基数排序的步骤\n\n**基数排序图文说明**\n\n将数组 {53, 3, 542, 748, 14, 214} 使用基数排序, 进行升序排序。\n\n![image-20210102200322572](数据结构整理/image-20210102200322572.png)\n\n![image-20210102200443841](数据结构整理/image-20210102200443841.png)\n\n![image-20210102200539559](数据结构整理/image-20210102200539559.png)\n\n```java\n//基数排序方法\n\tpublic static void radixSort(int[] arr) {\n\t\t\n\t\t//根据前面的推导过程，我们可以得到最终的基数排序代码\n\t\t\n\t\t//1. 得到数组中最大的数的位数\n\t\tint max = arr[0]; //假设第一数就是最大数\n\t\tfor(int i = 1; i < arr.length; i++) {\n\t\t\tif (arr[i] > max) {\n\t\t\t\tmax = arr[i];\n\t\t\t}\n\t\t}\n\t\t//得到最大数是几位数\n\t\tint maxLength = (max + \"\").length();\n\t\t\n\t\t\n\t\t//定义一个二维数组，表示10个桶, 每个桶就是一个一维数组\n\t\t//说明\n\t\t//1. 二维数组包含10个一维数组\n\t\t//2. 为了防止在放入数的时候，数据溢出，则每个一维数组(桶)，大小定为arr.length\n\t\t//3. 名明确，基数排序是使用空间换时间的经典算法\n\t\tint[][] bucket = new int[10][arr.length];\n\t\t\n\t\t//为了记录每个桶中，实际存放了多少个数据,我们定义一个一维数组来记录各个桶的每次放入的数据个数\n\t\t//可以这里理解\n\t\t//比如：bucketElementCounts[0] , 记录的就是  bucket[0] 桶的放入数据个数\n\t\tint[] bucketElementCounts = new int[10];\n\t\t\n\t\t\n\t\t//这里我们使用循环将代码处理\n\t\t\n\t\tfor(int i = 0 , n = 1; i < maxLength; i++, n *= 10) {\n\t\t\t//(针对每个元素的对应位进行排序处理)， 第一次是个位，第二次是十位，第三次是百位..\n\t\t\tfor(int j = 0; j < arr.length; j++) {\n\t\t\t\t//取出每个元素的对应位的值\n\t\t\t\tint digitOfElement = arr[j] / n % 10;\n\t\t\t\t//放入到对应的桶中\n\t\t\t\tbucket[digitOfElement][bucketElementCounts[digitOfElement]] = arr[j];\n\t\t\t\tbucketElementCounts[digitOfElement]++;\n\t\t\t}\n\t\t\t//按照这个桶的顺序(一维数组的下标依次取出数据，放入原来数组)\n\t\t\tint index = 0;\n\t\t\t//遍历每一桶，并将桶中是数据，放入到原数组\n\t\t\tfor(int k = 0; k < bucketElementCounts.length; k++) {\n\t\t\t\t//如果桶中，有数据，我们才放入到原数组\n\t\t\t\tif(bucketElementCounts[k] != 0) {\n\t\t\t\t\t//循环该桶即第k个桶(即第k个一维数组), 放入\n\t\t\t\t\tfor(int l = 0; l < bucketElementCounts[k]; l++) {\n\t\t\t\t\t\t//取出元素放入到arr\n\t\t\t\t\t\tarr[index++] = bucket[k][l];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t//第i+1轮处理后，需要将每个 bucketElementCounts[k] = 0 ！！！！\n\t\t\t\tbucketElementCounts[k] = 0;\n\t\t\t\t\n\t\t\t}\n\t\t\t//System.out.println(\"第\"+(i+1)+\"轮，对个位的排序处理 arr =\" + Arrays.toString(arr));\n\t\t\t\n\t\t}\n```\n\n\n\n### 7.归并排序\n\n![image-20210102202017455](数据结构整理/image-20210102202017455.png)\n\n```java\n/**\n     * https://baijiahao.baidu.com/s?id=1631406377431334840&wfr=spider&for=pc&isFailFlag=1\n     * 归并排序介绍\n     * <p>\n     * 归并排序（MERGE-SORT）是建立在归并操作上的一种有效的排序算法，该算法是采用分治法（Divide and Conquer）的一个非常典型的应用。将已有序的子序列合并，得到完全有序的序列；即先使每个子序列有序，再使子序列段间有序。若将两个有序表合并成一个有序表，称为二路归并。\n     * <p>\n     * 归并排序原理\n     * <p>\n     * 归并排序在字面意思上已经简要显示出了他的核心原理，即递归再合并。\n     * <p>\n     * 我们举个例子，将两个有序数组合并成一个有序数组，如下图。\n     * 4 7 9       1 3 8\n     * |           |\n     * 4和1进行比较，1<4,将1取出来放在新的数组中{1}\n     * 4 7 9         3 8\n     * |             |\n     * 4和3进行比较，3<4，将3取出来放在新的数组中{1，3}\n     * 4 7 9           8\n     * |               |\n     * 4和8比较，4<8，将4取出来放在新的数组中{1，3，4}\n     * 7 9           8\n     * |             |\n     * 7和8比较，4<8，将7取出来放在新的数组中{1，3，4，7}\n     * 9           8\n     * |           |\n     * 9和8比较，4<8，将8取出来放在新的数组中{1，3，4，7，8}\n     * 9\n     * |\n     * 只剩一个9，插入到新数组后得到有序数组{1，3，4，7，8，9}\n     * <p>\n     * 合并数组\n     * 现在我们来学习归并排序的步骤，我们给定一个无序数组{9, 2, 6, 3, 5, 7, 10, 11}\n     * <p>\n     * 首先我们对它递归进行二分操作\n     * 9   2   6   3 | 5   7   10   11\n     * 9   2 | 6   3 | 5   7 | 10   11\n     * 9 | 2 | 6 | 3 | 5 | 7 | 10 | 11\n     * <p>\n     * 二分递归\n     * 不断递归直至每个分组中都只有一个元素，即每个分组都是一个有序数组，不过只有一个元素一定是有序的。\n     * <p>\n     * 下面进行向上递归合并，如下图。\n     * 9 | 2 | 6 | 3 | 5 | 7 | 10 | 11\n     * 2   9 | 3   6 | 5   7 | 10   11\n     * 2   3   6   9 | 5   7   10   11\n     * 2   3   5   6   7   9   10   11\n     * <p>\n     * <p>\n     * 递归合并\n     * 经过递归合并，我们得到有序数组{2,3,5,6,7,9,10,11}。\n     * <p>\n     * 功能：合并子序列\n     *\n     * @param a\n     * @param left\n     * @param mid\n     * @param right\n     */\n    public static void merge(int[] a, int left, int mid, int right) {\n        int[] tmp = new int[a.length];// 辅助数组\n        int p1 = left, p2 = mid + 1, k = left;// p1、p2是检测指针，k是存放指针\n\n        //System.out.println(\"a:\" + Arrays.toString(a));\n        // 对比左右两个数组并将较小的数先放到辅助数组\n        while (p1 <= mid && p2 <= right) {\n            if (a[p1] <= a[p2])\n                tmp[k++] = a[p1++];\n            else\n                tmp[k++] = a[p2++];\n        }\n\n\n        while (p1 <= mid)\n            tmp[k++] = a[p1++];//將左边剩余一个或多个元素放入temp中，剩餘的元素是合并序列中最大的值\n        while (p2 <= right)\n            tmp[k++] = a[p2++];//同上\n\n        // 复制回原素组\n        for (int i = left; i <= right; i++)\n            a[i] = tmp[i];\n    }\n\n public void mergeSort(int[] a, int start, int end) {\n        if (start < end) {// 当子序列中只有一个元素时结束递归\n            int mid = (start + end) / 2;// 划分子序列\n            mergeSort(a, start, mid);// 对左侧子序列进行递归排序\n            mergeSort(a, mid + 1, end);// 对右侧子序列进行递归排序\n            merge(a, start, mid, end);// 合并\n        }\n    }\n```\n\n\n\n### 8.堆排序\n\n1)堆排序是利用**堆**这种数据结构而设计的一种排序算法，堆排序是一种**选择排序，**它的最坏，最好，平均时间复杂度均为O(nlogn)，它也是不稳定排序。\n\n2)堆是具有以下性质的完全二叉树：每个结点的值都大于或等于其左右孩子结点的值，称为大顶堆, **注****意** : 没有要求结点的左孩子的值和右孩子的值的大小关系。\n\n3)每个结点的值都小于或等于其左右孩子结点的值，称为小顶堆\n\n4)大顶堆举例说明\n\n大顶堆用于升序排序，小顶堆用于降序排序\n\n![image-20210102203535568](数据结构整理/image-20210102203535568.png)\n\n![image-20210102203605120](数据结构整理/image-20210102203605120.png)\n\n```java\n static void HeapAdjust(int[] a, int start, int len) {\n        //这里的start表示树节点（非叶子节点）\n        int temp, j;\n        temp = a[start];\n        for (j = 2 * start + 1; j < len; j = j * 2 + 1) { /* 从index最大的有孩子的节点开始筛选，堆排 */\n            if (j + 1 < len && a[j] < a[j + 1]) /* 是index=j的元素为较大的元素 */\n                j++;\n            if (a[j] > temp) {\n                a[start] = a[j]; /* 将较大元素赋值给父节点 */\n                start = j;\n            } else {\n                break;\n            }\n        }\n        //循环结束后，可能剩下的一个元素填入对应的位置\n        a[start] = temp;\n    }\n\n    static void swap(int a[], int low, int high) {\n        int temp = a[low];\n        a[low] = a[high];\n        a[high] = temp;\n    }\n\n static void heapSort(int[] arr) {\n        int i;\n      //（arr.length-1） / 2 - 1为最后一个非叶子节点索引\n        for (i = (arr.length-1) / 2 - 1; i >= 0; i--) { /* 把a[]构造成一个大顶堆 */\n            HeapAdjust(arr, i, arr.length);\n        }\n        for (i = arr.length - 1; i > 0; i--) {\n            swap(arr, 0, i); /* 交换堆顶最大元素和堆尾元素 */\n            HeapAdjust(arr, 0, i); /* 把交换后的堆a[0,i-1]，再次构造成大顶顶，使堆顶元素为最大值 */\n        }\n    }\n```\n\n**各排序之间对比**：\n\n![image-20210102170510025](数据结构整理/image-20210102170510025.png)\n\n**相关术语解释：**\n\n1)**稳定**：如果a原本在b前面，而a=b，排序之后a仍然在b的前面；\n\n2)**不稳定**：如果a原本在b的前面，而a=b，排序之后a可能会出现在b的后面；\n\n3)**内排序**：所有排序操作都在内存中完成；\n\n4)**外排序**：由于数据太大，因此把数据放在磁盘中，而排序通过磁盘和内存的数据传输才能进行；\n\n5)**时间复杂度**： 一个算法执行所耗费的时间。\n\n6)**空间复杂度**：运行完一个程序所需内存的大小。\n\n7)**n**: 数据规模\n\n8)**k**: “桶”的个数\n\n9)**In-place**:  不占用额外内存\n\n10)**Out-place**:占用额外内存\n\n## 七、哈希表\n\n```java\npackage hashtable;\n\nimport java.util.Scanner;\n\npublic class HashTabDemo {\n\n\tpublic static void main(String[] args) {\n\t\t\n\t\t//创建哈希表\n\t\tHashTab hashTab = new HashTab(7);\n\t\t\n\t\t//写一个简单的菜单\n\t\tString key = \"\";\n\t\tScanner scanner = new Scanner(System.in);\n\t\twhile(true) {\n\t\t\tSystem.out.println(\"add:  添加雇员\");\n\t\t\tSystem.out.println(\"list: 显示雇员\");\n\t\t\tSystem.out.println(\"find: 查找雇员\");\n\t\t\tSystem.out.println(\"exit: 退出系统\");\n\t\t\t\n\t\t\tkey = scanner.next();\n\t\t\tswitch (key) {\n\t\t\tcase \"add\":\n\t\t\t\tSystem.out.println(\"输入id\");\n\t\t\t\tint id = scanner.nextInt();\n\t\t\t\tSystem.out.println(\"输入名字\");\n\t\t\t\tString name = scanner.next();\n\t\t\t\t//创建 雇员\n\t\t\t\tEmp emp = new Emp(id, name);\n\t\t\t\thashTab.add(emp);\n\t\t\t\tbreak;\n\t\t\tcase \"list\":\n\t\t\t\thashTab.list();\n\t\t\t\tbreak;\n\t\t\tcase \"find\":\n\t\t\t\tSystem.out.println(\"请输入要查找的id\");\n\t\t\t\tid = scanner.nextInt();\n\t\t\t\thashTab.findEmpById(id);\n\t\t\t\tbreak;\n\t\t\tcase \"exit\":\n\t\t\t\tscanner.close();\n\t\t\t\tSystem.exit(0);\n\t\t\tdefault:\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t\n\t}\n\n}\n\n//创建HashTab 管理多条链表\nclass HashTab {\n\tprivate EmpLinkedList[] empLinkedListArray;\n\tprivate int size; //表示有多少条链表\n\t\n\t//构造器\n\tpublic HashTab(int size) {\n\t\tthis.size = size;\n\t\t//初始化empLinkedListArray\n\t\tempLinkedListArray = new EmpLinkedList[size];\n\t\t//？留一个坑, 这时不要分别初始化每个链表\n\t\tfor(int i = 0; i < size; i++) {\n\t\t\tempLinkedListArray[i] = new EmpLinkedList();\n\t\t}\n\t}\n\t\n\t//添加雇员\n\tpublic void add(Emp emp) {\n\t\t//根据员工的id ,得到该员工应当添加到哪条链表\n\t\tint empLinkedListNO = hashFun(emp.id);\n\t\t//将emp 添加到对应的链表中\n\t\tempLinkedListArray[empLinkedListNO].add(emp);\n\t\t\n\t}\n\t//遍历所有的链表,遍历hashtab\n\tpublic void list() {\n\t\tfor(int i = 0; i < size; i++) {\n\t\t\tempLinkedListArray[i].list(i);\n\t\t}\n\t}\n\t\n\t//根据输入的id,查找雇员\n\tpublic void findEmpById(int id) {\n\t\t//使用散列函数确定到哪条链表查找\n\t\tint empLinkedListNO = hashFun(id);\n\t\tEmp emp = empLinkedListArray[empLinkedListNO].findEmpById(id);\n\t\tif(emp != null) {//找到\n\t\t\tSystem.out.printf(\"在第%d条链表中找到 雇员 id = %d\\n\", (empLinkedListNO + 1), id);\n\t\t}else{\n\t\t\tSystem.out.println(\"在哈希表中，没有找到该雇员~\");\n\t\t}\n\t}\n\t\n\t//编写散列函数, 使用一个简单取模法\n\tpublic int hashFun(int id) {\n\t\treturn id % size;\n\t}\n\t\n\t\n}\n\n//表示一个雇员\nclass Emp {\n\tpublic int id;\n\tpublic String name;\n\tpublic Emp next; //next 默认为 null\n\tpublic Emp(int id, String name) {\n\t\tsuper();\n\t\tthis.id = id;\n\t\tthis.name = name;\n\t}\n}\n\n//创建EmpLinkedList ,表示链表\nclass EmpLinkedList {\n\t//头指针，执行第一个Emp,因此我们这个链表的head 是直接指向第一个Emp\n\tprivate Emp head; //默认null\n\t\n\t//添加雇员到链表\n\t//说明\n\t//1. 假定，当添加雇员时，id 是自增长，即id的分配总是从小到大\n\t//   因此我们将该雇员直接加入到本链表的最后即可\n\tpublic void add(Emp emp) {\n\t\t//如果是添加第一个雇员\n\t\tif(head == null) {\n\t\t\thead = emp;\n\t\t\treturn;\n\t\t}\n\t\t//如果不是第一个雇员，则使用一个辅助的指针，帮助定位到最后\n\t\tEmp curEmp = head;\n\t\twhile(true) {\n\t\t\tif(curEmp.next == null) {//说明到链表最后\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcurEmp = curEmp.next; //后移\n\t\t}\n\t\t//退出时直接将emp 加入链表\n\t\tcurEmp.next = emp;\n\t}\n\t\n\t//遍历链表的雇员信息\n\tpublic void list(int no) {\n\t\tif(head == null) { //说明链表为空\n\t\t\tSystem.out.println(\"第 \"+(no+1)+\" 链表为空\");\n\t\t\treturn;\n\t\t}\n\t\tSystem.out.print(\"第 \"+(no+1)+\" 链表的信息为\");\n\t\tEmp curEmp = head; //辅助指针\n\t\twhile(true) {\n\t\t\tSystem.out.printf(\" => id=%d name=%s\\t\", curEmp.id, curEmp.name);\n\t\t\tif(curEmp.next == null) {//说明curEmp已经是最后结点\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcurEmp = curEmp.next; //后移，遍历\n\t\t}\n\t\tSystem.out.println();\n\t}\n\t\n\t//根据id查找雇员\n\t//如果查找到，就返回Emp, 如果没有找到，就返回null\n\tpublic Emp findEmpById(int id) {\n\t\t//判断链表是否为空\n\t\tif(head == null) {\n\t\t\tSystem.out.println(\"链表为空\");\n\t\t\treturn null;\n\t\t}\n\t\t//辅助指针\n\t\tEmp curEmp = head;\n\t\twhile(true) {\n\t\t\tif(curEmp.id == id) {//找到\n\t\t\t\tbreak;//这时curEmp就指向要查找的雇员\n\t\t\t}\n\t\t\t//退出\n\t\t\tif(curEmp.next == null) {//说明遍历当前链表没有找到该雇员\n\t\t\t\tcurEmp = null;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcurEmp = curEmp.next;//以后\n\t\t}\n\t\t\n\t\treturn curEmp;\n\t}\n\t\n}\n\n\n```\n\n\n\n## 八、二叉树\n\n### 1.普通二叉树\n\n```java\npackage tree;\n\npublic class BinaryTreeDemo {\n\n\tpublic static void main(String[] args) {\n\t\t//先需要创建一颗二叉树\n\t\tBinaryTree binaryTree = new BinaryTree();\n\t\t//创建需要的结点\n\t\tHeroNode root = new HeroNode(1, \"宋江\");\n\t\tHeroNode node2 = new HeroNode(2, \"吴用\");\n\t\tHeroNode node3 = new HeroNode(3, \"卢俊义\");\n\t\tHeroNode node4 = new HeroNode(4, \"林冲\");\n\t\tHeroNode node5 = new HeroNode(5, \"关胜\");\n\t\t\n\t\t//说明，我们先手动创建该二叉树，后面我们学习递归的方式创建二叉树\n\t\troot.setLeft(node2);\n\t\troot.setRight(node3);\n\t\tnode3.setRight(node4);\n\t\tnode3.setLeft(node5);\n\t\tbinaryTree.setRoot(root);\n\t\t\n\t\t//测试\n//\t\tSystem.out.println(\"前序遍历\"); // 1,2,3,5,4\n//\t\tbinaryTree.preOrder();\n\t\t\n\t\t//测试 \n//\t\tSystem.out.println(\"中序遍历\");\n//\t\tbinaryTree.infixOrder(); // 2,1,5,3,4\n//\t\t\n//\t\tSystem.out.println(\"后序遍历\");\n//\t\tbinaryTree.postOrder(); // 2,5,4,3,1\n\t\t\n\t\t//前序遍历\n\t\t//前序遍历的次数 ：4 \n//\t\tSystem.out.println(\"前序遍历方式~~~\");\n//\t\tHeroNode resNode = binaryTree.preOrderSearch(5);\n//\t\tif (resNode != null) {\n//\t\t\tSystem.out.printf(\"找到了，信息为 no=%d name=%s\", resNode.getNo(), resNode.getName());\n//\t\t} else {\n//\t\t\tSystem.out.printf(\"没有找到 no = %d 的英雄\", 5);\n//\t\t}\n\t\t\n\t\t//中序遍历查找\n\t\t//中序遍历3次\n//\t\tSystem.out.println(\"中序遍历方式~~~\");\n//\t\tHeroNode resNode = binaryTree.infixOrderSearch(5);\n//\t\tif (resNode != null) {\n//\t\t\tSystem.out.printf(\"找到了，信息为 no=%d name=%s\", resNode.getNo(), resNode.getName());\n//\t\t} else {\n//\t\t\tSystem.out.printf(\"没有找到 no = %d 的英雄\", 5);\n//\t\t}\n\t\t\n\t\t//后序遍历查找\n\t\t//后序遍历查找的次数  2次\n//\t\tSystem.out.println(\"后序遍历方式~~~\");\n//\t\tHeroNode resNode = binaryTree.postOrderSearch(5);\n//\t\tif (resNode != null) {\n//\t\t\tSystem.out.printf(\"找到了，信息为 no=%d name=%s\", resNode.getNo(), resNode.getName());\n//\t\t} else {\n//\t\t\tSystem.out.printf(\"没有找到 no = %d 的英雄\", 5);\n//\t\t}\n\t\t\n\t\t//测试一把删除结点\n\t\t\n\t\tSystem.out.println(\"删除前,前序遍历\");\n\t\tbinaryTree.preOrder(); //  1,2,3,5,4\n\t\tbinaryTree.delNode(5);\n\t\t//binaryTree.delNode(3);\n\t\tSystem.out.println(\"删除后，前序遍历\");\n\t\tbinaryTree.preOrder(); // 1,2,3,4\n\t\t\n\t\t\n\t\t\n\t}\n\n}\n\n//定义BinaryTree 二叉树\nclass BinaryTree {\n\tprivate HeroNode root;\n\n\tpublic void setRoot(HeroNode root) {\n\t\tthis.root = root;\n\t}\n\t\n\t//删除结点\n\tpublic void delNode(int no) {\n\t\tif(root != null) {\n\t\t\t//如果只有一个root结点, 这里立即判断root是不是就是要删除结点\n\t\t\tif(root.getNo() == no) {\n\t\t\t\troot = null;\n\t\t\t} else {\n\t\t\t\t//递归删除\n\t\t\t\troot.delNode(no);\n\t\t\t}\n\t\t}else{\n\t\t\tSystem.out.println(\"空树，不能删除~\");\n\t\t}\n\t}\n\t//前序遍历\n\tpublic void preOrder() {\n\t\tif(this.root != null) {\n\t\t\tthis.root.preOrder();\n\t\t}else {\n\t\t\tSystem.out.println(\"二叉树为空，无法遍历\");\n\t\t}\n\t}\n\t\n\t//中序遍历\n\tpublic void infixOrder() {\n\t\tif(this.root != null) {\n\t\t\tthis.root.infixOrder();\n\t\t}else {\n\t\t\tSystem.out.println(\"二叉树为空，无法遍历\");\n\t\t}\n\t}\n\t//后序遍历\n\tpublic void postOrder() {\n\t\tif(this.root != null) {\n\t\t\tthis.root.postOrder();\n\t\t}else {\n\t\t\tSystem.out.println(\"二叉树为空，无法遍历\");\n\t\t}\n\t}\n\t\n\t//前序遍历\n\tpublic HeroNode preOrderSearch(int no) {\n\t\tif(root != null) {\n\t\t\treturn root.preOrderSearch(no);\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n\t//中序遍历\n\tpublic HeroNode infixOrderSearch(int no) {\n\t\tif(root != null) {\n\t\t\treturn root.infixOrderSearch(no);\n\t\t}else {\n\t\t\treturn null;\n\t\t}\n\t}\n\t//后序遍历\n\tpublic HeroNode postOrderSearch(int no) {\n\t\tif(root != null) {\n\t\t\treturn this.root.postOrderSearch(no);\n\t\t}else {\n\t\t\treturn null;\n\t\t}\n\t}\n}\n\n//先创建HeroNode 结点\nclass HeroNode {\n\tprivate int no;\n\tprivate String name;\n\tprivate HeroNode left; //默认null\n\tprivate HeroNode right; //默认null\n\tpublic HeroNode(int no, String name) {\n\t\tthis.no = no;\n\t\tthis.name = name;\n\t}\n\tpublic int getNo() {\n\t\treturn no;\n\t}\n\tpublic void setNo(int no) {\n\t\tthis.no = no;\n\t}\n\tpublic String getName() {\n\t\treturn name;\n\t}\n\tpublic void setName(String name) {\n\t\tthis.name = name;\n\t}\n\tpublic HeroNode getLeft() {\n\t\treturn left;\n\t}\n\tpublic void setLeft(HeroNode left) {\n\t\tthis.left = left;\n\t}\n\tpublic HeroNode getRight() {\n\t\treturn right;\n\t}\n\tpublic void setRight(HeroNode right) {\n\t\tthis.right = right;\n\t}\n\t@Override\n\tpublic String toString() {\n\t\treturn \"HeroNode [no=\" + no + \", name=\" + name + \"]\";\n\t}\n\t\n\t//递归删除结点\n\t//1.如果删除的节点是叶子节点，则删除该节点\n\t//2.如果删除的节点是非叶子节点，则删除该子树\n\tpublic void delNode(int no) {\n\t\t\n\t\t//思路\n\t\t/*\n\t\t * \t1. 因为我们的二叉树是单向的，所以我们是判断当前结点的子结点是否需要删除结点，而不能去判断当前这个结点是不是需要删除结点.\n\t\t\t2. 如果当前结点的左子结点不为空，并且左子结点 就是要删除结点，就将this.left = null; 并且就返回(结束递归删除)\n\t\t\t3. 如果当前结点的右子结点不为空，并且右子结点 就是要删除结点，就将this.right= null ;并且就返回(结束递归删除)\n\t\t\t4. 如果第2和第3步没有删除结点，那么我们就需要向左子树进行递归删除\n\t\t\t5.  如果第4步也没有删除结点，则应当向右子树进行递归删除.\n\n\t\t */\n\t\t//2. 如果当前结点的左子结点不为空，并且左子结点 就是要删除结点，就将this.left = null; 并且就返回(结束递归删除)\n\t\tif(this.left != null && this.left.no == no) {\n\t\t\tthis.left = null;\n\t\t\treturn;\n\t\t}\n\t\t//3.如果当前结点的右子结点不为空，并且右子结点 就是要删除结点，就将this.right= null ;并且就返回(结束递归删除)\n\t\tif(this.right != null && this.right.no == no) {\n\t\t\tthis.right = null;\n\t\t\treturn;\n\t\t}\n\t\t//4.我们就需要向左子树进行递归删除\n\t\tif(this.left != null) {\n\t\t\tthis.left.delNode(no);\n\t\t}\n\t\t//5.则应当向右子树进行递归删除\n\t\tif(this.right != null) {\n\t\t\tthis.right.delNode(no);\n\t\t}\n\t}\n\t\n\t//编写前序遍历的方法\n\tpublic void preOrder() {\n\t\tSystem.out.println(this); //先输出父结点\n\t\t//递归向左子树前序遍历\n\t\tif(this.left != null) {\n\t\t\tthis.left.preOrder();\n\t\t}\n\t\t//递归向右子树前序遍历\n\t\tif(this.right != null) {\n\t\t\tthis.right.preOrder();\n\t\t}\n\t}\n\t//中序遍历\n\tpublic void infixOrder() {\n\t\t\n\t\t//递归向左子树中序遍历\n\t\tif(this.left != null) {\n\t\t\tthis.left.infixOrder();\n\t\t}\n\t\t//输出父结点\n\t\tSystem.out.println(this);\n\t\t//递归向右子树中序遍历\n\t\tif(this.right != null) {\n\t\t\tthis.right.infixOrder();\n\t\t}\n\t}\n\t//后序遍历\n\tpublic void postOrder() {\n\t\tif(this.left != null) {\n\t\t\tthis.left.postOrder();\n\t\t}\n\t\tif(this.right != null) {\n\t\t\tthis.right.postOrder();\n\t\t}\n\t\tSystem.out.println(this);\n\t}\n\t\n\t//前序遍历查找\n\t/**\n\t * \n\t * @param no 查找no\n\t * @return 如果找到就返回该Node ,如果没有找到返回 null\n\t */\n\tpublic HeroNode preOrderSearch(int no) {\n\t\tSystem.out.println(\"进入前序遍历\");\n\t\t//比较当前结点是不是\n\t\tif(this.no == no) {\n\t\t\treturn this;\n\t\t}\n\t\t//1.则判断当前结点的左子节点是否为空，如果不为空，则递归前序查找\n\t\t//2.如果左递归前序查找，找到结点，则返回\n\t\tHeroNode resNode = null;\n\t\tif(this.left != null) {\n\t\t\tresNode = this.left.preOrderSearch(no);\n\t\t}\n\t\tif(resNode != null) {//说明我们左子树找到\n\t\t\treturn resNode;\n\t\t}\n\t\t//1.左递归前序查找，找到结点，则返回，否继续判断，\n\t\t//2.当前的结点的右子节点是否为空，如果不空，则继续向右递归前序查找\n\t\tif(this.right != null) {\n\t\t\tresNode = this.right.preOrderSearch(no);\n\t\t}\n\t\treturn resNode;\n\t}\n\t\n\t//中序遍历查找\n\tpublic HeroNode infixOrderSearch(int no) {\n\t\t//判断当前结点的左子节点是否为空，如果不为空，则递归中序查找\n\t\tHeroNode resNode = null;\n\t\tif(this.left != null) {\n\t\t\tresNode = this.left.infixOrderSearch(no);\n\t\t}\n\t\tif(resNode != null) {\n\t\t\treturn resNode;\n\t\t}\n\t\tSystem.out.println(\"进入中序查找\");\n\t\t//如果找到，则返回，如果没有找到，就和当前结点比较，如果是则返回当前结点\n\t\tif(this.no == no) {\n\t\t\treturn this;\n\t\t}\n\t\t//否则继续进行右递归的中序查找\n\t\tif(this.right != null) {\n\t\t\tresNode = this.right.infixOrderSearch(no);\n\t\t}\n\t\treturn resNode;\n\t\t\n\t}\n\t\n\t//后序遍历查找\n\tpublic HeroNode postOrderSearch(int no) {\n\t\t\n\t\t//判断当前结点的左子节点是否为空，如果不为空，则递归后序查找\n\t\tHeroNode resNode = null;\n\t\tif(this.left != null) {\n\t\t\tresNode = this.left.postOrderSearch(no);\n\t\t}\n\t\tif(resNode != null) {//说明在左子树找到\n\t\t\treturn resNode;\n\t\t}\n\t\t\n\t\t//如果左子树没有找到，则向右子树递归进行后序遍历查找\n\t\tif(this.right != null) {\n\t\t\tresNode = this.right.postOrderSearch(no);\n\t\t}\n\t\tif(resNode != null) {\n\t\t\treturn resNode;\n\t\t}\n\t\tSystem.out.println(\"进入后序查找\");\n\t\t//如果左右子树都没有找到，就比较当前结点是不是\n\t\tif(this.no == no) {\n\t\t\treturn this;\n\t\t}\n\t\treturn resNode;\n\t}\n\t\n}\n\n\n\n```\n\n### 2.顺序二叉树\n\n顺序存储二叉树的**特点**:\n\n1)顺序二叉树通常只考虑完全二叉树\n\n2)第n个元素的左子节点为 2 * n + 1 \n\n3)第n个元素的右子节点为 2 * n + 2\n\n4)第n个元素的父节点为 (n-1) / 2\n\n5)n : 表示二叉树中的第几个元素(按0开始编号\n 如图所示)\n\n![image-20210106203601993](数据结构整理/image-20210106203601993.png)\n\n```java\npackage tree;\n\npublic class ArrBinaryTreeDemo {\n\n\tpublic static void main(String[] args) {\n\t\tint[] arr = { 1, 2, 3, 4, 5, 6, 7 };\n\t\t//创建一个 ArrBinaryTree\n\t\tArrBinaryTree arrBinaryTree = new ArrBinaryTree(arr);\n\t\tarrBinaryTree.preOrder(); // 1,2,4,5,3,6,7\n\t}\n\n}\n\n//编写一个ArrayBinaryTree, 实现顺序存储二叉树遍历\n\nclass ArrBinaryTree {\n\tprivate int[] arr;//存储数据结点的数组\n\n\tpublic ArrBinaryTree(int[] arr) {\n\t\tthis.arr = arr;\n\t}\n\t\n\t//重载preOrder\n\tpublic void preOrder() {\n\t\tthis.preOrder(0);\n\t}\n\t\n\t//编写一个方法，完成顺序存储二叉树的前序遍历\n\t/**\n\t * \n\t * @param index 数组的下标 \n\t */\n\tpublic void preOrder(int index) {\n\t\t//如果数组为空，或者 arr.length = 0\n\t\tif(arr == null || arr.length == 0) {\n\t\t\tSystem.out.println(\"数组为空，不能按照二叉树的前序遍历\");\n\t\t}\n\t\t//输出当前这个元素\n\t\tSystem.out.println(arr[index]); \n\t\t//向左递归遍历\n\t\tif((index * 2 + 1) < arr.length) {\n\t\t\tpreOrder(2 * index + 1 );\n\t\t}\n\t\t//向右递归遍历\n\t\tif((index * 2 + 2) < arr.length) {\n\t\t\tpreOrder(2 * index + 2);\n\t\t}\n\t}\n\t\n}\n\n```\n\n### 3.线索化二叉树\n\n**线索二叉树基本介绍**\n\n1)n个结点的二叉链表中含有n+1 【公式 2n-(n-1)=n+1】 个空指针域。利用二叉链表中的空指针域，存放指向该结点在**某种遍历次序**下的前驱和后继结点的指针（这种附加的指针称为\"线索\"）\n\n2)这种加上了线索的二叉链表称为**线索链表**，相应的二叉树称为**线索二叉树(Threaded  BinaryTree)**。根据线索性质的不同，线索二叉树可分为**前序线索二叉树、中序线索二叉树**和**后序线索二叉树**三种\n\n3)一个结点的前一个结点，称为**前驱**结点\n\n4)一个结点的后一个结点，称为**后继**结点\n\n```java\npackage tree.threadedbinarytree;\n\npublic class ThreadedBinaryTreeDemo {\n\n\tpublic static void main(String[] args) {\n\t\t//测试一把中序线索二叉树的功能\n\t\tHeroNode root = new HeroNode(1, \"tom\");\n\t\tHeroNode node2 = new HeroNode(3, \"jack\");\n\t\tHeroNode node3 = new HeroNode(6, \"smith\");\n\t\tHeroNode node4 = new HeroNode(8, \"mary\");\n\t\tHeroNode node5 = new HeroNode(10, \"king\");\n\t\tHeroNode node6 = new HeroNode(14, \"dim\");\n\t\t\n\t\t//二叉树，后面我们要递归创建, 现在简单处理使用手动创建\n\t\troot.setLeft(node2);\n\t\troot.setRight(node3);\n\t\tnode2.setLeft(node4);\n\t\tnode2.setRight(node5);\n\t\tnode3.setLeft(node6);\n\t\t\n\t\t//测试中序线索化\n\t\tThreadedBinaryTree threadedBinaryTree = new ThreadedBinaryTree();\n\t\tthreadedBinaryTree.setRoot(root);\n\t\tthreadedBinaryTree.threadedNodes();\n\t\t\n\t\t//测试: 以10号节点测试\n\t\tHeroNode leftNode = node5.getLeft();\n\t\tHeroNode rightNode = node5.getRight();\n\t\tSystem.out.println(\"10号结点的前驱结点是 =\"  + leftNode); //3\n\t\tSystem.out.println(\"10号结点的后继结点是=\"  + rightNode); //1\n\t\t\n\t\t//当线索化二叉树后，能在使用原来的遍历方法\n\t\t//threadedBinaryTree.infixOrder();\n\t\tSystem.out.println(\"使用线索化的方式遍历 线索化二叉树\");\n\t\tthreadedBinaryTree.threadedList(); // 8, 3, 10, 1, 14, 6\n\t\t\n\t}\n\n}\n\n\n\n\n//定义ThreadedBinaryTree 实现了线索化功能的二叉树\nclass ThreadedBinaryTree {\n\tprivate HeroNode root;\n\t\n\t//为了实现线索化，需要创建要给指向当前结点的前驱结点的指针\n\t//在递归进行线索化时，pre 总是保留前一个结点\n\tprivate HeroNode pre = null;\n\n\tpublic void setRoot(HeroNode root) {\n\t\tthis.root = root;\n\t}\n\t\n\t//重载一把threadedNodes方法\n\tpublic void threadedNodes() {\n\t\tthis.threadedNodes(root);\n\t}\n\t\n\t//遍历线索化二叉树的方法\n\tpublic void threadedList() {\n\t\t//定义一个变量，存储当前遍历的结点，从root开始\n\t\tHeroNode node = root;\n\t\twhile(node != null) {\n\t\t\t//循环的找到leftType == 1的结点，第一个找到就是8结点\n\t\t\t//后面随着遍历而变化,因为当leftType==1时，说明该结点是按照线索化\n\t\t\t//处理后的有效结点\n\t\t\twhile(node.getLeftType() == 0) {\n\t\t\t\tnode = node.getLeft();\n\t\t\t}\n\t\t\t\n\t\t\t//打印当前这个结点\n\t\t\tSystem.out.println(node);\n\t\t\t//如果当前结点的右指针指向的是后继结点,就一直输出\n\t\t\twhile(node.getRightType() == 1) {\n\t\t\t\t//获取到当前结点的后继结点\n\t\t\t\tnode = node.getRight();\n\t\t\t\tSystem.out.println(node);\n\t\t\t}\n\t\t\t//替换这个遍历的结点\n\t\t\tnode = node.getRight();\n\t\t\t\n\t\t}\n\t}\n\t\n\t//编写对二叉树进行中序线索化的方法\n\t/**\n\t * \n\t * @param node 就是当前需要线索化的结点\n\t */\n\tpublic void threadedNodes(HeroNode node) {\n\t\t\n\t\t//如果node==null, 不能线索化\n\t\tif(node == null) {\n\t\t\treturn;\n\t\t}\n\t\t\n\t\t//(一)先线索化左子树\n\t\tthreadedNodes(node.getLeft());\n\t\t//(二)线索化当前结点[有难度]\n\t\t\n\t\t//处理当前结点的前驱结点\n\t\t//以8结点来理解\n\t\t//8结点的.left = null , 8结点的.leftType = 1\n\t\tif(node.getLeft() == null) {\n\t\t\t//让当前结点的左指针指向前驱结点 \n\t\t\tnode.setLeft(pre); \n\t\t\t//修改当前结点的左指针的类型,指向前驱结点\n\t\t\tnode.setLeftType(1);\n\t\t}\n\t\t\n\t\t//处理后继结点\n\t\tif (pre != null && pre.getRight() == null) {\n\t\t\t//让前驱结点的右指针指向当前结点\n\t\t\tpre.setRight(node);\n\t\t\t//修改前驱结点的右指针类型\n\t\t\tpre.setRightType(1);\n\t\t}\n\t\t//!!! 每处理一个结点后，让当前结点是下一个结点的前驱结点\n\t\tpre = node;\n\t\t\n\t\t//(三)在线索化右子树\n\t\tthreadedNodes(node.getRight());\n\t\t\n\t\t\n\t}\n\t\n\t//删除结点\n\tpublic void delNode(int no) {\n\t\tif(root != null) {\n\t\t\t//如果只有一个root结点, 这里立即判断root是不是就是要删除结点\n\t\t\tif(root.getNo() == no) {\n\t\t\t\troot = null;\n\t\t\t} else {\n\t\t\t\t//递归删除\n\t\t\t\troot.delNode(no);\n\t\t\t}\n\t\t}else{\n\t\t\tSystem.out.println(\"空树，不能删除~\");\n\t\t}\n\t}\n\t//前序遍历\n\tpublic void preOrder() {\n\t\tif(this.root != null) {\n\t\t\tthis.root.preOrder();\n\t\t}else {\n\t\t\tSystem.out.println(\"二叉树为空，无法遍历\");\n\t\t}\n\t}\n\t\n\t//中序遍历\n\tpublic void infixOrder() {\n\t\tif(this.root != null) {\n\t\t\tthis.root.infixOrder();\n\t\t}else {\n\t\t\tSystem.out.println(\"二叉树为空，无法遍历\");\n\t\t}\n\t}\n\t//后序遍历\n\tpublic void postOrder() {\n\t\tif(this.root != null) {\n\t\t\tthis.root.postOrder();\n\t\t}else {\n\t\t\tSystem.out.println(\"二叉树为空，无法遍历\");\n\t\t}\n\t}\n\t\n\t//前序遍历\n\tpublic HeroNode preOrderSearch(int no) {\n\t\tif(root != null) {\n\t\t\treturn root.preOrderSearch(no);\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n\t//中序遍历\n\tpublic HeroNode infixOrderSearch(int no) {\n\t\tif(root != null) {\n\t\t\treturn root.infixOrderSearch(no);\n\t\t}else {\n\t\t\treturn null;\n\t\t}\n\t}\n\t//后序遍历\n\tpublic HeroNode postOrderSearch(int no) {\n\t\tif(root != null) {\n\t\t\treturn this.root.postOrderSearch(no);\n\t\t}else {\n\t\t\treturn null;\n\t\t}\n\t}\n}\n\n//先创建HeroNode 结点\nclass HeroNode {\n\tprivate int no;\n\tprivate String name;\n\tprivate HeroNode left; //默认null\n\tprivate HeroNode right; //默认null\n\t//说明\n\t//1. 如果leftType == 0 表示指向的是左子树, 如果 1 则表示指向前驱结点\n\t//2. 如果rightType == 0 表示指向是右子树, 如果 1表示指向后继结点\n\tprivate int leftType;\n\tprivate int rightType;\n\t\n\t\n\t\n\tpublic int getLeftType() {\n\t\treturn leftType;\n\t}\n\tpublic void setLeftType(int leftType) {\n\t\tthis.leftType = leftType;\n\t}\n\tpublic int getRightType() {\n\t\treturn rightType;\n\t}\n\tpublic void setRightType(int rightType) {\n\t\tthis.rightType = rightType;\n\t}\n\tpublic HeroNode(int no, String name) {\n\t\tthis.no = no;\n\t\tthis.name = name;\n\t}\n\tpublic int getNo() {\n\t\treturn no;\n\t}\n\tpublic void setNo(int no) {\n\t\tthis.no = no;\n\t}\n\tpublic String getName() {\n\t\treturn name;\n\t}\n\tpublic void setName(String name) {\n\t\tthis.name = name;\n\t}\n\tpublic HeroNode getLeft() {\n\t\treturn left;\n\t}\n\tpublic void setLeft(HeroNode left) {\n\t\tthis.left = left;\n\t}\n\tpublic HeroNode getRight() {\n\t\treturn right;\n\t}\n\tpublic void setRight(HeroNode right) {\n\t\tthis.right = right;\n\t}\n\t@Override\n\tpublic String toString() {\n\t\treturn \"HeroNode [no=\" + no + \", name=\" + name + \"]\";\n\t}\n\t\n\t//递归删除结点\n\t//1.如果删除的节点是叶子节点，则删除该节点\n\t//2.如果删除的节点是非叶子节点，则删除该子树\n\tpublic void delNode(int no) {\n\t\t\n\t\t//思路\n\t\t/*\n\t\t * \t1. 因为我们的二叉树是单向的，所以我们是判断当前结点的子结点是否需要删除结点，而不能去判断当前这个结点是不是需要删除结点.\n\t\t\t2. 如果当前结点的左子结点不为空，并且左子结点 就是要删除结点，就将this.left = null; 并且就返回(结束递归删除)\n\t\t\t3. 如果当前结点的右子结点不为空，并且右子结点 就是要删除结点，就将this.right= null ;并且就返回(结束递归删除)\n\t\t\t4. 如果第2和第3步没有删除结点，那么我们就需要向左子树进行递归删除\n\t\t\t5.  如果第4步也没有删除结点，则应当向右子树进行递归删除.\n\n\t\t */\n\t\t//2. 如果当前结点的左子结点不为空，并且左子结点 就是要删除结点，就将this.left = null; 并且就返回(结束递归删除)\n\t\tif(this.left != null && this.left.no == no) {\n\t\t\tthis.left = null;\n\t\t\treturn;\n\t\t}\n\t\t//3.如果当前结点的右子结点不为空，并且右子结点 就是要删除结点，就将this.right= null ;并且就返回(结束递归删除)\n\t\tif(this.right != null && this.right.no == no) {\n\t\t\tthis.right = null;\n\t\t\treturn;\n\t\t}\n\t\t//4.我们就需要向左子树进行递归删除\n\t\tif(this.left != null) {\n\t\t\tthis.left.delNode(no);\n\t\t}\n\t\t//5.则应当向右子树进行递归删除\n\t\tif(this.right != null) {\n\t\t\tthis.right.delNode(no);\n\t\t}\n\t}\n\t\n\t//编写前序遍历的方法\n\tpublic void preOrder() {\n\t\tSystem.out.println(this); //先输出父结点\n\t\t//递归向左子树前序遍历\n\t\tif(this.left != null) {\n\t\t\tthis.left.preOrder();\n\t\t}\n\t\t//递归向右子树前序遍历\n\t\tif(this.right != null) {\n\t\t\tthis.right.preOrder();\n\t\t}\n\t}\n\t//中序遍历\n\tpublic void infixOrder() {\n\t\t\n\t\t//递归向左子树中序遍历\n\t\tif(this.left != null) {\n\t\t\tthis.left.infixOrder();\n\t\t}\n\t\t//输出父结点\n\t\tSystem.out.println(this);\n\t\t//递归向右子树中序遍历\n\t\tif(this.right != null) {\n\t\t\tthis.right.infixOrder();\n\t\t}\n\t}\n\t//后序遍历\n\tpublic void postOrder() {\n\t\tif(this.left != null) {\n\t\t\tthis.left.postOrder();\n\t\t}\n\t\tif(this.right != null) {\n\t\t\tthis.right.postOrder();\n\t\t}\n\t\tSystem.out.println(this);\n\t}\n\t\n\t//前序遍历查找\n\t/**\n\t * \n\t * @param no 查找no\n\t * @return 如果找到就返回该Node ,如果没有找到返回 null\n\t */\n\tpublic HeroNode preOrderSearch(int no) {\n\t\tSystem.out.println(\"进入前序遍历\");\n\t\t//比较当前结点是不是\n\t\tif(this.no == no) {\n\t\t\treturn this;\n\t\t}\n\t\t//1.则判断当前结点的左子节点是否为空，如果不为空，则递归前序查找\n\t\t//2.如果左递归前序查找，找到结点，则返回\n\t\tHeroNode resNode = null;\n\t\tif(this.left != null) {\n\t\t\tresNode = this.left.preOrderSearch(no);\n\t\t}\n\t\tif(resNode != null) {//说明我们左子树找到\n\t\t\treturn resNode;\n\t\t}\n\t\t//1.左递归前序查找，找到结点，则返回，否继续判断，\n\t\t//2.当前的结点的右子节点是否为空，如果不空，则继续向右递归前序查找\n\t\tif(this.right != null) {\n\t\t\tresNode = this.right.preOrderSearch(no);\n\t\t}\n\t\treturn resNode;\n\t}\n\t\n\t//中序遍历查找\n\tpublic HeroNode infixOrderSearch(int no) {\n\t\t//判断当前结点的左子节点是否为空，如果不为空，则递归中序查找\n\t\tHeroNode resNode = null;\n\t\tif(this.left != null) {\n\t\t\tresNode = this.left.infixOrderSearch(no);\n\t\t}\n\t\tif(resNode != null) {\n\t\t\treturn resNode;\n\t\t}\n\t\tSystem.out.println(\"进入中序查找\");\n\t\t//如果找到，则返回，如果没有找到，就和当前结点比较，如果是则返回当前结点\n\t\tif(this.no == no) {\n\t\t\treturn this;\n\t\t}\n\t\t//否则继续进行右递归的中序查找\n\t\tif(this.right != null) {\n\t\t\tresNode = this.right.infixOrderSearch(no);\n\t\t}\n\t\treturn resNode;\n\t\t\n\t}\n\t\n\t//后序遍历查找\n\tpublic HeroNode postOrderSearch(int no) {\n\t\t\n\t\t//判断当前结点的左子节点是否为空，如果不为空，则递归后序查找\n\t\tHeroNode resNode = null;\n\t\tif(this.left != null) {\n\t\t\tresNode = this.left.postOrderSearch(no);\n\t\t}\n\t\tif(resNode != null) {//说明在左子树找到\n\t\t\treturn resNode;\n\t\t}\n\t\t\n\t\t//如果左子树没有找到，则向右子树递归进行后序遍历查找\n\t\tif(this.right != null) {\n\t\t\tresNode = this.right.postOrderSearch(no);\n\t\t}\n\t\tif(resNode != null) {\n\t\t\treturn resNode;\n\t\t}\n\t\tSystem.out.println(\"进入后序查找\");\n\t\t//如果左右子树都没有找到，就比较当前结点是不是\n\t\tif(this.no == no) {\n\t\t\treturn this;\n\t\t}\n\t\treturn resNode;\n\t}\n\t\n}\n\n```\n\n### 4.霍夫曼树\n\n**基本介绍**\n\n1)给定n个权值作为n个[叶子结点](https://baike.baidu.com/item/叶子结点/3620239)，构造一棵二叉树，若该树的带权路径长度(wpl)达到最小，称这样的二叉树为**最优二叉树**，也称为**哈夫曼树**(Huffman Tree)**, 还有的书翻译为**霍夫曼树。\n\n2)赫夫曼树是带权路径长度最短的树，权值较大的结点离根较近。\n\n```java\npackage huffmantree;\n\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.List;\n\npublic class HuffmanTree {\n\n\tpublic static void main(String[] args) {\n\t\tint arr[] = { 13, 7, 8, 3, 29, 6, 1 };\n\t\tNode root = createHuffmanTree(arr);\n\t\t\n\t\t//测试一把\n\t\tpreOrder(root); //\n\t\t\n\t}\n\t\n\t//编写一个前序遍历的方法\n\tpublic static void preOrder(Node root) {\n\t\tif(root != null) {\n\t\t\troot.preOrder();\n\t\t}else{\n\t\t\tSystem.out.println(\"是空树，不能遍历~~\");\n\t\t}\n\t}\n\n\t// 创建赫夫曼树的方法\n\t/**\n\t * \n\t * @param arr 需要创建成哈夫曼树的数组\n\t * @return 创建好后的赫夫曼树的root结点\n\t */\n\tpublic static Node createHuffmanTree(int[] arr) {\n\t\t// 第一步为了操作方便\n\t\t// 1. 遍历 arr 数组\n\t\t// 2. 将arr的每个元素构成成一个Node\n\t\t// 3. 将Node 放入到ArrayList中\n\t\tList<Node> nodes = new ArrayList<Node>();\n\t\tfor (int value : arr) {\n\t\t\tnodes.add(new Node(value));\n\t\t}\n\t\t\n\t\t//我们处理的过程是一个循环的过程\n\t\t\n\t\t\n\t\twhile(nodes.size() > 1) {\n\t\t\n\t\t\t//排序 从小到大 \n\t\t\tCollections.sort(nodes);\n\t\t\t\n\t\t\tSystem.out.println(\"nodes =\" + nodes);\n\t\t\t\n\t\t\t//取出根节点权值最小的两颗二叉树 \n\t\t\t//(1) 取出权值最小的结点（二叉树）\n\t\t\tNode leftNode = nodes.get(0);\n\t\t\t//(2) 取出权值第二小的结点（二叉树）\n\t\t\tNode rightNode = nodes.get(1);\n\t\t\t\n\t\t\t//(3)构建一颗新的二叉树\n\t\t\tNode parent = new Node(leftNode.value + rightNode.value);\n\t\t\tparent.left = leftNode;\n\t\t\tparent.right = rightNode;\n\t\t\t\n\t\t\t//(4)从ArrayList删除处理过的二叉树\n\t\t\tnodes.remove(leftNode);\n\t\t\tnodes.remove(rightNode);\n\t\t\t//(5)将parent加入到nodes\n\t\t\tnodes.add(parent);\n\t\t}\n\t\t\n\t\t//返回哈夫曼树的root结点\n\t\treturn nodes.get(0);\n\t\t\n\t}\n}\n\n// 创建结点类\n// 为了让Node 对象持续排序Collections集合排序\n// 让Node 实现Comparable接口\nclass Node implements Comparable<Node> {\n\tint value; // 结点权值\n\tchar c; //字符\n\tNode left; // 指向左子结点\n\tNode right; // 指向右子结点\n\n\t//写一个前序遍历\n\tpublic void preOrder() {\n\t\tSystem.out.println(this);\n\t\tif(this.left != null) {\n\t\t\tthis.left.preOrder();\n\t\t}\n\t\tif(this.right != null) {\n\t\t\tthis.right.preOrder();\n\t\t}\n\t}\n\t\n\tpublic Node(int value) {\n\t\tthis.value = value;\n\t}\n\n\t@Override\n\tpublic String toString() {\n\t\treturn \"Node [value=\" + value + \"]\";\n\t}\n\n\t@Override\n\tpublic int compareTo(Node o) {\n\t\t// TODO Auto-generated method stub\n\t\t// 表示从小到大排序\n\t\treturn this.value - o.value;\n\t}\n\n}\n\n```\n\n### 5.二叉排序树\n\n**介绍**\n\n二叉排序树：BST: (Binary Sort(Search) Tree), 对于二叉排序树的任何一个非叶子节点，要求左子节点的值比当前节点的值小，右子节点的值比当前节点的值大。\n\n**特别说明**：如果有相同的值，可以将该节点放在左子节点或右子节点\n\n\n\n比如针对前面的数据 (7, 3, 10, 12, 5, 1, 9) ，对应的二叉排序树为：\n\n![image-20210106222122233](数据结构整理/image-20210106222122233.png)\n\n```java\npackage binarysorttree;\n\npublic class BinarySortTreeDemo {\n\n\tpublic static void main(String[] args) {\n\t\tint[] arr = {7, 3, 10, 12, 5, 1, 9, 2};\n\t\tBinarySortTree binarySortTree = new BinarySortTree();\n\t\t//循环的添加结点到二叉排序树\n\t\tfor(int i = 0; i< arr.length; i++) {\n\t\t\tbinarySortTree.add(new Node(arr[i]));\n\t\t}\n\t\t\n\t\t//中序遍历二叉排序树\n\t\tSystem.out.println(\"中序遍历二叉排序树~\");\n\t\tbinarySortTree.infixOrder(); // 1, 3, 5, 7, 9, 10, 12\n\t\t\n\t\t//测试一下删除叶子结点\n\t    \n\t   \n\t    binarySortTree.delNode(12);\n\t   \n\t \n\t    binarySortTree.delNode(5);\n\t    binarySortTree.delNode(10);\n\t    binarySortTree.delNode(2);\n\t    binarySortTree.delNode(3);\n\t\t   \n\t    binarySortTree.delNode(9);\n\t    binarySortTree.delNode(1);\n\t    binarySortTree.delNode(7);\n\t    \n\t\t\n\t\tSystem.out.println(\"root=\" + binarySortTree.getRoot());\n\t\t\n\t\t\n\t\tSystem.out.println(\"删除结点后\");\n\t\tbinarySortTree.infixOrder();\n\t}\n\n}\n\n//创建二叉排序树\nclass BinarySortTree {\n\tprivate Node root;\n\t\n\t\n\t\n\t\n\tpublic Node getRoot() {\n\t\treturn root;\n\t}\n\n\t//查找要删除的结点\n\tpublic Node search(int value) {\n\t\tif(root == null) {\n\t\t\treturn null;\n\t\t} else {\n\t\t\treturn root.search(value);\n\t\t}\n\t}\n\t\n\t//查找父结点\n\tpublic Node searchParent(int value) {\n\t\tif(root == null) {\n\t\t\treturn null;\n\t\t} else {\n\t\t\treturn root.searchParent(value);\n\t\t}\n\t}\n\t\n\t//编写方法: \n\t//1. 返回的 以node 为根结点的二叉排序树的最小结点的值\n\t//2. 删除node 为根结点的二叉排序树的最小结点\n\t/**\n\t * \n\t * @param node 传入的结点(当做二叉排序树的根结点)\n\t * @return 返回的 以node 为根结点的二叉排序树的最小结点的值\n\t */\n\tpublic int delRightTreeMin(Node node) {\n\t\tNode target = node;\n\t\t//循环的查找左子节点，就会找到最小值\n\t\twhile(target.left != null) {\n\t\t\ttarget = target.left;\n\t\t}\n\t\t//这时 target就指向了最小结点\n\t\t//删除最小结点\n\t\tdelNode(target.value);\n\t\treturn target.value;\n\t}\n\t\n\t\n\t//删除结点\n\tpublic void delNode(int value) {\n\t\tif(root == null) {\n\t\t\treturn;\n\t\t}else {\n\t\t\t//1.需求先去找到要删除的结点  targetNode\n\t\t\tNode targetNode = search(value);\n\t\t\t//如果没有找到要删除的结点\n\t\t\tif(targetNode == null) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t//如果我们发现当前这颗二叉排序树只有一个结点\n\t\t\tif(root.left == null && root.right == null) {\n\t\t\t\troot = null;\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t\n\t\t\t//去找到targetNode的父结点\n\t\t\tNode parent = searchParent(value);\n\t\t\t//如果要删除的结点是叶子结点\n\t\t\tif(targetNode.left == null && targetNode.right == null) {\n\t\t\t\t//判断targetNode 是父结点的左子结点，还是右子结点\n\t\t\t\tif(parent.left != null && parent.left.value == value) { //是左子结点\n\t\t\t\t\tparent.left = null;\n\t\t\t\t} else if (parent.right != null && parent.right.value == value) {//是由子结点\n\t\t\t\t\tparent.right = null;\n\t\t\t\t}\n\t\t\t} else if (targetNode.left != null && targetNode.right != null) { //删除有两颗子树的节点\n\t\t\t\tint minVal = delRightTreeMin(targetNode.right);\n\t\t\t\ttargetNode.value = minVal;\n\t\t\t\t\n\t\t\t\t\n\t\t\t} else { // 删除只有一颗子树的结点\n\t\t\t\t//如果要删除的结点有左子结点 \n\t\t\t\tif(targetNode.left != null) {\n\t\t\t\t\tif(parent != null) {\n\t\t\t\t\t\t//如果 targetNode 是 parent 的左子结点\n\t\t\t\t\t\tif(parent.left.value == value) {\n\t\t\t\t\t\t\tparent.left = targetNode.left;\n\t\t\t\t\t\t} else { //  targetNode 是 parent 的右子结点\n\t\t\t\t\t\t\tparent.right = targetNode.left;\n\t\t\t\t\t\t} \n\t\t\t\t\t} else {\n\t\t\t\t\t\troot = targetNode.left;\n\t\t\t\t\t}\n\t\t\t\t} else { //如果要删除的结点有右子结点 \n\t\t\t\t\tif(parent != null) {\n\t\t\t\t\t\t//如果 targetNode 是 parent 的左子结点\n\t\t\t\t\t\tif(parent.left.value == value) {\n\t\t\t\t\t\t\tparent.left = targetNode.right;\n\t\t\t\t\t\t} else { //如果 targetNode 是 parent 的右子结点\n\t\t\t\t\t\t\tparent.right = targetNode.right;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\troot = targetNode.right;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t}\n\t}\n\t\n\t//添加结点的方法\n\tpublic void add(Node node) {\n\t\tif(root == null) {\n\t\t\troot = node;//如果root为空则直接让root指向node\n\t\t} else {\n\t\t\troot.add(node);\n\t\t}\n\t}\n\t//中序遍历\n\tpublic void infixOrder() {\n\t\tif(root != null) {\n\t\t\troot.infixOrder();\n\t\t} else {\n\t\t\tSystem.out.println(\"二叉排序树为空，不能遍历\");\n\t\t}\n\t}\n}\n\n//创建Node结点\nclass Node {\n\tint value;\n\tNode left;\n\tNode right;\n\tpublic Node(int value) {\n\t\t\n\t\tthis.value = value;\n\t}\n\t\n\t\n\t//查找要删除的结点\n\t/**\n\t * \n\t * @param value 希望删除的结点的值\n\t * @return 如果找到返回该结点，否则返回null\n\t */\n\tpublic Node search(int value) {\n\t\tif(value == this.value) { //找到就是该结点\n\t\t\treturn this;\n\t\t} else if(value < this.value) {//如果查找的值小于当前结点，向左子树递归查找\n\t\t\t//如果左子结点为空\n\t\t\tif(this.left  == null) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\treturn this.left.search(value);\n\t\t} else { //如果查找的值不小于当前结点，向右子树递归查找\n\t\t\tif(this.right == null) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\treturn this.right.search(value);\n\t\t}\n\t\t\n\t}\n\t//查找要删除结点的父结点\n\t/**\n\t * \n\t * @param value 要找到的结点的值\n\t * @return 返回的是要删除的结点的父结点，如果没有就返回null\n\t */\n\tpublic Node searchParent(int value) {\n\t\t//如果当前结点就是要删除的结点的父结点，就返回\n\t\tif((this.left != null && this.left.value == value) || \n\t\t\t\t(this.right != null && this.right.value == value)) {\n\t\t\treturn this;\n\t\t} else {\n\t\t\t//如果查找的值小于当前结点的值, 并且当前结点的左子结点不为空\n\t\t\tif(value < this.value && this.left != null) {\n\t\t\t\treturn this.left.searchParent(value); //向左子树递归查找\n\t\t\t} else if (value >= this.value && this.right != null) {\n\t\t\t\treturn this.right.searchParent(value); //向右子树递归查找\n\t\t\t} else {\n\t\t\t\treturn null; // 没有找到父结点\n\t\t\t}\n\t\t}\n\t\t\n\t}\n\t\n\t@Override\n\tpublic String toString() {\n\t\treturn \"Node [value=\" + value + \"]\";\n\t}\n\n\n\t//添加结点的方法\n\t//递归的形式添加结点，注意需要满足二叉排序树的要求\n\tpublic void add(Node node) {\n\t\tif(node == null) {\n\t\t\treturn;\n\t\t}\n\t\t\n\t\t//判断传入的结点的值，和当前子树的根结点的值关系\n\t\tif(node.value < this.value) {\n\t\t\t//如果当前结点左子结点为null\n\t\t\tif(this.left == null) {\n\t\t\t\tthis.left = node;\n\t\t\t} else {\n\t\t\t\t//递归的向左子树添加\n\t\t\t\tthis.left.add(node);\n\t\t\t}\n\t\t} else { //添加的结点的值大于 当前结点的值\n\t\t\tif(this.right == null) {\n\t\t\t\tthis.right = node;\n\t\t\t} else {\n\t\t\t\t//递归的向右子树添加\n\t\t\t\tthis.right.add(node);\n\t\t\t}\n\t\t\t\n\t\t}\n\t}\n\t\n\t//中序遍历\n\tpublic void infixOrder() {\n\t\tif(this.left != null) {\n\t\t\tthis.left.infixOrder();\n\t\t}\n\t\tSystem.out.println(this);\n\t\tif(this.right != null) {\n\t\t\tthis.right.infixOrder();\n\t\t}\n\t}\n\t\n}\n\n```\n\n\n\n### 6.平衡二叉树\n\n**基本介绍**\n\n\n\n1)平衡二叉树也叫平衡二叉搜索树（Self-balancing binary search tree）又被称为AVL树， 可以**保证查询效率较高**。\n\n2)具有以下**特点**：它是一 棵空树或它的左右两个子树的高度差的绝对值不超过1，并且左右两个子树都是一棵平衡二叉树。平衡二叉树的常用实现方法有[红黑树](https://baike.baidu.com/item/红黑树/2413209)、[AVL](https://baike.baidu.com/item/AVL/7543015)、[替罪羊树](https://baike.baidu.com/item/替罪羊树/13859070)、[Treap](https://baike.baidu.com/item/Treap)、[伸展树](https://baike.baidu.com/item/伸展树/7003945)等。\n\n```java\n\npublic class AVLTreeDemo {\n\n\tpublic static void main(String[] args) {\n\t\t//int[] arr = {4,3,6,5,7,8};\n\t\t//int[] arr = { 10, 12, 8, 9, 7, 6 };\n\t\tint[] arr = { 10, 11, 7, 6, 8, 9 };  \n\t\t//创建一个 AVLTree对象\n\t\tAVLTree avlTree = new AVLTree();\n\t\t//添加结点\n\t\tfor(int i=0; i < arr.length; i++) {\n\t\t\tavlTree.add(new Node(arr[i]));\n\t\t}\n\t\t\n\t\t//遍历\n\t\tSystem.out.println(\"中序遍历\");\n\t\tavlTree.infixOrder();\n\t\t\n\t\tSystem.out.println(\"在平衡处理~~\");\n\t\tSystem.out.println(\"树的高度=\" + avlTree.getRoot().height()); //3\n\t\tSystem.out.println(\"树的左子树高度=\" + avlTree.getRoot().leftHeight()); // 2\n\t\tSystem.out.println(\"树的右子树高度=\" + avlTree.getRoot().rightHeight()); // 2\n\t\tSystem.out.println(\"当前的根结点=\" + avlTree.getRoot());//8\n\t\t\n\t\t\n\t}\n\n}\n\n// 创建AVLTree\nclass AVLTree {\n\tprivate Node root;\n\n\tpublic Node getRoot() {\n\t\treturn root;\n\t}\n\n\t// 查找要删除的结点\n\tpublic Node search(int value) {\n\t\tif (root == null) {\n\t\t\treturn null;\n\t\t} else {\n\t\t\treturn root.search(value);\n\t\t}\n\t}\n\n\t// 查找父结点\n\tpublic Node searchParent(int value) {\n\t\tif (root == null) {\n\t\t\treturn null;\n\t\t} else {\n\t\t\treturn root.searchParent(value);\n\t\t}\n\t}\n\n\t// 编写方法:\n\t// 1. 返回的 以node 为根结点的二叉排序树的最小结点的值\n\t// 2. 删除node 为根结点的二叉排序树的最小结点\n\t/**\n\t * \n\t * @param node\n\t *            传入的结点(当做二叉排序树的根结点)\n\t * @return 返回的 以node 为根结点的二叉排序树的最小结点的值\n\t */\n\tpublic int delRightTreeMin(Node node) {\n\t\tNode target = node;\n\t\t// 循环的查找左子节点，就会找到最小值\n\t\twhile (target.left != null) {\n\t\t\ttarget = target.left;\n\t\t}\n\t\t// 这时 target就指向了最小结点\n\t\t// 删除最小结点\n\t\tdelNode(target.value);\n\t\treturn target.value;\n\t}\n\n\t// 删除结点\n\tpublic void delNode(int value) {\n\t\tif (root == null) {\n\t\t\treturn;\n\t\t} else {\n\t\t\t// 1.需求先去找到要删除的结点 targetNode\n\t\t\tNode targetNode = search(value);\n\t\t\t// 如果没有找到要删除的结点\n\t\t\tif (targetNode == null) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t// 如果我们发现当前这颗二叉排序树只有一个结点\n\t\t\tif (root.left == null && root.right == null) {\n\t\t\t\troot = null;\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// 去找到targetNode的父结点\n\t\t\tNode parent = searchParent(value);\n\t\t\t// 如果要删除的结点是叶子结点\n\t\t\tif (targetNode.left == null && targetNode.right == null) {\n\t\t\t\t// 判断targetNode 是父结点的左子结点，还是右子结点\n\t\t\t\tif (parent.left != null && parent.left.value == value) { // 是左子结点\n\t\t\t\t\tparent.left = null;\n\t\t\t\t} else if (parent.right != null && parent.right.value == value) {// 是由子结点\n\t\t\t\t\tparent.right = null;\n\t\t\t\t}\n\t\t\t} else if (targetNode.left != null && targetNode.right != null) { // 删除有两颗子树的节点\n\t\t\t\tint minVal = delRightTreeMin(targetNode.right);\n\t\t\t\ttargetNode.value = minVal;\n\n\t\t\t} else { // 删除只有一颗子树的结点\n\t\t\t\t// 如果要删除的结点有左子结点\n\t\t\t\tif (targetNode.left != null) {\n\t\t\t\t\tif (parent != null) {\n\t\t\t\t\t\t// 如果 targetNode 是 parent 的左子结点\n\t\t\t\t\t\tif (parent.left.value == value) {\n\t\t\t\t\t\t\tparent.left = targetNode.left;\n\t\t\t\t\t\t} else { // targetNode 是 parent 的右子结点\n\t\t\t\t\t\t\tparent.right = targetNode.left;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\troot = targetNode.left;\n\t\t\t\t\t}\n\t\t\t\t} else { // 如果要删除的结点有右子结点\n\t\t\t\t\tif (parent != null) {\n\t\t\t\t\t\t// 如果 targetNode 是 parent 的左子结点\n\t\t\t\t\t\tif (parent.left.value == value) {\n\t\t\t\t\t\t\tparent.left = targetNode.right;\n\t\t\t\t\t\t} else { // 如果 targetNode 是 parent 的右子结点\n\t\t\t\t\t\t\tparent.right = targetNode.right;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\troot = targetNode.right;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\t}\n\n\t// 添加结点的方法\n\tpublic void add(Node node) {\n\t\tif (root == null) {\n\t\t\troot = node;// 如果root为空则直接让root指向node\n\t\t} else {\n\t\t\troot.add(node);\n\t\t}\n\t}\n\n\t// 中序遍历\n\tpublic void infixOrder() {\n\t\tif (root != null) {\n\t\t\troot.infixOrder();\n\t\t} else {\n\t\t\tSystem.out.println(\"二叉排序树为空，不能遍历\");\n\t\t}\n\t}\n}\n\n// 创建Node结点\nclass Node {\n\tint value;\n\tNode left;\n\tNode right;\n\n\tpublic Node(int value) {\n\n\t\tthis.value = value;\n\t}\n\n\t// 返回左子树的高度\n\tpublic int leftHeight() {\n\t\tif (left == null) {\n\t\t\treturn 0;\n\t\t}\n\t\treturn left.height();\n\t}\n\n\t// 返回右子树的高度\n\tpublic int rightHeight() {\n\t\tif (right == null) {\n\t\t\treturn 0;\n\t\t}\n\t\treturn right.height();\n\t}\n\n\t// 返回 以该结点为根结点的树的高度\n\tpublic int height() {\n\t\treturn Math.max(left == null ? 0 : left.height(), right == null ? 0 : right.height()) + 1;\n\t}\n\t\n\t//左旋转方法\n\tprivate void leftRotate() {\n\t\t\n\t\t//创建新的结点，以当前根结点的值\n\t\tNode newNode = new Node(value);\n\t\t//把新的结点的左子树设置成当前结点的左子树\n\t\tnewNode.left = left;\n\t\t//把新的结点的右子树设置成带你过去结点的右子树的左子树\n\t\tnewNode.right = right.left;\n\t\t//把当前结点的值替换成右子结点的值\n\t\tvalue = right.value;\n\t\t//把当前结点的右子树设置成当前结点右子树的右子树\n\t\tright = right.right;\n\t\t//把当前结点的左子树(左子结点)设置成新的结点\n\t\tleft = newNode;\n\t\t\n\t\t\n\t}\n\t\n\t//右旋转\n\tprivate void rightRotate() {\n\t\tNode newNode = new Node(value);\n\t\tnewNode.right = right;\n\t\tnewNode.left = left.right;\n\t\tvalue = left.value;\n\t\tleft = left.left;\n\t\tright = newNode;\n\t}\n\n\t// 查找要删除的结点\n\t/**\n\t * \n\t * @param value\n\t *            希望删除的结点的值\n\t * @return 如果找到返回该结点，否则返回null\n\t */\n\tpublic Node search(int value) {\n\t\tif (value == this.value) { // 找到就是该结点\n\t\t\treturn this;\n\t\t} else if (value < this.value) {// 如果查找的值小于当前结点，向左子树递归查找\n\t\t\t// 如果左子结点为空\n\t\t\tif (this.left == null) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\treturn this.left.search(value);\n\t\t} else { // 如果查找的值不小于当前结点，向右子树递归查找\n\t\t\tif (this.right == null) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\treturn this.right.search(value);\n\t\t}\n\n\t}\n\n\t// 查找要删除结点的父结点\n\t/**\n\t * \n\t * @param value\n\t *            要找到的结点的值\n\t * @return 返回的是要删除的结点的父结点，如果没有就返回null\n\t */\n\tpublic Node searchParent(int value) {\n\t\t// 如果当前结点就是要删除的结点的父结点，就返回\n\t\tif ((this.left != null && this.left.value == value) || (this.right != null && this.right.value == value)) {\n\t\t\treturn this;\n\t\t} else {\n\t\t\t// 如果查找的值小于当前结点的值, 并且当前结点的左子结点不为空\n\t\t\tif (value < this.value && this.left != null) {\n\t\t\t\treturn this.left.searchParent(value); // 向左子树递归查找\n\t\t\t} else if (value >= this.value && this.right != null) {\n\t\t\t\treturn this.right.searchParent(value); // 向右子树递归查找\n\t\t\t} else {\n\t\t\t\treturn null; // 没有找到父结点\n\t\t\t}\n\t\t}\n\n\t}\n\n\t@Override\n\tpublic String toString() {\n\t\treturn \"Node [value=\" + value + \"]\";\n\t}\n\n\t// 添加结点的方法\n\t// 递归的形式添加结点，注意需要满足二叉排序树的要求\n\tpublic void add(Node node) {\n\t\tif (node == null) {\n\t\t\treturn;\n\t\t}\n\n\t\t// 判断传入的结点的值，和当前子树的根结点的值关系\n\t\tif (node.value < this.value) {\n\t\t\t// 如果当前结点左子结点为null\n\t\t\tif (this.left == null) {\n\t\t\t\tthis.left = node;\n\t\t\t} else {\n\t\t\t\t// 递归的向左子树添加\n\t\t\t\tthis.left.add(node);\n\t\t\t}\n\t\t} else { // 添加的结点的值大于 当前结点的值\n\t\t\tif (this.right == null) {\n\t\t\t\tthis.right = node;\n\t\t\t} else {\n\t\t\t\t// 递归的向右子树添加\n\t\t\t\tthis.right.add(node);\n\t\t\t}\n\n\t\t}\n\t\t\n\t\t//当添加完一个结点后，如果: (右子树的高度-左子树的高度) > 1 , 左旋转\n\t\tif(rightHeight() - leftHeight() > 1) {\n\t\t\t//如果它的右子树的左子树的高度大于它的右子树的右子树的高度\n\t\t\tif(right != null && right.leftHeight() > right.rightHeight()) {\n\t\t\t\t//先对右子结点进行右旋转\n\t\t\t\tright.rightRotate();\n\t\t\t\t//然后在对当前结点进行左旋转\n\t\t\t\tleftRotate(); //左旋转..\n\t\t\t} else {\n\t\t\t\t//直接进行左旋转即可\n\t\t\t\tleftRotate();\n\t\t\t}\n\t\t\treturn ; //必须要!!!\n\t\t}\n\t\t\n\t\t//当添加完一个结点后，如果 (左子树的高度 - 右子树的高度) > 1, 右旋转\n\t\tif(leftHeight() - rightHeight() > 1) {\n\t\t\t//如果它的左子树的右子树高度大于它的左子树的高度\n\t\t\tif(left != null && left.rightHeight() > left.leftHeight()) {\n\t\t\t\t//先对当前结点的左结点(左子树)->左旋转\n\t\t\t\tleft.leftRotate();\n\t\t\t\t//再对当前结点进行右旋转\n\t\t\t\trightRotate();\n\t\t\t} else {\n\t\t\t\t//直接进行右旋转即可\n\t\t\t\trightRotate();\n\t\t\t}\n\t\t}\n\t}\n\n\t// 中序遍历\n\tpublic void infixOrder() {\n\t\tif (this.left != null) {\n\t\t\tthis.left.infixOrder();\n\t\t}\n\t\tSystem.out.println(this);\n\t\tif (this.right != null) {\n\t\t\tthis.right.infixOrder();\n\t\t}\n\t}\n\n}\n\n```\n\n## 九、图\n\n### 1.图的表示方式\n\n​\t邻接矩阵\n\n​\t邻接表\n\n```java\npackage graph;\n\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.LinkedList;\n\npublic class Graph {\n\n\tprivate ArrayList<String> vertexList; //存储顶点集合\n\tprivate int[][] edges; //存储图对应的邻结矩阵\n\tprivate int numOfEdges; //表示边的数目\n\t//定义给数组boolean[], 记录某个结点是否被访问\n\tprivate boolean[] isVisited;\n\t\n\tpublic static void main(String[] args) {\n\t\t//测试一把图是否创建ok\n\t\tint n = 8;  //结点的个数\n\t\t//String Vertexs[] = {\"A\", \"B\", \"C\", \"D\", \"E\"};\n\t\tString Vertexs[] = {\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\"};\n\t\t\n\t\t//创建图对象\n\t\tGraph graph = new Graph(n);\n\t\t//循环的添加顶点\n\t\tfor(String vertex: Vertexs) {\n\t\t\tgraph.insertVertex(vertex);\n\t\t}\n\t\t\n\t\t//添加边\n\t\t//A-B A-C B-C B-D B-E \n//\t\tgraph.insertEdge(0, 1, 1); // A-B\n//\t\tgraph.insertEdge(0, 2, 1); // \n//\t\tgraph.insertEdge(1, 2, 1); // \n//\t\tgraph.insertEdge(1, 3, 1); // \n//\t\tgraph.insertEdge(1, 4, 1); // \n\t\t\n\t\t//更新边的关系\n\t\tgraph.insertEdge(0, 1, 1);\n\t\tgraph.insertEdge(0, 2, 1);\n\t\tgraph.insertEdge(1, 3, 1);\n\t\tgraph.insertEdge(1, 4, 1);\n\t\tgraph.insertEdge(3, 7, 1);\n\t\tgraph.insertEdge(4, 7, 1);\n\t\tgraph.insertEdge(2, 5, 1);\n\t\tgraph.insertEdge(2, 6, 1);\n\t\tgraph.insertEdge(5, 6, 1);\n\n\t\t\n\t\t\n\t\t//显示一把邻结矩阵\n\t\tgraph.showGraph();\n\t\t\n\t\t//测试一把，我们的dfs遍历是否ok\n\t\tSystem.out.println(\"深度遍历\");\n\t\tgraph.dfs(); // A->B->C->D->E [1->2->4->8->5->3->6->7]\n//\t\tSystem.out.println();\n\t\tSystem.out.println(\"广度优先!\");\n\t\tgraph.bfs(); // A->B->C->D-E [1->2->3->4->5->6->7->8]\n\t\t\n\t}\n\t\n\t//构造器\n\tpublic Graph(int n) {\n\t\t//初始化矩阵和vertexList\n\t\tedges = new int[n][n];\n\t\tvertexList = new ArrayList<String>(n);\n\t\tnumOfEdges = 0;\n\t\t\n\t}\n\t\n\t//得到第一个邻接结点的下标 w \n\t/**\n\t * \n\t * @param index \n\t * @return 如果存在就返回对应的下标，否则返回-1\n\t */\n\tpublic int getFirstNeighbor(int index) {\n\t\tfor(int j = 0; j < vertexList.size(); j++) {\n\t\t\tif(edges[index][j] > 0) {\n\t\t\t\treturn j;\n\t\t\t}\n\t\t}\n\t\treturn -1;\n\t}\n\t//根据前一个邻接结点的下标来获取下一个邻接结点\n\tpublic int getNextNeighbor(int v1, int v2) {\n\t\tfor(int j = v2 + 1; j < vertexList.size(); j++) {\n\t\t\tif(edges[v1][j] > 0) {\n\t\t\t\treturn j;\n\t\t\t}\n\t\t}\n\t\treturn -1;\n\t}\n\t\n\t//深度优先遍历算法\n\t//i 第一次就是 0\n\tprivate void dfs(boolean[] isVisited, int i) {\n\t\t//首先我们访问该结点,输出\n\t\tSystem.out.print(getValueByIndex(i) + \"->\");\n\t\t//将结点设置为已经访问\n\t\tisVisited[i] = true;\n\t\t//查找结点i的第一个邻接结点w\n\t\tint w = getFirstNeighbor(i);\n\t\twhile(w != -1) {//说明有\n\t\t\tif(!isVisited[w]) {\n\t\t\t\tdfs(isVisited, w);\n\t\t\t}\n\t\t\t//如果w结点已经被访问过\n\t\t\tw = getNextNeighbor(i, w);\n\t\t}\n\t\t\n\t}\n\t\n\t//对dfs 进行一个重载, 遍历我们所有的结点，并进行 dfs\n\tpublic void dfs() {\n\t\tisVisited = new boolean[vertexList.size()];\n\t\t//遍历所有的结点，进行dfs[回溯]\n\t\tfor(int i = 0; i < getNumOfVertex(); i++) {\n\t\t\tif(!isVisited[i]) {\n\t\t\t\tdfs(isVisited, i);\n\t\t\t}\n\t\t}\n\t}\n\t\n\t//对一个结点进行广度优先遍历的方法\n\tprivate void bfs(boolean[] isVisited, int i) {\n\t\tint u ; // 表示队列的头结点对应下标\n\t\tint w ; // 邻接结点w\n\t\t//队列，记录结点访问的顺序\n\t\tLinkedList queue = new LinkedList();\n\t\t//访问结点，输出结点信息\n\t\tSystem.out.print(getValueByIndex(i) + \"=>\");\n\t\t//标记为已访问\n\t\tisVisited[i] = true;\n\t\t//将结点加入队列\n\t\tqueue.addLast(i);\n\t\t\n\t\twhile( !queue.isEmpty()) {\n\t\t\t//取出队列的头结点下标\n\t\t\tu = (Integer)queue.removeFirst();\n\t\t\t//得到第一个邻接结点的下标 w \n\t\t\tw = getFirstNeighbor(u);\n\t\t\twhile(w != -1) {//找到\n\t\t\t\t//是否访问过\n\t\t\t\tif(!isVisited[w]) {\n\t\t\t\t\tSystem.out.print(getValueByIndex(w) + \"=>\");\n\t\t\t\t\t//标记已经访问\n\t\t\t\t\tisVisited[w] = true;\n\t\t\t\t\t//入队\n\t\t\t\t\tqueue.addLast(w);\n\t\t\t\t}\n\t\t\t\t//以u为前驱点，找w后面的下一个邻结点\n\t\t\t\tw = getNextNeighbor(u, w); //体现出我们的广度优先\n\t\t\t}\n\t\t}\n\t\t\n\t} \n\t\n\t//遍历所有的结点，都进行广度优先搜索\n\tpublic void bfs() {\n\t\tisVisited = new boolean[vertexList.size()];\n\t\tfor(int i = 0; i < getNumOfVertex(); i++) {\n\t\t\tif(!isVisited[i]) {\n\t\t\t\tbfs(isVisited, i);\n\t\t\t}\n\t\t}\n\t}\n\t\n\t//图中常用的方法\n\t//返回结点的个数\n\tpublic int getNumOfVertex() {\n\t\treturn vertexList.size();\n\t}\n\t//显示图对应的矩阵\n\tpublic void showGraph() {\n\t\tfor(int[] link : edges) {\n\t\t\tSystem.err.println(Arrays.toString(link));\n\t\t}\n\t}\n\t//得到边的数目\n\tpublic int getNumOfEdges() {\n\t\treturn numOfEdges;\n\t}\n\t//返回结点i(下标)对应的数据 0->\"A\" 1->\"B\" 2->\"C\"\n\tpublic String getValueByIndex(int i) {\n\t\treturn vertexList.get(i);\n\t}\n\t//返回v1和v2的权值\n\tpublic int getWeight(int v1, int v2) {\n\t\treturn edges[v1][v2];\n\t}\n\t//插入结点\n\tpublic void insertVertex(String vertex) {\n\t\tvertexList.add(vertex);\n\t}\n\t//添加边\n\t/**\n\t * \n\t * @param v1 表示点的下标即使第几个顶点  \"A\"-\"B\" \"A\"->0 \"B\"->1\n\t * @param v2 第二个顶点对应的下标\n\t * @param weight 表示 \n\t */\n\tpublic void insertEdge(int v1, int v2, int weight) {\n\t\tedges[v1][v2] = weight;\n\t\tedges[v2][v1] = weight;\n\t\tnumOfEdges++;\n\t}\n}\n\n```\n\n\n\n## 十、常用算法\n\n### 1.查找算法\n\n#### 二分查找和插值查找\n\n```java\n /**\n     * 循环实现二分查找算法，已排好序得数组arrays,-1无法查到数据\n     *\n     * @param ele\n     * @return\n     */\n    public static int binSearch(int[] arr, int ele) {\n        //第一个下标\n        int sIndex = 0;\n        //最后一个下标\n        int eIndex = arr.length - 1;\n        while (sIndex <= eIndex) {\n            int mIndex = sIndex + (eIndex - sIndex) / 2;\n            if (ele == arr[mIndex]) {\n                return mIndex;\n            } else if (ele < arr[mIndex]) {\n                eIndex = mIndex - 1;\n            } else {\n                sIndex = mIndex + 1;\n            }\n        }\n        return -1;\n    }\n\n    /**\n     * 递归实现二分查找\n     */\n    public static int recurSeach(int[] arr, int ele, int sIndex, int eIndex) {\n        int mIndex = sIndex + (eIndex - sIndex) / 2;\n        if (ele < arr[sIndex] || ele > arr[eIndex] || sIndex > eIndex) {\n            return -1;\n        }\n        if (arr[mIndex] == ele) {\n            return mIndex;\n        } else if (ele < arr[mIndex]) {\n            return recurSeach(arr, ele, sIndex, mIndex - 1);\n        } else {\n            return recurSeach(arr, ele, mIndex + 1, eIndex);\n        }\n    }\n\n//编写插值查找算法\n\t//说明：插值查找算法，也要求数组是有序的\n\t/**\n\t * \n\t * @param arr 数组\n\t * @param left 左边索引\n\t * @param right 右边索引\n\t * @param findVal 查找值\n\t * @return 如果找到，就返回对应的下标，如果没有找到，返回-1\n\t */\n\tpublic static int insertValueSearch(int[] arr, int left, int right, int findVal) { \n\n\t\tSystem.out.println(\"插值查找次数~~\");\n\t\t\n\t\t//注意：findVal < arr[0]  和  findVal > arr[arr.length - 1] 必须需要\n\t\t//否则我们得到的 mid 可能越界\n\t\tif (left > right || findVal < arr[0] || findVal > arr[arr.length - 1]) {\n\t\t\treturn -1;\n\t\t}\n\n\t\t// 求出mid, 自适应 应用数据公式 y=kx + b，这里mid不是中值的意思，而是找到最接近的索引，(left,arr[left]),(right,arr[right])\n\t\tint mid = left + (right - left) * (findVal - arr[left]) / (arr[right] - arr[left]);\n\t\tint midVal = arr[mid];\n\t\tif (findVal > midVal) { // 说明应该向右边递归\n\t\t\treturn insertValueSearch(arr, mid + 1, right, findVal);\n\t\t} else if (findVal < midVal) { // 说明向左递归查找\n\t\t\treturn insertValueSearch(arr, left, mid - 1, findVal);\n\t\t} else {\n\t\t\treturn mid;\n\t\t}\n\n\t}\n\n\n\n/**\n\t * 这里我们实现的线性查找是找到一个满足条件的值，就返回\n\t * @param arr\n\t * @param value\n\t * @return\n\t */\n\tpublic static int seqSearch(int[] arr, int value) {\n\t\t// 线性查找是逐一比对，发现有相同值，就返回下标\n\t\tfor (int i = 0; i < arr.length; i++) {\n\t\t\tif(arr[i] == value) {\n\t\t\t\treturn i;\n\t\t\t}\n\t\t}\n\t\treturn -1;\n\t}\n```\n#### 斐波那契(黄金分割法)查找算法\n\n**斐波那契(黄金分割法)原理**:\n\n**斐波那契查找**原理与前两种相似，仅仅\n 改变了中间结点（mid）的位置，mid不\n 再是中间或插值得到，而是位于黄金分\n 割点附近，即**mid=low+F(k-1)-1\n** （F代表斐波那契数列），如下图所示\n\n![image-20210109154304890](数据结构整理/image-20210109154304890.png)\n\n对F(k-1)-1的理解：\n\n1)由斐波那契数列 **F[k]=F[k-1]+F[k-2]** 的性质，可以得到 **（F[k]-1）=（F[k-1]-1）+（F[k-2]-1+1** 。该式说明：只要顺序表的长度为**F[k]-1**，则可以将该表分成长度为**F[k-1]-1**和**F[k-2]-1**的两段，即如上图所示。从而中间位置为mid=low+Fk-1)-1\n\n2)类似的，每一子段也可以用相同的方式分割\n\n3)但顺序表长度n不一定刚好等于F[k]-1，所以需要将原来的顺序表长度n增加至F[k]-1。这里的k值只要能使得F[k]-1恰好大于或等于n即可，由以下代码得到,顺序表长度增加后，新增的位置（从n+1到F[k]-1位置），都赋为n位置的值即可。\n\n\n```java\npackage search;\n\nimport java.util.Arrays;\n\npublic class FibonacciSearch {\n\n    public static int maxSize = 20;\n\n    public static void main(String[] args) {\n        int[] arr = {1, 8, 10, 89, 1000, 1234};\n\n        System.out.println(\"index=\" + fibSearch(arr, 189));// 0\n\n    }\n\n    //因为后面我们mid=low+F(k-1)-1，需要使用到斐波那契数列，因此我们需要先获取到一个斐波那契数列\n    //非递归方法得到一个斐波那契数列\n    public static int[] fib() {\n        int[] f = new int[maxSize];\n        f[0] = 1;\n        f[1] = 1;\n        for (int i = 2; i < maxSize; i++) {\n            f[i] = f[i - 1] + f[i - 2];\n        }\n        return f;\n    }\n\n    //编写斐波那契查找算法\n    //使用非递归的方式编写算法\n\n    /**\n     * @param a   数组\n     * @param key 我们需要查找的关键码(值)\n     * @return 返回对应的下标，如果没有-1\n     */\n    public static int fibSearch(int[] a, int key) {\n        int low = 0;\n        int high = a.length - 1;\n        int k = 0; //表示斐波那契分割数值的下标\n        int mid = 0; //存放mid值\n        int[] f = fib(); //获取到斐波那契数列\n        //获取到斐波那契分割数值的下标\n        while (high > f[k] - 1) {\n            k++;\n        }\n        //因为 f[k] 值 可能大于 a 的 长度，因此我们需要使用Arrays类，构造一个新的数组，并指向temp[]\n        //不足的部分会使用0填充\n        int[] temp = Arrays.copyOf(a, f[k]);\n//\t\tSystem.out.println(Arrays.toString(temp));\n        //实际上需求使用a数组最后的数填充 temp\n        //举例:\n        //temp = {1,8, 10, 89, 1000, 1234, 0, 0}  => {1,8, 10, 89, 1000, 1234, 1234, 1234,}\n        for (int i = high + 1; i < temp.length; i++) {\n            temp[i] = a[high];\n        }\n\n        // 使用while来循环处理，找到我们的数 key\n        while (low <= high) { // 只要这个条件满足，就可以找\n            mid = low + f[k - 1] - 1;\n            if (key < temp[mid]) { //我们应该继续向数组的前面查找(左边)\n                high = mid - 1;\n                //为甚是 k--\n                //说明\n                //1. 全部元素 = 前面的元素 + 后边元素\n                //2. f[k] = f[k-1] + f[k-2]\n                //因为 前面有 f[k-1]个元素,所以可以继续拆分 f[k-1] = f[k-2] + f[k-3]\n                //即 在 f[k-1] 的前面继续查找 k--\n                //即下次循环 mid = f[k-1-1]-1\n                k--;\n            } else if (key > temp[mid]) { // 我们应该继续向数组的后面查找(右边)\n                low = mid + 1;\n                //为什么是k -=2\n                //说明\n                //1. 全部元素 = 前面的元素 + 后边元素\n                //2. f[k] = f[k-1] + f[k-2]\n                //3. 因为后面我们有f[k-2] 所以可以继续拆分 f[k-1] = f[k-3] + f[k-4]\n                //4. 即在f[k-2] 的前面进行查找 k -=2\n                //5. 即下次循环 mid = f[k - 1 - 2] - 1\n                k -= 2;\n            } else { //找到\n                //需要确定，返回的是哪个下标\n                if (mid <= high) {\n                    return mid;\n                } else {\n                    return high;\n                }\n            }\n        }\n        return -1;\n    }\n}\n\n```\n\n\n\n### 2.全排列\n\n```java\n    \n\t/** 完整代码如下：\n     * fullSort方法接收三个参数，数组arr，起始位置start，终止为止end，意思就是完成arr数组从start到end之间记录的全排列。\n     * 分两个步骤：\n     * （1）确定第一位的字符\n     * 数组arr从start到end的所有记录都可以出现在第一个位置，所以直接一个for循环，考虑了这所有的情况。在for循环中，swap方法就是交换i和start位置的数，保证当前i指向的记录出现在第一个位置，也就是start指向的位置\n     * （2）剩下的记录继续做全排列\n     * 这个就是一个递归函数的调用，只需要修改起始位置，也就是start+1，因为start的位置已经放了记录，所以只需要继续做从start+1到end的全排列即可\n     * 至于紧接着的一个swap方法是做什么的呢？因为数组传递的是地址，所以所有的修改对所有人都是共享的，因此为了保证每一次的交换不会对下一次的交换产生影响，要重新交换一下位置，也就是复原，不然对下一次的交换就有影响了\n     * 递归的终止条件就是当start==end，也就是只有一个记录需要做全排列，也就是到了最后一个记录，这就是全排列的一种情况，输入本次的记录，也就是数组arr即可。\n     *\n     * @param arr\n     * @param start\n     * @param end\n     */  \npublic static void fullSort(int arr[], int start, int end) {\n        //递归终止条件\n        if (start == end) {\n            for (int i : arr) {\n                System.out.print(i);\n            }\n            System.out.println();\n            return;\n        }\n        for (int i = start; i <= end; i++) {\n            swap(arr, i, start);\n            fullSort(arr, start + 1, end);\n            swap(arr, i, start);\n        }\n    }\n```\n\n### 3.分治算法\n\n**分治算法的基本步骤**\n\n\n\n分治法在每一层递归上都有三个步骤：\n\n1)分解：将原问题分解为若干个规模较小，相互独立，与原问题形式相同的子问题\n\n2)解决：若子问题规模较小而容易被解决则直接解，否则递归地解各个子问题\n\n3)合并：将各个子问题的解合并为原问题的解。\n\n常见的分治算法有汉诺塔和归并排序等\n\n```java\n//汉诺塔的移动的方法\n\t//使用分治算法\n\t\n\tpublic static void hanoiTower(int num, char a, char b, char c) {\n\t\t//如果只有一个盘\n\t\tif(num == 1) {\n\t\t\tSystem.out.println(\"第1个盘从 \" + a + \"->\" + c);\n\t\t} else {\n\t\t\t//如果我们有 n >= 2 情况，我们总是可以看做是两个盘 1.最下边的一个盘 2. 上面的所有盘\n\t\t\t//1. 先把 最上面的所有盘 A->B， 移动过程会使用到 c\n\t\t\thanoiTower(num - 1, a, c, b);\n\t\t\t//2. 把最下边的盘 A->C\n\t\t\tSystem.out.println(\"第\" + num + \"个盘从 \" + a + \"->\" + c);\n\t\t\t//3. 把B塔的所有盘 从 B->C , 移动过程使用到 a塔  \n\t\t\thanoiTower(num - 1, b, a, c);\n\t\t\t\n\t\t}\n\t}\n```\n\n### 4.动态规划\n\n**应用场景背包问题**\n\n\n\n背包问题：有一个背包，容量为4磅 ， 现有如下物品\n\n| **物品** | **重量** | **价格** |\n| -------- | -------- | -------- |\n| 吉他(G)  | 1        | 1500     |\n| 音响(S)  | 4        | 3000     |\n| 电脑(L)  | 3        | 2000     |\n\n1)要求达到的目标为装入的背包的总价值最大，并且重量不超出\n\n2)要求装入的物品不能重复\n\n| **物品** | **0** **磅** | **1磅** | **2磅** | **3磅** | **4磅**   |\n| -------- | ------------ | ------- | ------- | ------- | --------- |\n|          | 0            | 0       | 0       | 0       | 0         |\n| 吉他(G)  | 0            | 1500(G) | 1500(G) | 1500(G) | 1500(G)   |\n| 音响(S)  | 0            | 1500(G) | 1500(G) | 1500(G) | 3000(S)   |\n| 电脑(L)  | 0            | 1500(G) | 1500(G) | 2000(L) | 3500(L+G) |\n**思路分析和图解**\n算法的主要思想，利用动态规划来解决。每次遍历到的第i个物品，根据w[i]和v[i]来确定是否需要将该物品放入背包中。即对于给定的n个物品，设v[i]、w[i]分别为第i个物品的价值和重量，C为背包的容量。再令v[i][j]表示在前i个物品中能够装入容量为j的背包中的最大价值。则我们有下面的结果：\u000b\u000b(1)  v[i][0]=v[0][j]=0; //表示 填入表 第一行和第一列是0\n      (2) 当w[i]> j 时：v[i][j]=v[i-1][j]   // 当准备加入新增的商品的容量大于 当前背包的容量时，就直接使用上一个单元格的装入策略\n      (3) 当j>=w[i]时： v[i][j]=max{v[i-1][j], v[i]+v[i-1][j-w[i]]}  \n// 当 准备加入的新增的商品的容量小于等于当前背包的容量,\n// 装入的方式:\nv[i-1][j]： 就是上一个单元格的装入的最大值\nv[i] : 表示当前商品的价值 \nv[i-1][j-w[i]] ： 装入i-1商品，到剩余空间j-w[i]的最大值\n当j>=w[i]时： v[i][j]=max{v[i-1][j], v[i]+v[i-1][j-w[i]]} : \n\n```java\npackage algorithm.dynamic;\n\npublic class KnapsackProblem {\n    public static void main(String[] args) {\n        int[] w = {1, 4, 3};//物品的重量\n        int[] val = {1500, 3000, 2000}; //物品的价值\n        int m = 4; //背包的容量\n        int n = val.length; //物品的个数\n\n        //创建二维数组，\n        //v[i][j] 表示在前i个物品中能够装入容量为j的背包中的最大价值\n        int[][] v = new int[n + 1][m + 1];\n        //用来存放物品放入当前的情况记录到path\n        int[][] path = new int[n + 1][m + 1];\n\n        //初始化第一行和第一列, 这里在本程序中，可以不去处理，因为默认就是0\n        for (int i = 0; i < v.length; i++) {\n            v[i][0] = 0;//将第一列设置为0\n        }\n        for (int i = 0; i < v[0].length; i++) {\n            v[0][i] = 0;//将第一行设置0\n        }\n\n        //根据前面得到公式来动态规划处理\n        for (int i = 1; i < v.length; i++) { //不处理第一行 i是从1开始的\n            for (int j = 1; j < v[0].length; j++) {//不处理第一列, j是从1开始的\n                //公式\n                if (w[i - 1] > j) {\n                    v[i][j] = v[i - 1][j];\n                } else {\n//                    v[i][j] = Math.max(v[i - 1][j], val[i - 1] + v[i - 1][j - w[i - 1]]);\n                    if (v[i - 1][j] < val[i - 1] + v[i - 1][j - w[i - 1]]) {\n                        v[i][j] = val[i - 1] + v[i - 1][j - w[i - 1]];\n                        //把当前的情况记录到path\n                        path[i][j] = 1;\n                    } else {\n                        v[i][j] = v[i - 1][j];\n                    }\n                }\n            }\n        }\n\n        //输出一下v 看看目前的情况\n        for (int i = 0; i < v.length; i++) {\n            for (int j = 0; j < v[0].length; j++) {\n                System.out.print(v[i][j] + \" \");\n            }\n            System.out.println();\n        }\n\n        //输出一下path 看看目前的情况\n        for (int i = 0; i < v.length; i++) {\n            for (int j = 0; j < v[0].length; j++) {\n                System.out.print(path[i][j] + \" \");\n            }\n            System.out.println();\n        }\n\n        //动脑筋\n        int i = path.length - 1; //行的最大下标\n        int j = path[0].length - 1;  //列的最大下标\n        while (i > 0 && j > 0) {\n            if (path[i][j] == 1) {\n                System.out.printf(\"第%d个商品放入到背包\\n\", i);\n                j -= w[i - 1];\n            }\n            i--;\n        }\n//        while (i > 0 && j > 0) { //从path的最后开始找\n//            if (path[i][j] == 1) {\n//                System.out.printf(\"第%d个商品放入到背包\\n\", i);\n//                j -= w[i - 1]; //w[i-1]\n//            }\n//            i--;\n//        }\n    }\n}\n```\n\n\n\n### 5.kmp算法\n\n**应用场景**-字符串匹配问题\n\n字符串匹配问题：：\n\n1)有一个字符串 str1= \"\"硅硅谷 尚硅谷你尚硅 尚硅谷你尚硅谷你尚硅你好\"\"，和一个子串 str2=\"尚硅谷你尚硅你\"\n\n2)现在要判断 **str1** **是否含有** **str2**, 如果存在，就返回第一次出现的位置, 如果没有，则返回-1\n\n暴力匹配代码：\n\n```java\npackage algorithm.kmp;\n\npublic class ViolenceMatch {\n    public static void main(String[] args) {\n        String str1 = \"硅硅谷 尚硅谷你尚硅 尚硅谷你尚硅谷你尚硅你好\";\n        String str2 = \"尚硅谷你尚硅你\";\n        int index = violenceMatch(str1, str2);\n        System.out.println(\"index=\" + index);\n    }\n\n    // 暴力匹配算法实现\n    public static int violenceMatch(String str1, String str2) {\n        char[] s1 = str1.toCharArray();\n        char[] s2 = str2.toCharArray();\n        int s1Len = s1.length;\n        int s2Len = s2.length;\n\n        int i = 0; // i索引指向s1\n        int j = 0; // j索引指向s2\n\n        while ( i < s1Len && j < s2Len) {\n            if (s1[i] == s2[j]) {//匹配ok\n                i++;\n                j++;\n            } else { //没有匹配成功\n                //如果失配（即str1[i]! = str2[j]），令i = i - (j - 1)，j = 0。\n                i = i - (j - 1);\n                j = 0;\n            }\n        }\n        //判断是否匹配成功\n        if (j == s2Len) {\n            return i - j;\n        } else {\n            return -1;\n        }\n\n    }\n}\n\n```\n\n**KMP**算法介绍\n\n\n\n1)KMP是一个解决模式串在文本串是否出现过，如果出现过，最早出现的位置的经典算法\n\n2)Knuth-Morris-Pratt **字符串查找算法**，简称为 “KMP算法”，常用于在一个文本串S内查找一个模式串P 的出现位置，这个算法由Donald Knuth、Vaughan Pratt、James H. Morris三人于1977年联合发表，故取这3人的姓氏命名此算法.\n\n3)KMP方法算法就利用之前判断过信息，通过一个next数组，保存模式串中前后最长公共子序列的长度，每次回溯时，通过next数组找到，前面匹配过的位置，省去了大量的计算时间\n\n4)参考资料：[https://](https://www.cnblogs.com/ZuoAndFutureGirl/p/9028287.html)[www.cnblogs.com/ZuoAndFutureGirl/p/9028287.html](https://www.cnblogs.com/ZuoAndFutureGirl/p/9028287.html) \n\n**核心：**\n\n”部分匹配”的实质是，有时候，字符串头部和尾部会有重复。比如，”ABCDAB”之中有两个”AB”，那么它的”部分匹配值”就是2（”AB”的长度）。搜索词移动的时候，第一个”AB”向后移动 4 位（字符串长度-部分匹配值），就可以来到第二个”AB”的位置。 \n\n![img](数据结构整理/clip_image002.jpg)\n\n```java\npackage algorithm.kmp;\n\nimport java.util.Arrays;\n\npublic class KMPAlgorithm {\n    public static void main(String[] args) {\n        String str1 = \"BBC ABCDAB ABCDABCDABDE\"; // ABCDABD\n        String str2 = \"ABCDABD\"; // 0 0 0 0 1 2 0\n\n        int[] next = kmpNext(\"ABCDABD\"); //[0 0 0 0 1 2 0]\n        System.out.println(\"next=\" + Arrays.toString(next));\n\n        int index = kmpSearch(str1, str2, next);\n        System.out.println(\"index=\" + index); // 15了\n    }\n\n    private static int kmpSearch(String str1, String str2, int[] next) {\n        //遍历\n        for (int i = 0, j = 0; i < str1.length(); i++) {\n            //需要处理 str1.charAt(i) ！= str2.charAt(j), 去调整j的大小\n            //KMP算法核心点, 可以验证...\n            while (j > 0 && str1.charAt(i) != str2.charAt(j)) {\n                j = next[j - 1];\n            }\n\n            if (str1.charAt(i) == str2.charAt(j)) {\n                j++;\n            }\n            if (j == str2.length()) {\n                //获取起始索引(最后)\n                return i - j + 1;\n            }\n        }\n        return -1;\n    }\n\n    //获取到一个字符串(子串) 的部分匹配值表\n    private static int[] kmpNext(String dest) {\n        //创建一个next 数组保存部分匹配值\n        int[] next = new int[dest.length()];\n        next[0] = 0; //如果字符串是长度为1 部分匹配值就是0\n        for (int i = 1, j = 0; i < dest.length(); i++) {\n            //当dest.charAt(i) != dest.charAt(j) ，我们需要从next[j-1]获取新的j\n            //直到我们发现 有  dest.charAt(i) == dest.charAt(j)成立才退出\n            //这是kmp算法的核心点\n            while (j > 0 && dest.charAt(i) != dest.charAt(j)) {\n                j = next[j - 1];\n            }\n            //当dest.charAt(i) == dest.charAt(j) 满足时，部分匹配值就是+1\n            if (dest.charAt(i) == dest.charAt(j)) {\n                j++;\n            }\n            next[i] = j;\n        }\n        return next;\n    }\n}\n```\n\n \n\n### 6.贪心算法\n\n**应用场景**-集合覆盖问题\n\n假设存在下面需要付费的广播台，以及广播台信号可以覆盖的地区。 **如何选择最少的广播台**，让所有的地区都可以接收到信号\n\n| 广播台 | 覆盖地区               |\n| ------ | ---------------------- |\n| K1     | \"北京\", \"上海\", \"天津\" |\n| K2     | \"广州\", \"北京\", \"深圳\" |\n| K3     | \"成都\", \"上海\", \"杭州\" |\n| K4     | \"上海\", \"天津\"         |\n| K5     | \"杭州\", \"大连\"         |\n\n解决方案：\n\n1.穷举法 2<sup>n</sup>-1种可能\n\n2.贪心算法\n\n**贪心算法介绍**\n\n1)贪婪算法(贪心算法)是指在对问题进行求解时，在每一步选择中都采取最好或者最优(即最有利)的选择，从而希望能够导致结果是最好或者最优的算法\n\n2)贪婪算法所得到的结果**不一定是最优的结果(有时候会是最优解)**，但是都是相对近似(接近)最优解的结果\n\n**实现思路分析:** \n\n使用贪婪算法，效率高:\n\n目前并没有算法可以快速计算得到准备的值， 使用贪婪算法，则可以得到非常接近的解，并且效率高。选择策略上，因为需要覆盖全部地区的最小集合:\n\n1)遍历所有的广播电台, 找到一个覆盖了最多**未覆盖的地**区**的电台(此电台可能包含一些已覆盖的地区，但没有关系）\n\n2)将这个电台加入到一个集合中(比如ArrayList), 想办法把该电台覆盖的地区在下次比较时去掉。\n\n3)重复第1步直到覆盖了全部的地区\n\n```java\npackage algorithm.greedy;\n\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.HashSet;\n\npublic class GreedyAlgorithm {\n\n\tpublic static void main(String[] args) {\n\t\t//创建广播电台,放入到Map\n\t\tHashMap<String,HashSet<String>> broadcasts = new HashMap<String, HashSet<String>>();\n\t\t//将各个电台放入到broadcasts\n\t\tHashSet<String> hashSet1 = new HashSet<String>();\n\t\thashSet1.add(\"北京\");\n\t\thashSet1.add(\"上海\");\n\t\thashSet1.add(\"天津\");\n\t\t\n\t\tHashSet<String> hashSet2 = new HashSet<String>();\n\t\thashSet2.add(\"广州\");\n\t\thashSet2.add(\"北京\");\n\t\thashSet2.add(\"深圳\");\n\t\t\n\t\tHashSet<String> hashSet3 = new HashSet<String>();\n\t\thashSet3.add(\"成都\");\n\t\thashSet3.add(\"上海\");\n\t\thashSet3.add(\"杭州\");\n\t\t\n\t\t\n\t\tHashSet<String> hashSet4 = new HashSet<String>();\n\t\thashSet4.add(\"上海\");\n\t\thashSet4.add(\"天津\");\n\t\t\n\t\tHashSet<String> hashSet5 = new HashSet<String>();\n\t\thashSet5.add(\"杭州\");\n\t\thashSet5.add(\"大连\");\n\t\n\t\t//加入到map\n\t\tbroadcasts.put(\"K1\", hashSet1);\n\t\tbroadcasts.put(\"K2\", hashSet2);\n\t\tbroadcasts.put(\"K3\", hashSet3);\n\t\tbroadcasts.put(\"K4\", hashSet4);\n\t\tbroadcasts.put(\"K5\", hashSet5);\n\t\t\n\t\t//allAreas 存放所有的地区\n\t\tHashSet<String> allAreas = new HashSet<String>();\n\t\tallAreas.add(\"北京\");\n\t\tallAreas.add(\"上海\");\n\t\tallAreas.add(\"天津\");\n\t\tallAreas.add(\"广州\");\n\t\tallAreas.add(\"深圳\");\n\t\tallAreas.add(\"成都\");\n\t\tallAreas.add(\"杭州\");\n\t\tallAreas.add(\"大连\");\n\t\t\n\t\t//创建ArrayList, 存放选择的电台集合\n\t\tArrayList<String> selects = new ArrayList<String>();\n\t\t\n\t\t//定义一个临时的集合， 在遍历的过程中，存放遍历过程中的电台覆盖的地区和当前还没有覆盖的地区的交集\n\t\tHashSet<String> tempSet = new HashSet<String>();\n\t\t\n\t\t//定义给maxKey ， 保存在一次遍历过程中，能够覆盖最大未覆盖的地区对应的电台的key\n\t\t//如果maxKey 不为null , 则会加入到 selects\n\t\tString maxKey = null;\n\t\twhile(allAreas.size() != 0) { // 如果allAreas 不为0, 则表示还没有覆盖到所有的地区\n\t\t\t//每进行一次while,需要\n\t\t\tmaxKey = null;\n\t\t\t\n\t\t\t//遍历 broadcasts, 取出对应key\n\t\t\tfor(String key : broadcasts.keySet()) {\n\t\t\t\t//每进行一次for\n\t\t\t\ttempSet.clear();\n\t\t\t\t//当前这个key能够覆盖的地区\n\t\t\t\tHashSet<String> areas = broadcasts.get(key);\n\t\t\t\ttempSet.addAll(areas);\n\t\t\t\t//求出tempSet 和   allAreas 集合的交集, 交集会赋给 tempSet\n\t\t\t\ttempSet.retainAll(allAreas);\n\t\t\t\t//如果当前这个集合包含的未覆盖地区的数量，比maxKey指向的集合地区还多\n\t\t\t\t//就需要重置maxKey\n\t\t\t\t// tempSet.size() >broadcasts.get(maxKey).size()) 体现出贪心算法的特点,每次都选择最优的\n\t\t\t\tif(tempSet.size() > 0 && \n\t\t\t\t\t\t(maxKey == null || tempSet.size() >broadcasts.get(maxKey).size())){\n\t\t\t\t\tmaxKey = key;\n\t\t\t\t}\n\t\t\t}\n\t\t\t//maxKey != null, 就应该将maxKey 加入selects\n\t\t\tif(maxKey != null) {\n\t\t\t\tselects.add(maxKey);\n\t\t\t\t//将maxKey指向的广播电台覆盖的地区，从 allAreas 去掉\n\t\t\t\tallAreas.removeAll(broadcasts.get(maxKey));\n\t\t\t}\n\t\t\t\n\t\t}\n\t\t\n\t\tSystem.out.println(\"得到的选择结果是\" + selects);//[K1,K2,K3,K5]\n\t\t\n\t\t\n\t\t\n\t}\n\n}\n\n```\n\n\n\n### 7.普利姆算法\n\n**应用场景**-修路问题\n\n看一个应用场景和问题：2<sup>n</sup>\n\n![image-20210110111607853](数据结构整理/image-20210110111607853.png)\n\n1)有胜利乡有7个村庄(A, B, C, D, E, F, G) ，现在需要修路把7个村庄连通\n\n2)各个村庄的距离用边线表示(权) ，比如 A – B 距离 5公里\n\n3)问：如何修路保证各个村庄都能连通，并且总的修建公路总里程最短?\n\n思路: 将10条边，连接即可，但是总的里程数不是最小.\n\n**正确的思路**，就是尽可能的选择少的路线，并且每条路线最小，保证总里程数最少. \n\n**最小生成树:**\n\n![image-20210110114746786](数据结构整理/image-20210110114746786.png)\n\n修路问题本质就是就是最小生成树问题， 先介绍一下最小生成树(Minimum Cost Spanning Tree)，简称MST\n\n1)给定一个带权的无向连通图,如何选取一棵生成树,使树上所有**边上权的总和为最小**,这叫最小生成树 \n\n2)N个顶点，一定有N-1条边\n\n3)包含全部顶点\n\n4)N-1条边都在图中\n\n5)举例说明(如图:)\n\n求最小生成树的算法主要是**普里姆**算法和**克鲁斯卡尔**算法\n\n```java\npackage algorithm.prim;\n\n\nimport java.util.Arrays;\n\npublic class PrimAlgorithm {\n    public static void main(String[] args) {\n    //测试看看图是否创建ok\n        char[] data = new char[]{'A', 'B', 'C', 'D', 'E', 'F', 'G'};\n        int verxs = data.length;\n        //邻接矩阵的关系使用二维数组表示,10000这个大数，表示两个点不联通\n        int[][] weight = new int[][]{\n                {10000, 5, 7, 10000, 10000, 10000, 2},\n                {5, 10000, 10000, 9, 10000, 10000, 3},\n                {7, 10000, 10000, 10000, 8, 10000, 10000},\n                {10000, 9, 10000, 10000, 10000, 4, 10000},\n                {10000, 10000, 8, 10000, 10000, 5, 4},\n                {10000, 10000, 10000, 4, 5, 10000, 6},\n                {2, 3, 10000, 10000, 4, 6, 10000},};\n\n        //创建MGraph对象\n        MGraph graph = new MGraph(verxs);\n        MinTree minTree = new MinTree();\n        minTree.createGraph(graph, verxs, data, weight);\n        //输出\n        minTree.showGraph(graph);\n        minTree.prim(graph,1);\n    }\n}\n\n//创建最小生成树->村庄的图\nclass MinTree {\n    //创建图的邻接矩阵\n\n    /**\n     * @param graph  图对象\n     * @param verxs  图对应的顶点个数\n     * @param data   图的各个顶点的值\n     * @param weight 图的邻接矩阵\n     */\n    public void createGraph(MGraph graph, int verxs, char[] data, int[][] weight) {\n        int i, j;\n        for (i = 0; i < verxs; i++) { //顶点\n            graph.data[i] = data[i];\n            for (j = 0; j < verxs; j++) {\n                graph.weight[i][j] = weight[i][j];\n            }\n        }\n    }\n\n    //显示图的邻接矩阵\n    public void showGraph(MGraph graph) {\n        for (int[] link : graph.weight) {\n            System.out.println(Arrays.toString(link));\n        }\n    }\n\n    ///编写prim算法，得到最小生成树\n    /**\n     *\n     * @param graph 图\n     * @param v 表示从图的第几个顶点开始生成'A'->0 'B'->1...\n     */\n    public void prim(MGraph graph, int v) {\n        //visited[] 标记结点(顶点)是否被访问过\n        int visited[] = new int[graph.verxs];\n        //visited[] 默认元素的值都是0, 表示没有访问过\n//\t\tfor(int i =0; i <graph.verxs; i++) {\n//\t\t\tvisited[i] = 0;\n//\t\t}\n\n        //把当前这个结点标记为已访问\n        visited[v] = 1;\n        //h1 和 h2 记录两个顶点的下标\n        int h1 = -1;\n        int h2 = -1;\n        int minWeight = 10000;//将 minWeight 初始成一个大数，后面在遍历过程中，会被替换\n        for (int k = 1; k < graph.verxs; k++) {//因为有 graph.verxs顶点，普利姆算法结束后，有 graph.verxs-1边\n\n\n            //这个是确定每一次生成的子图 ，和哪个结点的距离最近\n            for (int i = 0; i < graph.verxs ; i++) {// i结点表示被访问过的结点\n                for(int j = 0; j< graph.verxs;j++) {//j结点表示还没有访问过的结点\n                    if(visited[i] == 1 && visited[j] == 0 && graph.weight[i][j] < minWeight) {\n                        //替换minWeight(寻找已经访问过的结点和未访问过的结点间的权值最小的边)\n                        minWeight = graph.weight[i][j];\n                        h1 = i;\n                        h2 = j;\n                    }\n                }\n\n            }\n            //找到一条边是最小\n            System.out.println(\"边<\" + graph.data[h1] + \",\" + graph.data[h2] + \"> 权值:\" + minWeight);\n            //将当前这个结点标记为已经访问\n            visited[h2] = 1;\n            //minWeight 重新设置为最大值 10000\n            minWeight = 10000;\n        }\n    }\n}\n\nclass MGraph {\n    int verxs; //表示图的节点个数\n    char[] data; //存放节点数据\n    int[][] weight; //存放边，就是我们的邻接矩阵\n\n    public MGraph(int verxs) {\n        this.verxs = verxs;\n        data = new char[verxs];\n        weight = new int[verxs][verxs];\n    }\n}\n\n```\n\n### 8.克鲁斯卡尔算法\n\n应用场景-公交站问题\n\n\n\n看一个应用场景和问题：\n\n![image-20210110115039736](数据结构整理/image-20210110115039736.png)\n\n1)某城市新增7个站点(A, B, C, D, E, F, G) ，现在需要修路把7个站点连通\n\n2)各个站点的距离用边线表示(权) ，比如 A – B 距离 12公里\n\n3)问：如何修路保证各个站点都能连通，并且总的修建公路总里程最短? \n\n\n\n**克鲁斯卡**尔算法介绍 \n\n1)克鲁斯卡尔(Kruskal)算法，是用来求加权连通图的最小生成树的算法。\n\n2)基本思想：按照权值从小到大的顺序选择n-1条边，并保证这n-1条边不构成回路\n\n3)具体做法：首先构造一个只含n个顶点的森林，然后依权值从小到大从连通网中选择边加入到森林中，并使森林中不产生回路，直至森林变成一棵树为止\n\n![image-20210110140634167](数据结构整理/image-20210110140634167.png)\n\n```java\npackage algorithm.kruskal;\n\nimport java.util.Arrays;\n\npublic class KruskalCase {\n\n\tprivate int edgeNum; //边的个数\n\tprivate char[] vertexs; //顶点数组\n\tprivate int[][] matrix; //邻接矩阵\n\t//使用 INF 表示两个顶点不能连通\n\tprivate static final int INF = Integer.MAX_VALUE;\n\t\n\tpublic static void main(String[] args) {\n\t\tchar[] vertexs = {'A', 'B', 'C', 'D', 'E', 'F', 'G'};\n\t\t//克鲁斯卡尔算法的邻接矩阵  \n\t      int matrix[][] = {\n\t      /*A*//*B*//*C*//*D*//*E*//*F*//*G*/\n\t/*A*/ {   0,  12, INF, INF, INF,  16,  14},\n\t/*B*/ {  12,   0,  10, INF, INF,   7, INF},\n\t/*C*/ { INF,  10,   0,   3,   5,   6, INF},\n\t/*D*/ { INF, INF,   3,   0,   4, INF, INF},\n\t/*E*/ { INF, INF,   5,   4,   0,   2,   8},\n\t/*F*/ {  16,   7,   6, INF,   2,   0,   9},\n\t/*G*/ {  14, INF, INF, INF,   8,   9,   0}}; \n\t      //大家可以在去测试其它的邻接矩阵，结果都可以得到最小生成树.\n\t      \n\t      //创建KruskalCase 对象实例\n\t      KruskalCase kruskalCase = new KruskalCase(vertexs, matrix);\n\t      //输出构建的\n\t      kruskalCase.print();\n\t      kruskalCase.kruskal();\n\t      \n\t}\n\t\n\t//构造器\n\tpublic KruskalCase(char[] vertexs, int[][] matrix) {\n\t\t//初始化顶点数和边的个数\n\t\tint vlen = vertexs.length;\n\t\t\n\t\t//初始化顶点, 复制拷贝的方式\n\t\tthis.vertexs = new char[vlen];\n\t\tfor(int i = 0; i < vertexs.length; i++) {\n\t\t\tthis.vertexs[i] = vertexs[i];\n\t\t}\n\t\t\n\t\t//初始化边, 使用的是复制拷贝的方式\n\t\tthis.matrix = new int[vlen][vlen];\n\t\tfor(int i = 0; i < vlen; i++) {\n\t\t\tfor(int j= 0; j < vlen; j++) {\n\t\t\t\tthis.matrix[i][j] = matrix[i][j];\n\t\t\t}\n\t\t}\n\t\t//统计边的条数\n\t\tfor(int i =0; i < vlen; i++) {\n\t\t\tfor(int j = i+1; j < vlen; j++) {\n\t\t\t\tif(this.matrix[i][j] != INF) {\n\t\t\t\t\tedgeNum++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t}\n\tpublic void kruskal() {\n\t\tint index = 0; //表示最后结果数组的索引\n\t\tint[] ends = new int[edgeNum]; //用于保存\"已有最小生成树\" 中的每个顶点在最小生成树中的终点\n\t\t//创建结果数组, 保存最后的最小生成树\n\t\tEData[] rets = new EData[edgeNum];\n\t\t\n\t\t//获取图中 所有的边的集合 ， 一共有12边\n\t\tEData[] edges = getEdges();\n\t\tSystem.out.println(\"图的边的集合=\" + Arrays.toString(edges) + \" 共\"+ edges.length); //12\n\t\t\n\t\t//按照边的权值大小进行排序(从小到大)\n\t\tsortEdges(edges);\n\t\t\n\t\t//遍历edges 数组，将边添加到最小生成树中时，判断是准备加入的边否形成了回路，如果没有，就加入 rets, 否则不能加入\n\t\tfor(int i=0; i < edgeNum; i++) {\n\t\t\t//获取到第i条边的第一个顶点(起点)\n\t\t\tint p1 = getPosition(edges[i].start); //p1=4\n\t\t\t//获取到第i条边的第2个顶点\n\t\t\tint p2 = getPosition(edges[i].end); //p2 = 5\n\t\t\t\n\t\t\t//获取p1这个顶点在已有最小生成树中的终点\n\t\t\tint m = getEnd(ends, p1); //m = 4\n\t\t\t//获取p2这个顶点在已有最小生成树中的终点\n\t\t\tint n = getEnd(ends, p2); // n = 5\n\t\t\t//是否构成回路\n\t\t\tif(m != n) { //没有构成回路\n\t\t\t\tends[m] = n; // 设置m 在\"已有最小生成树\"中的终点 <E,F> [0,0,0,0,5,0,0,0,0,0,0,0]\n\t\t\t\trets[index++] = edges[i]; //有一条边加入到rets数组\n\t\t\t}\n\t\t}\n\t\t//<E,F> <C,D> <D,E> <B,F> <E,G> <A,B>。\n\t\t//统计并打印 \"最小生成树\", 输出  rets\n\t\tSystem.out.println(\"最小生成树为\");\n\t\tfor(int i = 0; i < index; i++) {\n\t\t\tSystem.out.println(rets[i]);\n\t\t}\n\t\t\n\t\t\n\t}\n\t\n\t//打印邻接矩阵\n\tpublic void print() {\n\t\tSystem.out.println(\"邻接矩阵为: \\n\");\n\t\tfor(int i = 0; i < vertexs.length; i++) {\n\t\t\tfor(int j=0; j < vertexs.length; j++) {\n\t\t\t\tSystem.out.printf(\"%12d\", matrix[i][j]);\n\t\t\t}\n\t\t\tSystem.out.println();//换行\n\t\t}\n\t}\n\n\t/**\n\t * 功能：对边进行排序处理, 冒泡排序\n\t * @param edges 边的集合\n\t */\n\tprivate void sortEdges(EData[] edges) {\n\t\tfor(int i = 0; i < edges.length - 1; i++) {\n\t\t\tfor(int j = 0; j < edges.length - 1 - i; j++) {\n\t\t\t\tif(edges[j].weight > edges[j+1].weight) {//交换\n\t\t\t\t\tEData tmp = edges[j];\n\t\t\t\t\tedges[j] = edges[j+1];\n\t\t\t\t\tedges[j+1] = tmp;\n\t\t\t\t}\n\t\t\t}\n \t\t}\n\t}\n\t/**\n\t * \n\t * @param ch 顶点的值，比如'A','B'\n\t * @return 返回ch顶点对应的下标，如果找不到，返回-1\n\t */\n\tprivate int getPosition(char ch) {\n\t\tfor(int i = 0; i < vertexs.length; i++) {\n\t\t\tif(vertexs[i] == ch) {//找到\n\t\t\t\treturn i;\n\t\t\t}\n\t\t}\n\t\t//找不到,返回-1\n\t\treturn -1;\n\t}\n\t/**\n\t * 功能: 获取图中边，放到EData[] 数组中，后面我们需要遍历该数组\n\t * 是通过matrix 邻接矩阵来获取\n\t * EData[] 形式 [['A','B', 12], ['B','F',7], .....]\n\t * @return\n\t */\n\tprivate EData[] getEdges() {\n\t\tint index = 0;\n\t\tEData[] edges = new EData[edgeNum];\n\t\tfor(int i = 0; i < vertexs.length; i++) {\n\t\t\tfor(int j=i+1; j <vertexs.length; j++) {\n\t\t\t\tif(matrix[i][j] != INF) {\n\t\t\t\t\tedges[index++] = new EData(vertexs[i], vertexs[j], matrix[i][j]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn edges;\n\t}\n\t/**\n\t * 功能: 获取下标为i的顶点的终点(), 用于后面判断两个顶点的终点是否相同\n\t * @param ends ： 数组就是记录了各个顶点对应的终点是哪个,ends 数组是在遍历过程中，逐步形成\n\t * @param i : 表示传入的顶点对应的下标\n\t * @return 返回的就是 下标为i的这个顶点对应的终点的下标, 一会回头还有来理解\n\t */\n\tprivate int getEnd(int[] ends, int i) { // i = 4 [0,0,0,0,5,0,0,0,0,0,0,0]\n\t\twhile(ends[i] != 0) {\n\t\t\ti = ends[i];\n\t\t}\n\t\treturn i;\n\t}\n \n}\n\n//创建一个类EData ，它的对象实例就表示一条边\nclass EData {\n\tchar start; //边的一个点\n\tchar end; //边的另外一个点\n\tint weight; //边的权值\n\t//构造器\n\tpublic EData(char start, char end, int weight) {\n\t\tthis.start = start;\n\t\tthis.end = end;\n\t\tthis.weight = weight;\n\t}\n\t//重写toString, 便于输出边信息\n\t@Override\n\tpublic String toString() {\n\t\treturn \"EData [<\" + start + \", \" + end + \">= \" + weight + \"]\";\n\t}\n\t\n\t\n}\n\n```\n\n\n\n### 9.迪杰斯特拉算法\n\n应用场景最短路径问题\n\n看一应用场景和问题：\n\n![image-20210110141059564](数据结构整理/image-20210110141059564.png)\n\n1)战争时期，胜利乡有7个村庄(A, B, C, D, E, F, G) ，现在有六个邮差，从G点出发，需要分别把邮件分别送到 A, B, C , D, E, F 六个村庄\n\n2)各个村庄的距离用边线表示(权) ，比如 A – B 距离 5公里\n\n3)问：如何计算出G村庄到 其它各个村庄的最短距离? \n\n如果从其它点出发到各个点的最短距离又是多少?\n\n**迪杰斯特拉(Dijkstra)**算法介绍\n\n\n\n迪杰斯特拉(Dijkstra)算法是**典型最短路径算法**，用于计算一个结点到其他结点的最短路径。 它的主要特点是以起始点为中心向外层层扩展(**广度优先**搜索思想)，直到扩展到终点为止**。**\n\n迪杰斯特拉(Dijkstra)算法过程:\n\n设置发顶点为v，顶点集合V{v1,v2,vi...}，v到V中各顶点的距离构成距离集合Dis，Dis{d1,d2,di...}，Dis集合记录着v到图中各顶点的距离(到自身可以看作0，v到vi距离对应为di)\n\n1)从Dis中选择值最小的di并移出Dis集合，同时移出V集合中对应的顶点vi，此时的v到vi即为最短路径\n\n2)更新Dis集合，更新规则为：比较v到V集合中顶点的距离值，与v通过vi到V集合中顶点的距离值，保留值较小的一个(同时也应该更新顶点的前驱节点为vi，表明是通过vi到达的)\n\n3)重复执行两步骤，直到最短路径顶点为目标顶点即可结束\n\n\n\n```java\npackage com.atguigu.dijkstra;\n\nimport java.util.Arrays;\n\npublic class DijkstraAlgorithm {\n\n\tpublic static void main(String[] args) {\n\t\tchar[] vertex = { 'A', 'B', 'C', 'D', 'E', 'F', 'G' };\n\t\t//邻接矩阵\n\t\tint[][] matrix = new int[vertex.length][vertex.length];\n\t\tfinal int N = 65535;// 表示不可以连接\n\t\tmatrix[0]=new int[]{N,5,7,N,N,N,2};  \n        matrix[1]=new int[]{5,N,N,9,N,N,3};  \n        matrix[2]=new int[]{7,N,N,N,8,N,N};  \n        matrix[3]=new int[]{N,9,N,N,N,4,N};  \n        matrix[4]=new int[]{N,N,8,N,N,5,4};  \n        matrix[5]=new int[]{N,N,N,4,5,N,6};  \n        matrix[6]=new int[]{2,3,N,N,4,6,N};\n        //创建 Graph对象\n        Graph graph = new Graph(vertex, matrix);\n        //测试, 看看图的邻接矩阵是否ok\n        graph.showGraph();\n        //测试迪杰斯特拉算法\n        graph.dsj(2);//C\n        graph.showDijkstra();\n        \n        \n\t}\n\n}\n\nclass Graph {\n\tprivate char[] vertex; // 顶点数组\n\tprivate int[][] matrix; // 邻接矩阵\n\tprivate VisitedVertex vv; //已经访问的顶点的集合\n\n\t// 构造器\n\tpublic Graph(char[] vertex, int[][] matrix) {\n\t\tthis.vertex = vertex;\n\t\tthis.matrix = matrix;\n\t}\n\t\n\t//显示结果\n\tpublic void showDijkstra() {\n\t\tvv.show();\n\t}\n\n\t// 显示图\n\tpublic void showGraph() {\n\t\tfor (int[] link : matrix) {\n\t\t\tSystem.out.println(Arrays.toString(link));\n\t\t}\n\t}\n\t\n\t//迪杰斯特拉算法实现\n\t/**\n\t * \n\t * @param index 表示出发顶点对应的下标\n\t */\n\tpublic void dsj(int index) {\n\t\tvv = new VisitedVertex(vertex.length, index);\n\t\tupdate(index);//更新index顶点到周围顶点的距离和前驱顶点\n\t\tfor(int j = 1; j <vertex.length; j++) {\n\t\t\tindex = vv.updateArr();// 选择并返回新的访问顶点\n\t\t\tupdate(index); // 更新index顶点到周围顶点的距离和前驱顶点\n\t\t} \n\t}\n\t\n\t\n\t\n\t//更新index下标顶点到周围顶点的距离和周围顶点的前驱顶点,\n\tprivate void update(int index) {\n\t\tint len = 0;\n\t\t//根据遍历我们的邻接矩阵的  matrix[index]行\n\t\tfor(int j = 0; j < matrix[index].length; j++) {\n\t\t\t// len 含义是 : 出发顶点到index顶点的距离 + 从index顶点到j顶点的距离的和 \n\t\t\tlen = vv.getDis(index) + matrix[index][j];\n\t\t\t// 如果j顶点没有被访问过，并且 len 小于出发顶点到j顶点的距离，就需要更新\n\t\t\tif(!vv.in(j) && len < vv.getDis(j)) {\n\t\t\t\tvv.updatePre(j, index); //更新j顶点的前驱为index顶点\n\t\t\t\tvv.updateDis(j, len); //更新出发顶点到j顶点的距离\n\t\t\t}\n\t\t}\n\t}\n}\n\n// 已访问顶点集合\nclass VisitedVertex {\n\t// 记录各个顶点是否访问过 1表示访问过,0未访问,会动态更新\n\tpublic int[] already_arr;\n\t// 每个下标对应的值为前一个顶点下标, 会动态更新\n\tpublic int[] pre_visited;\n\t// 记录出发顶点到其他所有顶点的距离,比如G为出发顶点，就会记录G到其它顶点的距离，会动态更新，求的最短距离就会存放到dis\n\tpublic int[] dis;\n\t\n\t//构造器\n\t/**\n\t * \n\t * @param length :表示顶点的个数 \n\t * @param index: 出发顶点对应的下标, 比如G顶点，下标就是6\n\t */\n\tpublic VisitedVertex(int length, int index) {\n\t\tthis.already_arr = new int[length];\n\t\tthis.pre_visited = new int[length];\n\t\tthis.dis = new int[length];\n\t\t//初始化 dis数组\n\t\tArrays.fill(dis, 65535);\n\t\tthis.already_arr[index] = 1; //设置出发顶点被访问过\n\t\tthis.dis[index] = 0;//设置出发顶点的访问距离为0\n\t\t\t\t\n\t}\n\t/**\n\t * 功能: 判断index顶点是否被访问过\n\t * @param index\n\t * @return 如果访问过，就返回true, 否则访问false\n\t */\n\tpublic boolean in(int index) {\n\t\treturn already_arr[index] == 1;\n\t}\n\t\n\t/**\n\t * 功能: 更新出发顶点到index顶点的距离\n\t * @param index\n\t * @param len\n\t */\n\tpublic void updateDis(int index, int len) {\n\t\tdis[index] = len;\n\t}\n\t/**\n\t * 功能: 更新pre这个顶点的前驱顶点为index顶点\n\t * @param pre\n\t * @param index\n\t */\n\tpublic void updatePre(int pre, int index) {\n\t\tpre_visited[pre] = index;\n\t}\n\t/**\n\t * 功能:返回出发顶点到index顶点的距离\n\t * @param index\n\t */\n\tpublic int getDis(int index) {\n\t\treturn dis[index];\n\t}\n\t\n\t\n\t/**\n\t * 继续选择并返回新的访问顶点， 比如这里的G 完后，就是 A点作为新的访问顶点(注意不是出发顶点)\n\t * @return\n\t */\n\tpublic int updateArr() {\n\t\tint min = 65535, index = 0;\n\t\tfor(int i = 0; i < already_arr.length; i++) {\n\t\t\tif(already_arr[i] == 0 && dis[i] < min ) {\n\t\t\t\tmin = dis[i];\n\t\t\t\tindex = i;\n\t\t\t}\n\t\t}\n\t\t//更新 index 顶点被访问过\n\t\talready_arr[index] = 1;\n\t\treturn index;\n\t}\n\t\n\t//显示最后的结果\n\t//即将三个数组的情况输出\n\tpublic void show() {\n\t\t\n\t\tSystem.out.println(\"==========================\");\n\t\t//输出already_arr\n\t\tfor(int i : already_arr) {\n\t\t\tSystem.out.print(i + \" \");\n\t\t}\n\t\tSystem.out.println();\n\t\t//输出pre_visited\n\t\tfor(int i : pre_visited) {\n\t\t\tSystem.out.print(i + \" \");\n\t\t}\n\t\tSystem.out.println();\n\t\t//输出dis\n\t\tfor(int i : dis) {\n\t\t\tSystem.out.print(i + \" \");\n\t\t}\n\t\tSystem.out.println();\n\t\t//为了好看最后的最短距离，我们处理\n\t\tchar[] vertex = { 'A', 'B', 'C', 'D', 'E', 'F', 'G' };\n\t\tint count = 0;\n\t\tfor (int i : dis) {\n\t\t\tif (i != 65535) {\n\t\t\t\tSystem.out.print(vertex[count] + \"(\"+i+\") \");\n\t\t\t} else {\n\t\t\t\tSystem.out.println(\"N \");\n\t\t\t}\n\t\t\tcount++;\n\t\t}\n\t\tSystem.out.println();\n\t\t\n\t}\n\n}\n\n\n```\n\n\n\n### 10.弗洛伊德算法\n\n### 11.马踏棋盘算法\n\n","slug":"数据结构整理","published":1,"updated":"2021-01-22T11:44:41.981Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cklgjm1wb000zikvu6wztdji9","content":"<!-- toc -->\n\n<ul>\n<li><a href=\"#%E5%89%8D%E8%A8%80\">前言</a></li>\n<li><a href=\"#%E4%B8%80-%E9%98%9F%E5%88%97\">一、队列</a><ul>\n<li><a href=\"#%E6%95%B0%E7%BB%84%E9%98%9F%E5%88%97%E4%BB%A3%E7%A0%81\">数组队列代码</a></li>\n<li><a href=\"#%E6%95%B0%E7%BB%84%E6%A8%A1%E6%8B%9F%E7%8E%AF%E5%BD%A2%E9%98%9F%E5%88%97\">数组模拟环形队列</a></li>\n</ul>\n</li>\n<li><a href=\"#%E4%BA%8C-%E9%93%BE%E8%A1%A8\">二、链表</a><ul>\n<li><a href=\"#%E5%8D%95%E9%93%BE%E8%A1%A8\">单链表</a></li>\n<li><a href=\"#%E5%8F%8C%E7%AB%AF%E9%93%BE%E8%A1%A8\">双端链表</a></li>\n<li><a href=\"#%E5%8D%95%E5%90%91%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A8\">单向环形链表</a></li>\n</ul>\n</li>\n<li><a href=\"#%E4%B8%89-%E6%A0%88\">三、栈</a></li>\n<li><a href=\"#%E5%9B%9B-%E9%80%92%E5%BD%92\">四、递归</a></li>\n<li><a href=\"#%E4%BA%94-%E7%AE%97%E6%B3%95%E7%9A%84%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%8F%8A%E7%A9%BA%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6\">五、算法的时间复杂度及空间复杂度</a><ul>\n<li><a href=\"#1%E5%B8%B8%E6%95%B0%E9%98%B6o1\">1)常数阶O(1)</a></li>\n<li><a href=\"#2%E5%AF%B9%E6%95%B0%E9%98%B6olog2supnsup\">2)对数阶O(log2<sup>n</sup>)</a></li>\n<li><a href=\"#3%E7%BA%BF%E6%80%A7%E9%98%B6on\">3)线性阶O(n)</a></li>\n<li><a href=\"#4%E7%BA%BF%E6%80%A7%E5%AF%B9%E6%95%B0%E9%98%B6onlogn\">4)线性对数阶O(nlogN)</a></li>\n<li><a href=\"#5%E5%B9%B3%E6%96%B9%E9%98%B6on2\">5)平方阶O(n²)</a></li>\n<li><a href=\"#6%E7%AB%8B%E6%96%B9%E9%98%B6on3-k%E6%AC%A1%E6%96%B9%E9%98%B6onk\">6)立方阶O(n³)<strong>、</strong>K次方阶O(n^k)</a></li>\n</ul>\n</li>\n<li><a href=\"#%E5%85%AD-%E6%8E%92%E5%BA%8F\">六、排序</a><ul>\n<li><a href=\"#1%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F\">1.冒泡排序</a></li>\n<li><a href=\"#2%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F\">2.选择排序</a></li>\n<li><a href=\"#3%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F\">3.插入排序</a></li>\n<li><a href=\"#4%E5%B8%8C%E5%B0%94%E6%8E%92%E5%BA%8F\">4.希尔排序</a></li>\n<li><a href=\"#5%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F\">5.快速排序</a></li>\n<li><a href=\"#6%E5%9F%BA%E6%95%B0%E6%8E%92%E5%BA%8F\">6.基数排序</a></li>\n<li><a href=\"#7%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F\">7.归并排序</a></li>\n<li><a href=\"#8%E5%A0%86%E6%8E%92%E5%BA%8F\">8.堆排序</a></li>\n</ul>\n</li>\n<li><a href=\"#%E4%B8%83-%E5%93%88%E5%B8%8C%E8%A1%A8\">七、哈希表</a></li>\n<li><a href=\"#%E5%85%AB-%E4%BA%8C%E5%8F%89%E6%A0%91\">八、二叉树</a><ul>\n<li><a href=\"#1%E6%99%AE%E9%80%9A%E4%BA%8C%E5%8F%89%E6%A0%91\">1.普通二叉树</a></li>\n<li><a href=\"#2%E9%A1%BA%E5%BA%8F%E4%BA%8C%E5%8F%89%E6%A0%91\">2.顺序二叉树</a></li>\n<li><a href=\"#3%E7%BA%BF%E7%B4%A2%E5%8C%96%E4%BA%8C%E5%8F%89%E6%A0%91\">3.线索化二叉树</a></li>\n<li><a href=\"#4%E9%9C%8D%E5%A4%AB%E6%9B%BC%E6%A0%91\">4.霍夫曼树</a></li>\n<li><a href=\"#5%E4%BA%8C%E5%8F%89%E6%8E%92%E5%BA%8F%E6%A0%91\">5.二叉排序树</a></li>\n<li><a href=\"#6%E5%B9%B3%E8%A1%A1%E4%BA%8C%E5%8F%89%E6%A0%91\">6.平衡二叉树</a></li>\n</ul>\n</li>\n<li><a href=\"#%E4%B9%9D-%E5%9B%BE\">九、图</a><ul>\n<li><a href=\"#1%E5%9B%BE%E7%9A%84%E8%A1%A8%E7%A4%BA%E6%96%B9%E5%BC%8F\">1.图的表示方式</a></li>\n</ul>\n</li>\n<li><a href=\"#%E5%8D%81-%E5%B8%B8%E7%94%A8%E7%AE%97%E6%B3%95\">十、常用算法</a><ul>\n<li><a href=\"#1%E6%9F%A5%E6%89%BE%E7%AE%97%E6%B3%95\">1.查找算法</a></li>\n<li><a href=\"#2%E5%85%A8%E6%8E%92%E5%88%97\">2.全排列</a></li>\n<li><a href=\"#3%E5%88%86%E6%B2%BB%E7%AE%97%E6%B3%95\">3.分治算法</a></li>\n<li><a href=\"#4%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92\">4.动态规划</a></li>\n<li><a href=\"#5kmp%E7%AE%97%E6%B3%95\">5.kmp算法</a></li>\n<li><a href=\"#6%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95\">6.贪心算法</a></li>\n<li><a href=\"#7%E6%99%AE%E5%88%A9%E5%A7%86%E7%AE%97%E6%B3%95\">7.普利姆算法</a></li>\n<li><a href=\"#8%E5%85%8B%E9%B2%81%E6%96%AF%E5%8D%A1%E5%B0%94%E7%AE%97%E6%B3%95\">8.克鲁斯卡尔算法</a></li>\n<li><a href=\"#9%E8%BF%AA%E6%9D%B0%E6%96%AF%E7%89%B9%E6%8B%89%E7%AE%97%E6%B3%95\">9.迪杰斯特拉算法</a></li>\n<li><a href=\"#10%E5%BC%97%E6%B4%9B%E4%BC%8A%E5%BE%B7%E7%AE%97%E6%B3%95\">10.弗洛伊德算法</a></li>\n<li><a href=\"#11%E9%A9%AC%E8%B8%8F%E6%A3%8B%E7%9B%98%E7%AE%97%E6%B3%95\">11.马踏棋盘算法</a></li>\n</ul>\n</li>\n</ul>\n<!-- tocstop -->\n\n<p>[TOC]</p>\n<h2><span id=\"前言\">前言</span></h2><p>​    由于面试的时候数据结构在其占不可获取的地位，所以简单总结下数据结构相关知识，以便复习。</p>\n<a id=\"more\"></a>\n\n<h2><span id=\"一-队列\">一、队列</span></h2><p><strong>队列介绍</strong></p>\n<p>1.队列是一个有序列表，可以用<strong>数组</strong>或是<strong>链表</strong>来实现。</p>\n<p>2.遵循<strong>先入先出</strong>的原则。即：先存入队列的数据，要先取出。后存入的要后取出</p>\n<p>示意图：(使用数组模拟队列示意图)</p>\n<p><img src=\"/2021/01/01/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E6%95%B4%E7%90%86/image-20210101224039379.png\" alt=\"image-20210101224039379\"></p>\n<h3><span id=\"数组队列代码\">数组队列代码</span></h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> queue;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Scanner;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ArrayQueueDemo</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//测试一把</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//创建一个队列</span></span><br><span class=\"line\">\t\tArrayQueue queue = <span class=\"keyword\">new</span> ArrayQueue(<span class=\"number\">3</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">char</span> key = <span class=\"string\">&#x27; &#x27;</span>; <span class=\"comment\">//接收用户输入</span></span><br><span class=\"line\">\t\tScanner scanner = <span class=\"keyword\">new</span> Scanner(System.in);<span class=\"comment\">//</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">boolean</span> loop = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">\t\t<span class=\"comment\">//输出一个菜单</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(loop) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">&quot;s(show): 显示队列&quot;</span>);</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">&quot;e(exit): 退出程序&quot;</span>);</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">&quot;a(add): 添加数据到队列&quot;</span>);</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">&quot;g(get): 从队列取出数据&quot;</span>);</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">&quot;h(head): 查看队列头的数据&quot;</span>);</span><br><span class=\"line\">\t\t\tkey = scanner.next().charAt(<span class=\"number\">0</span>);<span class=\"comment\">//接收一个字符</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">switch</span> (key) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">case</span> <span class=\"string\">&#x27;s&#x27;</span>:</span><br><span class=\"line\">\t\t\t\tqueue.showQueue();</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">case</span> <span class=\"string\">&#x27;a&#x27;</span>:</span><br><span class=\"line\">\t\t\t\tSystem.out.println(<span class=\"string\">&quot;输出一个数&quot;</span>);</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">int</span> value = scanner.nextInt();</span><br><span class=\"line\">\t\t\t\tqueue.addQueue(value);</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">case</span> <span class=\"string\">&#x27;g&#x27;</span>: <span class=\"comment\">//取出数据</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">int</span> res = queue.getQueue();</span><br><span class=\"line\">\t\t\t\t\tSystem.out.printf(<span class=\"string\">&quot;取出的数据是%d\\n&quot;</span>, res);</span><br><span class=\"line\">\t\t\t\t&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"comment\">// <span class=\"doctag\">TODO:</span> handle exception</span></span><br><span class=\"line\">\t\t\t\t\tSystem.out.println(e.getMessage());</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">case</span> <span class=\"string\">&#x27;h&#x27;</span>: <span class=\"comment\">//查看队列头的数据</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">int</span> res = queue.headQueue();</span><br><span class=\"line\">\t\t\t\t\tSystem.out.printf(<span class=\"string\">&quot;队列头的数据是%d\\n&quot;</span>, res);</span><br><span class=\"line\">\t\t\t\t&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"comment\">// <span class=\"doctag\">TODO:</span> handle exception</span></span><br><span class=\"line\">\t\t\t\t\tSystem.out.println(e.getMessage());</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">case</span> <span class=\"string\">&#x27;e&#x27;</span>: <span class=\"comment\">//退出</span></span><br><span class=\"line\">\t\t\t\tscanner.close();</span><br><span class=\"line\">\t\t\t\tloop = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">default</span>:</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;程序退出~~&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用数组模拟队列-编写一个ArrayQueue类</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ArrayQueue</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> maxSize; <span class=\"comment\">// 表示数组的最大容量</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> front; <span class=\"comment\">// 队列头</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> rear; <span class=\"comment\">// 队列尾</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span>[] arr; <span class=\"comment\">// 该数据用于存放数据, 模拟队列</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 创建队列的构造器</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ArrayQueue</span><span class=\"params\">(<span class=\"keyword\">int</span> arrMaxSize)</span> </span>&#123;</span><br><span class=\"line\">\t\tmaxSize = arrMaxSize;</span><br><span class=\"line\">\t\tarr = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[maxSize];</span><br><span class=\"line\">\t\tfront = -<span class=\"number\">1</span>; <span class=\"comment\">// 指向队列头部，分析出front是指向队列头的前一个位置.</span></span><br><span class=\"line\">\t\trear = -<span class=\"number\">1</span>; <span class=\"comment\">// 指向队列尾，指向队列尾的数据(即就是队列最后一个数据)</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 判断队列是否满</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isFull</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> rear == maxSize - <span class=\"number\">1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 判断队列是否为空</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isEmpty</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> rear == front;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 添加数据到队列</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addQueue</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 判断队列是否满</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (isFull()) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">&quot;队列满，不能加入数据~&quot;</span>);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\trear++; <span class=\"comment\">// 让rear 后移</span></span><br><span class=\"line\">\t\tarr[rear] = n;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 获取队列的数据, 出队列</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getQueue</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 判断队列是否空</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (isEmpty()) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 通过抛出异常</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">&quot;队列空，不能取数据&quot;</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tfront++; <span class=\"comment\">// front后移</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> arr[front];</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 显示队列的所有数据</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">showQueue</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 遍历</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (isEmpty()) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">&quot;队列空的，没有数据~~&quot;</span>);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.printf(<span class=\"string\">&quot;arr[%d]=%d\\n&quot;</span>, i, arr[i]);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 显示队列的头数据， 注意不是取出数据</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">headQueue</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 判断</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (isEmpty()) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">&quot;队列空的，没有数据~~&quot;</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> arr[front + <span class=\"number\">1</span>];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3><span id=\"数组模拟环形队列\">数组模拟环形队列</span></h3><p>​    对前面的数组模拟队列的优化，充分利用数组.<br> 因此将数组看做是一个环形的。(通过取模的方<br> 式来实现即可)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CircleQueue</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> maxSize;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span>[] arr; <span class=\"comment\">// 该数组存放数据，模拟队列</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> front; <span class=\"comment\">// 指向队列头部</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> rear; <span class=\"comment\">// 指向队列的尾部</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">CircleArrayQueue</span><span class=\"params\">(<span class=\"keyword\">int</span> arrMaxSize)</span> </span>&#123;</span><br><span class=\"line\">        maxSize = arrMaxSize;</span><br><span class=\"line\">        arr = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[maxSize];</span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isFull</span><span class=\"params\">()</span>  </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//尾索引的下一个为头索引时表示队列满，即将队列容量空出一个作为约定(!!!)</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> (rear + <span class=\"number\">1</span>) % maxSize == front; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isEmpty</span><span class=\"params\">()</span>  </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.tail == <span class=\"keyword\">this</span>.head &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addQueue</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isFull()) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;队列满，无法加入..&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;&#125;</span><br><span class=\"line\">        arr[rear] = n;</span><br><span class=\"line\">        rear = (rear + <span class=\"number\">1</span>) % maxSize;&#125;  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getQueue</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isEmpty()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">&quot;队列空~&quot;</span>);&#125;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> value = arr[front];</span><br><span class=\"line\">        front = (front + <span class=\"number\">1</span>) % maxSize;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> value;&#125;</span><br><span class=\"line\">    <span class=\"comment\">//计算队列有多个元素</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">size</span><span class=\"params\">()</span>  </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (rear + maxSize - front) % maxSize;&#125;&#125;</span><br></pre></td></tr></table></figure>\n<h2><span id=\"二-链表\">二、链表</span></h2><p>链表是有序的列表，但是它在内存中是存储如下</p>\n<p><img src=\"/2021/01/01/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E6%95%B4%E7%90%86/image-20210101225223666.png\" alt=\"image-20210101225223666\"></p>\n<p>小结:</p>\n<p>1)链表是以节点的方式来存储,是链式存储</p>\n<p>2)每个节点包含 data 域， next 域：指向下一个节点.</p>\n<p>3)如图：发现链表的<strong>各个节点不一定是连续存储</strong>.</p>\n<p>4)链表分带头节点的链表和没有头节点的链表，根据实际的需求来确定</p>\n<h3><span id=\"单链表\">单链表</span></h3><p><img src=\"/2021/01/01/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E6%95%B4%E7%90%86/image-20210101225427642.png\" alt=\"image-20210101225427642\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//定义SingleLinkedList 管理我们的英雄</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SingleLinkedList</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//先初始化一个头节点, 头节点不要动, 不存放具体的数据</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> HeroNode head = <span class=\"keyword\">new</span> HeroNode(<span class=\"number\">0</span>, <span class=\"string\">&quot;&quot;</span>, <span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//返回头节点</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> HeroNode <span class=\"title\">getHead</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> head;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//添加节点到单向链表</span></span><br><span class=\"line\">    <span class=\"comment\">//思路，当不考虑编号顺序时</span></span><br><span class=\"line\">    <span class=\"comment\">//1. 找到当前链表的最后节点</span></span><br><span class=\"line\">    <span class=\"comment\">//2. 将最后这个节点的next 指向 新的节点</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(HeroNode heroNode)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//因为head节点不能动，因此我们需要一个辅助遍历 temp</span></span><br><span class=\"line\">        HeroNode temp = head;</span><br><span class=\"line\">        <span class=\"comment\">//遍历链表，找到最后</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//找到链表的最后</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (temp.next == <span class=\"keyword\">null</span>) &#123;<span class=\"comment\">//</span></span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//如果没有找到最后, 将将temp后移</span></span><br><span class=\"line\">            temp = temp.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//当退出while循环时，temp就指向了链表的最后</span></span><br><span class=\"line\">        <span class=\"comment\">//将最后这个节点的next 指向 新的节点</span></span><br><span class=\"line\">        temp.next = heroNode;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//第二种方式在添加英雄时，根据排名将英雄插入到指定位置</span></span><br><span class=\"line\">    <span class=\"comment\">//(如果有这个排名，则添加失败，并给出提示)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addByOrder</span><span class=\"params\">(HeroNode heroNode)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//因为头节点不能动，因此我们仍然通过一个辅助指针(变量)来帮助找到添加的位置</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//因为单链表，因为我们找的temp 是位于 添加位置的前一个节点，否则插入不了</span></span><br><span class=\"line\">\t\tHeroNode temp = head;</span><br><span class=\"line\">\t\t<span class=\"keyword\">boolean</span> flag = <span class=\"keyword\">false</span>; <span class=\"comment\">// flag标志添加的编号是否存在，默认为false</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(temp.next == <span class=\"keyword\">null</span>) &#123;<span class=\"comment\">//说明temp已经在链表的最后</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>; <span class=\"comment\">//</span></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(temp.next.no &gt; heroNode.no) &#123; <span class=\"comment\">//位置找到，就在temp的后面插入</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (temp.next.no == heroNode.no) &#123;<span class=\"comment\">//说明希望添加的heroNode的编号已然存在</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\tflag = <span class=\"keyword\">true</span>; <span class=\"comment\">//说明编号存在</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\ttemp = temp.next; <span class=\"comment\">//后移，遍历当前链表</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">//判断flag 的值</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(flag) &#123; <span class=\"comment\">//不能添加，说明编号存在</span></span><br><span class=\"line\">\t\t\tSystem.out.printf(<span class=\"string\">&quot;准备插入的英雄的编号 %d 已经存在了, 不能加入\\n&quot;</span>, heroNode.no);</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//插入到链表中, temp的后面</span></span><br><span class=\"line\">\t\t\theroNode.next = temp.next;</span><br><span class=\"line\">\t\t\ttemp.next = heroNode;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//修改节点的信息, 根据no编号来修改，即no编号不能改.</span></span><br><span class=\"line\">    <span class=\"comment\">//说明</span></span><br><span class=\"line\">    <span class=\"comment\">//1. 根据 newHeroNode 的 no 来修改即可</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">update</span><span class=\"params\">(HeroNode newHeroNode)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//判断是否空</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (head.next == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;链表为空~&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//找到需要修改的节点, 根据no编号</span></span><br><span class=\"line\">        <span class=\"comment\">//定义一个辅助变量</span></span><br><span class=\"line\">        HeroNode temp = head.next;</span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> flag = <span class=\"keyword\">false</span>; <span class=\"comment\">//表示是否找到该节点</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (temp == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>; <span class=\"comment\">//已经遍历完链表</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (temp.no == newHeroNode.no) &#123;</span><br><span class=\"line\">                <span class=\"comment\">//找到</span></span><br><span class=\"line\">                flag = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            temp = temp.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//根据flag 判断是否找到要修改的节点</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (flag) &#123;</span><br><span class=\"line\">            temp.name = newHeroNode.name;</span><br><span class=\"line\">            temp.nickname = newHeroNode.nickname;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123; <span class=\"comment\">//没有找到</span></span><br><span class=\"line\">            System.out.printf(<span class=\"string\">&quot;没有找到 编号 %d 的节点，不能修改\\n&quot;</span>, newHeroNode.no);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//删除节点</span></span><br><span class=\"line\">    <span class=\"comment\">//思路</span></span><br><span class=\"line\">    <span class=\"comment\">//1. head 不能动，因此我们需要一个temp辅助节点找到待删除节点的前一个节点</span></span><br><span class=\"line\">    <span class=\"comment\">//2. 说明我们在比较时，是temp.next.no 和  需要删除的节点的no比较</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">del</span><span class=\"params\">(<span class=\"keyword\">int</span> no)</span> </span>&#123;</span><br><span class=\"line\">        HeroNode temp = head;</span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> flag = <span class=\"keyword\">false</span>; <span class=\"comment\">// 标志是否找到待删除节点的</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (temp.next == <span class=\"keyword\">null</span>) &#123; <span class=\"comment\">//已经到链表的最后</span></span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (temp.next.no == no) &#123;</span><br><span class=\"line\">                <span class=\"comment\">//找到的待删除节点的前一个节点temp</span></span><br><span class=\"line\">                flag = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            temp = temp.next; <span class=\"comment\">//temp后移，遍历</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//判断flag</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (flag) &#123; <span class=\"comment\">//找到</span></span><br><span class=\"line\">            <span class=\"comment\">//可以删除</span></span><br><span class=\"line\">            temp.next = temp.next.next;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            System.out.printf(<span class=\"string\">&quot;要删除的 %d 节点不存在\\n&quot;</span>, no);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//显示链表[遍历]</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">list</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//判断链表是否为空</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(head.next == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">&quot;链表为空&quot;</span>);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">//因为头节点，不能动，因此我们需要一个辅助变量来遍历</span></span><br><span class=\"line\">\t\tHeroNode temp = head.next;</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//判断是否到链表最后</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(temp == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//输出节点的信息</span></span><br><span class=\"line\">\t\t\tSystem.out.println(temp);</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//将temp后移， 一定小心</span></span><br><span class=\"line\">\t\t\ttemp = temp.next;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//定义HeroNode ， 每个HeroNode 对象就是一个节点</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HeroNode</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> no;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> String name;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> String nickname;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> HeroNode next; <span class=\"comment\">//指向下一个节点</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//构造器</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">HeroNode</span><span class=\"params\">(<span class=\"keyword\">int</span> no, String name, String nickname)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.no = no;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.nickname = nickname;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//为了显示方法，我们重新toString</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;HeroNode [no=&quot;</span> + no + <span class=\"string\">&quot;, name=&quot;</span> + name + <span class=\"string\">&quot;, nickname=&quot;</span> + nickname + <span class=\"string\">&quot;]&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4><span id=\"1求单链表的有效节点个数\">1.求单链表的有效节点个数</span></h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//方法：获取到单链表的节点的个数(如果是带头结点的链表，需求不统计头节点)</span></span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@param</span> head 链表的头节点</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@return</span> 返回的就是有效节点的个数</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">getLength</span><span class=\"params\">(HeroNode head)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(head.next == <span class=\"keyword\">null</span>) &#123; <span class=\"comment\">//空链表</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> length = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"comment\">//定义一个辅助的变量, 这里我们没有统计头节点</span></span><br><span class=\"line\">\tHeroNode cur = head.next;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(cur != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\tlength++;</span><br><span class=\"line\">\t\tcur = cur.next; <span class=\"comment\">//遍历</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> length;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<h4><span id=\"2查找单链表中的倒数第k个结点\">2.查找单链表中的倒数第k个结点</span></h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\t<span class=\"comment\">//查找单链表中的倒数第k个结点 【新浪面试题】</span></span><br><span class=\"line\">    <span class=\"comment\">//思路</span></span><br><span class=\"line\">    <span class=\"comment\">//1. 编写一个方法，接收head节点，同时接收一个index</span></span><br><span class=\"line\">    <span class=\"comment\">//2. index 表示是倒数第index个节点</span></span><br><span class=\"line\">    <span class=\"comment\">//3. 先把链表从头到尾遍历，得到链表的总的长度 getLength</span></span><br><span class=\"line\">    <span class=\"comment\">//4. 得到size 后，我们从链表的第一个开始遍历 (size-index)个，就可以得到</span></span><br><span class=\"line\">    <span class=\"comment\">//5. 如果找到了，则返回该节点，否则返回nulll</span></span><br><span class=\"line\"><span class=\"comment\">//判断如果链表为空，返回null</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(head.next == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;<span class=\"comment\">//没有找到</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">//第一个遍历得到链表的长度(节点个数)</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> size = getLength(head);</span><br><span class=\"line\">\t\t<span class=\"comment\">//第二次遍历  size-index 位置，就是我们倒数的第K个节点</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//先做一个index的校验</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(index &lt;=<span class=\"number\">0</span> || index &gt; size) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">//定义给辅助变量， for 循环定位到倒数的index</span></span><br><span class=\"line\">\t\tHeroNode cur = head.next; <span class=\"comment\">//3 // 3 - 1 = 2</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i =<span class=\"number\">0</span>; i&lt; size - index; i++) &#123;</span><br><span class=\"line\">\t\t\tcur = cur.next;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> cur;</span><br><span class=\"line\">\t\t&#125;</span><br></pre></td></tr></table></figure>\n<h4><span id=\"3单链表的反转\">3.单链表的反转</span></h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//将单链表反转</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">reversetList</span><span class=\"params\">(HeroNode head)</span> </span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">//如果当前链表为空，或者只有一个节点，无需反转，直接返回</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (head.next == <span class=\"keyword\">null</span> || head.next.next == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">//定义一个辅助的指针(变量)，帮助我们遍历原来的链表</span></span><br><span class=\"line\">      HeroNode cur = head.next;</span><br><span class=\"line\">      HeroNode next = <span class=\"keyword\">null</span>;<span class=\"comment\">// 指向当前节点[cur]的下一个节点</span></span><br><span class=\"line\">      HeroNode reverseHead = <span class=\"keyword\">new</span> HeroNode(<span class=\"number\">0</span>, <span class=\"string\">&quot;&quot;</span>, <span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">      <span class=\"comment\">//遍历原来的链表，每遍历一个节点，就将其取出，并放在新的链表reverseHead 的最前端</span></span><br><span class=\"line\">      <span class=\"comment\">//动脑筋</span></span><br><span class=\"line\">      <span class=\"keyword\">while</span> (cur != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">          next = cur.next;<span class=\"comment\">//先暂时保存当前节点的下一个节点，因为后面需要使用</span></span><br><span class=\"line\">          cur.next = reverseHead.next;<span class=\"comment\">//将cur的下一个节点指向新的链表的最前端</span></span><br><span class=\"line\">          reverseHead.next = cur; <span class=\"comment\">//将cur 连接到新的链表上</span></span><br><span class=\"line\">          cur = next;<span class=\"comment\">//让cur后移</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"comment\">//将head.next 指向 reverseHead.next , 实现单链表的反转</span></span><br><span class=\"line\">      head.next = reverseHead.next;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<h4><span id=\"4从尾到头打印单链表\">4.从尾到头打印单链表</span></h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//方式2：</span></span><br><span class=\"line\">   <span class=\"comment\">//可以利用栈这个数据结构，将各个节点压入到栈中，然后利用栈的先进后出的特点，就实现了逆序打印的效果</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">reversePrint</span><span class=\"params\">(HeroNode head)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(head.next == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>;<span class=\"comment\">//空链表，不能打印</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//创建要给一个栈，将各个节点压入栈</span></span><br><span class=\"line\">\tStack&lt;HeroNode&gt; stack = <span class=\"keyword\">new</span> Stack&lt;HeroNode&gt;();</span><br><span class=\"line\">\tHeroNode cur = head.next;</span><br><span class=\"line\">\t<span class=\"comment\">//将链表的所有节点压入栈</span></span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(cur != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\tstack.push(cur);</span><br><span class=\"line\">\t\tcur = cur.next; <span class=\"comment\">//cur后移，这样就可以压入下一个节点</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//将栈中的节点进行打印,pop 出栈</span></span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (stack.size() &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\tSystem.out.println(stack.pop()); <span class=\"comment\">//stack的特点是先进后出</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h3><span id=\"双端链表\">双端链表</span></h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 创建一个双向链表的类</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DoubleLinkedList</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 先初始化一个头节点, 头节点不要动, 不存放具体的数据</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> HeroNode2 head = <span class=\"keyword\">new</span> HeroNode2(<span class=\"number\">0</span>, <span class=\"string\">&quot;&quot;</span>, <span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 返回头节点</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> HeroNode2 <span class=\"title\">getHead</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> head;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 遍历双向链表的方法</span></span><br><span class=\"line\">    <span class=\"comment\">// 显示链表[遍历]</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">list</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 判断链表是否为空</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (head.next == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;链表为空&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 因为头节点，不能动，因此我们需要一个辅助变量来遍历</span></span><br><span class=\"line\">        HeroNode2 temp = head.next;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 判断是否到链表最后</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (temp == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// 输出节点的信息</span></span><br><span class=\"line\">            System.out.println(temp);</span><br><span class=\"line\">            <span class=\"comment\">// 将temp后移， 一定小心</span></span><br><span class=\"line\">            temp = temp.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addByorder</span><span class=\"params\">(HeroNode2 heroNode)</span> </span>&#123;</span><br><span class=\"line\">        HeroNode2 temp = head;</span><br><span class=\"line\">        Boolean flag = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (temp.next == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (temp.next.no &gt; heroNode.no) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (temp.next.no == heroNode.no) &#123;</span><br><span class=\"line\">                flag = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            temp = temp.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (flag) &#123;</span><br><span class=\"line\">            System.out.printf(<span class=\"string\">&quot;准备插入的英雄的编号 %d 已经存在了, 不能加入\\n&quot;</span>, heroNode.no);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//大坑，需要先将temp.next保存起来防止结构变动影响pre指针</span></span><br><span class=\"line\">            HeroNode2 s1 = temp.next;</span><br><span class=\"line\">            heroNode.next = temp.next;</span><br><span class=\"line\">            temp.next = heroNode;</span><br><span class=\"line\"></span><br><span class=\"line\">            heroNode.pre = temp;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (s1 != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">                s1.pre = heroNode;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 添加一个节点到双向链表的最后.</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(HeroNode2 heroNode)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 因为head节点不能动，因此我们需要一个辅助遍历 temp</span></span><br><span class=\"line\">        HeroNode2 temp = head;</span><br><span class=\"line\">        <span class=\"comment\">// 遍历链表，找到最后</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 找到链表的最后</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (temp.next == <span class=\"keyword\">null</span>) &#123;<span class=\"comment\">//</span></span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// 如果没有找到最后, 将将temp后移</span></span><br><span class=\"line\">            temp = temp.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 当退出while循环时，temp就指向了链表的最后</span></span><br><span class=\"line\">        <span class=\"comment\">// 形成一个双向链表</span></span><br><span class=\"line\">        temp.next = heroNode;</span><br><span class=\"line\">        heroNode.pre = temp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 修改一个节点的内容, 可以看到双向链表的节点内容修改和单向链表一样</span></span><br><span class=\"line\">    <span class=\"comment\">// 只是 节点类型改成 HeroNode2</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">update</span><span class=\"params\">(HeroNode2 newHeroNode)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 判断是否空</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (head.next == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;链表为空~&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 找到需要修改的节点, 根据no编号</span></span><br><span class=\"line\">        <span class=\"comment\">// 定义一个辅助变量</span></span><br><span class=\"line\">        HeroNode2 temp = head.next;</span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> flag = <span class=\"keyword\">false</span>; <span class=\"comment\">// 表示是否找到该节点</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (temp == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>; <span class=\"comment\">// 已经遍历完链表</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (temp.no == newHeroNode.no) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 找到</span></span><br><span class=\"line\">                flag = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            temp = temp.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 根据flag 判断是否找到要修改的节点</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (flag) &#123;</span><br><span class=\"line\">            temp.name = newHeroNode.name;</span><br><span class=\"line\">            temp.nickname = newHeroNode.nickname;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123; <span class=\"comment\">// 没有找到</span></span><br><span class=\"line\">            System.out.printf(<span class=\"string\">&quot;没有找到 编号 %d 的节点，不能修改\\n&quot;</span>, newHeroNode.no);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 从双向链表中删除一个节点,</span></span><br><span class=\"line\">    <span class=\"comment\">// 说明</span></span><br><span class=\"line\">    <span class=\"comment\">// 1 对于双向链表，我们可以直接找到要删除的这个节点</span></span><br><span class=\"line\">    <span class=\"comment\">// 2 找到后，自我删除即可</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">del</span><span class=\"params\">(<span class=\"keyword\">int</span> no)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 判断当前链表是否为空</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (head.next == <span class=\"keyword\">null</span>) &#123;<span class=\"comment\">// 空链表</span></span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;链表为空，无法删除&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        HeroNode2 temp = head.next; <span class=\"comment\">// 辅助变量(指针)</span></span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> flag = <span class=\"keyword\">false</span>; <span class=\"comment\">// 标志是否找到待删除节点的</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (temp == <span class=\"keyword\">null</span>) &#123; <span class=\"comment\">// 已经到链表的最后</span></span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (temp.no == no) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 找到的待删除节点的前一个节点temp</span></span><br><span class=\"line\">                flag = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            temp = temp.next; <span class=\"comment\">// temp后移，遍历</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 判断flag</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (flag) &#123; <span class=\"comment\">// 找到</span></span><br><span class=\"line\">            <span class=\"comment\">// 可以删除</span></span><br><span class=\"line\">            <span class=\"comment\">// temp.next = temp.next.next;[单向链表]</span></span><br><span class=\"line\">            temp.pre.next = temp.next;</span><br><span class=\"line\">            <span class=\"comment\">// 这里我们的代码有问题?</span></span><br><span class=\"line\">            <span class=\"comment\">// 如果是最后一个节点，就不需要执行下面这句话，否则出现空指针</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (temp.next != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                temp.next.pre = temp.pre;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            System.out.printf(<span class=\"string\">&quot;要删除的 %d 节点不存在\\n&quot;</span>, no);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 定义HeroNode2 ， 每个HeroNode 对象就是一个节点</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HeroNode2</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> no;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> String name;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> String nickname;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> HeroNode2 next; <span class=\"comment\">// 指向下一个节点, 默认为null</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> HeroNode2 pre; <span class=\"comment\">// 指向前一个节点, 默认为null</span></span><br><span class=\"line\">    <span class=\"comment\">// 构造器</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">HeroNode2</span><span class=\"params\">(<span class=\"keyword\">int</span> no, String name, String nickname)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.no = no;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.nickname = nickname;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 为了显示方法，我们重新toString</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;HeroNode [no=&quot;</span> + no + <span class=\"string\">&quot;, name=&quot;</span> + name + <span class=\"string\">&quot;, nickname=&quot;</span> + nickname + <span class=\"string\">&quot;]&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3><span id=\"单向环形链表\">单向环形链表</span></h3><h4><span id=\"josephu-问题\">Josephu 问题</span></h4><p>Josephu 问题为：设编号为1，2，… n的n个人围坐一圈，约定编号为k（1&lt;=k&lt;=n）的人从1开始报数，数到m 的那个人出列，它的下一位又从1开始报数，数到m的那个人又出列，依次类推，直到所有人出列为止，由此产生一个出队编号的序列。</p>\n<p><strong>提示</strong></p>\n<p>用一个不带头结点的循环链表来处理Josephu 问题：先构成一个有n个结点的单循环链表，然后由k结点起从1开始计数，计到m时，对应结点从链表中删除，然后再从被删除结点的下一个结点又从1开始计数，直到最后一个结点从链表中删除算法结束。</p>\n<p>单向环形列表代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 创建一个环形的单向链表</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CircleSingleLinkedList</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 创建一个first节点,当前没有编号</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Boy first = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 添加小孩节点，构建成一个环形的链表</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addBoy</span><span class=\"params\">(<span class=\"keyword\">int</span> nums)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// nums 做一个数据校验</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (nums &lt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;nums的值不正确&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        Boy curBoy = <span class=\"keyword\">null</span>; <span class=\"comment\">//辅助指针，帮助构建环形链表</span></span><br><span class=\"line\">        <span class=\"comment\">//使用for来创建我们的环形链表</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= nums; i++) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//根据编号，创建小孩节点</span></span><br><span class=\"line\">            Boy boy = <span class=\"keyword\">new</span> Boy(i);</span><br><span class=\"line\">            <span class=\"comment\">//如果是第一个小孩</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                first = boy;</span><br><span class=\"line\">                first.setNext(first); <span class=\"comment\">//构成环</span></span><br><span class=\"line\">                curBoy = first; <span class=\"comment\">//</span></span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                curBoy.setNext(boy);</span><br><span class=\"line\">                boy.setNext(first);</span><br><span class=\"line\">                curBoy = boy;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//遍历当前的环形链表</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">showBoy</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//判断链表是否为空</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (first == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;没有任何小孩~~~&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 因为first不能动，因此我们仍然使用一个辅助指针完成遍历</span></span><br><span class=\"line\">        Boy curBoy = first;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">            System.out.printf(<span class=\"string\">&quot;小孩的编号 %d \\n&quot;</span>, curBoy.getNo());</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (curBoy.getNext() == first) &#123;<span class=\"comment\">// 说明已经遍历完毕</span></span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            curBoy = curBoy.getNext(); <span class=\"comment\">// curBoy后移</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//根据用户的输入，计算出小孩出圈的顺序</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> startNo  表示从第几个小孩开始数数</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> countNum 表示数几下</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> nums     表示最初有多少小孩在圈中</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">countBoy</span><span class=\"params\">(<span class=\"keyword\">int</span> startNo, <span class=\"keyword\">int</span> countNum, <span class=\"keyword\">int</span> nums)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 先对数据进行校验</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (first == <span class=\"keyword\">null</span> || startNo &lt; <span class=\"number\">1</span> || startNo &gt; nums) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;参数输入有误， 请重新输入&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 创建要给辅助指针,帮助完成小孩出圈</span></span><br><span class=\"line\">        Boy helper = first;</span><br><span class=\"line\">        <span class=\"comment\">// 需求创建一个辅助指针(变量) helper , 事先应该指向环形链表的最后这个节点</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (helper.getNext() == first) &#123;<span class=\"comment\">// 说明helper指向最后小孩节点</span></span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            helper = helper.getNext();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//小孩报数前，先让 first 和  helper 移动 k - 1次</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; startNo - <span class=\"number\">1</span>; j++) &#123;</span><br><span class=\"line\">            first = first.getNext();</span><br><span class=\"line\">            helper = helper.getNext();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//当小孩报数时，让first 和 helper 指针同时 的移动  m  - 1 次, 然后出圈</span></span><br><span class=\"line\">        <span class=\"comment\">//这里是一个循环操作，知道圈中只有一个节点</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (helper == first) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//让 first 和 helper 指针同时 的移动 countNum - 1</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; countNum - <span class=\"number\">1</span>; j++) &#123;</span><br><span class=\"line\">                first = first.getNext();</span><br><span class=\"line\">                helper = helper.getNext();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//这时first指向的节点，就是要出圈的小孩节点</span></span><br><span class=\"line\">            System.out.printf(<span class=\"string\">&quot;小孩%d出圈\\n&quot;</span>, first.getNo());</span><br><span class=\"line\">            <span class=\"comment\">//这时将first指向的小孩节点出圈</span></span><br><span class=\"line\">            first = first.getNext();</span><br><span class=\"line\">            helper.setNext(first); <span class=\"comment\">//</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.printf(<span class=\"string\">&quot;最后留在圈中的小孩编号%d \\n&quot;</span>, first.getNo());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创建一个By类，表示一个节点</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Boy</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> no;<span class=\"comment\">// 编号</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Boy next; <span class=\"comment\">// 指向下一个节点,默认null</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Boy</span><span class=\"params\">(<span class=\"keyword\">int</span> no)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.no = no;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getNo</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> no;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setNo</span><span class=\"params\">(<span class=\"keyword\">int</span> no)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.no = no;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Boy <span class=\"title\">getNext</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setNext</span><span class=\"params\">(Boy next)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.next = next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2><span id=\"三-栈\">三、栈</span></h2><p>栈的介绍：</p>\n<p>1)栈的英文为(stack)</p>\n<p>2)栈是一个<strong>先入后出</strong>(FILO-First In Last Out)的有序列表。</p>\n<p>3)栈(stack)是限制线性表中元素的插入和删除<strong>只能在线性表的同一端</strong>进行的一种特殊线性表。允许插入和删除的一端，为变化的一端，称为<strong>栈顶</strong>(Top)，另一端为固定的一端，称为<strong>栈底</strong>(Bottom)。</p>\n<p>4)根据栈的定义可知，最先放入栈中元素在栈底，最后放入的元素在栈顶，而删除元素刚好相反，最后放入的元素最先删除，最先放入的元素最后删除</p>\n<p>5)出栈(pop)和入栈(push)的概念(如图所示)</p>\n<p><img src=\"/2021/01/01/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E6%95%B4%E7%90%86/image-20210102132901736.png\" alt=\"image-20210102132901736\"><img src=\"/2021/01/01/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E6%95%B4%E7%90%86/image-20210102132915893.png\" alt=\"image-20210102132915893\"></p>\n<p>栈的应用场景：</p>\n<p>1)子程序的调用：在跳往子程序前，会先将下个指令的地址存到堆栈中，直到子程序执行完后再将地址取出，以回到原来的程序中。  </p>\n<p>2)处理递归调用：和子程序的调用类似，只是除了储存下一个指令的地址外，也将参数、区域变量等数据存入堆栈中。</p>\n<p>3)表达式的转换[中缀表达式转后缀表达式]与求值(实际解决)。</p>\n<p>4)二叉树的遍历。</p>\n<p>5)图形的深度优先(depth一first)搜索法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//定义一个 ArrayStack 表示栈</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ArrayStack</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> maxSize; <span class=\"comment\">// 栈的大小</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span>[] stack; <span class=\"comment\">// 数组，数组模拟栈，数据就放在该数组</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> top = -<span class=\"number\">1</span>;<span class=\"comment\">// top表示栈顶，初始化为-1</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//构造器</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ArrayStack</span><span class=\"params\">(<span class=\"keyword\">int</span> maxSize)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.maxSize = maxSize;</span><br><span class=\"line\">\t\tstack = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"keyword\">this</span>.maxSize];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//栈满</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isFull</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> top == maxSize - <span class=\"number\">1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//栈空</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isEmpty</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> top == -<span class=\"number\">1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//入栈-push</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">push</span><span class=\"params\">(<span class=\"keyword\">int</span> value)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//先判断栈是否满</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(isFull()) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">&quot;栈满&quot;</span>);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\ttop++;</span><br><span class=\"line\">\t\tstack[top] = value;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//出栈-pop, 将栈顶的数据返回</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">pop</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//先判断栈是否空</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(isEmpty()) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//抛出异常</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">&quot;栈空，没有数据~&quot;</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> value = stack[top];</span><br><span class=\"line\">\t\ttop--;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> value;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//显示栈的情况[遍历栈]， 遍历时，需要从栈顶开始显示数据</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">list</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(isEmpty()) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">&quot;栈空，没有数据~~&quot;</span>);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">//需要从栈顶开始显示数据</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = top; i &gt;= <span class=\"number\">0</span> ; i--) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.printf(<span class=\"string\">&quot;stack[%d]=%d\\n&quot;</span>, i, stack[i]);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2><span id=\"四-递归\">四、递归</span></h2><p>简单的说: 递归就是方法自己调用自己,每次调用时传入不同的变量，递归有助于编程者解决复杂的问题,同时可以让代码变得简洁。</p>\n<p>阶乘问题:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//阶乘问题</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">factorial</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (n == <span class=\"number\">1</span>) &#123; </span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> factorial(n - <span class=\"number\">1</span>) * n; <span class=\"comment\">// 1 * 2 * 3</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>迷宫问题：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> recursion;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MiGong</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 先创建一个二维数组，模拟迷宫</span></span><br><span class=\"line\">        <span class=\"comment\">// 地图</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span>[][] map = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">8</span>][<span class=\"number\">7</span>];</span><br><span class=\"line\">        <span class=\"comment\">// 使用1 表示墙</span></span><br><span class=\"line\">        <span class=\"comment\">// 上下全部置为1</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">7</span>; i++) &#123;</span><br><span class=\"line\">            map[<span class=\"number\">0</span>][i] = <span class=\"number\">1</span>;</span><br><span class=\"line\">            map[<span class=\"number\">7</span>][i] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 左右全部置为1</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">8</span>; i++) &#123;</span><br><span class=\"line\">            map[i][<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">            map[i][<span class=\"number\">6</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//设置挡板, 1 表示</span></span><br><span class=\"line\">        map[<span class=\"number\">3</span>][<span class=\"number\">1</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        map[<span class=\"number\">3</span>][<span class=\"number\">2</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"comment\">//\t\tmap[1][2] = 1;</span></span><br><span class=\"line\"><span class=\"comment\">//\t\tmap[2][2] = 1;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 输出地图</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;地图的情况&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">8</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; <span class=\"number\">7</span>; j++) &#123;</span><br><span class=\"line\">                System.out.print(map[i][j] + <span class=\"string\">&quot; &quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            System.out.println();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//使用递归回溯给小球找路</span></span><br><span class=\"line\">        setWay(map, <span class=\"number\">1</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"comment\">//setWay2(map, 1, 1);</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//输出新的地图, 小球走过，并标识过的递归</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;小球走过，并标识过的 地图的情况&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">8</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; <span class=\"number\">7</span>; j++) &#123;</span><br><span class=\"line\">                System.out.print(map[i][j] + <span class=\"string\">&quot; &quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            System.out.println();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//使用递归回溯来给小球找路</span></span><br><span class=\"line\">    <span class=\"comment\">//说明</span></span><br><span class=\"line\">    <span class=\"comment\">//1. map 表示地图</span></span><br><span class=\"line\">    <span class=\"comment\">//2. i,j 表示从地图的哪个位置开始出发 (1,1)</span></span><br><span class=\"line\">    <span class=\"comment\">//3. 如果小球能到 map[6][5] 位置，则说明通路找到.</span></span><br><span class=\"line\">    <span class=\"comment\">//4. 约定： 当map[i][j] 为 0 表示该点没有走过 当为 1 表示墙  ； 2 表示通路可以走 ； 3 表示该点已经走过，但是走不通</span></span><br><span class=\"line\">    <span class=\"comment\">//5. 在走迷宫时，需要确定一个策略(方法) 下-&gt;右-&gt;上-&gt;左 , 如果该点走不通，再回溯</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> map 表示地图</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> i   从哪个位置开始找</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> j</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 如果找到通路，就返回true, 否则返回false</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">setWay</span><span class=\"params\">(<span class=\"keyword\">int</span>[][] map, <span class=\"keyword\">int</span> i, <span class=\"keyword\">int</span> j)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (map[<span class=\"number\">6</span>][<span class=\"number\">5</span>] == <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (map[i][j] == <span class=\"number\">0</span>) &#123; <span class=\"comment\">//如果当前这个点还没有走过</span></span><br><span class=\"line\">                <span class=\"comment\">//按照策略 下-&gt;右-&gt;上-&gt;左</span></span><br><span class=\"line\">                map[i][j] = <span class=\"number\">2</span>; <span class=\"comment\">// 假定该点是可以走通.</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (setWay(map, i + <span class=\"number\">1</span>, j)) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (setWay(map, i, j + <span class=\"number\">1</span>)) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (setWay(map, i - <span class=\"number\">1</span>, j)) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (setWay(map, i, j - <span class=\"number\">1</span>)) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    <span class=\"comment\">//说明该点是走不通，是死路</span></span><br><span class=\"line\">                    map[i][j] = <span class=\"number\">3</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//修改找路的策略，改成 上-&gt;右-&gt;下-&gt;左</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">setWay2</span><span class=\"params\">(<span class=\"keyword\">int</span>[][] map, <span class=\"keyword\">int</span> i, <span class=\"keyword\">int</span> j)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (map[<span class=\"number\">6</span>][<span class=\"number\">5</span>] == <span class=\"number\">2</span>) &#123; <span class=\"comment\">// 通路已经找到ok</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (map[i][j] == <span class=\"number\">0</span>) &#123; <span class=\"comment\">//如果当前这个点还没有走过</span></span><br><span class=\"line\">                <span class=\"comment\">//按照策略 上-&gt;右-&gt;下-&gt;左</span></span><br><span class=\"line\">                map[i][j] = <span class=\"number\">2</span>; <span class=\"comment\">// 假定该点是可以走通.</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (setWay2(map, i - <span class=\"number\">1</span>, j)) &#123;<span class=\"comment\">//向上走</span></span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (setWay2(map, i, j + <span class=\"number\">1</span>)) &#123; <span class=\"comment\">//向右走</span></span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (setWay2(map, i + <span class=\"number\">1</span>, j)) &#123; <span class=\"comment\">//向下</span></span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (setWay2(map, i, j - <span class=\"number\">1</span>)) &#123; <span class=\"comment\">// 向左走</span></span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    <span class=\"comment\">//说明该点是走不通，是死路</span></span><br><span class=\"line\">                    map[i][j] = <span class=\"number\">3</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123; <span class=\"comment\">// 如果map[i][j] != 0 , 可能是 1， 2， 3</span></span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>八皇后问题：</p>\n<p>​    八皇后问题，是一个古老而著名的问题，是<strong>回溯算法的典型案例</strong>。该问题是国际西洋棋棋手马克斯·贝瑟尔于1848年提出：在8×8格的国际象棋上摆放八个皇后，使其不能互相攻击，即：任意两个皇后都不能处于同一行、同一列或同一斜线上，问有多少种摆法。【92】</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> recursion;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Queen8</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//定义一个max表示共有多少个皇后</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> max = <span class=\"number\">8</span>;</span><br><span class=\"line\">    <span class=\"comment\">//定义数组array, 保存皇后放置位置的结果,比如 arr = &#123;0 , 4, 7, 5, 2, 6, 1, 3&#125;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span>[] array = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[max];</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> judgeCount = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//测试一把 ， 8皇后是否正确</span></span><br><span class=\"line\">        Queen8 queen8 = <span class=\"keyword\">new</span> Queen8();</span><br><span class=\"line\">        queen8.check(<span class=\"number\">0</span>);</span><br><span class=\"line\">        System.out.printf(<span class=\"string\">&quot;一共有%d解法&quot;</span>, count);</span><br><span class=\"line\">        System.out.printf(<span class=\"string\">&quot;一共判断冲突的次数%d次&quot;</span>, judgeCount); <span class=\"comment\">// 1.5w</span></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//编写一个方法，放置第n个皇后</span></span><br><span class=\"line\">    <span class=\"comment\">//特别注意： check 是 每一次递归时，进入到check中都有  for(int i = 0; i &lt; max; i++)，因此会有回溯</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">check</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (n == max) &#123;  <span class=\"comment\">//n = 8 , 其实8个皇后就既然放好</span></span><br><span class=\"line\">            print();</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//依次放入皇后，并判断是否冲突</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; max; i++) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//先把当前这个皇后 n , 放到该行的第1列</span></span><br><span class=\"line\">            array[n] = i;</span><br><span class=\"line\">            <span class=\"comment\">//判断当放置第n个皇后到i列时，是否冲突</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (judge(n)) &#123; <span class=\"comment\">// 不冲突</span></span><br><span class=\"line\">                <span class=\"comment\">//接着放n+1个皇后,即开始递归</span></span><br><span class=\"line\">                check(n + <span class=\"number\">1</span>); <span class=\"comment\">//</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//如果冲突，就继续执行 array[n] = i; 即将第n个皇后，放置在本行得 后移的一个位置</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//查看当我们放置第n个皇后，就去检查该皇后是否和前面已经摆放的皇后冲突</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">judge</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//说明</span></span><br><span class=\"line\">        <span class=\"comment\">//1.array[i] == array[n] 表示判断第n个皇后是否和前面的n-1个皇后在同一列</span></span><br><span class=\"line\">        <span class=\"comment\">//2.Math.abs(array[n] - array[i]) 表示判断第n个皇后和第i个皇后是否再同一斜线</span></span><br><span class=\"line\">        <span class=\"comment\">// n = 1  放置第 2列 1 n = 1 array[1] = 1</span></span><br><span class=\"line\">        <span class=\"comment\">// Math.abs(1-0) == 1  Math.abs(array[n] - array[i]) = Math.abs(1-0) = 1</span></span><br><span class=\"line\">        <span class=\"comment\">//3. 判断是否在同一行, 没有必要，n 每次都在递增</span></span><br><span class=\"line\">        judgeCount++;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (array[i] == array[n] || Math.abs(n - i) == Math.abs(array[n] - array[i])) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//写一个方法，可以将皇后摆放的位置输出</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">print</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        count++;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; array.length; i++) &#123;</span><br><span class=\"line\">            System.out.print(array[i] + <span class=\"string\">&quot; &quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2><span id=\"五-算法的时间复杂度及空间复杂度\">五、算法的时间复杂度及空间复杂度</span></h2><p><strong>时间复杂度</strong></p>\n<p>1)一般情况下，算法中的基本操作语句的重复执行次数是问题规模n的某个函数，用T(n)表示，若有某个辅助函数f(n)，使得当n趋近于无穷大时，T(n) / f(n) 的极限值为不等于零的常数，则称f(n)是T(n)的同数量级函数。记作 T(n)=Ｏ( f(n) )，称Ｏ( f(n) ) 为算法的渐进时间复杂度，简称时间复杂度。</p>\n<p>2)T(n) 不同，但时间复杂度可能相同。 如：T(n)=n²+7n+6 与 T(n)=3n²+2n+2 它们的T(n) 不同，但时间复杂度相同，都为O(n²)。</p>\n<p>3)计算时间复杂度的方法：</p>\n<p>​    •用常数1代替运行时间中的所有加法常数 T(n)=n²+7n+6  =&gt; T(n)=n²+7n+1</p>\n<p>​    •修改后的运行次数函数中，只保留最高阶项 T(n)=n²+7n+1 =&gt; T(n) = n²</p>\n<p>​    •去除最高阶项的系数 T(n) = n² =&gt; T(n) = n² =&gt; O(n²)</p>\n<p><strong>1/常见的算法的时间复杂度</strong></p>\n<p>1)常数阶O(1)</p>\n<p>2)对数阶O(<strong>log2n</strong>)</p>\n<p>3)线性阶O(n)</p>\n<p>4)线性对数阶O(n<strong>log2n</strong>)</p>\n<p>5)平方阶O(n^2)</p>\n<p>6)立方阶O(n^3)</p>\n<p>7)k次方阶O(n^k)</p>\n<p>8)指数阶O(2^n)</p>\n<p><img src=\"/2021/01/01/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E6%95%B4%E7%90%86/image-20210102141112949.png\" alt=\"image-20210102141112949\"></p>\n<p><strong>说明</strong>：</p>\n<p>•常见的算法时间复杂度由小到大依次为：Ο(1)＜Ο(log2n)＜Ο(n)＜Ο(nlog2n)＜Ο(n2)＜Ο(n3)＜Ο(nk) ＜Ο(2n) ，随着问题规模n的不断增大，上述时间复杂度不断增大，算法的执行效率越低</p>\n<p>•从图中可见，我们应该尽可能避免使用指数阶的算法</p>\n<h3><span id=\"1常数阶o1\">1)常数阶O(1)</span></h3><p>无论代码执行了多少行，只要是没有循环等复杂结构，那这个代码的时间复杂度就都是O(1)</p>\n<p><img src=\"/2021/01/01/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E6%95%B4%E7%90%86/image-20210102141307586.png\" alt=\"image-20210102141307586\"></p>\n<p>上述代码在执行的时候，它消耗的时候并不随着某个变量的增长而增长，那么无论这类代码有多长，即使有几万几十万行，都可以用O(1)来表示它的时间复杂度。</p>\n<p><strong>常见的时间复杂度</strong></p>\n<h3><span id=\"2对数阶olog2n\">2)对数阶O(log2<sup>n</sup>)</span></h3><p>注：</p>\n<p><img src=\"/2021/01/01/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E6%95%B4%E7%90%86/image-20210102141540407.png\" alt=\"image-20210102141540407\"></p>\n<p><img src=\"/2021/01/01/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E6%95%B4%E7%90%86/image-20210102141434749.png\" alt=\"image-20210102141434749\"></p>\n<p><strong>说明</strong>：在while循环里面，每次都将 i 乘以 2，乘完之后，i 距离 n 就越来越近了。假设循环x次之后，i 就大于 2 了，此时这个循环就退出了，也就是说 2 的 x 次方等于 n，那么 x = log2^n也就是说当循环 log2^n 次以后，这个代码就结束了。因此这个代码的时间复杂度为：O(log2^n) 。 O(log2^n) 的这个2 时间上是根据代码变化的，i = i * 3 ，则是 O(log3^n)。</p>\n<h3><span id=\"3线性阶on\">3)线性阶O(n)</span></h3><p><img src=\"/2021/01/01/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E6%95%B4%E7%90%86/image-20210102141959933.png\" alt=\"image-20210102141959933\"></p>\n<p><strong>说明</strong>：这段代码，for循环里面的代码会执行n遍，因此它消耗的时间是随着n的变化而变化的，因此这类代码都可以用O(n)来表示它的时间复杂度</p>\n<h3><span id=\"4线性对数阶onlogn\">4)线性对数阶O(nlogN)</span></h3><p><img src=\"/2021/01/01/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E6%95%B4%E7%90%86/image-20210102142138277.png\" alt=\"image-20210102142138277\"></p>\n<p><strong>说明</strong>：线性对数阶O(nlogN) 其实非常容易理解，将时间复杂度为O(logn)的代码循环N遍的话，那么它的时间复杂度就是 n * O(logN)，也就是了O(nlogN)</p>\n<h3><span id=\"5平方阶on2\">5)平方阶O(n²)</span></h3><p><img src=\"/2021/01/01/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E6%95%B4%E7%90%86/image-20210102163741163.png\" alt=\"image-20210102163741163\"></p>\n<p><strong>说明</strong>：平方阶O(n²) 就更容易理解了，如果把 O(n) 的代码再嵌套循环一遍，它的时间复杂度就是 O(n²)，这段代码其实就是嵌套了2层n循环，它的时间复杂度就是 O(n<em>n)，即 O(n²) 如果将其中一层循环的n改成m，那它的时间复杂度就变成了 O(m</em>n)</p>\n<h3><span id=\"6立方阶on3-k次方阶onk\">6)立方阶O(n³)<strong>、</strong>K次方阶O(n^k)</span></h3><p><strong>说明</strong>：参考上面的O(n²) 去理解就好了，O(n³)相当于三层n循环，其它的类似</p>\n<hr>\n<p><strong>算法的空间复杂度:</strong></p>\n<p>基本介绍</p>\n<p>1)类似于时间复杂度的讨论，一个算法的空间复杂度(Space Complexity)定义为该算法所耗费的存储空间，它也是问题规模n的函数。</p>\n<p>2)空间复杂度(Space Complexity)是对一个算法在运行过程中临时占用存储空间大小的量度。有的算法需要占用的临时工作单元数与解决问题的规模n有关，它随着n的增大而增大，当n较大时，将占用较多的存储单元，例如快速排序和归并排序算法就属于这种情况</p>\n<p>3)在做算法分析时，主要讨论的是时间复杂度。从用户使用体验上看，更看重的程序执行的速度。一些缓存产品(redis, memcache)和算法(基数排序)本质就是用空间换时间.</p>\n<h2><span id=\"六-排序\">六、排序</span></h2><h3><span id=\"1冒泡排序\">1.冒泡排序</span></h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">bubbleSort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr)</span> </span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">int</span> temp = <span class=\"number\">0</span>;</span><br><span class=\"line\">     Boolean flag = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">     <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; arr.length - <span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">         <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; arr.length - <span class=\"number\">1</span> - i; j++) &#123;</span><br><span class=\"line\">             <span class=\"keyword\">if</span>(arr[j] &gt; arr[j+<span class=\"number\">1</span>])&#123;</span><br><span class=\"line\">                 flag = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                 temp = arr[j];</span><br><span class=\"line\">                 arr[j] = arr[j+<span class=\"number\">1</span>];</span><br><span class=\"line\">                 arr[j+<span class=\"number\">1</span>] = temp;</span><br><span class=\"line\">             &#125;</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">         <span class=\"keyword\">if</span>(!flag)&#123;</span><br><span class=\"line\">             <span class=\"keyword\">break</span>;</span><br><span class=\"line\">         &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">             flag = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n\n\n<h3><span id=\"2选择排序\">2.选择排序</span></h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">selectSort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; arr.length-<span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> min = arr[i];</span><br><span class=\"line\">            <span class=\"keyword\">int</span> minIndex  = i;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = i + <span class=\"number\">1</span>; j &lt; arr.length; j++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (min&gt;arr[j])&#123;</span><br><span class=\"line\">                    min=arr[j];</span><br><span class=\"line\">                    minIndex = j;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(minIndex != i)&#123;</span><br><span class=\"line\">                arr[minIndex] = arr[i];</span><br><span class=\"line\">                arr[i] = min;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n\n<h3><span id=\"3插入排序\">3.插入排序</span></h3><p>​    插入排序（Insertion Sorting）的<strong>基本思想</strong>是：把n个待排序的元素看成为一个有序表和一个无序表，开始时有序表中只包含一个元素，无序表中包含有n-1个元素，排序过程中每次从无序表中取出第一个元素，把它的排序码依次与有序表元素的排序码进行比较，将它插入到有序表中的适当位置，使之成为新的有序表。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 插入排序最开始为1个元素的有序列表，和n-1的无序列表</span></span><br><span class=\"line\"><span class=\"comment\">   *</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> arr</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">insertSort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr)</span> </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">int</span> insertIndex = <span class=\"number\">0</span>; <span class=\"comment\">//记录待插入排序元素的索引</span></span><br><span class=\"line\">      <span class=\"keyword\">int</span> insertValue = <span class=\"number\">0</span>; <span class=\"comment\">//记录待插入的元素的值</span></span><br><span class=\"line\">      <span class=\"comment\">//index=0的元素看作一个元素的有序列表，从1开始为待插入的元素</span></span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">          insertIndex = i;</span><br><span class=\"line\">          insertValue = arr[i];</span><br><span class=\"line\">          <span class=\"comment\">//待插入值和前面的元素比较找到需要插入的位置</span></span><br><span class=\"line\">          <span class=\"comment\">//insertIndex &gt; 0保证索引不越界</span></span><br><span class=\"line\">          <span class=\"keyword\">while</span> (insertIndex - <span class=\"number\">1</span> &gt; <span class=\"number\">0</span> &amp;&amp; insertValue &lt; arr[insertIndex - <span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">              arr[insertIndex] = arr[insertIndex - <span class=\"number\">1</span>]; <span class=\"comment\">//往后移</span></span><br><span class=\"line\">              insertIndex--;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (i != insertIndex) &#123;</span><br><span class=\"line\">              arr[insertIndex] = insertValue;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n\n<h3><span id=\"4希尔排序\">4.希尔排序</span></h3><p>希尔排序是希尔（Donald Shell）于1959年提出的一种排序算法。希尔排序也是一种<strong>插入排序</strong>，它是简单插入排序经过改进之后的一个<strong>更高效的版本</strong>，也称为缩小增量排序。</p>\n<p><img src=\"/2021/01/01/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E6%95%B4%E7%90%86/image-20210102193620447.png\" alt=\"image-20210102193620447\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">shellSort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//step:步长</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> insertValue = <span class=\"number\">0</span>; <span class=\"comment\">//记录待插入的元素的值</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> insertIndex = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> step = arr.length / <span class=\"number\">2</span>; step &gt; <span class=\"number\">0</span>; step /= <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">           <span class=\"comment\">// System.out.println(step);</span></span><br><span class=\"line\">            <span class=\"comment\">//插入排序</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = step; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">                insertValue = arr[i];</span><br><span class=\"line\">                <span class=\"comment\">//insertIndex - step &gt;= 0</span></span><br><span class=\"line\">                <span class=\"keyword\">for</span> (insertIndex = i; insertIndex - step &gt;= <span class=\"number\">0</span> &amp;&amp; arr[insertIndex - step] &gt; insertValue; insertIndex -= step) &#123;</span><br><span class=\"line\">                    arr[insertIndex] = arr[insertIndex - step];</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (insertIndex != i) &#123;</span><br><span class=\"line\">                    arr[insertIndex] = insertValue;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n\n<h3><span id=\"5快速排序\">5.快速排序</span></h3><p>​    快速排序（Quicksort）是对冒泡排序的一种改进。基本思想是：通过一趟排序将要排序的数据分割成独立的两部分，其中一部分的所有数据都比另外一部分的所有数据都要小，然后再按此方法对这两部分数据分别进行快速排序，整个排序过程可以递归进行，以此达到整个数据变成有序序列</p>\n<p><img src=\"/2021/01/01/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E6%95%B4%E7%90%86/image-20210102194545635.png\" alt=\"image-20210102194545635\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">quickSort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr, <span class=\"keyword\">int</span> low, <span class=\"keyword\">int</span> high)</span> </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">int</span> i, j, temp, t;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (low &lt; high) &#123;</span><br><span class=\"line\">          i = low;</span><br><span class=\"line\">          j = high;</span><br><span class=\"line\">          <span class=\"comment\">// temp就是基准位</span></span><br><span class=\"line\">          temp = arr[i];</span><br><span class=\"line\"></span><br><span class=\"line\">          <span class=\"keyword\">while</span> (i &lt; j) &#123;</span><br><span class=\"line\">              <span class=\"comment\">// 先看右边，依次往左递减</span></span><br><span class=\"line\">              <span class=\"keyword\">while</span> (temp &lt;= arr[j] &amp;&amp; i &lt; j) &#123;</span><br><span class=\"line\">                  j--;</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">              <span class=\"comment\">// 再看左边，依次往右递增</span></span><br><span class=\"line\">              <span class=\"keyword\">while</span> (temp &gt;= arr[i] &amp;&amp; i &lt; j) &#123;</span><br><span class=\"line\">                  i++;</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">              <span class=\"comment\">// 如果满足条件则交换</span></span><br><span class=\"line\">              <span class=\"keyword\">if</span> (i &lt; j) &#123;</span><br><span class=\"line\">                  t = arr[j];</span><br><span class=\"line\">                  arr[j] = arr[i];</span><br><span class=\"line\">                  arr[i] = t;</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          <span class=\"comment\">// 这里i == j</span></span><br><span class=\"line\">          <span class=\"comment\">// 最后将基准为与i和j相等位置的数字交换</span></span><br><span class=\"line\">          arr[low] = arr[i];</span><br><span class=\"line\">          arr[i] = temp;</span><br><span class=\"line\">          <span class=\"comment\">// 递归调用左半数组</span></span><br><span class=\"line\">          quickSort(arr, low, i - <span class=\"number\">1</span>);</span><br><span class=\"line\">          <span class=\"comment\">// 递归调用右半数组</span></span><br><span class=\"line\">          quickSort(arr, i + <span class=\"number\">1</span>, high);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n\n<h3><span id=\"6基数排序\">6.基数排序</span></h3><p>1)将所有待比较数值统一为同样的数位长度，数位较短的数前面补零。然后，从最低位开始，依次进行一次排序。这样从最低位排序一直到最高位排序完成以后, 数列就变成一个有序序列。</p>\n<p>2)这样说明，比较难理解，下面我们看一个图文解释，理解基数排序的步骤</p>\n<p><strong>基数排序图文说明</strong></p>\n<p>将数组 {53, 3, 542, 748, 14, 214} 使用基数排序, 进行升序排序。</p>\n<p><img src=\"/2021/01/01/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E6%95%B4%E7%90%86/image-20210102200322572.png\" alt=\"image-20210102200322572\"></p>\n<p><img src=\"/2021/01/01/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E6%95%B4%E7%90%86/image-20210102200443841.png\" alt=\"image-20210102200443841\"></p>\n<p><img src=\"/2021/01/01/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E6%95%B4%E7%90%86/image-20210102200539559.png\" alt=\"image-20210102200539559\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//基数排序方法</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">radixSort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr)</span> </span>&#123;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">//根据前面的推导过程，我们可以得到最终的基数排序代码</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">//1. 得到数组中最大的数的位数</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> max = arr[<span class=\"number\">0</span>]; <span class=\"comment\">//假设第一数就是最大数</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (arr[i] &gt; max) &#123;</span><br><span class=\"line\">\t\t\t\tmax = arr[i];</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">//得到最大数是几位数</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> maxLength = (max + <span class=\"string\">&quot;&quot;</span>).length();</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">//定义一个二维数组，表示10个桶, 每个桶就是一个一维数组</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//说明</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//1. 二维数组包含10个一维数组</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//2. 为了防止在放入数的时候，数据溢出，则每个一维数组(桶)，大小定为arr.length</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//3. 名明确，基数排序是使用空间换时间的经典算法</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span>[][] bucket = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">10</span>][arr.length];</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">//为了记录每个桶中，实际存放了多少个数据,我们定义一个一维数组来记录各个桶的每次放入的数据个数</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//可以这里理解</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//比如：bucketElementCounts[0] , 记录的就是  bucket[0] 桶的放入数据个数</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span>[] bucketElementCounts = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">10</span>];</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">//这里我们使用循环将代码处理</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span> , n = <span class=\"number\">1</span>; i &lt; maxLength; i++, n *= <span class=\"number\">10</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//(针对每个元素的对应位进行排序处理)， 第一次是个位，第二次是十位，第三次是百位..</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; arr.length; j++) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//取出每个元素的对应位的值</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">int</span> digitOfElement = arr[j] / n % <span class=\"number\">10</span>;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//放入到对应的桶中</span></span><br><span class=\"line\">\t\t\t\tbucket[digitOfElement][bucketElementCounts[digitOfElement]] = arr[j];</span><br><span class=\"line\">\t\t\t\tbucketElementCounts[digitOfElement]++;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//按照这个桶的顺序(一维数组的下标依次取出数据，放入原来数组)</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">int</span> index = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//遍历每一桶，并将桶中是数据，放入到原数组</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> k = <span class=\"number\">0</span>; k &lt; bucketElementCounts.length; k++) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//如果桶中，有数据，我们才放入到原数组</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(bucketElementCounts[k] != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"comment\">//循环该桶即第k个桶(即第k个一维数组), 放入</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> l = <span class=\"number\">0</span>; l &lt; bucketElementCounts[k]; l++) &#123;</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"comment\">//取出元素放入到arr</span></span><br><span class=\"line\">\t\t\t\t\t\tarr[index++] = bucket[k][l];</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//第i+1轮处理后，需要将每个 bucketElementCounts[k] = 0 ！！！！</span></span><br><span class=\"line\">\t\t\t\tbucketElementCounts[k] = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t\t\t</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//System.out.println(&quot;第&quot;+(i+1)+&quot;轮，对个位的排序处理 arr =&quot; + Arrays.toString(arr));</span></span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h3><span id=\"7归并排序\">7.归并排序</span></h3><p><img src=\"/2021/01/01/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E6%95%B4%E7%90%86/image-20210102202017455.png\" alt=\"image-20210102202017455\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * https://baijiahao.baidu.com/s?id=1631406377431334840&amp;wfr=spider&amp;for=pc&amp;isFailFlag=1</span></span><br><span class=\"line\"><span class=\"comment\">     * 归并排序介绍</span></span><br><span class=\"line\"><span class=\"comment\">     * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     * 归并排序（MERGE-SORT）是建立在归并操作上的一种有效的排序算法，该算法是采用分治法（Divide and Conquer）的一个非常典型的应用。将已有序的子序列合并，得到完全有序的序列；即先使每个子序列有序，再使子序列段间有序。若将两个有序表合并成一个有序表，称为二路归并。</span></span><br><span class=\"line\"><span class=\"comment\">     * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     * 归并排序原理</span></span><br><span class=\"line\"><span class=\"comment\">     * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     * 归并排序在字面意思上已经简要显示出了他的核心原理，即递归再合并。</span></span><br><span class=\"line\"><span class=\"comment\">     * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     * 我们举个例子，将两个有序数组合并成一个有序数组，如下图。</span></span><br><span class=\"line\"><span class=\"comment\">     * 4 7 9       1 3 8</span></span><br><span class=\"line\"><span class=\"comment\">     * |           |</span></span><br><span class=\"line\"><span class=\"comment\">     * 4和1进行比较，1&lt;4,将1取出来放在新的数组中&#123;1&#125;</span></span><br><span class=\"line\"><span class=\"comment\">     * 4 7 9         3 8</span></span><br><span class=\"line\"><span class=\"comment\">     * |             |</span></span><br><span class=\"line\"><span class=\"comment\">     * 4和3进行比较，3&lt;4，将3取出来放在新的数组中&#123;1，3&#125;</span></span><br><span class=\"line\"><span class=\"comment\">     * 4 7 9           8</span></span><br><span class=\"line\"><span class=\"comment\">     * |               |</span></span><br><span class=\"line\"><span class=\"comment\">     * 4和8比较，4&lt;8，将4取出来放在新的数组中&#123;1，3，4&#125;</span></span><br><span class=\"line\"><span class=\"comment\">     * 7 9           8</span></span><br><span class=\"line\"><span class=\"comment\">     * |             |</span></span><br><span class=\"line\"><span class=\"comment\">     * 7和8比较，4&lt;8，将7取出来放在新的数组中&#123;1，3，4，7&#125;</span></span><br><span class=\"line\"><span class=\"comment\">     * 9           8</span></span><br><span class=\"line\"><span class=\"comment\">     * |           |</span></span><br><span class=\"line\"><span class=\"comment\">     * 9和8比较，4&lt;8，将8取出来放在新的数组中&#123;1，3，4，7，8&#125;</span></span><br><span class=\"line\"><span class=\"comment\">     * 9</span></span><br><span class=\"line\"><span class=\"comment\">     * |</span></span><br><span class=\"line\"><span class=\"comment\">     * 只剩一个9，插入到新数组后得到有序数组&#123;1，3，4，7，8，9&#125;</span></span><br><span class=\"line\"><span class=\"comment\">     * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     * 合并数组</span></span><br><span class=\"line\"><span class=\"comment\">     * 现在我们来学习归并排序的步骤，我们给定一个无序数组&#123;9, 2, 6, 3, 5, 7, 10, 11&#125;</span></span><br><span class=\"line\"><span class=\"comment\">     * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     * 首先我们对它递归进行二分操作</span></span><br><span class=\"line\"><span class=\"comment\">     * 9   2   6   3 | 5   7   10   11</span></span><br><span class=\"line\"><span class=\"comment\">     * 9   2 | 6   3 | 5   7 | 10   11</span></span><br><span class=\"line\"><span class=\"comment\">     * 9 | 2 | 6 | 3 | 5 | 7 | 10 | 11</span></span><br><span class=\"line\"><span class=\"comment\">     * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     * 二分递归</span></span><br><span class=\"line\"><span class=\"comment\">     * 不断递归直至每个分组中都只有一个元素，即每个分组都是一个有序数组，不过只有一个元素一定是有序的。</span></span><br><span class=\"line\"><span class=\"comment\">     * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     * 下面进行向上递归合并，如下图。</span></span><br><span class=\"line\"><span class=\"comment\">     * 9 | 2 | 6 | 3 | 5 | 7 | 10 | 11</span></span><br><span class=\"line\"><span class=\"comment\">     * 2   9 | 3   6 | 5   7 | 10   11</span></span><br><span class=\"line\"><span class=\"comment\">     * 2   3   6   9 | 5   7   10   11</span></span><br><span class=\"line\"><span class=\"comment\">     * 2   3   5   6   7   9   10   11</span></span><br><span class=\"line\"><span class=\"comment\">     * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     * 递归合并</span></span><br><span class=\"line\"><span class=\"comment\">     * 经过递归合并，我们得到有序数组&#123;2,3,5,6,7,9,10,11&#125;。</span></span><br><span class=\"line\"><span class=\"comment\">     * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     * 功能：合并子序列</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> a</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> left</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> mid</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> right</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">merge</span><span class=\"params\">(<span class=\"keyword\">int</span>[] a, <span class=\"keyword\">int</span> left, <span class=\"keyword\">int</span> mid, <span class=\"keyword\">int</span> right)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] tmp = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[a.length];<span class=\"comment\">// 辅助数组</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> p1 = left, p2 = mid + <span class=\"number\">1</span>, k = left;<span class=\"comment\">// p1、p2是检测指针，k是存放指针</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//System.out.println(&quot;a:&quot; + Arrays.toString(a));</span></span><br><span class=\"line\">        <span class=\"comment\">// 对比左右两个数组并将较小的数先放到辅助数组</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (p1 &lt;= mid &amp;&amp; p2 &lt;= right) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (a[p1] &lt;= a[p2])</span><br><span class=\"line\">                tmp[k++] = a[p1++];</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">                tmp[k++] = a[p2++];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (p1 &lt;= mid)</span><br><span class=\"line\">            tmp[k++] = a[p1++];<span class=\"comment\">//將左边剩余一个或多个元素放入temp中，剩餘的元素是合并序列中最大的值</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (p2 &lt;= right)</span><br><span class=\"line\">            tmp[k++] = a[p2++];<span class=\"comment\">//同上</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 复制回原素组</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = left; i &lt;= right; i++)</span><br><span class=\"line\">            a[i] = tmp[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">mergeSort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] a, <span class=\"keyword\">int</span> start, <span class=\"keyword\">int</span> end)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (start &lt; end) &#123;<span class=\"comment\">// 当子序列中只有一个元素时结束递归</span></span><br><span class=\"line\">            <span class=\"keyword\">int</span> mid = (start + end) / <span class=\"number\">2</span>;<span class=\"comment\">// 划分子序列</span></span><br><span class=\"line\">            mergeSort(a, start, mid);<span class=\"comment\">// 对左侧子序列进行递归排序</span></span><br><span class=\"line\">            mergeSort(a, mid + <span class=\"number\">1</span>, end);<span class=\"comment\">// 对右侧子序列进行递归排序</span></span><br><span class=\"line\">            merge(a, start, mid, end);<span class=\"comment\">// 合并</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n\n<h3><span id=\"8堆排序\">8.堆排序</span></h3><p>1)堆排序是利用<strong>堆</strong>这种数据结构而设计的一种排序算法，堆排序是一种<strong>选择排序，</strong>它的最坏，最好，平均时间复杂度均为O(nlogn)，它也是不稳定排序。</p>\n<p>2)堆是具有以下性质的完全二叉树：每个结点的值都大于或等于其左右孩子结点的值，称为大顶堆, <strong>注**</strong>意** : 没有要求结点的左孩子的值和右孩子的值的大小关系。</p>\n<p>3)每个结点的值都小于或等于其左右孩子结点的值，称为小顶堆</p>\n<p>4)大顶堆举例说明</p>\n<p>大顶堆用于升序排序，小顶堆用于降序排序</p>\n<p><img src=\"/2021/01/01/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E6%95%B4%E7%90%86/image-20210102203535568.png\" alt=\"image-20210102203535568\"></p>\n<p><img src=\"/2021/01/01/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E6%95%B4%E7%90%86/image-20210102203605120.png\" alt=\"image-20210102203605120\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">HeapAdjust</span><span class=\"params\">(<span class=\"keyword\">int</span>[] a, <span class=\"keyword\">int</span> start, <span class=\"keyword\">int</span> len)</span> </span>&#123;</span><br><span class=\"line\">       <span class=\"comment\">//这里的start表示树节点（非叶子节点）</span></span><br><span class=\"line\">       <span class=\"keyword\">int</span> temp, j;</span><br><span class=\"line\">       temp = a[start];</span><br><span class=\"line\">       <span class=\"keyword\">for</span> (j = <span class=\"number\">2</span> * start + <span class=\"number\">1</span>; j &lt; len; j = j * <span class=\"number\">2</span> + <span class=\"number\">1</span>) &#123; <span class=\"comment\">/* 从index最大的有孩子的节点开始筛选，堆排 */</span></span><br><span class=\"line\">           <span class=\"keyword\">if</span> (j + <span class=\"number\">1</span> &lt; len &amp;&amp; a[j] &lt; a[j + <span class=\"number\">1</span>]) <span class=\"comment\">/* 是index=j的元素为较大的元素 */</span></span><br><span class=\"line\">               j++;</span><br><span class=\"line\">           <span class=\"keyword\">if</span> (a[j] &gt; temp) &#123;</span><br><span class=\"line\">               a[start] = a[j]; <span class=\"comment\">/* 将较大元素赋值给父节点 */</span></span><br><span class=\"line\">               start = j;</span><br><span class=\"line\">           &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">               <span class=\"keyword\">break</span>;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"comment\">//循环结束后，可能剩下的一个元素填入对应的位置</span></span><br><span class=\"line\">       a[start] = temp;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">swap</span><span class=\"params\">(<span class=\"keyword\">int</span> a[], <span class=\"keyword\">int</span> low, <span class=\"keyword\">int</span> high)</span> </span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">int</span> temp = a[low];</span><br><span class=\"line\">       a[low] = a[high];</span><br><span class=\"line\">       a[high] = temp;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">heapSort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr)</span> </span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">int</span> i;</span><br><span class=\"line\">     <span class=\"comment\">//（arr.length-1） / 2 - 1为最后一个非叶子节点索引</span></span><br><span class=\"line\">       <span class=\"keyword\">for</span> (i = (arr.length-<span class=\"number\">1</span>) / <span class=\"number\">2</span> - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i--) &#123; <span class=\"comment\">/* 把a[]构造成一个大顶堆 */</span></span><br><span class=\"line\">           HeapAdjust(arr, i, arr.length);</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"keyword\">for</span> (i = arr.length - <span class=\"number\">1</span>; i &gt; <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">           swap(arr, <span class=\"number\">0</span>, i); <span class=\"comment\">/* 交换堆顶最大元素和堆尾元素 */</span></span><br><span class=\"line\">           HeapAdjust(arr, <span class=\"number\">0</span>, i); <span class=\"comment\">/* 把交换后的堆a[0,i-1]，再次构造成大顶顶，使堆顶元素为最大值 */</span></span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<p><strong>各排序之间对比</strong>：</p>\n<p><img src=\"/2021/01/01/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E6%95%B4%E7%90%86/image-20210102170510025.png\" alt=\"image-20210102170510025\"></p>\n<p><strong>相关术语解释：</strong></p>\n<p>1)<strong>稳定</strong>：如果a原本在b前面，而a=b，排序之后a仍然在b的前面；</p>\n<p>2)<strong>不稳定</strong>：如果a原本在b的前面，而a=b，排序之后a可能会出现在b的后面；</p>\n<p>3)<strong>内排序</strong>：所有排序操作都在内存中完成；</p>\n<p>4)<strong>外排序</strong>：由于数据太大，因此把数据放在磁盘中，而排序通过磁盘和内存的数据传输才能进行；</p>\n<p>5)<strong>时间复杂度</strong>： 一个算法执行所耗费的时间。</p>\n<p>6)<strong>空间复杂度</strong>：运行完一个程序所需内存的大小。</p>\n<p>7)<strong>n</strong>: 数据规模</p>\n<p>8)<strong>k</strong>: “桶”的个数</p>\n<p>9)<strong>In-place</strong>:  不占用额外内存</p>\n<p>10)<strong>Out-place</strong>:占用额外内存</p>\n<h2><span id=\"七-哈希表\">七、哈希表</span></h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> hashtable;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Scanner;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HashTabDemo</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">//创建哈希表</span></span><br><span class=\"line\">\t\tHashTab hashTab = <span class=\"keyword\">new</span> HashTab(<span class=\"number\">7</span>);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">//写一个简单的菜单</span></span><br><span class=\"line\">\t\tString key = <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">\t\tScanner scanner = <span class=\"keyword\">new</span> Scanner(System.in);</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">&quot;add:  添加雇员&quot;</span>);</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">&quot;list: 显示雇员&quot;</span>);</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">&quot;find: 查找雇员&quot;</span>);</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">&quot;exit: 退出系统&quot;</span>);</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\tkey = scanner.next();</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">switch</span> (key) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">case</span> <span class=\"string\">&quot;add&quot;</span>:</span><br><span class=\"line\">\t\t\t\tSystem.out.println(<span class=\"string\">&quot;输入id&quot;</span>);</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">int</span> id = scanner.nextInt();</span><br><span class=\"line\">\t\t\t\tSystem.out.println(<span class=\"string\">&quot;输入名字&quot;</span>);</span><br><span class=\"line\">\t\t\t\tString name = scanner.next();</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//创建 雇员</span></span><br><span class=\"line\">\t\t\t\tEmp emp = <span class=\"keyword\">new</span> Emp(id, name);</span><br><span class=\"line\">\t\t\t\thashTab.add(emp);</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">case</span> <span class=\"string\">&quot;list&quot;</span>:</span><br><span class=\"line\">\t\t\t\thashTab.list();</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">case</span> <span class=\"string\">&quot;find&quot;</span>:</span><br><span class=\"line\">\t\t\t\tSystem.out.println(<span class=\"string\">&quot;请输入要查找的id&quot;</span>);</span><br><span class=\"line\">\t\t\t\tid = scanner.nextInt();</span><br><span class=\"line\">\t\t\t\thashTab.findEmpById(id);</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">case</span> <span class=\"string\">&quot;exit&quot;</span>:</span><br><span class=\"line\">\t\t\t\tscanner.close();</span><br><span class=\"line\">\t\t\t\tSystem.exit(<span class=\"number\">0</span>);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">default</span>:</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//创建HashTab 管理多条链表</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HashTab</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> EmpLinkedList[] empLinkedListArray;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> size; <span class=\"comment\">//表示有多少条链表</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//构造器</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">HashTab</span><span class=\"params\">(<span class=\"keyword\">int</span> size)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.size = size;</span><br><span class=\"line\">\t\t<span class=\"comment\">//初始化empLinkedListArray</span></span><br><span class=\"line\">\t\tempLinkedListArray = <span class=\"keyword\">new</span> EmpLinkedList[size];</span><br><span class=\"line\">\t\t<span class=\"comment\">//？留一个坑, 这时不要分别初始化每个链表</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; size; i++) &#123;</span><br><span class=\"line\">\t\t\tempLinkedListArray[i] = <span class=\"keyword\">new</span> EmpLinkedList();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//添加雇员</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(Emp emp)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//根据员工的id ,得到该员工应当添加到哪条链表</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> empLinkedListNO = hashFun(emp.id);</span><br><span class=\"line\">\t\t<span class=\"comment\">//将emp 添加到对应的链表中</span></span><br><span class=\"line\">\t\tempLinkedListArray[empLinkedListNO].add(emp);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//遍历所有的链表,遍历hashtab</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">list</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; size; i++) &#123;</span><br><span class=\"line\">\t\t\tempLinkedListArray[i].list(i);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//根据输入的id,查找雇员</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">findEmpById</span><span class=\"params\">(<span class=\"keyword\">int</span> id)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//使用散列函数确定到哪条链表查找</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> empLinkedListNO = hashFun(id);</span><br><span class=\"line\">\t\tEmp emp = empLinkedListArray[empLinkedListNO].findEmpById(id);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(emp != <span class=\"keyword\">null</span>) &#123;<span class=\"comment\">//找到</span></span><br><span class=\"line\">\t\t\tSystem.out.printf(<span class=\"string\">&quot;在第%d条链表中找到 雇员 id = %d\\n&quot;</span>, (empLinkedListNO + <span class=\"number\">1</span>), id);</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">&quot;在哈希表中，没有找到该雇员~&quot;</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//编写散列函数, 使用一个简单取模法</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">hashFun</span><span class=\"params\">(<span class=\"keyword\">int</span> id)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> id % size;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//表示一个雇员</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Emp</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">int</span> id;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> String name;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> Emp next; <span class=\"comment\">//next 默认为 null</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Emp</span><span class=\"params\">(<span class=\"keyword\">int</span> id, String name)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">super</span>();</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.id = id;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//创建EmpLinkedList ,表示链表</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">EmpLinkedList</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//头指针，执行第一个Emp,因此我们这个链表的head 是直接指向第一个Emp</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> Emp head; <span class=\"comment\">//默认null</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//添加雇员到链表</span></span><br><span class=\"line\">\t<span class=\"comment\">//说明</span></span><br><span class=\"line\">\t<span class=\"comment\">//1. 假定，当添加雇员时，id 是自增长，即id的分配总是从小到大</span></span><br><span class=\"line\">\t<span class=\"comment\">//   因此我们将该雇员直接加入到本链表的最后即可</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(Emp emp)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//如果是添加第一个雇员</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(head == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\thead = emp;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">//如果不是第一个雇员，则使用一个辅助的指针，帮助定位到最后</span></span><br><span class=\"line\">\t\tEmp curEmp = head;</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(curEmp.next == <span class=\"keyword\">null</span>) &#123;<span class=\"comment\">//说明到链表最后</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tcurEmp = curEmp.next; <span class=\"comment\">//后移</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">//退出时直接将emp 加入链表</span></span><br><span class=\"line\">\t\tcurEmp.next = emp;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//遍历链表的雇员信息</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">list</span><span class=\"params\">(<span class=\"keyword\">int</span> no)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(head == <span class=\"keyword\">null</span>) &#123; <span class=\"comment\">//说明链表为空</span></span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">&quot;第 &quot;</span>+(no+<span class=\"number\">1</span>)+<span class=\"string\">&quot; 链表为空&quot;</span>);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tSystem.out.print(<span class=\"string\">&quot;第 &quot;</span>+(no+<span class=\"number\">1</span>)+<span class=\"string\">&quot; 链表的信息为&quot;</span>);</span><br><span class=\"line\">\t\tEmp curEmp = head; <span class=\"comment\">//辅助指针</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.printf(<span class=\"string\">&quot; =&gt; id=%d name=%s\\t&quot;</span>, curEmp.id, curEmp.name);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(curEmp.next == <span class=\"keyword\">null</span>) &#123;<span class=\"comment\">//说明curEmp已经是最后结点</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tcurEmp = curEmp.next; <span class=\"comment\">//后移，遍历</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tSystem.out.println();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//根据id查找雇员</span></span><br><span class=\"line\">\t<span class=\"comment\">//如果查找到，就返回Emp, 如果没有找到，就返回null</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Emp <span class=\"title\">findEmpById</span><span class=\"params\">(<span class=\"keyword\">int</span> id)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//判断链表是否为空</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(head == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">&quot;链表为空&quot;</span>);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">//辅助指针</span></span><br><span class=\"line\">\t\tEmp curEmp = head;</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(curEmp.id == id) &#123;<span class=\"comment\">//找到</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;<span class=\"comment\">//这时curEmp就指向要查找的雇员</span></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//退出</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(curEmp.next == <span class=\"keyword\">null</span>) &#123;<span class=\"comment\">//说明遍历当前链表没有找到该雇员</span></span><br><span class=\"line\">\t\t\t\tcurEmp = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tcurEmp = curEmp.next;<span class=\"comment\">//以后</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> curEmp;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n<h2><span id=\"八-二叉树\">八、二叉树</span></h2><h3><span id=\"1普通二叉树\">1.普通二叉树</span></h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br><span class=\"line\">320</span><br><span class=\"line\">321</span><br><span class=\"line\">322</span><br><span class=\"line\">323</span><br><span class=\"line\">324</span><br><span class=\"line\">325</span><br><span class=\"line\">326</span><br><span class=\"line\">327</span><br><span class=\"line\">328</span><br><span class=\"line\">329</span><br><span class=\"line\">330</span><br><span class=\"line\">331</span><br><span class=\"line\">332</span><br><span class=\"line\">333</span><br><span class=\"line\">334</span><br><span class=\"line\">335</span><br><span class=\"line\">336</span><br><span class=\"line\">337</span><br><span class=\"line\">338</span><br><span class=\"line\">339</span><br><span class=\"line\">340</span><br><span class=\"line\">341</span><br><span class=\"line\">342</span><br><span class=\"line\">343</span><br><span class=\"line\">344</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> tree;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BinaryTreeDemo</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//先需要创建一颗二叉树</span></span><br><span class=\"line\">\t\tBinaryTree binaryTree = <span class=\"keyword\">new</span> BinaryTree();</span><br><span class=\"line\">\t\t<span class=\"comment\">//创建需要的结点</span></span><br><span class=\"line\">\t\tHeroNode root = <span class=\"keyword\">new</span> HeroNode(<span class=\"number\">1</span>, <span class=\"string\">&quot;宋江&quot;</span>);</span><br><span class=\"line\">\t\tHeroNode node2 = <span class=\"keyword\">new</span> HeroNode(<span class=\"number\">2</span>, <span class=\"string\">&quot;吴用&quot;</span>);</span><br><span class=\"line\">\t\tHeroNode node3 = <span class=\"keyword\">new</span> HeroNode(<span class=\"number\">3</span>, <span class=\"string\">&quot;卢俊义&quot;</span>);</span><br><span class=\"line\">\t\tHeroNode node4 = <span class=\"keyword\">new</span> HeroNode(<span class=\"number\">4</span>, <span class=\"string\">&quot;林冲&quot;</span>);</span><br><span class=\"line\">\t\tHeroNode node5 = <span class=\"keyword\">new</span> HeroNode(<span class=\"number\">5</span>, <span class=\"string\">&quot;关胜&quot;</span>);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">//说明，我们先手动创建该二叉树，后面我们学习递归的方式创建二叉树</span></span><br><span class=\"line\">\t\troot.setLeft(node2);</span><br><span class=\"line\">\t\troot.setRight(node3);</span><br><span class=\"line\">\t\tnode3.setRight(node4);</span><br><span class=\"line\">\t\tnode3.setLeft(node5);</span><br><span class=\"line\">\t\tbinaryTree.setRoot(root);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">//测试</span></span><br><span class=\"line\"><span class=\"comment\">//\t\tSystem.out.println(&quot;前序遍历&quot;); // 1,2,3,5,4</span></span><br><span class=\"line\"><span class=\"comment\">//\t\tbinaryTree.preOrder();</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">//测试 </span></span><br><span class=\"line\"><span class=\"comment\">//\t\tSystem.out.println(&quot;中序遍历&quot;);</span></span><br><span class=\"line\"><span class=\"comment\">//\t\tbinaryTree.infixOrder(); // 2,1,5,3,4</span></span><br><span class=\"line\"><span class=\"comment\">//\t\t</span></span><br><span class=\"line\"><span class=\"comment\">//\t\tSystem.out.println(&quot;后序遍历&quot;);</span></span><br><span class=\"line\"><span class=\"comment\">//\t\tbinaryTree.postOrder(); // 2,5,4,3,1</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">//前序遍历</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//前序遍历的次数 ：4 </span></span><br><span class=\"line\"><span class=\"comment\">//\t\tSystem.out.println(&quot;前序遍历方式~~~&quot;);</span></span><br><span class=\"line\"><span class=\"comment\">//\t\tHeroNode resNode = binaryTree.preOrderSearch(5);</span></span><br><span class=\"line\"><span class=\"comment\">//\t\tif (resNode != null) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//\t\t\tSystem.out.printf(&quot;找到了，信息为 no=%d name=%s&quot;, resNode.getNo(), resNode.getName());</span></span><br><span class=\"line\"><span class=\"comment\">//\t\t&#125; else &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//\t\t\tSystem.out.printf(&quot;没有找到 no = %d 的英雄&quot;, 5);</span></span><br><span class=\"line\"><span class=\"comment\">//\t\t&#125;</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">//中序遍历查找</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//中序遍历3次</span></span><br><span class=\"line\"><span class=\"comment\">//\t\tSystem.out.println(&quot;中序遍历方式~~~&quot;);</span></span><br><span class=\"line\"><span class=\"comment\">//\t\tHeroNode resNode = binaryTree.infixOrderSearch(5);</span></span><br><span class=\"line\"><span class=\"comment\">//\t\tif (resNode != null) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//\t\t\tSystem.out.printf(&quot;找到了，信息为 no=%d name=%s&quot;, resNode.getNo(), resNode.getName());</span></span><br><span class=\"line\"><span class=\"comment\">//\t\t&#125; else &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//\t\t\tSystem.out.printf(&quot;没有找到 no = %d 的英雄&quot;, 5);</span></span><br><span class=\"line\"><span class=\"comment\">//\t\t&#125;</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">//后序遍历查找</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//后序遍历查找的次数  2次</span></span><br><span class=\"line\"><span class=\"comment\">//\t\tSystem.out.println(&quot;后序遍历方式~~~&quot;);</span></span><br><span class=\"line\"><span class=\"comment\">//\t\tHeroNode resNode = binaryTree.postOrderSearch(5);</span></span><br><span class=\"line\"><span class=\"comment\">//\t\tif (resNode != null) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//\t\t\tSystem.out.printf(&quot;找到了，信息为 no=%d name=%s&quot;, resNode.getNo(), resNode.getName());</span></span><br><span class=\"line\"><span class=\"comment\">//\t\t&#125; else &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//\t\t\tSystem.out.printf(&quot;没有找到 no = %d 的英雄&quot;, 5);</span></span><br><span class=\"line\"><span class=\"comment\">//\t\t&#125;</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">//测试一把删除结点</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;删除前,前序遍历&quot;</span>);</span><br><span class=\"line\">\t\tbinaryTree.preOrder(); <span class=\"comment\">//  1,2,3,5,4</span></span><br><span class=\"line\">\t\tbinaryTree.delNode(<span class=\"number\">5</span>);</span><br><span class=\"line\">\t\t<span class=\"comment\">//binaryTree.delNode(3);</span></span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;删除后，前序遍历&quot;</span>);</span><br><span class=\"line\">\t\tbinaryTree.preOrder(); <span class=\"comment\">// 1,2,3,4</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//定义BinaryTree 二叉树</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BinaryTree</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> HeroNode root;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setRoot</span><span class=\"params\">(HeroNode root)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.root = root;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//删除结点</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">delNode</span><span class=\"params\">(<span class=\"keyword\">int</span> no)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(root != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//如果只有一个root结点, 这里立即判断root是不是就是要删除结点</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(root.getNo() == no) &#123;</span><br><span class=\"line\">\t\t\t\troot = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//递归删除</span></span><br><span class=\"line\">\t\t\t\troot.delNode(no);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">&quot;空树，不能删除~&quot;</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//前序遍历</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">preOrder</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.root != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">this</span>.root.preOrder();</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">&quot;二叉树为空，无法遍历&quot;</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//中序遍历</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">infixOrder</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.root != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">this</span>.root.infixOrder();</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">&quot;二叉树为空，无法遍历&quot;</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//后序遍历</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">postOrder</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.root != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">this</span>.root.postOrder();</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">&quot;二叉树为空，无法遍历&quot;</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//前序遍历</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> HeroNode <span class=\"title\">preOrderSearch</span><span class=\"params\">(<span class=\"keyword\">int</span> no)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(root != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> root.preOrderSearch(no);</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//中序遍历</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> HeroNode <span class=\"title\">infixOrderSearch</span><span class=\"params\">(<span class=\"keyword\">int</span> no)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(root != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> root.infixOrderSearch(no);</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//后序遍历</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> HeroNode <span class=\"title\">postOrderSearch</span><span class=\"params\">(<span class=\"keyword\">int</span> no)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(root != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.root.postOrderSearch(no);</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//先创建HeroNode 结点</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HeroNode</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> no;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> HeroNode left; <span class=\"comment\">//默认null</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> HeroNode right; <span class=\"comment\">//默认null</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">HeroNode</span><span class=\"params\">(<span class=\"keyword\">int</span> no, String name)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.no = no;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getNo</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> no;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setNo</span><span class=\"params\">(<span class=\"keyword\">int</span> no)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.no = no;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getName</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> name;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setName</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> HeroNode <span class=\"title\">getLeft</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> left;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setLeft</span><span class=\"params\">(HeroNode left)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.left = left;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> HeroNode <span class=\"title\">getRight</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> right;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setRight</span><span class=\"params\">(HeroNode right)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.right = right;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">&quot;HeroNode [no=&quot;</span> + no + <span class=\"string\">&quot;, name=&quot;</span> + name + <span class=\"string\">&quot;]&quot;</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//递归删除结点</span></span><br><span class=\"line\">\t<span class=\"comment\">//1.如果删除的节点是叶子节点，则删除该节点</span></span><br><span class=\"line\">\t<span class=\"comment\">//2.如果删除的节点是非叶子节点，则删除该子树</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">delNode</span><span class=\"params\">(<span class=\"keyword\">int</span> no)</span> </span>&#123;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">//思路</span></span><br><span class=\"line\">\t\t<span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">\t\t * \t1. 因为我们的二叉树是单向的，所以我们是判断当前结点的子结点是否需要删除结点，而不能去判断当前这个结点是不是需要删除结点.</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t2. 如果当前结点的左子结点不为空，并且左子结点 就是要删除结点，就将this.left = null; 并且就返回(结束递归删除)</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t3. 如果当前结点的右子结点不为空，并且右子结点 就是要删除结点，就将this.right= null ;并且就返回(结束递归删除)</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t4. 如果第2和第3步没有删除结点，那么我们就需要向左子树进行递归删除</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t5.  如果第4步也没有删除结点，则应当向右子树进行递归删除.</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">\t\t */</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//2. 如果当前结点的左子结点不为空，并且左子结点 就是要删除结点，就将this.left = null; 并且就返回(结束递归删除)</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.left != <span class=\"keyword\">null</span> &amp;&amp; <span class=\"keyword\">this</span>.left.no == no) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">this</span>.left = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">//3.如果当前结点的右子结点不为空，并且右子结点 就是要删除结点，就将this.right= null ;并且就返回(结束递归删除)</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.right != <span class=\"keyword\">null</span> &amp;&amp; <span class=\"keyword\">this</span>.right.no == no) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">this</span>.right = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">//4.我们就需要向左子树进行递归删除</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.left != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">this</span>.left.delNode(no);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">//5.则应当向右子树进行递归删除</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.right != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">this</span>.right.delNode(no);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//编写前序遍历的方法</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">preOrder</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"keyword\">this</span>); <span class=\"comment\">//先输出父结点</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//递归向左子树前序遍历</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.left != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">this</span>.left.preOrder();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">//递归向右子树前序遍历</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.right != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">this</span>.right.preOrder();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//中序遍历</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">infixOrder</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">//递归向左子树中序遍历</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.left != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">this</span>.left.infixOrder();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">//输出父结点</span></span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">\t\t<span class=\"comment\">//递归向右子树中序遍历</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.right != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">this</span>.right.infixOrder();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//后序遍历</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">postOrder</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.left != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">this</span>.left.postOrder();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.right != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">this</span>.right.postOrder();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//前序遍历查找</span></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * </span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> no 查找no</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@return</span> 如果找到就返回该Node ,如果没有找到返回 null</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> HeroNode <span class=\"title\">preOrderSearch</span><span class=\"params\">(<span class=\"keyword\">int</span> no)</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;进入前序遍历&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"comment\">//比较当前结点是不是</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.no == no) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">//1.则判断当前结点的左子节点是否为空，如果不为空，则递归前序查找</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//2.如果左递归前序查找，找到结点，则返回</span></span><br><span class=\"line\">\t\tHeroNode resNode = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.left != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\tresNode = <span class=\"keyword\">this</span>.left.preOrderSearch(no);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(resNode != <span class=\"keyword\">null</span>) &#123;<span class=\"comment\">//说明我们左子树找到</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> resNode;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">//1.左递归前序查找，找到结点，则返回，否继续判断，</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//2.当前的结点的右子节点是否为空，如果不空，则继续向右递归前序查找</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.right != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\tresNode = <span class=\"keyword\">this</span>.right.preOrderSearch(no);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> resNode;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//中序遍历查找</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> HeroNode <span class=\"title\">infixOrderSearch</span><span class=\"params\">(<span class=\"keyword\">int</span> no)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//判断当前结点的左子节点是否为空，如果不为空，则递归中序查找</span></span><br><span class=\"line\">\t\tHeroNode resNode = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.left != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\tresNode = <span class=\"keyword\">this</span>.left.infixOrderSearch(no);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(resNode != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> resNode;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;进入中序查找&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"comment\">//如果找到，则返回，如果没有找到，就和当前结点比较，如果是则返回当前结点</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.no == no) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">//否则继续进行右递归的中序查找</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.right != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\tresNode = <span class=\"keyword\">this</span>.right.infixOrderSearch(no);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> resNode;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//后序遍历查找</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> HeroNode <span class=\"title\">postOrderSearch</span><span class=\"params\">(<span class=\"keyword\">int</span> no)</span> </span>&#123;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">//判断当前结点的左子节点是否为空，如果不为空，则递归后序查找</span></span><br><span class=\"line\">\t\tHeroNode resNode = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.left != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\tresNode = <span class=\"keyword\">this</span>.left.postOrderSearch(no);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(resNode != <span class=\"keyword\">null</span>) &#123;<span class=\"comment\">//说明在左子树找到</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> resNode;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">//如果左子树没有找到，则向右子树递归进行后序遍历查找</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.right != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\tresNode = <span class=\"keyword\">this</span>.right.postOrderSearch(no);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(resNode != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> resNode;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;进入后序查找&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"comment\">//如果左右子树都没有找到，就比较当前结点是不是</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.no == no) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> resNode;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3><span id=\"2顺序二叉树\">2.顺序二叉树</span></h3><p>顺序存储二叉树的<strong>特点</strong>:</p>\n<p>1)顺序二叉树通常只考虑完全二叉树</p>\n<p>2)第n个元素的左子节点为 2 * n + 1 </p>\n<p>3)第n个元素的右子节点为 2 * n + 2</p>\n<p>4)第n个元素的父节点为 (n-1) / 2</p>\n<p>5)n : 表示二叉树中的第几个元素(按0开始编号<br> 如图所示)</p>\n<p><img src=\"/2021/01/01/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E6%95%B4%E7%90%86/image-20210106203601993.png\" alt=\"image-20210106203601993\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> tree;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ArrBinaryTreeDemo</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span>[] arr = &#123; <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span> &#125;;</span><br><span class=\"line\">\t\t<span class=\"comment\">//创建一个 ArrBinaryTree</span></span><br><span class=\"line\">\t\tArrBinaryTree arrBinaryTree = <span class=\"keyword\">new</span> ArrBinaryTree(arr);</span><br><span class=\"line\">\t\tarrBinaryTree.preOrder(); <span class=\"comment\">// 1,2,4,5,3,6,7</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//编写一个ArrayBinaryTree, 实现顺序存储二叉树遍历</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ArrBinaryTree</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span>[] arr;<span class=\"comment\">//存储数据结点的数组</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ArrBinaryTree</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.arr = arr;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//重载preOrder</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">preOrder</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.preOrder(<span class=\"number\">0</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//编写一个方法，完成顺序存储二叉树的前序遍历</span></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * </span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> index 数组的下标 </span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">preOrder</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//如果数组为空，或者 arr.length = 0</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(arr == <span class=\"keyword\">null</span> || arr.length == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">&quot;数组为空，不能按照二叉树的前序遍历&quot;</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">//输出当前这个元素</span></span><br><span class=\"line\">\t\tSystem.out.println(arr[index]); </span><br><span class=\"line\">\t\t<span class=\"comment\">//向左递归遍历</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>((index * <span class=\"number\">2</span> + <span class=\"number\">1</span>) &lt; arr.length) &#123;</span><br><span class=\"line\">\t\t\tpreOrder(<span class=\"number\">2</span> * index + <span class=\"number\">1</span> );</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">//向右递归遍历</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>((index * <span class=\"number\">2</span> + <span class=\"number\">2</span>) &lt; arr.length) &#123;</span><br><span class=\"line\">\t\t\tpreOrder(<span class=\"number\">2</span> * index + <span class=\"number\">2</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3><span id=\"3线索化二叉树\">3.线索化二叉树</span></h3><p><strong>线索二叉树基本介绍</strong></p>\n<p>1)n个结点的二叉链表中含有n+1 【公式 2n-(n-1)=n+1】 个空指针域。利用二叉链表中的空指针域，存放指向该结点在<strong>某种遍历次序</strong>下的前驱和后继结点的指针（这种附加的指针称为”线索”）</p>\n<p>2)这种加上了线索的二叉链表称为<strong>线索链表</strong>，相应的二叉树称为<strong>线索二叉树(Threaded  BinaryTree)**。根据线索性质的不同，线索二叉树可分为</strong>前序线索二叉树、中序线索二叉树<strong>和</strong>后序线索二叉树**三种</p>\n<p>3)一个结点的前一个结点，称为<strong>前驱</strong>结点</p>\n<p>4)一个结点的后一个结点，称为<strong>后继</strong>结点</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br><span class=\"line\">320</span><br><span class=\"line\">321</span><br><span class=\"line\">322</span><br><span class=\"line\">323</span><br><span class=\"line\">324</span><br><span class=\"line\">325</span><br><span class=\"line\">326</span><br><span class=\"line\">327</span><br><span class=\"line\">328</span><br><span class=\"line\">329</span><br><span class=\"line\">330</span><br><span class=\"line\">331</span><br><span class=\"line\">332</span><br><span class=\"line\">333</span><br><span class=\"line\">334</span><br><span class=\"line\">335</span><br><span class=\"line\">336</span><br><span class=\"line\">337</span><br><span class=\"line\">338</span><br><span class=\"line\">339</span><br><span class=\"line\">340</span><br><span class=\"line\">341</span><br><span class=\"line\">342</span><br><span class=\"line\">343</span><br><span class=\"line\">344</span><br><span class=\"line\">345</span><br><span class=\"line\">346</span><br><span class=\"line\">347</span><br><span class=\"line\">348</span><br><span class=\"line\">349</span><br><span class=\"line\">350</span><br><span class=\"line\">351</span><br><span class=\"line\">352</span><br><span class=\"line\">353</span><br><span class=\"line\">354</span><br><span class=\"line\">355</span><br><span class=\"line\">356</span><br><span class=\"line\">357</span><br><span class=\"line\">358</span><br><span class=\"line\">359</span><br><span class=\"line\">360</span><br><span class=\"line\">361</span><br><span class=\"line\">362</span><br><span class=\"line\">363</span><br><span class=\"line\">364</span><br><span class=\"line\">365</span><br><span class=\"line\">366</span><br><span class=\"line\">367</span><br><span class=\"line\">368</span><br><span class=\"line\">369</span><br><span class=\"line\">370</span><br><span class=\"line\">371</span><br><span class=\"line\">372</span><br><span class=\"line\">373</span><br><span class=\"line\">374</span><br><span class=\"line\">375</span><br><span class=\"line\">376</span><br><span class=\"line\">377</span><br><span class=\"line\">378</span><br><span class=\"line\">379</span><br><span class=\"line\">380</span><br><span class=\"line\">381</span><br><span class=\"line\">382</span><br><span class=\"line\">383</span><br><span class=\"line\">384</span><br><span class=\"line\">385</span><br><span class=\"line\">386</span><br><span class=\"line\">387</span><br><span class=\"line\">388</span><br><span class=\"line\">389</span><br><span class=\"line\">390</span><br><span class=\"line\">391</span><br><span class=\"line\">392</span><br><span class=\"line\">393</span><br><span class=\"line\">394</span><br><span class=\"line\">395</span><br><span class=\"line\">396</span><br><span class=\"line\">397</span><br><span class=\"line\">398</span><br><span class=\"line\">399</span><br><span class=\"line\">400</span><br><span class=\"line\">401</span><br><span class=\"line\">402</span><br><span class=\"line\">403</span><br><span class=\"line\">404</span><br><span class=\"line\">405</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> tree.threadedbinarytree;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ThreadedBinaryTreeDemo</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//测试一把中序线索二叉树的功能</span></span><br><span class=\"line\">\t\tHeroNode root = <span class=\"keyword\">new</span> HeroNode(<span class=\"number\">1</span>, <span class=\"string\">&quot;tom&quot;</span>);</span><br><span class=\"line\">\t\tHeroNode node2 = <span class=\"keyword\">new</span> HeroNode(<span class=\"number\">3</span>, <span class=\"string\">&quot;jack&quot;</span>);</span><br><span class=\"line\">\t\tHeroNode node3 = <span class=\"keyword\">new</span> HeroNode(<span class=\"number\">6</span>, <span class=\"string\">&quot;smith&quot;</span>);</span><br><span class=\"line\">\t\tHeroNode node4 = <span class=\"keyword\">new</span> HeroNode(<span class=\"number\">8</span>, <span class=\"string\">&quot;mary&quot;</span>);</span><br><span class=\"line\">\t\tHeroNode node5 = <span class=\"keyword\">new</span> HeroNode(<span class=\"number\">10</span>, <span class=\"string\">&quot;king&quot;</span>);</span><br><span class=\"line\">\t\tHeroNode node6 = <span class=\"keyword\">new</span> HeroNode(<span class=\"number\">14</span>, <span class=\"string\">&quot;dim&quot;</span>);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">//二叉树，后面我们要递归创建, 现在简单处理使用手动创建</span></span><br><span class=\"line\">\t\troot.setLeft(node2);</span><br><span class=\"line\">\t\troot.setRight(node3);</span><br><span class=\"line\">\t\tnode2.setLeft(node4);</span><br><span class=\"line\">\t\tnode2.setRight(node5);</span><br><span class=\"line\">\t\tnode3.setLeft(node6);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">//测试中序线索化</span></span><br><span class=\"line\">\t\tThreadedBinaryTree threadedBinaryTree = <span class=\"keyword\">new</span> ThreadedBinaryTree();</span><br><span class=\"line\">\t\tthreadedBinaryTree.setRoot(root);</span><br><span class=\"line\">\t\tthreadedBinaryTree.threadedNodes();</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">//测试: 以10号节点测试</span></span><br><span class=\"line\">\t\tHeroNode leftNode = node5.getLeft();</span><br><span class=\"line\">\t\tHeroNode rightNode = node5.getRight();</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;10号结点的前驱结点是 =&quot;</span>  + leftNode); <span class=\"comment\">//3</span></span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;10号结点的后继结点是=&quot;</span>  + rightNode); <span class=\"comment\">//1</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">//当线索化二叉树后，能在使用原来的遍历方法</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//threadedBinaryTree.infixOrder();</span></span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;使用线索化的方式遍历 线索化二叉树&quot;</span>);</span><br><span class=\"line\">\t\tthreadedBinaryTree.threadedList(); <span class=\"comment\">// 8, 3, 10, 1, 14, 6</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//定义ThreadedBinaryTree 实现了线索化功能的二叉树</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ThreadedBinaryTree</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> HeroNode root;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//为了实现线索化，需要创建要给指向当前结点的前驱结点的指针</span></span><br><span class=\"line\">\t<span class=\"comment\">//在递归进行线索化时，pre 总是保留前一个结点</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> HeroNode pre = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setRoot</span><span class=\"params\">(HeroNode root)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.root = root;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//重载一把threadedNodes方法</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">threadedNodes</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.threadedNodes(root);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//遍历线索化二叉树的方法</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">threadedList</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//定义一个变量，存储当前遍历的结点，从root开始</span></span><br><span class=\"line\">\t\tHeroNode node = root;</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(node != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//循环的找到leftType == 1的结点，第一个找到就是8结点</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">//后面随着遍历而变化,因为当leftType==1时，说明该结点是按照线索化</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">//处理后的有效结点</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">while</span>(node.getLeftType() == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t\t\tnode = node.getLeft();</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//打印当前这个结点</span></span><br><span class=\"line\">\t\t\tSystem.out.println(node);</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//如果当前结点的右指针指向的是后继结点,就一直输出</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">while</span>(node.getRightType() == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//获取到当前结点的后继结点</span></span><br><span class=\"line\">\t\t\t\tnode = node.getRight();</span><br><span class=\"line\">\t\t\t\tSystem.out.println(node);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//替换这个遍历的结点</span></span><br><span class=\"line\">\t\t\tnode = node.getRight();</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//编写对二叉树进行中序线索化的方法</span></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * </span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> node 就是当前需要线索化的结点</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">threadedNodes</span><span class=\"params\">(HeroNode node)</span> </span>&#123;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">//如果node==null, 不能线索化</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(node == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">//(一)先线索化左子树</span></span><br><span class=\"line\">\t\tthreadedNodes(node.getLeft());</span><br><span class=\"line\">\t\t<span class=\"comment\">//(二)线索化当前结点[有难度]</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">//处理当前结点的前驱结点</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//以8结点来理解</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//8结点的.left = null , 8结点的.leftType = 1</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(node.getLeft() == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//让当前结点的左指针指向前驱结点 </span></span><br><span class=\"line\">\t\t\tnode.setLeft(pre); </span><br><span class=\"line\">\t\t\t<span class=\"comment\">//修改当前结点的左指针的类型,指向前驱结点</span></span><br><span class=\"line\">\t\t\tnode.setLeftType(<span class=\"number\">1</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">//处理后继结点</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (pre != <span class=\"keyword\">null</span> &amp;&amp; pre.getRight() == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//让前驱结点的右指针指向当前结点</span></span><br><span class=\"line\">\t\t\tpre.setRight(node);</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//修改前驱结点的右指针类型</span></span><br><span class=\"line\">\t\t\tpre.setRightType(<span class=\"number\">1</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">//!!! 每处理一个结点后，让当前结点是下一个结点的前驱结点</span></span><br><span class=\"line\">\t\tpre = node;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">//(三)在线索化右子树</span></span><br><span class=\"line\">\t\tthreadedNodes(node.getRight());</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//删除结点</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">delNode</span><span class=\"params\">(<span class=\"keyword\">int</span> no)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(root != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//如果只有一个root结点, 这里立即判断root是不是就是要删除结点</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(root.getNo() == no) &#123;</span><br><span class=\"line\">\t\t\t\troot = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//递归删除</span></span><br><span class=\"line\">\t\t\t\troot.delNode(no);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">&quot;空树，不能删除~&quot;</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//前序遍历</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">preOrder</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.root != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">this</span>.root.preOrder();</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">&quot;二叉树为空，无法遍历&quot;</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//中序遍历</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">infixOrder</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.root != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">this</span>.root.infixOrder();</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">&quot;二叉树为空，无法遍历&quot;</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//后序遍历</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">postOrder</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.root != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">this</span>.root.postOrder();</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">&quot;二叉树为空，无法遍历&quot;</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//前序遍历</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> HeroNode <span class=\"title\">preOrderSearch</span><span class=\"params\">(<span class=\"keyword\">int</span> no)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(root != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> root.preOrderSearch(no);</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//中序遍历</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> HeroNode <span class=\"title\">infixOrderSearch</span><span class=\"params\">(<span class=\"keyword\">int</span> no)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(root != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> root.infixOrderSearch(no);</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//后序遍历</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> HeroNode <span class=\"title\">postOrderSearch</span><span class=\"params\">(<span class=\"keyword\">int</span> no)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(root != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.root.postOrderSearch(no);</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//先创建HeroNode 结点</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HeroNode</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> no;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> HeroNode left; <span class=\"comment\">//默认null</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> HeroNode right; <span class=\"comment\">//默认null</span></span><br><span class=\"line\">\t<span class=\"comment\">//说明</span></span><br><span class=\"line\">\t<span class=\"comment\">//1. 如果leftType == 0 表示指向的是左子树, 如果 1 则表示指向前驱结点</span></span><br><span class=\"line\">\t<span class=\"comment\">//2. 如果rightType == 0 表示指向是右子树, 如果 1表示指向后继结点</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> leftType;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> rightType;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getLeftType</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> leftType;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setLeftType</span><span class=\"params\">(<span class=\"keyword\">int</span> leftType)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.leftType = leftType;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getRightType</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> rightType;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setRightType</span><span class=\"params\">(<span class=\"keyword\">int</span> rightType)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.rightType = rightType;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">HeroNode</span><span class=\"params\">(<span class=\"keyword\">int</span> no, String name)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.no = no;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getNo</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> no;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setNo</span><span class=\"params\">(<span class=\"keyword\">int</span> no)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.no = no;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getName</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> name;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setName</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> HeroNode <span class=\"title\">getLeft</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> left;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setLeft</span><span class=\"params\">(HeroNode left)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.left = left;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> HeroNode <span class=\"title\">getRight</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> right;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setRight</span><span class=\"params\">(HeroNode right)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.right = right;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">&quot;HeroNode [no=&quot;</span> + no + <span class=\"string\">&quot;, name=&quot;</span> + name + <span class=\"string\">&quot;]&quot;</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//递归删除结点</span></span><br><span class=\"line\">\t<span class=\"comment\">//1.如果删除的节点是叶子节点，则删除该节点</span></span><br><span class=\"line\">\t<span class=\"comment\">//2.如果删除的节点是非叶子节点，则删除该子树</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">delNode</span><span class=\"params\">(<span class=\"keyword\">int</span> no)</span> </span>&#123;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">//思路</span></span><br><span class=\"line\">\t\t<span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">\t\t * \t1. 因为我们的二叉树是单向的，所以我们是判断当前结点的子结点是否需要删除结点，而不能去判断当前这个结点是不是需要删除结点.</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t2. 如果当前结点的左子结点不为空，并且左子结点 就是要删除结点，就将this.left = null; 并且就返回(结束递归删除)</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t3. 如果当前结点的右子结点不为空，并且右子结点 就是要删除结点，就将this.right= null ;并且就返回(结束递归删除)</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t4. 如果第2和第3步没有删除结点，那么我们就需要向左子树进行递归删除</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t5.  如果第4步也没有删除结点，则应当向右子树进行递归删除.</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">\t\t */</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//2. 如果当前结点的左子结点不为空，并且左子结点 就是要删除结点，就将this.left = null; 并且就返回(结束递归删除)</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.left != <span class=\"keyword\">null</span> &amp;&amp; <span class=\"keyword\">this</span>.left.no == no) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">this</span>.left = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">//3.如果当前结点的右子结点不为空，并且右子结点 就是要删除结点，就将this.right= null ;并且就返回(结束递归删除)</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.right != <span class=\"keyword\">null</span> &amp;&amp; <span class=\"keyword\">this</span>.right.no == no) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">this</span>.right = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">//4.我们就需要向左子树进行递归删除</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.left != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">this</span>.left.delNode(no);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">//5.则应当向右子树进行递归删除</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.right != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">this</span>.right.delNode(no);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//编写前序遍历的方法</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">preOrder</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"keyword\">this</span>); <span class=\"comment\">//先输出父结点</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//递归向左子树前序遍历</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.left != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">this</span>.left.preOrder();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">//递归向右子树前序遍历</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.right != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">this</span>.right.preOrder();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//中序遍历</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">infixOrder</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">//递归向左子树中序遍历</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.left != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">this</span>.left.infixOrder();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">//输出父结点</span></span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">\t\t<span class=\"comment\">//递归向右子树中序遍历</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.right != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">this</span>.right.infixOrder();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//后序遍历</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">postOrder</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.left != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">this</span>.left.postOrder();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.right != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">this</span>.right.postOrder();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//前序遍历查找</span></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * </span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> no 查找no</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@return</span> 如果找到就返回该Node ,如果没有找到返回 null</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> HeroNode <span class=\"title\">preOrderSearch</span><span class=\"params\">(<span class=\"keyword\">int</span> no)</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;进入前序遍历&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"comment\">//比较当前结点是不是</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.no == no) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">//1.则判断当前结点的左子节点是否为空，如果不为空，则递归前序查找</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//2.如果左递归前序查找，找到结点，则返回</span></span><br><span class=\"line\">\t\tHeroNode resNode = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.left != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\tresNode = <span class=\"keyword\">this</span>.left.preOrderSearch(no);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(resNode != <span class=\"keyword\">null</span>) &#123;<span class=\"comment\">//说明我们左子树找到</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> resNode;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">//1.左递归前序查找，找到结点，则返回，否继续判断，</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//2.当前的结点的右子节点是否为空，如果不空，则继续向右递归前序查找</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.right != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\tresNode = <span class=\"keyword\">this</span>.right.preOrderSearch(no);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> resNode;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//中序遍历查找</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> HeroNode <span class=\"title\">infixOrderSearch</span><span class=\"params\">(<span class=\"keyword\">int</span> no)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//判断当前结点的左子节点是否为空，如果不为空，则递归中序查找</span></span><br><span class=\"line\">\t\tHeroNode resNode = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.left != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\tresNode = <span class=\"keyword\">this</span>.left.infixOrderSearch(no);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(resNode != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> resNode;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;进入中序查找&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"comment\">//如果找到，则返回，如果没有找到，就和当前结点比较，如果是则返回当前结点</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.no == no) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">//否则继续进行右递归的中序查找</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.right != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\tresNode = <span class=\"keyword\">this</span>.right.infixOrderSearch(no);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> resNode;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//后序遍历查找</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> HeroNode <span class=\"title\">postOrderSearch</span><span class=\"params\">(<span class=\"keyword\">int</span> no)</span> </span>&#123;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">//判断当前结点的左子节点是否为空，如果不为空，则递归后序查找</span></span><br><span class=\"line\">\t\tHeroNode resNode = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.left != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\tresNode = <span class=\"keyword\">this</span>.left.postOrderSearch(no);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(resNode != <span class=\"keyword\">null</span>) &#123;<span class=\"comment\">//说明在左子树找到</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> resNode;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">//如果左子树没有找到，则向右子树递归进行后序遍历查找</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.right != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\tresNode = <span class=\"keyword\">this</span>.right.postOrderSearch(no);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(resNode != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> resNode;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;进入后序查找&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"comment\">//如果左右子树都没有找到，就比较当前结点是不是</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.no == no) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> resNode;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3><span id=\"4霍夫曼树\">4.霍夫曼树</span></h3><p><strong>基本介绍</strong></p>\n<p>1)给定n个权值作为n个<a href=\"https://baike.baidu.com/item/%E5%8F%B6%E5%AD%90%E7%BB%93%E7%82%B9/3620239\">叶子结点</a>，构造一棵二叉树，若该树的带权路径长度(wpl)达到最小，称这样的二叉树为<strong>最优二叉树</strong>，也称为<strong>哈夫曼树</strong>(Huffman Tree)<strong>, 还有的书翻译为</strong>霍夫曼树。</p>\n<p>2)赫夫曼树是带权路径长度最短的树，权值较大的结点离根较近。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> huffmantree;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Collections;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HuffmanTree</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> arr[] = &#123; <span class=\"number\">13</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">3</span>, <span class=\"number\">29</span>, <span class=\"number\">6</span>, <span class=\"number\">1</span> &#125;;</span><br><span class=\"line\">\t\tNode root = createHuffmanTree(arr);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">//测试一把</span></span><br><span class=\"line\">\t\tpreOrder(root); <span class=\"comment\">//</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//编写一个前序遍历的方法</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">preOrder</span><span class=\"params\">(Node root)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(root != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\troot.preOrder();</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">&quot;是空树，不能遍历~~&quot;</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 创建赫夫曼树的方法</span></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * </span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> arr 需要创建成哈夫曼树的数组</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@return</span> 创建好后的赫夫曼树的root结点</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Node <span class=\"title\">createHuffmanTree</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 第一步为了操作方便</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// 1. 遍历 arr 数组</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// 2. 将arr的每个元素构成成一个Node</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// 3. 将Node 放入到ArrayList中</span></span><br><span class=\"line\">\t\tList&lt;Node&gt; nodes = <span class=\"keyword\">new</span> ArrayList&lt;Node&gt;();</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> value : arr) &#123;</span><br><span class=\"line\">\t\t\tnodes.add(<span class=\"keyword\">new</span> Node(value));</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">//我们处理的过程是一个循环的过程</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(nodes.size() &gt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//排序 从小到大 </span></span><br><span class=\"line\">\t\t\tCollections.sort(nodes);</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">&quot;nodes =&quot;</span> + nodes);</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//取出根节点权值最小的两颗二叉树 </span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">//(1) 取出权值最小的结点（二叉树）</span></span><br><span class=\"line\">\t\t\tNode leftNode = nodes.get(<span class=\"number\">0</span>);</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//(2) 取出权值第二小的结点（二叉树）</span></span><br><span class=\"line\">\t\t\tNode rightNode = nodes.get(<span class=\"number\">1</span>);</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//(3)构建一颗新的二叉树</span></span><br><span class=\"line\">\t\t\tNode parent = <span class=\"keyword\">new</span> Node(leftNode.value + rightNode.value);</span><br><span class=\"line\">\t\t\tparent.left = leftNode;</span><br><span class=\"line\">\t\t\tparent.right = rightNode;</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//(4)从ArrayList删除处理过的二叉树</span></span><br><span class=\"line\">\t\t\tnodes.remove(leftNode);</span><br><span class=\"line\">\t\t\tnodes.remove(rightNode);</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//(5)将parent加入到nodes</span></span><br><span class=\"line\">\t\t\tnodes.add(parent);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">//返回哈夫曼树的root结点</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> nodes.get(<span class=\"number\">0</span>);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创建结点类</span></span><br><span class=\"line\"><span class=\"comment\">// 为了让Node 对象持续排序Collections集合排序</span></span><br><span class=\"line\"><span class=\"comment\">// 让Node 实现Comparable接口</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Node</span> <span class=\"keyword\">implements</span> <span class=\"title\">Comparable</span>&lt;<span class=\"title\">Node</span>&gt; </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> value; <span class=\"comment\">// 结点权值</span></span><br><span class=\"line\">\t<span class=\"keyword\">char</span> c; <span class=\"comment\">//字符</span></span><br><span class=\"line\">\tNode left; <span class=\"comment\">// 指向左子结点</span></span><br><span class=\"line\">\tNode right; <span class=\"comment\">// 指向右子结点</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//写一个前序遍历</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">preOrder</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.left != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">this</span>.left.preOrder();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.right != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">this</span>.right.preOrder();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Node</span><span class=\"params\">(<span class=\"keyword\">int</span> value)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.value = value;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">&quot;Node [value=&quot;</span> + value + <span class=\"string\">&quot;]&quot;</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">compareTo</span><span class=\"params\">(Node o)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// TODO Auto-generated method stub</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// 表示从小到大排序</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.value - o.value;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3><span id=\"5二叉排序树\">5.二叉排序树</span></h3><p><strong>介绍</strong></p>\n<p>二叉排序树：BST: (Binary Sort(Search) Tree), 对于二叉排序树的任何一个非叶子节点，要求左子节点的值比当前节点的值小，右子节点的值比当前节点的值大。</p>\n<p><strong>特别说明</strong>：如果有相同的值，可以将该节点放在左子节点或右子节点</p>\n<p>比如针对前面的数据 (7, 3, 10, 12, 5, 1, 9) ，对应的二叉排序树为：</p>\n<p><img src=\"/2021/01/01/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E6%95%B4%E7%90%86/image-20210106222122233.png\" alt=\"image-20210106222122233\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> binarysorttree;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BinarySortTreeDemo</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span>[] arr = &#123;<span class=\"number\">7</span>, <span class=\"number\">3</span>, <span class=\"number\">10</span>, <span class=\"number\">12</span>, <span class=\"number\">5</span>, <span class=\"number\">1</span>, <span class=\"number\">9</span>, <span class=\"number\">2</span>&#125;;</span><br><span class=\"line\">\t\tBinarySortTree binarySortTree = <span class=\"keyword\">new</span> BinarySortTree();</span><br><span class=\"line\">\t\t<span class=\"comment\">//循环的添加结点到二叉排序树</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i&lt; arr.length; i++) &#123;</span><br><span class=\"line\">\t\t\tbinarySortTree.add(<span class=\"keyword\">new</span> Node(arr[i]));</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">//中序遍历二叉排序树</span></span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;中序遍历二叉排序树~&quot;</span>);</span><br><span class=\"line\">\t\tbinarySortTree.infixOrder(); <span class=\"comment\">// 1, 3, 5, 7, 9, 10, 12</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">//测试一下删除叶子结点</span></span><br><span class=\"line\">\t    </span><br><span class=\"line\">\t   </span><br><span class=\"line\">\t    binarySortTree.delNode(<span class=\"number\">12</span>);</span><br><span class=\"line\">\t   </span><br><span class=\"line\">\t </span><br><span class=\"line\">\t    binarySortTree.delNode(<span class=\"number\">5</span>);</span><br><span class=\"line\">\t    binarySortTree.delNode(<span class=\"number\">10</span>);</span><br><span class=\"line\">\t    binarySortTree.delNode(<span class=\"number\">2</span>);</span><br><span class=\"line\">\t    binarySortTree.delNode(<span class=\"number\">3</span>);</span><br><span class=\"line\">\t\t   </span><br><span class=\"line\">\t    binarySortTree.delNode(<span class=\"number\">9</span>);</span><br><span class=\"line\">\t    binarySortTree.delNode(<span class=\"number\">1</span>);</span><br><span class=\"line\">\t    binarySortTree.delNode(<span class=\"number\">7</span>);</span><br><span class=\"line\">\t    </span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;root=&quot;</span> + binarySortTree.getRoot());</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;删除结点后&quot;</span>);</span><br><span class=\"line\">\t\tbinarySortTree.infixOrder();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//创建二叉排序树</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BinarySortTree</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> Node root;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Node <span class=\"title\">getRoot</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> root;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//查找要删除的结点</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Node <span class=\"title\">search</span><span class=\"params\">(<span class=\"keyword\">int</span> value)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(root == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> root.search(value);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//查找父结点</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Node <span class=\"title\">searchParent</span><span class=\"params\">(<span class=\"keyword\">int</span> value)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(root == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> root.searchParent(value);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//编写方法: </span></span><br><span class=\"line\">\t<span class=\"comment\">//1. 返回的 以node 为根结点的二叉排序树的最小结点的值</span></span><br><span class=\"line\">\t<span class=\"comment\">//2. 删除node 为根结点的二叉排序树的最小结点</span></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * </span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> node 传入的结点(当做二叉排序树的根结点)</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@return</span> 返回的 以node 为根结点的二叉排序树的最小结点的值</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">delRightTreeMin</span><span class=\"params\">(Node node)</span> </span>&#123;</span><br><span class=\"line\">\t\tNode target = node;</span><br><span class=\"line\">\t\t<span class=\"comment\">//循环的查找左子节点，就会找到最小值</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(target.left != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\ttarget = target.left;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">//这时 target就指向了最小结点</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//删除最小结点</span></span><br><span class=\"line\">\t\tdelNode(target.value);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> target.value;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//删除结点</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">delNode</span><span class=\"params\">(<span class=\"keyword\">int</span> value)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(root == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//1.需求先去找到要删除的结点  targetNode</span></span><br><span class=\"line\">\t\t\tNode targetNode = search(value);</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//如果没有找到要删除的结点</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(targetNode == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//如果我们发现当前这颗二叉排序树只有一个结点</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(root.left == <span class=\"keyword\">null</span> &amp;&amp; root.right == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t\troot = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//去找到targetNode的父结点</span></span><br><span class=\"line\">\t\t\tNode parent = searchParent(value);</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//如果要删除的结点是叶子结点</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(targetNode.left == <span class=\"keyword\">null</span> &amp;&amp; targetNode.right == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//判断targetNode 是父结点的左子结点，还是右子结点</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(parent.left != <span class=\"keyword\">null</span> &amp;&amp; parent.left.value == value) &#123; <span class=\"comment\">//是左子结点</span></span><br><span class=\"line\">\t\t\t\t\tparent.left = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\t\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (parent.right != <span class=\"keyword\">null</span> &amp;&amp; parent.right.value == value) &#123;<span class=\"comment\">//是由子结点</span></span><br><span class=\"line\">\t\t\t\t\tparent.right = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (targetNode.left != <span class=\"keyword\">null</span> &amp;&amp; targetNode.right != <span class=\"keyword\">null</span>) &#123; <span class=\"comment\">//删除有两颗子树的节点</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">int</span> minVal = delRightTreeMin(targetNode.right);</span><br><span class=\"line\">\t\t\t\ttargetNode.value = minVal;</span><br><span class=\"line\">\t\t\t\t</span><br><span class=\"line\">\t\t\t\t</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> &#123; <span class=\"comment\">// 删除只有一颗子树的结点</span></span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//如果要删除的结点有左子结点 </span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(targetNode.left != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span>(parent != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"comment\">//如果 targetNode 是 parent 的左子结点</span></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">if</span>(parent.left.value == value) &#123;</span><br><span class=\"line\">\t\t\t\t\t\t\tparent.left = targetNode.left;</span><br><span class=\"line\">\t\t\t\t\t\t&#125; <span class=\"keyword\">else</span> &#123; <span class=\"comment\">//  targetNode 是 parent 的右子结点</span></span><br><span class=\"line\">\t\t\t\t\t\t\tparent.right = targetNode.left;</span><br><span class=\"line\">\t\t\t\t\t\t&#125; </span><br><span class=\"line\">\t\t\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\t\t\troot = targetNode.left;</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t&#125; <span class=\"keyword\">else</span> &#123; <span class=\"comment\">//如果要删除的结点有右子结点 </span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span>(parent != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"comment\">//如果 targetNode 是 parent 的左子结点</span></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">if</span>(parent.left.value == value) &#123;</span><br><span class=\"line\">\t\t\t\t\t\t\tparent.left = targetNode.right;</span><br><span class=\"line\">\t\t\t\t\t\t&#125; <span class=\"keyword\">else</span> &#123; <span class=\"comment\">//如果 targetNode 是 parent 的右子结点</span></span><br><span class=\"line\">\t\t\t\t\t\t\tparent.right = targetNode.right;</span><br><span class=\"line\">\t\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\t\t\troot = targetNode.right;</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//添加结点的方法</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(Node node)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(root == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\troot = node;<span class=\"comment\">//如果root为空则直接让root指向node</span></span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\troot.add(node);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//中序遍历</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">infixOrder</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(root != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\troot.infixOrder();</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">&quot;二叉排序树为空，不能遍历&quot;</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//创建Node结点</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Node</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> value;</span><br><span class=\"line\">\tNode left;</span><br><span class=\"line\">\tNode right;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Node</span><span class=\"params\">(<span class=\"keyword\">int</span> value)</span> </span>&#123;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.value = value;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//查找要删除的结点</span></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * </span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> value 希望删除的结点的值</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@return</span> 如果找到返回该结点，否则返回null</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Node <span class=\"title\">search</span><span class=\"params\">(<span class=\"keyword\">int</span> value)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(value == <span class=\"keyword\">this</span>.value) &#123; <span class=\"comment\">//找到就是该结点</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(value &lt; <span class=\"keyword\">this</span>.value) &#123;<span class=\"comment\">//如果查找的值小于当前结点，向左子树递归查找</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">//如果左子结点为空</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.left  == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.left.search(value);</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123; <span class=\"comment\">//如果查找的值不小于当前结点，向右子树递归查找</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.right == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.right.search(value);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//查找要删除结点的父结点</span></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * </span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> value 要找到的结点的值</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@return</span> 返回的是要删除的结点的父结点，如果没有就返回null</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Node <span class=\"title\">searchParent</span><span class=\"params\">(<span class=\"keyword\">int</span> value)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//如果当前结点就是要删除的结点的父结点，就返回</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>((<span class=\"keyword\">this</span>.left != <span class=\"keyword\">null</span> &amp;&amp; <span class=\"keyword\">this</span>.left.value == value) || </span><br><span class=\"line\">\t\t\t\t(<span class=\"keyword\">this</span>.right != <span class=\"keyword\">null</span> &amp;&amp; <span class=\"keyword\">this</span>.right.value == value)) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//如果查找的值小于当前结点的值, 并且当前结点的左子结点不为空</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(value &lt; <span class=\"keyword\">this</span>.value &amp;&amp; <span class=\"keyword\">this</span>.left != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.left.searchParent(value); <span class=\"comment\">//向左子树递归查找</span></span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (value &gt;= <span class=\"keyword\">this</span>.value &amp;&amp; <span class=\"keyword\">this</span>.right != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.right.searchParent(value); <span class=\"comment\">//向右子树递归查找</span></span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>; <span class=\"comment\">// 没有找到父结点</span></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">&quot;Node [value=&quot;</span> + value + <span class=\"string\">&quot;]&quot;</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//添加结点的方法</span></span><br><span class=\"line\">\t<span class=\"comment\">//递归的形式添加结点，注意需要满足二叉排序树的要求</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(Node node)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(node == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">//判断传入的结点的值，和当前子树的根结点的值关系</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(node.value &lt; <span class=\"keyword\">this</span>.value) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//如果当前结点左子结点为null</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.left == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">this</span>.left = node;</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//递归的向左子树添加</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">this</span>.left.add(node);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123; <span class=\"comment\">//添加的结点的值大于 当前结点的值</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.right == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">this</span>.right = node;</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//递归的向右子树添加</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">this</span>.right.add(node);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//中序遍历</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">infixOrder</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.left != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">this</span>.left.infixOrder();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.right != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">this</span>.right.infixOrder();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n<h3><span id=\"6平衡二叉树\">6.平衡二叉树</span></h3><p><strong>基本介绍</strong></p>\n<p>1)平衡二叉树也叫平衡二叉搜索树（Self-balancing binary search tree）又被称为AVL树， 可以<strong>保证查询效率较高</strong>。</p>\n<p>2)具有以下<strong>特点</strong>：它是一 棵空树或它的左右两个子树的高度差的绝对值不超过1，并且左右两个子树都是一棵平衡二叉树。平衡二叉树的常用实现方法有<a href=\"https://baike.baidu.com/item/%E7%BA%A2%E9%BB%91%E6%A0%91/2413209\">红黑树</a>、<a href=\"https://baike.baidu.com/item/AVL/7543015\">AVL</a>、<a href=\"https://baike.baidu.com/item/%E6%9B%BF%E7%BD%AA%E7%BE%8A%E6%A0%91/13859070\">替罪羊树</a>、<a href=\"https://baike.baidu.com/item/Treap\">Treap</a>、<a href=\"https://baike.baidu.com/item/%E4%BC%B8%E5%B1%95%E6%A0%91/7003945\">伸展树</a>等。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br><span class=\"line\">320</span><br><span class=\"line\">321</span><br><span class=\"line\">322</span><br><span class=\"line\">323</span><br><span class=\"line\">324</span><br><span class=\"line\">325</span><br><span class=\"line\">326</span><br><span class=\"line\">327</span><br><span class=\"line\">328</span><br><span class=\"line\">329</span><br><span class=\"line\">330</span><br><span class=\"line\">331</span><br><span class=\"line\">332</span><br><span class=\"line\">333</span><br><span class=\"line\">334</span><br><span class=\"line\">335</span><br><span class=\"line\">336</span><br><span class=\"line\">337</span><br><span class=\"line\">338</span><br><span class=\"line\">339</span><br><span class=\"line\">340</span><br><span class=\"line\">341</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AVLTreeDemo</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//int[] arr = &#123;4,3,6,5,7,8&#125;;</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//int[] arr = &#123; 10, 12, 8, 9, 7, 6 &#125;;</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span>[] arr = &#123; <span class=\"number\">10</span>, <span class=\"number\">11</span>, <span class=\"number\">7</span>, <span class=\"number\">6</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span> &#125;;  </span><br><span class=\"line\">\t\t<span class=\"comment\">//创建一个 AVLTree对象</span></span><br><span class=\"line\">\t\tAVLTree avlTree = <span class=\"keyword\">new</span> AVLTree();</span><br><span class=\"line\">\t\t<span class=\"comment\">//添加结点</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">\t\t\tavlTree.add(<span class=\"keyword\">new</span> Node(arr[i]));</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">//遍历</span></span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;中序遍历&quot;</span>);</span><br><span class=\"line\">\t\tavlTree.infixOrder();</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;在平衡处理~~&quot;</span>);</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;树的高度=&quot;</span> + avlTree.getRoot().height()); <span class=\"comment\">//3</span></span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;树的左子树高度=&quot;</span> + avlTree.getRoot().leftHeight()); <span class=\"comment\">// 2</span></span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;树的右子树高度=&quot;</span> + avlTree.getRoot().rightHeight()); <span class=\"comment\">// 2</span></span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;当前的根结点=&quot;</span> + avlTree.getRoot());<span class=\"comment\">//8</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创建AVLTree</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AVLTree</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> Node root;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Node <span class=\"title\">getRoot</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> root;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 查找要删除的结点</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Node <span class=\"title\">search</span><span class=\"params\">(<span class=\"keyword\">int</span> value)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (root == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> root.search(value);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 查找父结点</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Node <span class=\"title\">searchParent</span><span class=\"params\">(<span class=\"keyword\">int</span> value)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (root == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> root.searchParent(value);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 编写方法:</span></span><br><span class=\"line\">\t<span class=\"comment\">// 1. 返回的 以node 为根结点的二叉排序树的最小结点的值</span></span><br><span class=\"line\">\t<span class=\"comment\">// 2. 删除node 为根结点的二叉排序树的最小结点</span></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * </span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> node</span></span><br><span class=\"line\"><span class=\"comment\">\t *            传入的结点(当做二叉排序树的根结点)</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@return</span> 返回的 以node 为根结点的二叉排序树的最小结点的值</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">delRightTreeMin</span><span class=\"params\">(Node node)</span> </span>&#123;</span><br><span class=\"line\">\t\tNode target = node;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 循环的查找左子节点，就会找到最小值</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span> (target.left != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\ttarget = target.left;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 这时 target就指向了最小结点</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// 删除最小结点</span></span><br><span class=\"line\">\t\tdelNode(target.value);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> target.value;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 删除结点</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">delNode</span><span class=\"params\">(<span class=\"keyword\">int</span> value)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (root == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 1.需求先去找到要删除的结点 targetNode</span></span><br><span class=\"line\">\t\t\tNode targetNode = search(value);</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 如果没有找到要删除的结点</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (targetNode == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 如果我们发现当前这颗二叉排序树只有一个结点</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (root.left == <span class=\"keyword\">null</span> &amp;&amp; root.right == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t\troot = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 去找到targetNode的父结点</span></span><br><span class=\"line\">\t\t\tNode parent = searchParent(value);</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 如果要删除的结点是叶子结点</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (targetNode.left == <span class=\"keyword\">null</span> &amp;&amp; targetNode.right == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// 判断targetNode 是父结点的左子结点，还是右子结点</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (parent.left != <span class=\"keyword\">null</span> &amp;&amp; parent.left.value == value) &#123; <span class=\"comment\">// 是左子结点</span></span><br><span class=\"line\">\t\t\t\t\tparent.left = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\t\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (parent.right != <span class=\"keyword\">null</span> &amp;&amp; parent.right.value == value) &#123;<span class=\"comment\">// 是由子结点</span></span><br><span class=\"line\">\t\t\t\t\tparent.right = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (targetNode.left != <span class=\"keyword\">null</span> &amp;&amp; targetNode.right != <span class=\"keyword\">null</span>) &#123; <span class=\"comment\">// 删除有两颗子树的节点</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">int</span> minVal = delRightTreeMin(targetNode.right);</span><br><span class=\"line\">\t\t\t\ttargetNode.value = minVal;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> &#123; <span class=\"comment\">// 删除只有一颗子树的结点</span></span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// 如果要删除的结点有左子结点</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (targetNode.left != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span> (parent != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"comment\">// 如果 targetNode 是 parent 的左子结点</span></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">if</span> (parent.left.value == value) &#123;</span><br><span class=\"line\">\t\t\t\t\t\t\tparent.left = targetNode.left;</span><br><span class=\"line\">\t\t\t\t\t\t&#125; <span class=\"keyword\">else</span> &#123; <span class=\"comment\">// targetNode 是 parent 的右子结点</span></span><br><span class=\"line\">\t\t\t\t\t\t\tparent.right = targetNode.left;</span><br><span class=\"line\">\t\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\t\t\troot = targetNode.left;</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t&#125; <span class=\"keyword\">else</span> &#123; <span class=\"comment\">// 如果要删除的结点有右子结点</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span> (parent != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"comment\">// 如果 targetNode 是 parent 的左子结点</span></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">if</span> (parent.left.value == value) &#123;</span><br><span class=\"line\">\t\t\t\t\t\t\tparent.left = targetNode.right;</span><br><span class=\"line\">\t\t\t\t\t\t&#125; <span class=\"keyword\">else</span> &#123; <span class=\"comment\">// 如果 targetNode 是 parent 的右子结点</span></span><br><span class=\"line\">\t\t\t\t\t\t\tparent.right = targetNode.right;</span><br><span class=\"line\">\t\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\t\t\troot = targetNode.right;</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 添加结点的方法</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(Node node)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (root == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\troot = node;<span class=\"comment\">// 如果root为空则直接让root指向node</span></span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\troot.add(node);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 中序遍历</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">infixOrder</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (root != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\troot.infixOrder();</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">&quot;二叉排序树为空，不能遍历&quot;</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创建Node结点</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Node</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> value;</span><br><span class=\"line\">\tNode left;</span><br><span class=\"line\">\tNode right;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Node</span><span class=\"params\">(<span class=\"keyword\">int</span> value)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.value = value;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 返回左子树的高度</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">leftHeight</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (left == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> left.height();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 返回右子树的高度</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">rightHeight</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (right == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> right.height();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 返回 以该结点为根结点的树的高度</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">height</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> Math.max(left == <span class=\"keyword\">null</span> ? <span class=\"number\">0</span> : left.height(), right == <span class=\"keyword\">null</span> ? <span class=\"number\">0</span> : right.height()) + <span class=\"number\">1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//左旋转方法</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">leftRotate</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">//创建新的结点，以当前根结点的值</span></span><br><span class=\"line\">\t\tNode newNode = <span class=\"keyword\">new</span> Node(value);</span><br><span class=\"line\">\t\t<span class=\"comment\">//把新的结点的左子树设置成当前结点的左子树</span></span><br><span class=\"line\">\t\tnewNode.left = left;</span><br><span class=\"line\">\t\t<span class=\"comment\">//把新的结点的右子树设置成带你过去结点的右子树的左子树</span></span><br><span class=\"line\">\t\tnewNode.right = right.left;</span><br><span class=\"line\">\t\t<span class=\"comment\">//把当前结点的值替换成右子结点的值</span></span><br><span class=\"line\">\t\tvalue = right.value;</span><br><span class=\"line\">\t\t<span class=\"comment\">//把当前结点的右子树设置成当前结点右子树的右子树</span></span><br><span class=\"line\">\t\tright = right.right;</span><br><span class=\"line\">\t\t<span class=\"comment\">//把当前结点的左子树(左子结点)设置成新的结点</span></span><br><span class=\"line\">\t\tleft = newNode;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//右旋转</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">rightRotate</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tNode newNode = <span class=\"keyword\">new</span> Node(value);</span><br><span class=\"line\">\t\tnewNode.right = right;</span><br><span class=\"line\">\t\tnewNode.left = left.right;</span><br><span class=\"line\">\t\tvalue = left.value;</span><br><span class=\"line\">\t\tleft = left.left;</span><br><span class=\"line\">\t\tright = newNode;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 查找要删除的结点</span></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * </span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> value</span></span><br><span class=\"line\"><span class=\"comment\">\t *            希望删除的结点的值</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@return</span> 如果找到返回该结点，否则返回null</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Node <span class=\"title\">search</span><span class=\"params\">(<span class=\"keyword\">int</span> value)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (value == <span class=\"keyword\">this</span>.value) &#123; <span class=\"comment\">// 找到就是该结点</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (value &lt; <span class=\"keyword\">this</span>.value) &#123;<span class=\"comment\">// 如果查找的值小于当前结点，向左子树递归查找</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 如果左子结点为空</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.left == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.left.search(value);</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123; <span class=\"comment\">// 如果查找的值不小于当前结点，向右子树递归查找</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.right == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.right.search(value);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 查找要删除结点的父结点</span></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * </span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> value</span></span><br><span class=\"line\"><span class=\"comment\">\t *            要找到的结点的值</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@return</span> 返回的是要删除的结点的父结点，如果没有就返回null</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Node <span class=\"title\">searchParent</span><span class=\"params\">(<span class=\"keyword\">int</span> value)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 如果当前结点就是要删除的结点的父结点，就返回</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> ((<span class=\"keyword\">this</span>.left != <span class=\"keyword\">null</span> &amp;&amp; <span class=\"keyword\">this</span>.left.value == value) || (<span class=\"keyword\">this</span>.right != <span class=\"keyword\">null</span> &amp;&amp; <span class=\"keyword\">this</span>.right.value == value)) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 如果查找的值小于当前结点的值, 并且当前结点的左子结点不为空</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (value &lt; <span class=\"keyword\">this</span>.value &amp;&amp; <span class=\"keyword\">this</span>.left != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.left.searchParent(value); <span class=\"comment\">// 向左子树递归查找</span></span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (value &gt;= <span class=\"keyword\">this</span>.value &amp;&amp; <span class=\"keyword\">this</span>.right != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.right.searchParent(value); <span class=\"comment\">// 向右子树递归查找</span></span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>; <span class=\"comment\">// 没有找到父结点</span></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">&quot;Node [value=&quot;</span> + value + <span class=\"string\">&quot;]&quot;</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 添加结点的方法</span></span><br><span class=\"line\">\t<span class=\"comment\">// 递归的形式添加结点，注意需要满足二叉排序树的要求</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(Node node)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (node == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 判断传入的结点的值，和当前子树的根结点的值关系</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (node.value &lt; <span class=\"keyword\">this</span>.value) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 如果当前结点左子结点为null</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.left == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">this</span>.left = node;</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// 递归的向左子树添加</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">this</span>.left.add(node);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123; <span class=\"comment\">// 添加的结点的值大于 当前结点的值</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.right == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">this</span>.right = node;</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// 递归的向右子树添加</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">this</span>.right.add(node);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">//当添加完一个结点后，如果: (右子树的高度-左子树的高度) &gt; 1 , 左旋转</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(rightHeight() - leftHeight() &gt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//如果它的右子树的左子树的高度大于它的右子树的右子树的高度</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(right != <span class=\"keyword\">null</span> &amp;&amp; right.leftHeight() &gt; right.rightHeight()) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//先对右子结点进行右旋转</span></span><br><span class=\"line\">\t\t\t\tright.rightRotate();</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//然后在对当前结点进行左旋转</span></span><br><span class=\"line\">\t\t\t\tleftRotate(); <span class=\"comment\">//左旋转..</span></span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//直接进行左旋转即可</span></span><br><span class=\"line\">\t\t\t\tleftRotate();</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> ; <span class=\"comment\">//必须要!!!</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">//当添加完一个结点后，如果 (左子树的高度 - 右子树的高度) &gt; 1, 右旋转</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(leftHeight() - rightHeight() &gt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//如果它的左子树的右子树高度大于它的左子树的高度</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(left != <span class=\"keyword\">null</span> &amp;&amp; left.rightHeight() &gt; left.leftHeight()) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//先对当前结点的左结点(左子树)-&gt;左旋转</span></span><br><span class=\"line\">\t\t\t\tleft.leftRotate();</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//再对当前结点进行右旋转</span></span><br><span class=\"line\">\t\t\t\trightRotate();</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//直接进行右旋转即可</span></span><br><span class=\"line\">\t\t\t\trightRotate();</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 中序遍历</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">infixOrder</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.left != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">this</span>.left.infixOrder();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.right != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">this</span>.right.infixOrder();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2><span id=\"九-图\">九、图</span></h2><h3><span id=\"1图的表示方式\">1.图的表示方式</span></h3><p>​    邻接矩阵</p>\n<p>​    邻接表</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> graph;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Arrays;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.LinkedList;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Graph</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> ArrayList&lt;String&gt; vertexList; <span class=\"comment\">//存储顶点集合</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span>[][] edges; <span class=\"comment\">//存储图对应的邻结矩阵</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> numOfEdges; <span class=\"comment\">//表示边的数目</span></span><br><span class=\"line\">\t<span class=\"comment\">//定义给数组boolean[], 记录某个结点是否被访问</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span>[] isVisited;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//测试一把图是否创建ok</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> n = <span class=\"number\">8</span>;  <span class=\"comment\">//结点的个数</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//String Vertexs[] = &#123;&quot;A&quot;, &quot;B&quot;, &quot;C&quot;, &quot;D&quot;, &quot;E&quot;&#125;;</span></span><br><span class=\"line\">\t\tString Vertexs[] = &#123;<span class=\"string\">&quot;1&quot;</span>, <span class=\"string\">&quot;2&quot;</span>, <span class=\"string\">&quot;3&quot;</span>, <span class=\"string\">&quot;4&quot;</span>, <span class=\"string\">&quot;5&quot;</span>, <span class=\"string\">&quot;6&quot;</span>, <span class=\"string\">&quot;7&quot;</span>, <span class=\"string\">&quot;8&quot;</span>&#125;;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">//创建图对象</span></span><br><span class=\"line\">\t\tGraph graph = <span class=\"keyword\">new</span> Graph(n);</span><br><span class=\"line\">\t\t<span class=\"comment\">//循环的添加顶点</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(String vertex: Vertexs) &#123;</span><br><span class=\"line\">\t\t\tgraph.insertVertex(vertex);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">//添加边</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//A-B A-C B-C B-D B-E </span></span><br><span class=\"line\"><span class=\"comment\">//\t\tgraph.insertEdge(0, 1, 1); // A-B</span></span><br><span class=\"line\"><span class=\"comment\">//\t\tgraph.insertEdge(0, 2, 1); // </span></span><br><span class=\"line\"><span class=\"comment\">//\t\tgraph.insertEdge(1, 2, 1); // </span></span><br><span class=\"line\"><span class=\"comment\">//\t\tgraph.insertEdge(1, 3, 1); // </span></span><br><span class=\"line\"><span class=\"comment\">//\t\tgraph.insertEdge(1, 4, 1); // </span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">//更新边的关系</span></span><br><span class=\"line\">\t\tgraph.insertEdge(<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">\t\tgraph.insertEdge(<span class=\"number\">0</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">\t\tgraph.insertEdge(<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">\t\tgraph.insertEdge(<span class=\"number\">1</span>, <span class=\"number\">4</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">\t\tgraph.insertEdge(<span class=\"number\">3</span>, <span class=\"number\">7</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">\t\tgraph.insertEdge(<span class=\"number\">4</span>, <span class=\"number\">7</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">\t\tgraph.insertEdge(<span class=\"number\">2</span>, <span class=\"number\">5</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">\t\tgraph.insertEdge(<span class=\"number\">2</span>, <span class=\"number\">6</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">\t\tgraph.insertEdge(<span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">//显示一把邻结矩阵</span></span><br><span class=\"line\">\t\tgraph.showGraph();</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">//测试一把，我们的dfs遍历是否ok</span></span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;深度遍历&quot;</span>);</span><br><span class=\"line\">\t\tgraph.dfs(); <span class=\"comment\">// A-&gt;B-&gt;C-&gt;D-&gt;E [1-&gt;2-&gt;4-&gt;8-&gt;5-&gt;3-&gt;6-&gt;7]</span></span><br><span class=\"line\"><span class=\"comment\">//\t\tSystem.out.println();</span></span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;广度优先!&quot;</span>);</span><br><span class=\"line\">\t\tgraph.bfs(); <span class=\"comment\">// A-&gt;B-&gt;C-&gt;D-E [1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;6-&gt;7-&gt;8]</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//构造器</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Graph</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//初始化矩阵和vertexList</span></span><br><span class=\"line\">\t\tedges = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[n][n];</span><br><span class=\"line\">\t\tvertexList = <span class=\"keyword\">new</span> ArrayList&lt;String&gt;(n);</span><br><span class=\"line\">\t\tnumOfEdges = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//得到第一个邻接结点的下标 w </span></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * </span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> index </span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@return</span> 如果存在就返回对应的下标，否则返回-1</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getFirstNeighbor</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; vertexList.size(); j++) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(edges[index][j] &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> j;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//根据前一个邻接结点的下标来获取下一个邻接结点</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getNextNeighbor</span><span class=\"params\">(<span class=\"keyword\">int</span> v1, <span class=\"keyword\">int</span> v2)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = v2 + <span class=\"number\">1</span>; j &lt; vertexList.size(); j++) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(edges[v1][j] &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> j;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//深度优先遍历算法</span></span><br><span class=\"line\">\t<span class=\"comment\">//i 第一次就是 0</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">boolean</span>[] isVisited, <span class=\"keyword\">int</span> i)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//首先我们访问该结点,输出</span></span><br><span class=\"line\">\t\tSystem.out.print(getValueByIndex(i) + <span class=\"string\">&quot;-&gt;&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"comment\">//将结点设置为已经访问</span></span><br><span class=\"line\">\t\tisVisited[i] = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">\t\t<span class=\"comment\">//查找结点i的第一个邻接结点w</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> w = getFirstNeighbor(i);</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(w != -<span class=\"number\">1</span>) &#123;<span class=\"comment\">//说明有</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(!isVisited[w]) &#123;</span><br><span class=\"line\">\t\t\t\tdfs(isVisited, w);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//如果w结点已经被访问过</span></span><br><span class=\"line\">\t\t\tw = getNextNeighbor(i, w);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//对dfs 进行一个重载, 遍历我们所有的结点，并进行 dfs</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tisVisited = <span class=\"keyword\">new</span> <span class=\"keyword\">boolean</span>[vertexList.size()];</span><br><span class=\"line\">\t\t<span class=\"comment\">//遍历所有的结点，进行dfs[回溯]</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; getNumOfVertex(); i++) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(!isVisited[i]) &#123;</span><br><span class=\"line\">\t\t\t\tdfs(isVisited, i);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//对一个结点进行广度优先遍历的方法</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">bfs</span><span class=\"params\">(<span class=\"keyword\">boolean</span>[] isVisited, <span class=\"keyword\">int</span> i)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> u ; <span class=\"comment\">// 表示队列的头结点对应下标</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> w ; <span class=\"comment\">// 邻接结点w</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//队列，记录结点访问的顺序</span></span><br><span class=\"line\">\t\tLinkedList queue = <span class=\"keyword\">new</span> LinkedList();</span><br><span class=\"line\">\t\t<span class=\"comment\">//访问结点，输出结点信息</span></span><br><span class=\"line\">\t\tSystem.out.print(getValueByIndex(i) + <span class=\"string\">&quot;=&gt;&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"comment\">//标记为已访问</span></span><br><span class=\"line\">\t\tisVisited[i] = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">\t\t<span class=\"comment\">//将结点加入队列</span></span><br><span class=\"line\">\t\tqueue.addLast(i);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>( !queue.isEmpty()) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//取出队列的头结点下标</span></span><br><span class=\"line\">\t\t\tu = (Integer)queue.removeFirst();</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//得到第一个邻接结点的下标 w </span></span><br><span class=\"line\">\t\t\tw = getFirstNeighbor(u);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">while</span>(w != -<span class=\"number\">1</span>) &#123;<span class=\"comment\">//找到</span></span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//是否访问过</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(!isVisited[w]) &#123;</span><br><span class=\"line\">\t\t\t\t\tSystem.out.print(getValueByIndex(w) + <span class=\"string\">&quot;=&gt;&quot;</span>);</span><br><span class=\"line\">\t\t\t\t\t<span class=\"comment\">//标记已经访问</span></span><br><span class=\"line\">\t\t\t\t\tisVisited[w] = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"comment\">//入队</span></span><br><span class=\"line\">\t\t\t\t\tqueue.addLast(w);</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//以u为前驱点，找w后面的下一个邻结点</span></span><br><span class=\"line\">\t\t\t\tw = getNextNeighbor(u, w); <span class=\"comment\">//体现出我们的广度优先</span></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t&#125; </span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//遍历所有的结点，都进行广度优先搜索</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">bfs</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tisVisited = <span class=\"keyword\">new</span> <span class=\"keyword\">boolean</span>[vertexList.size()];</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; getNumOfVertex(); i++) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(!isVisited[i]) &#123;</span><br><span class=\"line\">\t\t\t\tbfs(isVisited, i);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//图中常用的方法</span></span><br><span class=\"line\">\t<span class=\"comment\">//返回结点的个数</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getNumOfVertex</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> vertexList.size();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//显示图对应的矩阵</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">showGraph</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span>[] link : edges) &#123;</span><br><span class=\"line\">\t\t\tSystem.err.println(Arrays.toString(link));</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//得到边的数目</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getNumOfEdges</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> numOfEdges;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//返回结点i(下标)对应的数据 0-&gt;&quot;A&quot; 1-&gt;&quot;B&quot; 2-&gt;&quot;C&quot;</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getValueByIndex</span><span class=\"params\">(<span class=\"keyword\">int</span> i)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> vertexList.get(i);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//返回v1和v2的权值</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getWeight</span><span class=\"params\">(<span class=\"keyword\">int</span> v1, <span class=\"keyword\">int</span> v2)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> edges[v1][v2];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//插入结点</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">insertVertex</span><span class=\"params\">(String vertex)</span> </span>&#123;</span><br><span class=\"line\">\t\tvertexList.add(vertex);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//添加边</span></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * </span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> v1 表示点的下标即使第几个顶点  &quot;A&quot;-&quot;B&quot; &quot;A&quot;-&gt;0 &quot;B&quot;-&gt;1</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> v2 第二个顶点对应的下标</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> weight 表示 </span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">insertEdge</span><span class=\"params\">(<span class=\"keyword\">int</span> v1, <span class=\"keyword\">int</span> v2, <span class=\"keyword\">int</span> weight)</span> </span>&#123;</span><br><span class=\"line\">\t\tedges[v1][v2] = weight;</span><br><span class=\"line\">\t\tedges[v2][v1] = weight;</span><br><span class=\"line\">\t\tnumOfEdges++;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n<h2><span id=\"十-常用算法\">十、常用算法</span></h2><h3><span id=\"1查找算法\">1.查找算法</span></h3><h4><span id=\"二分查找和插值查找\">二分查找和插值查找</span></h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 循环实现二分查找算法，已排好序得数组arrays,-1无法查到数据</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> ele</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">binSearch</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr, <span class=\"keyword\">int</span> ele)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//第一个下标</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> sIndex = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"comment\">//最后一个下标</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> eIndex = arr.length - <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (sIndex &lt;= eIndex) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> mIndex = sIndex + (eIndex - sIndex) / <span class=\"number\">2</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (ele == arr[mIndex]) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> mIndex;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (ele &lt; arr[mIndex]) &#123;</span><br><span class=\"line\">                eIndex = mIndex - <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                sIndex = mIndex + <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 递归实现二分查找</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">recurSeach</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr, <span class=\"keyword\">int</span> ele, <span class=\"keyword\">int</span> sIndex, <span class=\"keyword\">int</span> eIndex)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> mIndex = sIndex + (eIndex - sIndex) / <span class=\"number\">2</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ele &lt; arr[sIndex] || ele &gt; arr[eIndex] || sIndex &gt; eIndex) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (arr[mIndex] == ele) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> mIndex;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (ele &lt; arr[mIndex]) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> recurSeach(arr, ele, sIndex, mIndex - <span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> recurSeach(arr, ele, mIndex + <span class=\"number\">1</span>, eIndex);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//编写插值查找算法</span></span><br><span class=\"line\">\t<span class=\"comment\">//说明：插值查找算法，也要求数组是有序的</span></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * </span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> arr 数组</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> left 左边索引</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> right 右边索引</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> findVal 查找值</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@return</span> 如果找到，就返回对应的下标，如果没有找到，返回-1</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">insertValueSearch</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr, <span class=\"keyword\">int</span> left, <span class=\"keyword\">int</span> right, <span class=\"keyword\">int</span> findVal)</span> </span>&#123; </span><br><span class=\"line\"></span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;插值查找次数~~&quot;</span>);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">//注意：findVal &lt; arr[0]  和  findVal &gt; arr[arr.length - 1] 必须需要</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//否则我们得到的 mid 可能越界</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (left &gt; right || findVal &lt; arr[<span class=\"number\">0</span>] || findVal &gt; arr[arr.length - <span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 求出mid, 自适应 应用数据公式 y=kx + b，这里mid不是中值的意思，而是找到最接近的索引，(left,arr[left]),(right,arr[right])</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> mid = left + (right - left) * (findVal - arr[left]) / (arr[right] - arr[left]);</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> midVal = arr[mid];</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (findVal &gt; midVal) &#123; <span class=\"comment\">// 说明应该向右边递归</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> insertValueSearch(arr, mid + <span class=\"number\">1</span>, right, findVal);</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (findVal &lt; midVal) &#123; <span class=\"comment\">// 说明向左递归查找</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> insertValueSearch(arr, left, mid - <span class=\"number\">1</span>, findVal);</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> mid;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 这里我们实现的线性查找是找到一个满足条件的值，就返回</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> arr</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> value</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">seqSearch</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr, <span class=\"keyword\">int</span> value)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 线性查找是逐一比对，发现有相同值，就返回下标</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(arr[i] == value) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> i;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n<h4><span id=\"斐波那契黄金分割法查找算法\">斐波那契(黄金分割法)查找算法</span></h4><p><strong>斐波那契(黄金分割法)原理</strong>:</p>\n<p><strong>斐波那契查找</strong>原理与前两种相似，仅仅<br> 改变了中间结点（mid）的位置，mid不<br> 再是中间或插值得到，而是位于黄金分<br> 割点附近，即**mid=low+F(k-1)-1<br>** （F代表斐波那契数列），如下图所示</p>\n<p><img src=\"/2021/01/01/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E6%95%B4%E7%90%86/image-20210109154304890.png\" alt=\"image-20210109154304890\"></p>\n<p>对F(k-1)-1的理解：</p>\n<p>1)由斐波那契数列 <strong>F[k]=F[k-1]+F[k-2]</strong> 的性质，可以得到 <strong>（F[k]-1）=（F[k-1]-1）+（F[k-2]-1+1</strong> 。该式说明：只要顺序表的长度为<strong>F[k]-1</strong>，则可以将该表分成长度为<strong>F[k-1]-1</strong>和<strong>F[k-2]-1</strong>的两段，即如上图所示。从而中间位置为mid=low+Fk-1)-1</p>\n<p>2)类似的，每一子段也可以用相同的方式分割</p>\n<p>3)但顺序表长度n不一定刚好等于F[k]-1，所以需要将原来的顺序表长度n增加至F[k]-1。这里的k值只要能使得F[k]-1恰好大于或等于n即可，由以下代码得到,顺序表长度增加后，新增的位置（从n+1到F[k]-1位置），都赋为n位置的值即可。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> search;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Arrays;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FibonacciSearch</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> maxSize = <span class=\"number\">20</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] arr = &#123;<span class=\"number\">1</span>, <span class=\"number\">8</span>, <span class=\"number\">10</span>, <span class=\"number\">89</span>, <span class=\"number\">1000</span>, <span class=\"number\">1234</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;index=&quot;</span> + fibSearch(arr, <span class=\"number\">189</span>));<span class=\"comment\">// 0</span></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//因为后面我们mid=low+F(k-1)-1，需要使用到斐波那契数列，因此我们需要先获取到一个斐波那契数列</span></span><br><span class=\"line\">    <span class=\"comment\">//非递归方法得到一个斐波那契数列</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span>[] fib() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] f = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[maxSize];</span><br><span class=\"line\">        f[<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        f[<span class=\"number\">1</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">2</span>; i &lt; maxSize; i++) &#123;</span><br><span class=\"line\">            f[i] = f[i - <span class=\"number\">1</span>] + f[i - <span class=\"number\">2</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> f;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//编写斐波那契查找算法</span></span><br><span class=\"line\">    <span class=\"comment\">//使用非递归的方式编写算法</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> a   数组</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key 我们需要查找的关键码(值)</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 返回对应的下标，如果没有-1</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">fibSearch</span><span class=\"params\">(<span class=\"keyword\">int</span>[] a, <span class=\"keyword\">int</span> key)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> low = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> high = a.length - <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> k = <span class=\"number\">0</span>; <span class=\"comment\">//表示斐波那契分割数值的下标</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> mid = <span class=\"number\">0</span>; <span class=\"comment\">//存放mid值</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] f = fib(); <span class=\"comment\">//获取到斐波那契数列</span></span><br><span class=\"line\">        <span class=\"comment\">//获取到斐波那契分割数值的下标</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (high &gt; f[k] - <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            k++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//因为 f[k] 值 可能大于 a 的 长度，因此我们需要使用Arrays类，构造一个新的数组，并指向temp[]</span></span><br><span class=\"line\">        <span class=\"comment\">//不足的部分会使用0填充</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] temp = Arrays.copyOf(a, f[k]);</span><br><span class=\"line\"><span class=\"comment\">//\t\tSystem.out.println(Arrays.toString(temp));</span></span><br><span class=\"line\">        <span class=\"comment\">//实际上需求使用a数组最后的数填充 temp</span></span><br><span class=\"line\">        <span class=\"comment\">//举例:</span></span><br><span class=\"line\">        <span class=\"comment\">//temp = &#123;1,8, 10, 89, 1000, 1234, 0, 0&#125;  =&gt; &#123;1,8, 10, 89, 1000, 1234, 1234, 1234,&#125;</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = high + <span class=\"number\">1</span>; i &lt; temp.length; i++) &#123;</span><br><span class=\"line\">            temp[i] = a[high];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 使用while来循环处理，找到我们的数 key</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (low &lt;= high) &#123; <span class=\"comment\">// 只要这个条件满足，就可以找</span></span><br><span class=\"line\">            mid = low + f[k - <span class=\"number\">1</span>] - <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (key &lt; temp[mid]) &#123; <span class=\"comment\">//我们应该继续向数组的前面查找(左边)</span></span><br><span class=\"line\">                high = mid - <span class=\"number\">1</span>;</span><br><span class=\"line\">                <span class=\"comment\">//为甚是 k--</span></span><br><span class=\"line\">                <span class=\"comment\">//说明</span></span><br><span class=\"line\">                <span class=\"comment\">//1. 全部元素 = 前面的元素 + 后边元素</span></span><br><span class=\"line\">                <span class=\"comment\">//2. f[k] = f[k-1] + f[k-2]</span></span><br><span class=\"line\">                <span class=\"comment\">//因为 前面有 f[k-1]个元素,所以可以继续拆分 f[k-1] = f[k-2] + f[k-3]</span></span><br><span class=\"line\">                <span class=\"comment\">//即 在 f[k-1] 的前面继续查找 k--</span></span><br><span class=\"line\">                <span class=\"comment\">//即下次循环 mid = f[k-1-1]-1</span></span><br><span class=\"line\">                k--;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (key &gt; temp[mid]) &#123; <span class=\"comment\">// 我们应该继续向数组的后面查找(右边)</span></span><br><span class=\"line\">                low = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">                <span class=\"comment\">//为什么是k -=2</span></span><br><span class=\"line\">                <span class=\"comment\">//说明</span></span><br><span class=\"line\">                <span class=\"comment\">//1. 全部元素 = 前面的元素 + 后边元素</span></span><br><span class=\"line\">                <span class=\"comment\">//2. f[k] = f[k-1] + f[k-2]</span></span><br><span class=\"line\">                <span class=\"comment\">//3. 因为后面我们有f[k-2] 所以可以继续拆分 f[k-1] = f[k-3] + f[k-4]</span></span><br><span class=\"line\">                <span class=\"comment\">//4. 即在f[k-2] 的前面进行查找 k -=2</span></span><br><span class=\"line\">                <span class=\"comment\">//5. 即下次循环 mid = f[k - 1 - 2] - 1</span></span><br><span class=\"line\">                k -= <span class=\"number\">2</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123; <span class=\"comment\">//找到</span></span><br><span class=\"line\">                <span class=\"comment\">//需要确定，返回的是哪个下标</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (mid &lt;= high) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> mid;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> high;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n<h3><span id=\"2全排列\">2.全排列</span></h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    </span><br><span class=\"line\">\t<span class=\"comment\">/** 完整代码如下：</span></span><br><span class=\"line\"><span class=\"comment\">     * fullSort方法接收三个参数，数组arr，起始位置start，终止为止end，意思就是完成arr数组从start到end之间记录的全排列。</span></span><br><span class=\"line\"><span class=\"comment\">     * 分两个步骤：</span></span><br><span class=\"line\"><span class=\"comment\">     * （1）确定第一位的字符</span></span><br><span class=\"line\"><span class=\"comment\">     * 数组arr从start到end的所有记录都可以出现在第一个位置，所以直接一个for循环，考虑了这所有的情况。在for循环中，swap方法就是交换i和start位置的数，保证当前i指向的记录出现在第一个位置，也就是start指向的位置</span></span><br><span class=\"line\"><span class=\"comment\">     * （2）剩下的记录继续做全排列</span></span><br><span class=\"line\"><span class=\"comment\">     * 这个就是一个递归函数的调用，只需要修改起始位置，也就是start+1，因为start的位置已经放了记录，所以只需要继续做从start+1到end的全排列即可</span></span><br><span class=\"line\"><span class=\"comment\">     * 至于紧接着的一个swap方法是做什么的呢？因为数组传递的是地址，所以所有的修改对所有人都是共享的，因此为了保证每一次的交换不会对下一次的交换产生影响，要重新交换一下位置，也就是复原，不然对下一次的交换就有影响了</span></span><br><span class=\"line\"><span class=\"comment\">     * 递归的终止条件就是当start==end，也就是只有一个记录需要做全排列，也就是到了最后一个记录，这就是全排列的一种情况，输入本次的记录，也就是数组arr即可。</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> arr</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> start</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> end</span></span><br><span class=\"line\"><span class=\"comment\">     */</span>  </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">fullSort</span><span class=\"params\">(<span class=\"keyword\">int</span> arr[], <span class=\"keyword\">int</span> start, <span class=\"keyword\">int</span> end)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//递归终止条件</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (start == end) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i : arr) &#123;</span><br><span class=\"line\">                System.out.print(i);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            System.out.println();</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = start; i &lt;= end; i++) &#123;</span><br><span class=\"line\">            swap(arr, i, start);</span><br><span class=\"line\">            fullSort(arr, start + <span class=\"number\">1</span>, end);</span><br><span class=\"line\">            swap(arr, i, start);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<h3><span id=\"3分治算法\">3.分治算法</span></h3><p><strong>分治算法的基本步骤</strong></p>\n<p>分治法在每一层递归上都有三个步骤：</p>\n<p>1)分解：将原问题分解为若干个规模较小，相互独立，与原问题形式相同的子问题</p>\n<p>2)解决：若子问题规模较小而容易被解决则直接解，否则递归地解各个子问题</p>\n<p>3)合并：将各个子问题的解合并为原问题的解。</p>\n<p>常见的分治算法有汉诺塔和归并排序等</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//汉诺塔的移动的方法</span></span><br><span class=\"line\">\t<span class=\"comment\">//使用分治算法</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">hanoiTower</span><span class=\"params\">(<span class=\"keyword\">int</span> num, <span class=\"keyword\">char</span> a, <span class=\"keyword\">char</span> b, <span class=\"keyword\">char</span> c)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//如果只有一个盘</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(num == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">&quot;第1个盘从 &quot;</span> + a + <span class=\"string\">&quot;-&gt;&quot;</span> + c);</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//如果我们有 n &gt;= 2 情况，我们总是可以看做是两个盘 1.最下边的一个盘 2. 上面的所有盘</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">//1. 先把 最上面的所有盘 A-&gt;B， 移动过程会使用到 c</span></span><br><span class=\"line\">\t\t\thanoiTower(num - <span class=\"number\">1</span>, a, c, b);</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//2. 把最下边的盘 A-&gt;C</span></span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">&quot;第&quot;</span> + num + <span class=\"string\">&quot;个盘从 &quot;</span> + a + <span class=\"string\">&quot;-&gt;&quot;</span> + c);</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//3. 把B塔的所有盘 从 B-&gt;C , 移动过程使用到 a塔  </span></span><br><span class=\"line\">\t\t\thanoiTower(num - <span class=\"number\">1</span>, b, a, c);</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n<h3><span id=\"4动态规划\">4.动态规划</span></h3><p><strong>应用场景背包问题</strong></p>\n<p>背包问题：有一个背包，容量为4磅 ， 现有如下物品</p>\n<table>\n<thead>\n<tr>\n<th><strong>物品</strong></th>\n<th><strong>重量</strong></th>\n<th><strong>价格</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>吉他(G)</td>\n<td>1</td>\n<td>1500</td>\n</tr>\n<tr>\n<td>音响(S)</td>\n<td>4</td>\n<td>3000</td>\n</tr>\n<tr>\n<td>电脑(L)</td>\n<td>3</td>\n<td>2000</td>\n</tr>\n</tbody></table>\n<p>1)要求达到的目标为装入的背包的总价值最大，并且重量不超出</p>\n<p>2)要求装入的物品不能重复</p>\n<table>\n<thead>\n<tr>\n<th><strong>物品</strong></th>\n<th><strong>0</strong> <strong>磅</strong></th>\n<th><strong>1磅</strong></th>\n<th><strong>2磅</strong></th>\n<th><strong>3磅</strong></th>\n<th><strong>4磅</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td></td>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n</tr>\n<tr>\n<td>吉他(G)</td>\n<td>0</td>\n<td>1500(G)</td>\n<td>1500(G)</td>\n<td>1500(G)</td>\n<td>1500(G)</td>\n</tr>\n<tr>\n<td>音响(S)</td>\n<td>0</td>\n<td>1500(G)</td>\n<td>1500(G)</td>\n<td>1500(G)</td>\n<td>3000(S)</td>\n</tr>\n<tr>\n<td>电脑(L)</td>\n<td>0</td>\n<td>1500(G)</td>\n<td>1500(G)</td>\n<td>2000(L)</td>\n<td>3500(L+G)</td>\n</tr>\n<tr>\n<td><strong>思路分析和图解</strong></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>算法的主要思想，利用动态规划来解决。每次遍历到的第i个物品，根据w[i]和v[i]来确定是否需要将该物品放入背包中。即对于给定的n个物品，设v[i]、w[i]分别为第i个物品的价值和重量，C为背包的容量。再令v[i][j]表示在前i个物品中能够装入容量为j的背包中的最大价值。则我们有下面的结果：\u000b\u000b(1)  v[i][0]=v[0][j]=0; //表示 填入表 第一行和第一列是0</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody></table>\n<pre><code>  (2) 当w[i]&gt; j 时：v[i][j]=v[i-1][j]   // 当准备加入新增的商品的容量大于 当前背包的容量时，就直接使用上一个单元格的装入策略\n  (3) 当j&gt;=w[i]时： v[i][j]=max&#123;v[i-1][j], v[i]+v[i-1][j-w[i]]&#125;  </code></pre>\n<p>// 当 准备加入的新增的商品的容量小于等于当前背包的容量,<br>// 装入的方式:<br>v[i-1][j]： 就是上一个单元格的装入的最大值<br>v[i] : 表示当前商品的价值<br>v[i-1][j-w[i]] ： 装入i-1商品，到剩余空间j-w[i]的最大值<br>当j&gt;=w[i]时： v[i][j]=max{v[i-1][j], v[i]+v[i-1][j-w[i]]} : </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> algorithm.dynamic;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">KnapsackProblem</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] w = &#123;<span class=\"number\">1</span>, <span class=\"number\">4</span>, <span class=\"number\">3</span>&#125;;<span class=\"comment\">//物品的重量</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] val = &#123;<span class=\"number\">1500</span>, <span class=\"number\">3000</span>, <span class=\"number\">2000</span>&#125;; <span class=\"comment\">//物品的价值</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> m = <span class=\"number\">4</span>; <span class=\"comment\">//背包的容量</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> n = val.length; <span class=\"comment\">//物品的个数</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//创建二维数组，</span></span><br><span class=\"line\">        <span class=\"comment\">//v[i][j] 表示在前i个物品中能够装入容量为j的背包中的最大价值</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span>[][] v = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[n + <span class=\"number\">1</span>][m + <span class=\"number\">1</span>];</span><br><span class=\"line\">        <span class=\"comment\">//用来存放物品放入当前的情况记录到path</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span>[][] path = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[n + <span class=\"number\">1</span>][m + <span class=\"number\">1</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//初始化第一行和第一列, 这里在本程序中，可以不去处理，因为默认就是0</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; v.length; i++) &#123;</span><br><span class=\"line\">            v[i][<span class=\"number\">0</span>] = <span class=\"number\">0</span>;<span class=\"comment\">//将第一列设置为0</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; v[<span class=\"number\">0</span>].length; i++) &#123;</span><br><span class=\"line\">            v[<span class=\"number\">0</span>][i] = <span class=\"number\">0</span>;<span class=\"comment\">//将第一行设置0</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//根据前面得到公式来动态规划处理</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; v.length; i++) &#123; <span class=\"comment\">//不处理第一行 i是从1开始的</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">1</span>; j &lt; v[<span class=\"number\">0</span>].length; j++) &#123;<span class=\"comment\">//不处理第一列, j是从1开始的</span></span><br><span class=\"line\">                <span class=\"comment\">//公式</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (w[i - <span class=\"number\">1</span>] &gt; j) &#123;</span><br><span class=\"line\">                    v[i][j] = v[i - <span class=\"number\">1</span>][j];</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\"><span class=\"comment\">//                    v[i][j] = Math.max(v[i - 1][j], val[i - 1] + v[i - 1][j - w[i - 1]]);</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (v[i - <span class=\"number\">1</span>][j] &lt; val[i - <span class=\"number\">1</span>] + v[i - <span class=\"number\">1</span>][j - w[i - <span class=\"number\">1</span>]]) &#123;</span><br><span class=\"line\">                        v[i][j] = val[i - <span class=\"number\">1</span>] + v[i - <span class=\"number\">1</span>][j - w[i - <span class=\"number\">1</span>]];</span><br><span class=\"line\">                        <span class=\"comment\">//把当前的情况记录到path</span></span><br><span class=\"line\">                        path[i][j] = <span class=\"number\">1</span>;</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                        v[i][j] = v[i - <span class=\"number\">1</span>][j];</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//输出一下v 看看目前的情况</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; v.length; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; v[<span class=\"number\">0</span>].length; j++) &#123;</span><br><span class=\"line\">                System.out.print(v[i][j] + <span class=\"string\">&quot; &quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            System.out.println();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//输出一下path 看看目前的情况</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; v.length; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; v[<span class=\"number\">0</span>].length; j++) &#123;</span><br><span class=\"line\">                System.out.print(path[i][j] + <span class=\"string\">&quot; &quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            System.out.println();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//动脑筋</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> i = path.length - <span class=\"number\">1</span>; <span class=\"comment\">//行的最大下标</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> j = path[<span class=\"number\">0</span>].length - <span class=\"number\">1</span>;  <span class=\"comment\">//列的最大下标</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (i &gt; <span class=\"number\">0</span> &amp;&amp; j &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (path[i][j] == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                System.out.printf(<span class=\"string\">&quot;第%d个商品放入到背包\\n&quot;</span>, i);</span><br><span class=\"line\">                j -= w[i - <span class=\"number\">1</span>];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            i--;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"><span class=\"comment\">//        while (i &gt; 0 &amp;&amp; j &gt; 0) &#123; //从path的最后开始找</span></span><br><span class=\"line\"><span class=\"comment\">//            if (path[i][j] == 1) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//                System.out.printf(&quot;第%d个商品放入到背包\\n&quot;, i);</span></span><br><span class=\"line\"><span class=\"comment\">//                j -= w[i - 1]; //w[i-1]</span></span><br><span class=\"line\"><span class=\"comment\">//            &#125;</span></span><br><span class=\"line\"><span class=\"comment\">//            i--;</span></span><br><span class=\"line\"><span class=\"comment\">//        &#125;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h3><span id=\"5kmp算法\">5.kmp算法</span></h3><p><strong>应用场景</strong>-字符串匹配问题</p>\n<p>字符串匹配问题：：</p>\n<p>1)有一个字符串 str1= “”硅硅谷 尚硅谷你尚硅 尚硅谷你尚硅谷你尚硅你好””，和一个子串 str2=”尚硅谷你尚硅你”</p>\n<p>2)现在要判断 <strong>str1</strong> <strong>是否含有</strong> <strong>str2</strong>, 如果存在，就返回第一次出现的位置, 如果没有，则返回-1</p>\n<p>暴力匹配代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> algorithm.kmp;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ViolenceMatch</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        String str1 = <span class=\"string\">&quot;硅硅谷 尚硅谷你尚硅 尚硅谷你尚硅谷你尚硅你好&quot;</span>;</span><br><span class=\"line\">        String str2 = <span class=\"string\">&quot;尚硅谷你尚硅你&quot;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> index = violenceMatch(str1, str2);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;index=&quot;</span> + index);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 暴力匹配算法实现</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">violenceMatch</span><span class=\"params\">(String str1, String str2)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">char</span>[] s1 = str1.toCharArray();</span><br><span class=\"line\">        <span class=\"keyword\">char</span>[] s2 = str2.toCharArray();</span><br><span class=\"line\">        <span class=\"keyword\">int</span> s1Len = s1.length;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> s2Len = s2.length;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; <span class=\"comment\">// i索引指向s1</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; <span class=\"comment\">// j索引指向s2</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span> ( i &lt; s1Len &amp;&amp; j &lt; s2Len) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (s1[i] == s2[j]) &#123;<span class=\"comment\">//匹配ok</span></span><br><span class=\"line\">                i++;</span><br><span class=\"line\">                j++;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123; <span class=\"comment\">//没有匹配成功</span></span><br><span class=\"line\">                <span class=\"comment\">//如果失配（即str1[i]! = str2[j]），令i = i - (j - 1)，j = 0。</span></span><br><span class=\"line\">                i = i - (j - <span class=\"number\">1</span>);</span><br><span class=\"line\">                j = <span class=\"number\">0</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//判断是否匹配成功</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (j == s2Len) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> i - j;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><strong>KMP</strong>算法介绍</p>\n<p>1)KMP是一个解决模式串在文本串是否出现过，如果出现过，最早出现的位置的经典算法</p>\n<p>2)Knuth-Morris-Pratt <strong>字符串查找算法</strong>，简称为 “KMP算法”，常用于在一个文本串S内查找一个模式串P 的出现位置，这个算法由Donald Knuth、Vaughan Pratt、James H. Morris三人于1977年联合发表，故取这3人的姓氏命名此算法.</p>\n<p>3)KMP方法算法就利用之前判断过信息，通过一个next数组，保存模式串中前后最长公共子序列的长度，每次回溯时，通过next数组找到，前面匹配过的位置，省去了大量的计算时间</p>\n<p>4)参考资料：<a href=\"https://www.cnblogs.com/ZuoAndFutureGirl/p/9028287.html\">https://</a><a href=\"https://www.cnblogs.com/ZuoAndFutureGirl/p/9028287.html\">www.cnblogs.com/ZuoAndFutureGirl/p/9028287.html</a> </p>\n<p><strong>核心：</strong></p>\n<p>”部分匹配”的实质是，有时候，字符串头部和尾部会有重复。比如，”ABCDAB”之中有两个”AB”，那么它的”部分匹配值”就是2（”AB”的长度）。搜索词移动的时候，第一个”AB”向后移动 4 位（字符串长度-部分匹配值），就可以来到第二个”AB”的位置。 </p>\n<p><img src=\"/2021/01/01/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E6%95%B4%E7%90%86/clip_image002.jpg\" alt=\"img\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> algorithm.kmp;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Arrays;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">KMPAlgorithm</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        String str1 = <span class=\"string\">&quot;BBC ABCDAB ABCDABCDABDE&quot;</span>; <span class=\"comment\">// ABCDABD</span></span><br><span class=\"line\">        String str2 = <span class=\"string\">&quot;ABCDABD&quot;</span>; <span class=\"comment\">// 0 0 0 0 1 2 0</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] next = kmpNext(<span class=\"string\">&quot;ABCDABD&quot;</span>); <span class=\"comment\">//[0 0 0 0 1 2 0]</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;next=&quot;</span> + Arrays.toString(next));</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">int</span> index = kmpSearch(str1, str2, next);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;index=&quot;</span> + index); <span class=\"comment\">// 15了</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">kmpSearch</span><span class=\"params\">(String str1, String str2, <span class=\"keyword\">int</span>[] next)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//遍历</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>, j = <span class=\"number\">0</span>; i &lt; str1.length(); i++) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//需要处理 str1.charAt(i) ！= str2.charAt(j), 去调整j的大小</span></span><br><span class=\"line\">            <span class=\"comment\">//KMP算法核心点, 可以验证...</span></span><br><span class=\"line\">            <span class=\"keyword\">while</span> (j &gt; <span class=\"number\">0</span> &amp;&amp; str1.charAt(i) != str2.charAt(j)) &#123;</span><br><span class=\"line\">                j = next[j - <span class=\"number\">1</span>];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (str1.charAt(i) == str2.charAt(j)) &#123;</span><br><span class=\"line\">                j++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (j == str2.length()) &#123;</span><br><span class=\"line\">                <span class=\"comment\">//获取起始索引(最后)</span></span><br><span class=\"line\">                <span class=\"keyword\">return</span> i - j + <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//获取到一个字符串(子串) 的部分匹配值表</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span>[] kmpNext(String dest) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//创建一个next 数组保存部分匹配值</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] next = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[dest.length()];</span><br><span class=\"line\">        next[<span class=\"number\">0</span>] = <span class=\"number\">0</span>; <span class=\"comment\">//如果字符串是长度为1 部分匹配值就是0</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>, j = <span class=\"number\">0</span>; i &lt; dest.length(); i++) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//当dest.charAt(i) != dest.charAt(j) ，我们需要从next[j-1]获取新的j</span></span><br><span class=\"line\">            <span class=\"comment\">//直到我们发现 有  dest.charAt(i) == dest.charAt(j)成立才退出</span></span><br><span class=\"line\">            <span class=\"comment\">//这是kmp算法的核心点</span></span><br><span class=\"line\">            <span class=\"keyword\">while</span> (j &gt; <span class=\"number\">0</span> &amp;&amp; dest.charAt(i) != dest.charAt(j)) &#123;</span><br><span class=\"line\">                j = next[j - <span class=\"number\">1</span>];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//当dest.charAt(i) == dest.charAt(j) 满足时，部分匹配值就是+1</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (dest.charAt(i) == dest.charAt(j)) &#123;</span><br><span class=\"line\">                j++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            next[i] = j;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h3><span id=\"6贪心算法\">6.贪心算法</span></h3><p><strong>应用场景</strong>-集合覆盖问题</p>\n<p>假设存在下面需要付费的广播台，以及广播台信号可以覆盖的地区。 <strong>如何选择最少的广播台</strong>，让所有的地区都可以接收到信号</p>\n<table>\n<thead>\n<tr>\n<th>广播台</th>\n<th>覆盖地区</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>K1</td>\n<td>“北京”, “上海”, “天津”</td>\n</tr>\n<tr>\n<td>K2</td>\n<td>“广州”, “北京”, “深圳”</td>\n</tr>\n<tr>\n<td>K3</td>\n<td>“成都”, “上海”, “杭州”</td>\n</tr>\n<tr>\n<td>K4</td>\n<td>“上海”, “天津”</td>\n</tr>\n<tr>\n<td>K5</td>\n<td>“杭州”, “大连”</td>\n</tr>\n</tbody></table>\n<p>解决方案：</p>\n<p>1.穷举法 2<sup>n</sup>-1种可能</p>\n<p>2.贪心算法</p>\n<p><strong>贪心算法介绍</strong></p>\n<p>1)贪婪算法(贪心算法)是指在对问题进行求解时，在每一步选择中都采取最好或者最优(即最有利)的选择，从而希望能够导致结果是最好或者最优的算法</p>\n<p>2)贪婪算法所得到的结果**不一定是最优的结果(有时候会是最优解)**，但是都是相对近似(接近)最优解的结果</p>\n<p><strong>实现思路分析:</strong> </p>\n<p>使用贪婪算法，效率高:</p>\n<p>目前并没有算法可以快速计算得到准备的值， 使用贪婪算法，则可以得到非常接近的解，并且效率高。选择策略上，因为需要覆盖全部地区的最小集合:</p>\n<p>1)遍历所有的广播电台, 找到一个覆盖了最多<strong>未覆盖的地</strong>区**的电台(此电台可能包含一些已覆盖的地区，但没有关系）</p>\n<p>2)将这个电台加入到一个集合中(比如ArrayList), 想办法把该电台覆盖的地区在下次比较时去掉。</p>\n<p>3)重复第1步直到覆盖了全部的地区</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> algorithm.greedy;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.HashMap;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.HashSet;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GreedyAlgorithm</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//创建广播电台,放入到Map</span></span><br><span class=\"line\">\t\tHashMap&lt;String,HashSet&lt;String&gt;&gt; broadcasts = <span class=\"keyword\">new</span> HashMap&lt;String, HashSet&lt;String&gt;&gt;();</span><br><span class=\"line\">\t\t<span class=\"comment\">//将各个电台放入到broadcasts</span></span><br><span class=\"line\">\t\tHashSet&lt;String&gt; hashSet1 = <span class=\"keyword\">new</span> HashSet&lt;String&gt;();</span><br><span class=\"line\">\t\thashSet1.add(<span class=\"string\">&quot;北京&quot;</span>);</span><br><span class=\"line\">\t\thashSet1.add(<span class=\"string\">&quot;上海&quot;</span>);</span><br><span class=\"line\">\t\thashSet1.add(<span class=\"string\">&quot;天津&quot;</span>);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tHashSet&lt;String&gt; hashSet2 = <span class=\"keyword\">new</span> HashSet&lt;String&gt;();</span><br><span class=\"line\">\t\thashSet2.add(<span class=\"string\">&quot;广州&quot;</span>);</span><br><span class=\"line\">\t\thashSet2.add(<span class=\"string\">&quot;北京&quot;</span>);</span><br><span class=\"line\">\t\thashSet2.add(<span class=\"string\">&quot;深圳&quot;</span>);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tHashSet&lt;String&gt; hashSet3 = <span class=\"keyword\">new</span> HashSet&lt;String&gt;();</span><br><span class=\"line\">\t\thashSet3.add(<span class=\"string\">&quot;成都&quot;</span>);</span><br><span class=\"line\">\t\thashSet3.add(<span class=\"string\">&quot;上海&quot;</span>);</span><br><span class=\"line\">\t\thashSet3.add(<span class=\"string\">&quot;杭州&quot;</span>);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tHashSet&lt;String&gt; hashSet4 = <span class=\"keyword\">new</span> HashSet&lt;String&gt;();</span><br><span class=\"line\">\t\thashSet4.add(<span class=\"string\">&quot;上海&quot;</span>);</span><br><span class=\"line\">\t\thashSet4.add(<span class=\"string\">&quot;天津&quot;</span>);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tHashSet&lt;String&gt; hashSet5 = <span class=\"keyword\">new</span> HashSet&lt;String&gt;();</span><br><span class=\"line\">\t\thashSet5.add(<span class=\"string\">&quot;杭州&quot;</span>);</span><br><span class=\"line\">\t\thashSet5.add(<span class=\"string\">&quot;大连&quot;</span>);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t\t<span class=\"comment\">//加入到map</span></span><br><span class=\"line\">\t\tbroadcasts.put(<span class=\"string\">&quot;K1&quot;</span>, hashSet1);</span><br><span class=\"line\">\t\tbroadcasts.put(<span class=\"string\">&quot;K2&quot;</span>, hashSet2);</span><br><span class=\"line\">\t\tbroadcasts.put(<span class=\"string\">&quot;K3&quot;</span>, hashSet3);</span><br><span class=\"line\">\t\tbroadcasts.put(<span class=\"string\">&quot;K4&quot;</span>, hashSet4);</span><br><span class=\"line\">\t\tbroadcasts.put(<span class=\"string\">&quot;K5&quot;</span>, hashSet5);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">//allAreas 存放所有的地区</span></span><br><span class=\"line\">\t\tHashSet&lt;String&gt; allAreas = <span class=\"keyword\">new</span> HashSet&lt;String&gt;();</span><br><span class=\"line\">\t\tallAreas.add(<span class=\"string\">&quot;北京&quot;</span>);</span><br><span class=\"line\">\t\tallAreas.add(<span class=\"string\">&quot;上海&quot;</span>);</span><br><span class=\"line\">\t\tallAreas.add(<span class=\"string\">&quot;天津&quot;</span>);</span><br><span class=\"line\">\t\tallAreas.add(<span class=\"string\">&quot;广州&quot;</span>);</span><br><span class=\"line\">\t\tallAreas.add(<span class=\"string\">&quot;深圳&quot;</span>);</span><br><span class=\"line\">\t\tallAreas.add(<span class=\"string\">&quot;成都&quot;</span>);</span><br><span class=\"line\">\t\tallAreas.add(<span class=\"string\">&quot;杭州&quot;</span>);</span><br><span class=\"line\">\t\tallAreas.add(<span class=\"string\">&quot;大连&quot;</span>);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">//创建ArrayList, 存放选择的电台集合</span></span><br><span class=\"line\">\t\tArrayList&lt;String&gt; selects = <span class=\"keyword\">new</span> ArrayList&lt;String&gt;();</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">//定义一个临时的集合， 在遍历的过程中，存放遍历过程中的电台覆盖的地区和当前还没有覆盖的地区的交集</span></span><br><span class=\"line\">\t\tHashSet&lt;String&gt; tempSet = <span class=\"keyword\">new</span> HashSet&lt;String&gt;();</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">//定义给maxKey ， 保存在一次遍历过程中，能够覆盖最大未覆盖的地区对应的电台的key</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//如果maxKey 不为null , 则会加入到 selects</span></span><br><span class=\"line\">\t\tString maxKey = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(allAreas.size() != <span class=\"number\">0</span>) &#123; <span class=\"comment\">// 如果allAreas 不为0, 则表示还没有覆盖到所有的地区</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">//每进行一次while,需要</span></span><br><span class=\"line\">\t\t\tmaxKey = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//遍历 broadcasts, 取出对应key</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span>(String key : broadcasts.keySet()) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//每进行一次for</span></span><br><span class=\"line\">\t\t\t\ttempSet.clear();</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//当前这个key能够覆盖的地区</span></span><br><span class=\"line\">\t\t\t\tHashSet&lt;String&gt; areas = broadcasts.get(key);</span><br><span class=\"line\">\t\t\t\ttempSet.addAll(areas);</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//求出tempSet 和   allAreas 集合的交集, 交集会赋给 tempSet</span></span><br><span class=\"line\">\t\t\t\ttempSet.retainAll(allAreas);</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//如果当前这个集合包含的未覆盖地区的数量，比maxKey指向的集合地区还多</span></span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//就需要重置maxKey</span></span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// tempSet.size() &gt;broadcasts.get(maxKey).size()) 体现出贪心算法的特点,每次都选择最优的</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(tempSet.size() &gt; <span class=\"number\">0</span> &amp;&amp; </span><br><span class=\"line\">\t\t\t\t\t\t(maxKey == <span class=\"keyword\">null</span> || tempSet.size() &gt;broadcasts.get(maxKey).size()))&#123;</span><br><span class=\"line\">\t\t\t\t\tmaxKey = key;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//maxKey != null, 就应该将maxKey 加入selects</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(maxKey != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t\tselects.add(maxKey);</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//将maxKey指向的广播电台覆盖的地区，从 allAreas 去掉</span></span><br><span class=\"line\">\t\t\t\tallAreas.removeAll(broadcasts.get(maxKey));</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;得到的选择结果是&quot;</span> + selects);<span class=\"comment\">//[K1,K2,K3,K5]</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n<h3><span id=\"7普利姆算法\">7.普利姆算法</span></h3><p><strong>应用场景</strong>-修路问题</p>\n<p>看一个应用场景和问题：2<sup>n</sup></p>\n<p><img src=\"/2021/01/01/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E6%95%B4%E7%90%86/image-20210110111607853.png\" alt=\"image-20210110111607853\"></p>\n<p>1)有胜利乡有7个村庄(A, B, C, D, E, F, G) ，现在需要修路把7个村庄连通</p>\n<p>2)各个村庄的距离用边线表示(权) ，比如 A – B 距离 5公里</p>\n<p>3)问：如何修路保证各个村庄都能连通，并且总的修建公路总里程最短?</p>\n<p>思路: 将10条边，连接即可，但是总的里程数不是最小.</p>\n<p><strong>正确的思路</strong>，就是尽可能的选择少的路线，并且每条路线最小，保证总里程数最少. </p>\n<p><strong>最小生成树:</strong></p>\n<p><img src=\"/2021/01/01/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E6%95%B4%E7%90%86/image-20210110114746786.png\" alt=\"image-20210110114746786\"></p>\n<p>修路问题本质就是就是最小生成树问题， 先介绍一下最小生成树(Minimum Cost Spanning Tree)，简称MST</p>\n<p>1)给定一个带权的无向连通图,如何选取一棵生成树,使树上所有<strong>边上权的总和为最小</strong>,这叫最小生成树 </p>\n<p>2)N个顶点，一定有N-1条边</p>\n<p>3)包含全部顶点</p>\n<p>4)N-1条边都在图中</p>\n<p>5)举例说明(如图:)</p>\n<p>求最小生成树的算法主要是<strong>普里姆</strong>算法和<strong>克鲁斯卡尔</strong>算法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> algorithm.prim;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Arrays;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PrimAlgorithm</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//测试看看图是否创建ok</span></span><br><span class=\"line\">        <span class=\"keyword\">char</span>[] data = <span class=\"keyword\">new</span> <span class=\"keyword\">char</span>[]&#123;<span class=\"string\">&#x27;A&#x27;</span>, <span class=\"string\">&#x27;B&#x27;</span>, <span class=\"string\">&#x27;C&#x27;</span>, <span class=\"string\">&#x27;D&#x27;</span>, <span class=\"string\">&#x27;E&#x27;</span>, <span class=\"string\">&#x27;F&#x27;</span>, <span class=\"string\">&#x27;G&#x27;</span>&#125;;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> verxs = data.length;</span><br><span class=\"line\">        <span class=\"comment\">//邻接矩阵的关系使用二维数组表示,10000这个大数，表示两个点不联通</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span>[][] weight = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[][]&#123;</span><br><span class=\"line\">                &#123;<span class=\"number\">10000</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>, <span class=\"number\">10000</span>, <span class=\"number\">10000</span>, <span class=\"number\">10000</span>, <span class=\"number\">2</span>&#125;,</span><br><span class=\"line\">                &#123;<span class=\"number\">5</span>, <span class=\"number\">10000</span>, <span class=\"number\">10000</span>, <span class=\"number\">9</span>, <span class=\"number\">10000</span>, <span class=\"number\">10000</span>, <span class=\"number\">3</span>&#125;,</span><br><span class=\"line\">                &#123;<span class=\"number\">7</span>, <span class=\"number\">10000</span>, <span class=\"number\">10000</span>, <span class=\"number\">10000</span>, <span class=\"number\">8</span>, <span class=\"number\">10000</span>, <span class=\"number\">10000</span>&#125;,</span><br><span class=\"line\">                &#123;<span class=\"number\">10000</span>, <span class=\"number\">9</span>, <span class=\"number\">10000</span>, <span class=\"number\">10000</span>, <span class=\"number\">10000</span>, <span class=\"number\">4</span>, <span class=\"number\">10000</span>&#125;,</span><br><span class=\"line\">                &#123;<span class=\"number\">10000</span>, <span class=\"number\">10000</span>, <span class=\"number\">8</span>, <span class=\"number\">10000</span>, <span class=\"number\">10000</span>, <span class=\"number\">5</span>, <span class=\"number\">4</span>&#125;,</span><br><span class=\"line\">                &#123;<span class=\"number\">10000</span>, <span class=\"number\">10000</span>, <span class=\"number\">10000</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">10000</span>, <span class=\"number\">6</span>&#125;,</span><br><span class=\"line\">                &#123;<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">10000</span>, <span class=\"number\">10000</span>, <span class=\"number\">4</span>, <span class=\"number\">6</span>, <span class=\"number\">10000</span>&#125;,&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//创建MGraph对象</span></span><br><span class=\"line\">        MGraph graph = <span class=\"keyword\">new</span> MGraph(verxs);</span><br><span class=\"line\">        MinTree minTree = <span class=\"keyword\">new</span> MinTree();</span><br><span class=\"line\">        minTree.createGraph(graph, verxs, data, weight);</span><br><span class=\"line\">        <span class=\"comment\">//输出</span></span><br><span class=\"line\">        minTree.showGraph(graph);</span><br><span class=\"line\">        minTree.prim(graph,<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//创建最小生成树-&gt;村庄的图</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MinTree</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//创建图的邻接矩阵</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> graph  图对象</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> verxs  图对应的顶点个数</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> data   图的各个顶点的值</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> weight 图的邻接矩阵</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">createGraph</span><span class=\"params\">(MGraph graph, <span class=\"keyword\">int</span> verxs, <span class=\"keyword\">char</span>[] data, <span class=\"keyword\">int</span>[][] weight)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> i, j;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; verxs; i++) &#123; <span class=\"comment\">//顶点</span></span><br><span class=\"line\">            graph.data[i] = data[i];</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (j = <span class=\"number\">0</span>; j &lt; verxs; j++) &#123;</span><br><span class=\"line\">                graph.weight[i][j] = weight[i][j];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//显示图的邻接矩阵</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">showGraph</span><span class=\"params\">(MGraph graph)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span>[] link : graph.weight) &#123;</span><br><span class=\"line\">            System.out.println(Arrays.toString(link));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">///编写prim算法，得到最小生成树</span></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> graph 图</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> v 表示从图的第几个顶点开始生成&#x27;A&#x27;-&gt;0 &#x27;B&#x27;-&gt;1...</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">prim</span><span class=\"params\">(MGraph graph, <span class=\"keyword\">int</span> v)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//visited[] 标记结点(顶点)是否被访问过</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> visited[] = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[graph.verxs];</span><br><span class=\"line\">        <span class=\"comment\">//visited[] 默认元素的值都是0, 表示没有访问过</span></span><br><span class=\"line\"><span class=\"comment\">//\t\tfor(int i =0; i &lt;graph.verxs; i++) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//\t\t\tvisited[i] = 0;</span></span><br><span class=\"line\"><span class=\"comment\">//\t\t&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//把当前这个结点标记为已访问</span></span><br><span class=\"line\">        visited[v] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"comment\">//h1 和 h2 记录两个顶点的下标</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> h1 = -<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> h2 = -<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> minWeight = <span class=\"number\">10000</span>;<span class=\"comment\">//将 minWeight 初始成一个大数，后面在遍历过程中，会被替换</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> k = <span class=\"number\">1</span>; k &lt; graph.verxs; k++) &#123;<span class=\"comment\">//因为有 graph.verxs顶点，普利姆算法结束后，有 graph.verxs-1边</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//这个是确定每一次生成的子图 ，和哪个结点的距离最近</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; graph.verxs ; i++) &#123;<span class=\"comment\">// i结点表示被访问过的结点</span></span><br><span class=\"line\">                <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j&lt; graph.verxs;j++) &#123;<span class=\"comment\">//j结点表示还没有访问过的结点</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(visited[i] == <span class=\"number\">1</span> &amp;&amp; visited[j] == <span class=\"number\">0</span> &amp;&amp; graph.weight[i][j] &lt; minWeight) &#123;</span><br><span class=\"line\">                        <span class=\"comment\">//替换minWeight(寻找已经访问过的结点和未访问过的结点间的权值最小的边)</span></span><br><span class=\"line\">                        minWeight = graph.weight[i][j];</span><br><span class=\"line\">                        h1 = i;</span><br><span class=\"line\">                        h2 = j;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//找到一条边是最小</span></span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;边&lt;&quot;</span> + graph.data[h1] + <span class=\"string\">&quot;,&quot;</span> + graph.data[h2] + <span class=\"string\">&quot;&gt; 权值:&quot;</span> + minWeight);</span><br><span class=\"line\">            <span class=\"comment\">//将当前这个结点标记为已经访问</span></span><br><span class=\"line\">            visited[h2] = <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"comment\">//minWeight 重新设置为最大值 10000</span></span><br><span class=\"line\">            minWeight = <span class=\"number\">10000</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MGraph</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> verxs; <span class=\"comment\">//表示图的节点个数</span></span><br><span class=\"line\">    <span class=\"keyword\">char</span>[] data; <span class=\"comment\">//存放节点数据</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span>[][] weight; <span class=\"comment\">//存放边，就是我们的邻接矩阵</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MGraph</span><span class=\"params\">(<span class=\"keyword\">int</span> verxs)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.verxs = verxs;</span><br><span class=\"line\">        data = <span class=\"keyword\">new</span> <span class=\"keyword\">char</span>[verxs];</span><br><span class=\"line\">        weight = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[verxs][verxs];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3><span id=\"8克鲁斯卡尔算法\">8.克鲁斯卡尔算法</span></h3><p>应用场景-公交站问题</p>\n<p>看一个应用场景和问题：</p>\n<p><img src=\"/2021/01/01/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E6%95%B4%E7%90%86/image-20210110115039736.png\" alt=\"image-20210110115039736\"></p>\n<p>1)某城市新增7个站点(A, B, C, D, E, F, G) ，现在需要修路把7个站点连通</p>\n<p>2)各个站点的距离用边线表示(权) ，比如 A – B 距离 12公里</p>\n<p>3)问：如何修路保证各个站点都能连通，并且总的修建公路总里程最短? </p>\n<p><strong>克鲁斯卡</strong>尔算法介绍 </p>\n<p>1)克鲁斯卡尔(Kruskal)算法，是用来求加权连通图的最小生成树的算法。</p>\n<p>2)基本思想：按照权值从小到大的顺序选择n-1条边，并保证这n-1条边不构成回路</p>\n<p>3)具体做法：首先构造一个只含n个顶点的森林，然后依权值从小到大从连通网中选择边加入到森林中，并使森林中不产生回路，直至森林变成一棵树为止</p>\n<p><img src=\"/2021/01/01/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E6%95%B4%E7%90%86/image-20210110140634167.png\" alt=\"image-20210110140634167\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> algorithm.kruskal;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Arrays;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">KruskalCase</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> edgeNum; <span class=\"comment\">//边的个数</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">char</span>[] vertexs; <span class=\"comment\">//顶点数组</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span>[][] matrix; <span class=\"comment\">//邻接矩阵</span></span><br><span class=\"line\">\t<span class=\"comment\">//使用 INF 表示两个顶点不能连通</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> INF = Integer.MAX_VALUE;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">char</span>[] vertexs = &#123;<span class=\"string\">&#x27;A&#x27;</span>, <span class=\"string\">&#x27;B&#x27;</span>, <span class=\"string\">&#x27;C&#x27;</span>, <span class=\"string\">&#x27;D&#x27;</span>, <span class=\"string\">&#x27;E&#x27;</span>, <span class=\"string\">&#x27;F&#x27;</span>, <span class=\"string\">&#x27;G&#x27;</span>&#125;;</span><br><span class=\"line\">\t\t<span class=\"comment\">//克鲁斯卡尔算法的邻接矩阵  </span></span><br><span class=\"line\">\t      <span class=\"keyword\">int</span> matrix[][] = &#123;</span><br><span class=\"line\">\t      <span class=\"comment\">/*A*/</span><span class=\"comment\">/*B*/</span><span class=\"comment\">/*C*/</span><span class=\"comment\">/*D*/</span><span class=\"comment\">/*E*/</span><span class=\"comment\">/*F*/</span><span class=\"comment\">/*G*/</span></span><br><span class=\"line\">\t<span class=\"comment\">/*A*/</span> &#123;   <span class=\"number\">0</span>,  <span class=\"number\">12</span>, INF, INF, INF,  <span class=\"number\">16</span>,  <span class=\"number\">14</span>&#125;,</span><br><span class=\"line\">\t<span class=\"comment\">/*B*/</span> &#123;  <span class=\"number\">12</span>,   <span class=\"number\">0</span>,  <span class=\"number\">10</span>, INF, INF,   <span class=\"number\">7</span>, INF&#125;,</span><br><span class=\"line\">\t<span class=\"comment\">/*C*/</span> &#123; INF,  <span class=\"number\">10</span>,   <span class=\"number\">0</span>,   <span class=\"number\">3</span>,   <span class=\"number\">5</span>,   <span class=\"number\">6</span>, INF&#125;,</span><br><span class=\"line\">\t<span class=\"comment\">/*D*/</span> &#123; INF, INF,   <span class=\"number\">3</span>,   <span class=\"number\">0</span>,   <span class=\"number\">4</span>, INF, INF&#125;,</span><br><span class=\"line\">\t<span class=\"comment\">/*E*/</span> &#123; INF, INF,   <span class=\"number\">5</span>,   <span class=\"number\">4</span>,   <span class=\"number\">0</span>,   <span class=\"number\">2</span>,   <span class=\"number\">8</span>&#125;,</span><br><span class=\"line\">\t<span class=\"comment\">/*F*/</span> &#123;  <span class=\"number\">16</span>,   <span class=\"number\">7</span>,   <span class=\"number\">6</span>, INF,   <span class=\"number\">2</span>,   <span class=\"number\">0</span>,   <span class=\"number\">9</span>&#125;,</span><br><span class=\"line\">\t<span class=\"comment\">/*G*/</span> &#123;  <span class=\"number\">14</span>, INF, INF, INF,   <span class=\"number\">8</span>,   <span class=\"number\">9</span>,   <span class=\"number\">0</span>&#125;&#125;; </span><br><span class=\"line\">\t      <span class=\"comment\">//大家可以在去测试其它的邻接矩阵，结果都可以得到最小生成树.</span></span><br><span class=\"line\">\t      </span><br><span class=\"line\">\t      <span class=\"comment\">//创建KruskalCase 对象实例</span></span><br><span class=\"line\">\t      KruskalCase kruskalCase = <span class=\"keyword\">new</span> KruskalCase(vertexs, matrix);</span><br><span class=\"line\">\t      <span class=\"comment\">//输出构建的</span></span><br><span class=\"line\">\t      kruskalCase.print();</span><br><span class=\"line\">\t      kruskalCase.kruskal();</span><br><span class=\"line\">\t      </span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//构造器</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">KruskalCase</span><span class=\"params\">(<span class=\"keyword\">char</span>[] vertexs, <span class=\"keyword\">int</span>[][] matrix)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//初始化顶点数和边的个数</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> vlen = vertexs.length;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">//初始化顶点, 复制拷贝的方式</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.vertexs = <span class=\"keyword\">new</span> <span class=\"keyword\">char</span>[vlen];</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; vertexs.length; i++) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">this</span>.vertexs[i] = vertexs[i];</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">//初始化边, 使用的是复制拷贝的方式</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.matrix = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[vlen][vlen];</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; vlen; i++) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j= <span class=\"number\">0</span>; j &lt; vlen; j++) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">this</span>.matrix[i][j] = matrix[i][j];</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">//统计边的条数</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i =<span class=\"number\">0</span>; i &lt; vlen; i++) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = i+<span class=\"number\">1</span>; j &lt; vlen; j++) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.matrix[i][j] != INF) &#123;</span><br><span class=\"line\">\t\t\t\t\tedgeNum++;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">kruskal</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> index = <span class=\"number\">0</span>; <span class=\"comment\">//表示最后结果数组的索引</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span>[] ends = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[edgeNum]; <span class=\"comment\">//用于保存&quot;已有最小生成树&quot; 中的每个顶点在最小生成树中的终点</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//创建结果数组, 保存最后的最小生成树</span></span><br><span class=\"line\">\t\tEData[] rets = <span class=\"keyword\">new</span> EData[edgeNum];</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">//获取图中 所有的边的集合 ， 一共有12边</span></span><br><span class=\"line\">\t\tEData[] edges = getEdges();</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;图的边的集合=&quot;</span> + Arrays.toString(edges) + <span class=\"string\">&quot; 共&quot;</span>+ edges.length); <span class=\"comment\">//12</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">//按照边的权值大小进行排序(从小到大)</span></span><br><span class=\"line\">\t\tsortEdges(edges);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">//遍历edges 数组，将边添加到最小生成树中时，判断是准备加入的边否形成了回路，如果没有，就加入 rets, 否则不能加入</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i &lt; edgeNum; i++) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//获取到第i条边的第一个顶点(起点)</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">int</span> p1 = getPosition(edges[i].start); <span class=\"comment\">//p1=4</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">//获取到第i条边的第2个顶点</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">int</span> p2 = getPosition(edges[i].end); <span class=\"comment\">//p2 = 5</span></span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//获取p1这个顶点在已有最小生成树中的终点</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">int</span> m = getEnd(ends, p1); <span class=\"comment\">//m = 4</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">//获取p2这个顶点在已有最小生成树中的终点</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">int</span> n = getEnd(ends, p2); <span class=\"comment\">// n = 5</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">//是否构成回路</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(m != n) &#123; <span class=\"comment\">//没有构成回路</span></span><br><span class=\"line\">\t\t\t\tends[m] = n; <span class=\"comment\">// 设置m 在&quot;已有最小生成树&quot;中的终点 &lt;E,F&gt; [0,0,0,0,5,0,0,0,0,0,0,0]</span></span><br><span class=\"line\">\t\t\t\trets[index++] = edges[i]; <span class=\"comment\">//有一条边加入到rets数组</span></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">//&lt;E,F&gt; &lt;C,D&gt; &lt;D,E&gt; &lt;B,F&gt; &lt;E,G&gt; &lt;A,B&gt;。</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//统计并打印 &quot;最小生成树&quot;, 输出  rets</span></span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;最小生成树为&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; index; i++) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(rets[i]);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//打印邻接矩阵</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">print</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;邻接矩阵为: \\n&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; vertexs.length; i++) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">0</span>; j &lt; vertexs.length; j++) &#123;</span><br><span class=\"line\">\t\t\t\tSystem.out.printf(<span class=\"string\">&quot;%12d&quot;</span>, matrix[i][j]);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tSystem.out.println();<span class=\"comment\">//换行</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 功能：对边进行排序处理, 冒泡排序</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> edges 边的集合</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">sortEdges</span><span class=\"params\">(EData[] edges)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; edges.length - <span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; edges.length - <span class=\"number\">1</span> - i; j++) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(edges[j].weight &gt; edges[j+<span class=\"number\">1</span>].weight) &#123;<span class=\"comment\">//交换</span></span><br><span class=\"line\">\t\t\t\t\tEData tmp = edges[j];</span><br><span class=\"line\">\t\t\t\t\tedges[j] = edges[j+<span class=\"number\">1</span>];</span><br><span class=\"line\">\t\t\t\t\tedges[j+<span class=\"number\">1</span>] = tmp;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\"> \t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * </span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> ch 顶点的值，比如&#x27;A&#x27;,&#x27;B&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@return</span> 返回ch顶点对应的下标，如果找不到，返回-1</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">getPosition</span><span class=\"params\">(<span class=\"keyword\">char</span> ch)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; vertexs.length; i++) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(vertexs[i] == ch) &#123;<span class=\"comment\">//找到</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> i;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">//找不到,返回-1</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 功能: 获取图中边，放到EData[] 数组中，后面我们需要遍历该数组</span></span><br><span class=\"line\"><span class=\"comment\">\t * 是通过matrix 邻接矩阵来获取</span></span><br><span class=\"line\"><span class=\"comment\">\t * EData[] 形式 [[&#x27;A&#x27;,&#x27;B&#x27;, 12], [&#x27;B&#x27;,&#x27;F&#x27;,7], .....]</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> EData[] getEdges() &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> index = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\tEData[] edges = <span class=\"keyword\">new</span> EData[edgeNum];</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; vertexs.length; i++) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=i+<span class=\"number\">1</span>; j &lt;vertexs.length; j++) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(matrix[i][j] != INF) &#123;</span><br><span class=\"line\">\t\t\t\t\tedges[index++] = <span class=\"keyword\">new</span> EData(vertexs[i], vertexs[j], matrix[i][j]);</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> edges;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 功能: 获取下标为i的顶点的终点(), 用于后面判断两个顶点的终点是否相同</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> ends ： 数组就是记录了各个顶点对应的终点是哪个,ends 数组是在遍历过程中，逐步形成</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> i : 表示传入的顶点对应的下标</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@return</span> 返回的就是 下标为i的这个顶点对应的终点的下标, 一会回头还有来理解</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">getEnd</span><span class=\"params\">(<span class=\"keyword\">int</span>[] ends, <span class=\"keyword\">int</span> i)</span> </span>&#123; <span class=\"comment\">// i = 4 [0,0,0,0,5,0,0,0,0,0,0,0]</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(ends[i] != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t\ti = ends[i];</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> i;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//创建一个类EData ，它的对象实例就表示一条边</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">EData</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">char</span> start; <span class=\"comment\">//边的一个点</span></span><br><span class=\"line\">\t<span class=\"keyword\">char</span> end; <span class=\"comment\">//边的另外一个点</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> weight; <span class=\"comment\">//边的权值</span></span><br><span class=\"line\">\t<span class=\"comment\">//构造器</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">EData</span><span class=\"params\">(<span class=\"keyword\">char</span> start, <span class=\"keyword\">char</span> end, <span class=\"keyword\">int</span> weight)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.start = start;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.end = end;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.weight = weight;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//重写toString, 便于输出边信息</span></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">&quot;EData [&lt;&quot;</span> + start + <span class=\"string\">&quot;, &quot;</span> + end + <span class=\"string\">&quot;&gt;= &quot;</span> + weight + <span class=\"string\">&quot;]&quot;</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n<h3><span id=\"9迪杰斯特拉算法\">9.迪杰斯特拉算法</span></h3><p>应用场景最短路径问题</p>\n<p>看一应用场景和问题：</p>\n<p><img src=\"/2021/01/01/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E6%95%B4%E7%90%86/image-20210110141059564.png\" alt=\"image-20210110141059564\"></p>\n<p>1)战争时期，胜利乡有7个村庄(A, B, C, D, E, F, G) ，现在有六个邮差，从G点出发，需要分别把邮件分别送到 A, B, C , D, E, F 六个村庄</p>\n<p>2)各个村庄的距离用边线表示(权) ，比如 A – B 距离 5公里</p>\n<p>3)问：如何计算出G村庄到 其它各个村庄的最短距离? </p>\n<p>如果从其它点出发到各个点的最短距离又是多少?</p>\n<p>**迪杰斯特拉(Dijkstra)**算法介绍</p>\n<p>迪杰斯特拉(Dijkstra)算法是<strong>典型最短路径算法</strong>，用于计算一个结点到其他结点的最短路径。 它的主要特点是以起始点为中心向外层层扩展(<strong>广度优先</strong>搜索思想)，直到扩展到终点为止<strong>。</strong></p>\n<p>迪杰斯特拉(Dijkstra)算法过程:</p>\n<p>设置发顶点为v，顶点集合V{v1,v2,vi…}，v到V中各顶点的距离构成距离集合Dis，Dis{d1,d2,di…}，Dis集合记录着v到图中各顶点的距离(到自身可以看作0，v到vi距离对应为di)</p>\n<p>1)从Dis中选择值最小的di并移出Dis集合，同时移出V集合中对应的顶点vi，此时的v到vi即为最短路径</p>\n<p>2)更新Dis集合，更新规则为：比较v到V集合中顶点的距离值，与v通过vi到V集合中顶点的距离值，保留值较小的一个(同时也应该更新顶点的前驱节点为vi，表明是通过vi到达的)</p>\n<p>3)重复执行两步骤，直到最短路径顶点为目标顶点即可结束</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.atguigu.dijkstra;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Arrays;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DijkstraAlgorithm</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">char</span>[] vertex = &#123; <span class=\"string\">&#x27;A&#x27;</span>, <span class=\"string\">&#x27;B&#x27;</span>, <span class=\"string\">&#x27;C&#x27;</span>, <span class=\"string\">&#x27;D&#x27;</span>, <span class=\"string\">&#x27;E&#x27;</span>, <span class=\"string\">&#x27;F&#x27;</span>, <span class=\"string\">&#x27;G&#x27;</span> &#125;;</span><br><span class=\"line\">\t\t<span class=\"comment\">//邻接矩阵</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span>[][] matrix = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[vertex.length][vertex.length];</span><br><span class=\"line\">\t\t<span class=\"keyword\">final</span> <span class=\"keyword\">int</span> N = <span class=\"number\">65535</span>;<span class=\"comment\">// 表示不可以连接</span></span><br><span class=\"line\">\t\tmatrix[<span class=\"number\">0</span>]=<span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[]&#123;N,<span class=\"number\">5</span>,<span class=\"number\">7</span>,N,N,N,<span class=\"number\">2</span>&#125;;  </span><br><span class=\"line\">        matrix[<span class=\"number\">1</span>]=<span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[]&#123;<span class=\"number\">5</span>,N,N,<span class=\"number\">9</span>,N,N,<span class=\"number\">3</span>&#125;;  </span><br><span class=\"line\">        matrix[<span class=\"number\">2</span>]=<span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[]&#123;<span class=\"number\">7</span>,N,N,N,<span class=\"number\">8</span>,N,N&#125;;  </span><br><span class=\"line\">        matrix[<span class=\"number\">3</span>]=<span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[]&#123;N,<span class=\"number\">9</span>,N,N,N,<span class=\"number\">4</span>,N&#125;;  </span><br><span class=\"line\">        matrix[<span class=\"number\">4</span>]=<span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[]&#123;N,N,<span class=\"number\">8</span>,N,N,<span class=\"number\">5</span>,<span class=\"number\">4</span>&#125;;  </span><br><span class=\"line\">        matrix[<span class=\"number\">5</span>]=<span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[]&#123;N,N,N,<span class=\"number\">4</span>,<span class=\"number\">5</span>,N,<span class=\"number\">6</span>&#125;;  </span><br><span class=\"line\">        matrix[<span class=\"number\">6</span>]=<span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[]&#123;<span class=\"number\">2</span>,<span class=\"number\">3</span>,N,N,<span class=\"number\">4</span>,<span class=\"number\">6</span>,N&#125;;</span><br><span class=\"line\">        <span class=\"comment\">//创建 Graph对象</span></span><br><span class=\"line\">        Graph graph = <span class=\"keyword\">new</span> Graph(vertex, matrix);</span><br><span class=\"line\">        <span class=\"comment\">//测试, 看看图的邻接矩阵是否ok</span></span><br><span class=\"line\">        graph.showGraph();</span><br><span class=\"line\">        <span class=\"comment\">//测试迪杰斯特拉算法</span></span><br><span class=\"line\">        graph.dsj(<span class=\"number\">2</span>);<span class=\"comment\">//C</span></span><br><span class=\"line\">        graph.showDijkstra();</span><br><span class=\"line\">        </span><br><span class=\"line\">        </span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Graph</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">char</span>[] vertex; <span class=\"comment\">// 顶点数组</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span>[][] matrix; <span class=\"comment\">// 邻接矩阵</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> VisitedVertex vv; <span class=\"comment\">//已经访问的顶点的集合</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 构造器</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Graph</span><span class=\"params\">(<span class=\"keyword\">char</span>[] vertex, <span class=\"keyword\">int</span>[][] matrix)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.vertex = vertex;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.matrix = matrix;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//显示结果</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">showDijkstra</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tvv.show();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 显示图</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">showGraph</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span>[] link : matrix) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(Arrays.toString(link));</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//迪杰斯特拉算法实现</span></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * </span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> index 表示出发顶点对应的下标</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">dsj</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span> </span>&#123;</span><br><span class=\"line\">\t\tvv = <span class=\"keyword\">new</span> VisitedVertex(vertex.length, index);</span><br><span class=\"line\">\t\tupdate(index);<span class=\"comment\">//更新index顶点到周围顶点的距离和前驱顶点</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">1</span>; j &lt;vertex.length; j++) &#123;</span><br><span class=\"line\">\t\t\tindex = vv.updateArr();<span class=\"comment\">// 选择并返回新的访问顶点</span></span><br><span class=\"line\">\t\t\tupdate(index); <span class=\"comment\">// 更新index顶点到周围顶点的距离和前驱顶点</span></span><br><span class=\"line\">\t\t&#125; </span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//更新index下标顶点到周围顶点的距离和周围顶点的前驱顶点,</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">update</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> len = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"comment\">//根据遍历我们的邻接矩阵的  matrix[index]行</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; matrix[index].length; j++) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// len 含义是 : 出发顶点到index顶点的距离 + 从index顶点到j顶点的距离的和 </span></span><br><span class=\"line\">\t\t\tlen = vv.getDis(index) + matrix[index][j];</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 如果j顶点没有被访问过，并且 len 小于出发顶点到j顶点的距离，就需要更新</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(!vv.in(j) &amp;&amp; len &lt; vv.getDis(j)) &#123;</span><br><span class=\"line\">\t\t\t\tvv.updatePre(j, index); <span class=\"comment\">//更新j顶点的前驱为index顶点</span></span><br><span class=\"line\">\t\t\t\tvv.updateDis(j, len); <span class=\"comment\">//更新出发顶点到j顶点的距离</span></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 已访问顶点集合</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">VisitedVertex</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 记录各个顶点是否访问过 1表示访问过,0未访问,会动态更新</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">int</span>[] already_arr;</span><br><span class=\"line\">\t<span class=\"comment\">// 每个下标对应的值为前一个顶点下标, 会动态更新</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">int</span>[] pre_visited;</span><br><span class=\"line\">\t<span class=\"comment\">// 记录出发顶点到其他所有顶点的距离,比如G为出发顶点，就会记录G到其它顶点的距离，会动态更新，求的最短距离就会存放到dis</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">int</span>[] dis;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//构造器</span></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * </span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> length :表示顶点的个数 </span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> index: 出发顶点对应的下标, 比如G顶点，下标就是6</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">VisitedVertex</span><span class=\"params\">(<span class=\"keyword\">int</span> length, <span class=\"keyword\">int</span> index)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.already_arr = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[length];</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.pre_visited = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[length];</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.dis = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[length];</span><br><span class=\"line\">\t\t<span class=\"comment\">//初始化 dis数组</span></span><br><span class=\"line\">\t\tArrays.fill(dis, <span class=\"number\">65535</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.already_arr[index] = <span class=\"number\">1</span>; <span class=\"comment\">//设置出发顶点被访问过</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.dis[index] = <span class=\"number\">0</span>;<span class=\"comment\">//设置出发顶点的访问距离为0</span></span><br><span class=\"line\">\t\t\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 功能: 判断index顶点是否被访问过</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> index</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@return</span> 如果访问过，就返回true, 否则访问false</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">in</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> already_arr[index] == <span class=\"number\">1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 功能: 更新出发顶点到index顶点的距离</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> index</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> len</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">updateDis</span><span class=\"params\">(<span class=\"keyword\">int</span> index, <span class=\"keyword\">int</span> len)</span> </span>&#123;</span><br><span class=\"line\">\t\tdis[index] = len;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 功能: 更新pre这个顶点的前驱顶点为index顶点</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> pre</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> index</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">updatePre</span><span class=\"params\">(<span class=\"keyword\">int</span> pre, <span class=\"keyword\">int</span> index)</span> </span>&#123;</span><br><span class=\"line\">\t\tpre_visited[pre] = index;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 功能:返回出发顶点到index顶点的距离</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> index</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getDis</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> dis[index];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 继续选择并返回新的访问顶点， 比如这里的G 完后，就是 A点作为新的访问顶点(注意不是出发顶点)</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">updateArr</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> min = <span class=\"number\">65535</span>, index = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; already_arr.length; i++) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(already_arr[i] == <span class=\"number\">0</span> &amp;&amp; dis[i] &lt; min ) &#123;</span><br><span class=\"line\">\t\t\t\tmin = dis[i];</span><br><span class=\"line\">\t\t\t\tindex = i;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">//更新 index 顶点被访问过</span></span><br><span class=\"line\">\t\talready_arr[index] = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> index;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//显示最后的结果</span></span><br><span class=\"line\">\t<span class=\"comment\">//即将三个数组的情况输出</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">show</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;==========================&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"comment\">//输出already_arr</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i : already_arr) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.print(i + <span class=\"string\">&quot; &quot;</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tSystem.out.println();</span><br><span class=\"line\">\t\t<span class=\"comment\">//输出pre_visited</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i : pre_visited) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.print(i + <span class=\"string\">&quot; &quot;</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tSystem.out.println();</span><br><span class=\"line\">\t\t<span class=\"comment\">//输出dis</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i : dis) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.print(i + <span class=\"string\">&quot; &quot;</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tSystem.out.println();</span><br><span class=\"line\">\t\t<span class=\"comment\">//为了好看最后的最短距离，我们处理</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">char</span>[] vertex = &#123; <span class=\"string\">&#x27;A&#x27;</span>, <span class=\"string\">&#x27;B&#x27;</span>, <span class=\"string\">&#x27;C&#x27;</span>, <span class=\"string\">&#x27;D&#x27;</span>, <span class=\"string\">&#x27;E&#x27;</span>, <span class=\"string\">&#x27;F&#x27;</span>, <span class=\"string\">&#x27;G&#x27;</span> &#125;;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i : dis) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (i != <span class=\"number\">65535</span>) &#123;</span><br><span class=\"line\">\t\t\t\tSystem.out.print(vertex[count] + <span class=\"string\">&quot;(&quot;</span>+i+<span class=\"string\">&quot;) &quot;</span>);</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\tSystem.out.println(<span class=\"string\">&quot;N &quot;</span>);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tcount++;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tSystem.out.println();</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n<h3><span id=\"10弗洛伊德算法\">10.弗洛伊德算法</span></h3><h3><span id=\"11马踏棋盘算法\">11.马踏棋盘算法</span></h3>","site":{"data":{}},"excerpt":"<!-- toc -->\n\n<ul>\n<li><a href=\"#%E5%89%8D%E8%A8%80\">前言</a></li>\n<li><a href=\"#%E4%B8%80-%E9%98%9F%E5%88%97\">一、队列</a><ul>\n<li><a href=\"#%E6%95%B0%E7%BB%84%E9%98%9F%E5%88%97%E4%BB%A3%E7%A0%81\">数组队列代码</a></li>\n<li><a href=\"#%E6%95%B0%E7%BB%84%E6%A8%A1%E6%8B%9F%E7%8E%AF%E5%BD%A2%E9%98%9F%E5%88%97\">数组模拟环形队列</a></li>\n</ul>\n</li>\n<li><a href=\"#%E4%BA%8C-%E9%93%BE%E8%A1%A8\">二、链表</a><ul>\n<li><a href=\"#%E5%8D%95%E9%93%BE%E8%A1%A8\">单链表</a></li>\n<li><a href=\"#%E5%8F%8C%E7%AB%AF%E9%93%BE%E8%A1%A8\">双端链表</a></li>\n<li><a href=\"#%E5%8D%95%E5%90%91%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A8\">单向环形链表</a></li>\n</ul>\n</li>\n<li><a href=\"#%E4%B8%89-%E6%A0%88\">三、栈</a></li>\n<li><a href=\"#%E5%9B%9B-%E9%80%92%E5%BD%92\">四、递归</a></li>\n<li><a href=\"#%E4%BA%94-%E7%AE%97%E6%B3%95%E7%9A%84%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%8F%8A%E7%A9%BA%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6\">五、算法的时间复杂度及空间复杂度</a><ul>\n<li><a href=\"#1%E5%B8%B8%E6%95%B0%E9%98%B6o1\">1)常数阶O(1)</a></li>\n<li><a href=\"#2%E5%AF%B9%E6%95%B0%E9%98%B6olog2supnsup\">2)对数阶O(log2<sup>n</sup>)</a></li>\n<li><a href=\"#3%E7%BA%BF%E6%80%A7%E9%98%B6on\">3)线性阶O(n)</a></li>\n<li><a href=\"#4%E7%BA%BF%E6%80%A7%E5%AF%B9%E6%95%B0%E9%98%B6onlogn\">4)线性对数阶O(nlogN)</a></li>\n<li><a href=\"#5%E5%B9%B3%E6%96%B9%E9%98%B6on2\">5)平方阶O(n²)</a></li>\n<li><a href=\"#6%E7%AB%8B%E6%96%B9%E9%98%B6on3-k%E6%AC%A1%E6%96%B9%E9%98%B6onk\">6)立方阶O(n³)<strong>、</strong>K次方阶O(n^k)</a></li>\n</ul>\n</li>\n<li><a href=\"#%E5%85%AD-%E6%8E%92%E5%BA%8F\">六、排序</a><ul>\n<li><a href=\"#1%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F\">1.冒泡排序</a></li>\n<li><a href=\"#2%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F\">2.选择排序</a></li>\n<li><a href=\"#3%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F\">3.插入排序</a></li>\n<li><a href=\"#4%E5%B8%8C%E5%B0%94%E6%8E%92%E5%BA%8F\">4.希尔排序</a></li>\n<li><a href=\"#5%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F\">5.快速排序</a></li>\n<li><a href=\"#6%E5%9F%BA%E6%95%B0%E6%8E%92%E5%BA%8F\">6.基数排序</a></li>\n<li><a href=\"#7%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F\">7.归并排序</a></li>\n<li><a href=\"#8%E5%A0%86%E6%8E%92%E5%BA%8F\">8.堆排序</a></li>\n</ul>\n</li>\n<li><a href=\"#%E4%B8%83-%E5%93%88%E5%B8%8C%E8%A1%A8\">七、哈希表</a></li>\n<li><a href=\"#%E5%85%AB-%E4%BA%8C%E5%8F%89%E6%A0%91\">八、二叉树</a><ul>\n<li><a href=\"#1%E6%99%AE%E9%80%9A%E4%BA%8C%E5%8F%89%E6%A0%91\">1.普通二叉树</a></li>\n<li><a href=\"#2%E9%A1%BA%E5%BA%8F%E4%BA%8C%E5%8F%89%E6%A0%91\">2.顺序二叉树</a></li>\n<li><a href=\"#3%E7%BA%BF%E7%B4%A2%E5%8C%96%E4%BA%8C%E5%8F%89%E6%A0%91\">3.线索化二叉树</a></li>\n<li><a href=\"#4%E9%9C%8D%E5%A4%AB%E6%9B%BC%E6%A0%91\">4.霍夫曼树</a></li>\n<li><a href=\"#5%E4%BA%8C%E5%8F%89%E6%8E%92%E5%BA%8F%E6%A0%91\">5.二叉排序树</a></li>\n<li><a href=\"#6%E5%B9%B3%E8%A1%A1%E4%BA%8C%E5%8F%89%E6%A0%91\">6.平衡二叉树</a></li>\n</ul>\n</li>\n<li><a href=\"#%E4%B9%9D-%E5%9B%BE\">九、图</a><ul>\n<li><a href=\"#1%E5%9B%BE%E7%9A%84%E8%A1%A8%E7%A4%BA%E6%96%B9%E5%BC%8F\">1.图的表示方式</a></li>\n</ul>\n</li>\n<li><a href=\"#%E5%8D%81-%E5%B8%B8%E7%94%A8%E7%AE%97%E6%B3%95\">十、常用算法</a><ul>\n<li><a href=\"#1%E6%9F%A5%E6%89%BE%E7%AE%97%E6%B3%95\">1.查找算法</a></li>\n<li><a href=\"#2%E5%85%A8%E6%8E%92%E5%88%97\">2.全排列</a></li>\n<li><a href=\"#3%E5%88%86%E6%B2%BB%E7%AE%97%E6%B3%95\">3.分治算法</a></li>\n<li><a href=\"#4%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92\">4.动态规划</a></li>\n<li><a href=\"#5kmp%E7%AE%97%E6%B3%95\">5.kmp算法</a></li>\n<li><a href=\"#6%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95\">6.贪心算法</a></li>\n<li><a href=\"#7%E6%99%AE%E5%88%A9%E5%A7%86%E7%AE%97%E6%B3%95\">7.普利姆算法</a></li>\n<li><a href=\"#8%E5%85%8B%E9%B2%81%E6%96%AF%E5%8D%A1%E5%B0%94%E7%AE%97%E6%B3%95\">8.克鲁斯卡尔算法</a></li>\n<li><a href=\"#9%E8%BF%AA%E6%9D%B0%E6%96%AF%E7%89%B9%E6%8B%89%E7%AE%97%E6%B3%95\">9.迪杰斯特拉算法</a></li>\n<li><a href=\"#10%E5%BC%97%E6%B4%9B%E4%BC%8A%E5%BE%B7%E7%AE%97%E6%B3%95\">10.弗洛伊德算法</a></li>\n<li><a href=\"#11%E9%A9%AC%E8%B8%8F%E6%A3%8B%E7%9B%98%E7%AE%97%E6%B3%95\">11.马踏棋盘算法</a></li>\n</ul>\n</li>\n</ul>\n<!-- tocstop -->\n\n<p>[TOC]</p>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>​    由于面试的时候数据结构在其占不可获取的地位，所以简单总结下数据结构相关知识，以便复习。</p>","more":"<h2 id=\"一、队列\"><a href=\"#一、队列\" class=\"headerlink\" title=\"一、队列\"></a>一、队列</h2><p><strong>队列介绍</strong></p>\n<p>1.队列是一个有序列表，可以用<strong>数组</strong>或是<strong>链表</strong>来实现。</p>\n<p>2.遵循<strong>先入先出</strong>的原则。即：先存入队列的数据，要先取出。后存入的要后取出</p>\n<p>示意图：(使用数组模拟队列示意图)</p>\n<p><img src=\"/2021/01/01/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E6%95%B4%E7%90%86/image-20210101224039379.png\" alt=\"image-20210101224039379\"></p>\n<h3 id=\"数组队列代码\"><a href=\"#数组队列代码\" class=\"headerlink\" title=\"数组队列代码\"></a>数组队列代码</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> queue;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Scanner;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ArrayQueueDemo</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//测试一把</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//创建一个队列</span></span><br><span class=\"line\">\t\tArrayQueue queue = <span class=\"keyword\">new</span> ArrayQueue(<span class=\"number\">3</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">char</span> key = <span class=\"string\">&#x27; &#x27;</span>; <span class=\"comment\">//接收用户输入</span></span><br><span class=\"line\">\t\tScanner scanner = <span class=\"keyword\">new</span> Scanner(System.in);<span class=\"comment\">//</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">boolean</span> loop = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">\t\t<span class=\"comment\">//输出一个菜单</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(loop) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">&quot;s(show): 显示队列&quot;</span>);</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">&quot;e(exit): 退出程序&quot;</span>);</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">&quot;a(add): 添加数据到队列&quot;</span>);</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">&quot;g(get): 从队列取出数据&quot;</span>);</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">&quot;h(head): 查看队列头的数据&quot;</span>);</span><br><span class=\"line\">\t\t\tkey = scanner.next().charAt(<span class=\"number\">0</span>);<span class=\"comment\">//接收一个字符</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">switch</span> (key) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">case</span> <span class=\"string\">&#x27;s&#x27;</span>:</span><br><span class=\"line\">\t\t\t\tqueue.showQueue();</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">case</span> <span class=\"string\">&#x27;a&#x27;</span>:</span><br><span class=\"line\">\t\t\t\tSystem.out.println(<span class=\"string\">&quot;输出一个数&quot;</span>);</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">int</span> value = scanner.nextInt();</span><br><span class=\"line\">\t\t\t\tqueue.addQueue(value);</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">case</span> <span class=\"string\">&#x27;g&#x27;</span>: <span class=\"comment\">//取出数据</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">int</span> res = queue.getQueue();</span><br><span class=\"line\">\t\t\t\t\tSystem.out.printf(<span class=\"string\">&quot;取出的数据是%d\\n&quot;</span>, res);</span><br><span class=\"line\">\t\t\t\t&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"comment\">// <span class=\"doctag\">TODO:</span> handle exception</span></span><br><span class=\"line\">\t\t\t\t\tSystem.out.println(e.getMessage());</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">case</span> <span class=\"string\">&#x27;h&#x27;</span>: <span class=\"comment\">//查看队列头的数据</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">int</span> res = queue.headQueue();</span><br><span class=\"line\">\t\t\t\t\tSystem.out.printf(<span class=\"string\">&quot;队列头的数据是%d\\n&quot;</span>, res);</span><br><span class=\"line\">\t\t\t\t&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"comment\">// <span class=\"doctag\">TODO:</span> handle exception</span></span><br><span class=\"line\">\t\t\t\t\tSystem.out.println(e.getMessage());</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">case</span> <span class=\"string\">&#x27;e&#x27;</span>: <span class=\"comment\">//退出</span></span><br><span class=\"line\">\t\t\t\tscanner.close();</span><br><span class=\"line\">\t\t\t\tloop = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">default</span>:</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;程序退出~~&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用数组模拟队列-编写一个ArrayQueue类</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ArrayQueue</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> maxSize; <span class=\"comment\">// 表示数组的最大容量</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> front; <span class=\"comment\">// 队列头</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> rear; <span class=\"comment\">// 队列尾</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span>[] arr; <span class=\"comment\">// 该数据用于存放数据, 模拟队列</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 创建队列的构造器</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ArrayQueue</span><span class=\"params\">(<span class=\"keyword\">int</span> arrMaxSize)</span> </span>&#123;</span><br><span class=\"line\">\t\tmaxSize = arrMaxSize;</span><br><span class=\"line\">\t\tarr = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[maxSize];</span><br><span class=\"line\">\t\tfront = -<span class=\"number\">1</span>; <span class=\"comment\">// 指向队列头部，分析出front是指向队列头的前一个位置.</span></span><br><span class=\"line\">\t\trear = -<span class=\"number\">1</span>; <span class=\"comment\">// 指向队列尾，指向队列尾的数据(即就是队列最后一个数据)</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 判断队列是否满</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isFull</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> rear == maxSize - <span class=\"number\">1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 判断队列是否为空</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isEmpty</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> rear == front;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 添加数据到队列</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addQueue</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 判断队列是否满</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (isFull()) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">&quot;队列满，不能加入数据~&quot;</span>);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\trear++; <span class=\"comment\">// 让rear 后移</span></span><br><span class=\"line\">\t\tarr[rear] = n;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 获取队列的数据, 出队列</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getQueue</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 判断队列是否空</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (isEmpty()) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 通过抛出异常</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">&quot;队列空，不能取数据&quot;</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tfront++; <span class=\"comment\">// front后移</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> arr[front];</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 显示队列的所有数据</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">showQueue</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 遍历</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (isEmpty()) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">&quot;队列空的，没有数据~~&quot;</span>);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.printf(<span class=\"string\">&quot;arr[%d]=%d\\n&quot;</span>, i, arr[i]);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 显示队列的头数据， 注意不是取出数据</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">headQueue</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 判断</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (isEmpty()) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">&quot;队列空的，没有数据~~&quot;</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> arr[front + <span class=\"number\">1</span>];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"数组模拟环形队列\"><a href=\"#数组模拟环形队列\" class=\"headerlink\" title=\"数组模拟环形队列\"></a>数组模拟环形队列</h3><p>​    对前面的数组模拟队列的优化，充分利用数组.<br> 因此将数组看做是一个环形的。(通过取模的方<br> 式来实现即可)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CircleQueue</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> maxSize;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span>[] arr; <span class=\"comment\">// 该数组存放数据，模拟队列</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> front; <span class=\"comment\">// 指向队列头部</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> rear; <span class=\"comment\">// 指向队列的尾部</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">CircleArrayQueue</span><span class=\"params\">(<span class=\"keyword\">int</span> arrMaxSize)</span> </span>&#123;</span><br><span class=\"line\">        maxSize = arrMaxSize;</span><br><span class=\"line\">        arr = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[maxSize];</span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isFull</span><span class=\"params\">()</span>  </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//尾索引的下一个为头索引时表示队列满，即将队列容量空出一个作为约定(!!!)</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> (rear + <span class=\"number\">1</span>) % maxSize == front; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isEmpty</span><span class=\"params\">()</span>  </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.tail == <span class=\"keyword\">this</span>.head &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addQueue</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isFull()) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;队列满，无法加入..&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;&#125;</span><br><span class=\"line\">        arr[rear] = n;</span><br><span class=\"line\">        rear = (rear + <span class=\"number\">1</span>) % maxSize;&#125;  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getQueue</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isEmpty()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">&quot;队列空~&quot;</span>);&#125;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> value = arr[front];</span><br><span class=\"line\">        front = (front + <span class=\"number\">1</span>) % maxSize;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> value;&#125;</span><br><span class=\"line\">    <span class=\"comment\">//计算队列有多个元素</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">size</span><span class=\"params\">()</span>  </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (rear + maxSize - front) % maxSize;&#125;&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"二、链表\"><a href=\"#二、链表\" class=\"headerlink\" title=\"二、链表\"></a>二、链表</h2><p>链表是有序的列表，但是它在内存中是存储如下</p>\n<p><img src=\"/2021/01/01/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E6%95%B4%E7%90%86/image-20210101225223666.png\" alt=\"image-20210101225223666\"></p>\n<p>小结:</p>\n<p>1)链表是以节点的方式来存储,是链式存储</p>\n<p>2)每个节点包含 data 域， next 域：指向下一个节点.</p>\n<p>3)如图：发现链表的<strong>各个节点不一定是连续存储</strong>.</p>\n<p>4)链表分带头节点的链表和没有头节点的链表，根据实际的需求来确定</p>\n<h3 id=\"单链表\"><a href=\"#单链表\" class=\"headerlink\" title=\"单链表\"></a>单链表</h3><p><img src=\"/2021/01/01/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E6%95%B4%E7%90%86/image-20210101225427642.png\" alt=\"image-20210101225427642\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//定义SingleLinkedList 管理我们的英雄</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SingleLinkedList</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//先初始化一个头节点, 头节点不要动, 不存放具体的数据</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> HeroNode head = <span class=\"keyword\">new</span> HeroNode(<span class=\"number\">0</span>, <span class=\"string\">&quot;&quot;</span>, <span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//返回头节点</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> HeroNode <span class=\"title\">getHead</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> head;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//添加节点到单向链表</span></span><br><span class=\"line\">    <span class=\"comment\">//思路，当不考虑编号顺序时</span></span><br><span class=\"line\">    <span class=\"comment\">//1. 找到当前链表的最后节点</span></span><br><span class=\"line\">    <span class=\"comment\">//2. 将最后这个节点的next 指向 新的节点</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(HeroNode heroNode)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//因为head节点不能动，因此我们需要一个辅助遍历 temp</span></span><br><span class=\"line\">        HeroNode temp = head;</span><br><span class=\"line\">        <span class=\"comment\">//遍历链表，找到最后</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//找到链表的最后</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (temp.next == <span class=\"keyword\">null</span>) &#123;<span class=\"comment\">//</span></span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//如果没有找到最后, 将将temp后移</span></span><br><span class=\"line\">            temp = temp.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//当退出while循环时，temp就指向了链表的最后</span></span><br><span class=\"line\">        <span class=\"comment\">//将最后这个节点的next 指向 新的节点</span></span><br><span class=\"line\">        temp.next = heroNode;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//第二种方式在添加英雄时，根据排名将英雄插入到指定位置</span></span><br><span class=\"line\">    <span class=\"comment\">//(如果有这个排名，则添加失败，并给出提示)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addByOrder</span><span class=\"params\">(HeroNode heroNode)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//因为头节点不能动，因此我们仍然通过一个辅助指针(变量)来帮助找到添加的位置</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//因为单链表，因为我们找的temp 是位于 添加位置的前一个节点，否则插入不了</span></span><br><span class=\"line\">\t\tHeroNode temp = head;</span><br><span class=\"line\">\t\t<span class=\"keyword\">boolean</span> flag = <span class=\"keyword\">false</span>; <span class=\"comment\">// flag标志添加的编号是否存在，默认为false</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(temp.next == <span class=\"keyword\">null</span>) &#123;<span class=\"comment\">//说明temp已经在链表的最后</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>; <span class=\"comment\">//</span></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(temp.next.no &gt; heroNode.no) &#123; <span class=\"comment\">//位置找到，就在temp的后面插入</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (temp.next.no == heroNode.no) &#123;<span class=\"comment\">//说明希望添加的heroNode的编号已然存在</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\tflag = <span class=\"keyword\">true</span>; <span class=\"comment\">//说明编号存在</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\ttemp = temp.next; <span class=\"comment\">//后移，遍历当前链表</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">//判断flag 的值</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(flag) &#123; <span class=\"comment\">//不能添加，说明编号存在</span></span><br><span class=\"line\">\t\t\tSystem.out.printf(<span class=\"string\">&quot;准备插入的英雄的编号 %d 已经存在了, 不能加入\\n&quot;</span>, heroNode.no);</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//插入到链表中, temp的后面</span></span><br><span class=\"line\">\t\t\theroNode.next = temp.next;</span><br><span class=\"line\">\t\t\ttemp.next = heroNode;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//修改节点的信息, 根据no编号来修改，即no编号不能改.</span></span><br><span class=\"line\">    <span class=\"comment\">//说明</span></span><br><span class=\"line\">    <span class=\"comment\">//1. 根据 newHeroNode 的 no 来修改即可</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">update</span><span class=\"params\">(HeroNode newHeroNode)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//判断是否空</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (head.next == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;链表为空~&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//找到需要修改的节点, 根据no编号</span></span><br><span class=\"line\">        <span class=\"comment\">//定义一个辅助变量</span></span><br><span class=\"line\">        HeroNode temp = head.next;</span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> flag = <span class=\"keyword\">false</span>; <span class=\"comment\">//表示是否找到该节点</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (temp == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>; <span class=\"comment\">//已经遍历完链表</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (temp.no == newHeroNode.no) &#123;</span><br><span class=\"line\">                <span class=\"comment\">//找到</span></span><br><span class=\"line\">                flag = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            temp = temp.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//根据flag 判断是否找到要修改的节点</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (flag) &#123;</span><br><span class=\"line\">            temp.name = newHeroNode.name;</span><br><span class=\"line\">            temp.nickname = newHeroNode.nickname;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123; <span class=\"comment\">//没有找到</span></span><br><span class=\"line\">            System.out.printf(<span class=\"string\">&quot;没有找到 编号 %d 的节点，不能修改\\n&quot;</span>, newHeroNode.no);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//删除节点</span></span><br><span class=\"line\">    <span class=\"comment\">//思路</span></span><br><span class=\"line\">    <span class=\"comment\">//1. head 不能动，因此我们需要一个temp辅助节点找到待删除节点的前一个节点</span></span><br><span class=\"line\">    <span class=\"comment\">//2. 说明我们在比较时，是temp.next.no 和  需要删除的节点的no比较</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">del</span><span class=\"params\">(<span class=\"keyword\">int</span> no)</span> </span>&#123;</span><br><span class=\"line\">        HeroNode temp = head;</span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> flag = <span class=\"keyword\">false</span>; <span class=\"comment\">// 标志是否找到待删除节点的</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (temp.next == <span class=\"keyword\">null</span>) &#123; <span class=\"comment\">//已经到链表的最后</span></span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (temp.next.no == no) &#123;</span><br><span class=\"line\">                <span class=\"comment\">//找到的待删除节点的前一个节点temp</span></span><br><span class=\"line\">                flag = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            temp = temp.next; <span class=\"comment\">//temp后移，遍历</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//判断flag</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (flag) &#123; <span class=\"comment\">//找到</span></span><br><span class=\"line\">            <span class=\"comment\">//可以删除</span></span><br><span class=\"line\">            temp.next = temp.next.next;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            System.out.printf(<span class=\"string\">&quot;要删除的 %d 节点不存在\\n&quot;</span>, no);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//显示链表[遍历]</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">list</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//判断链表是否为空</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(head.next == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">&quot;链表为空&quot;</span>);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">//因为头节点，不能动，因此我们需要一个辅助变量来遍历</span></span><br><span class=\"line\">\t\tHeroNode temp = head.next;</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//判断是否到链表最后</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(temp == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//输出节点的信息</span></span><br><span class=\"line\">\t\t\tSystem.out.println(temp);</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//将temp后移， 一定小心</span></span><br><span class=\"line\">\t\t\ttemp = temp.next;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//定义HeroNode ， 每个HeroNode 对象就是一个节点</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HeroNode</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> no;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> String name;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> String nickname;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> HeroNode next; <span class=\"comment\">//指向下一个节点</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//构造器</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">HeroNode</span><span class=\"params\">(<span class=\"keyword\">int</span> no, String name, String nickname)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.no = no;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.nickname = nickname;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//为了显示方法，我们重新toString</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;HeroNode [no=&quot;</span> + no + <span class=\"string\">&quot;, name=&quot;</span> + name + <span class=\"string\">&quot;, nickname=&quot;</span> + nickname + <span class=\"string\">&quot;]&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4 id=\"1-求单链表的有效节点个数\"><a href=\"#1-求单链表的有效节点个数\" class=\"headerlink\" title=\"1.求单链表的有效节点个数\"></a>1.求单链表的有效节点个数</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//方法：获取到单链表的节点的个数(如果是带头结点的链表，需求不统计头节点)</span></span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@param</span> head 链表的头节点</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@return</span> 返回的就是有效节点的个数</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">getLength</span><span class=\"params\">(HeroNode head)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(head.next == <span class=\"keyword\">null</span>) &#123; <span class=\"comment\">//空链表</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> length = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"comment\">//定义一个辅助的变量, 这里我们没有统计头节点</span></span><br><span class=\"line\">\tHeroNode cur = head.next;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(cur != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\tlength++;</span><br><span class=\"line\">\t\tcur = cur.next; <span class=\"comment\">//遍历</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> length;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-查找单链表中的倒数第k个结点\"><a href=\"#2-查找单链表中的倒数第k个结点\" class=\"headerlink\" title=\"2.查找单链表中的倒数第k个结点\"></a>2.查找单链表中的倒数第k个结点</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\t<span class=\"comment\">//查找单链表中的倒数第k个结点 【新浪面试题】</span></span><br><span class=\"line\">    <span class=\"comment\">//思路</span></span><br><span class=\"line\">    <span class=\"comment\">//1. 编写一个方法，接收head节点，同时接收一个index</span></span><br><span class=\"line\">    <span class=\"comment\">//2. index 表示是倒数第index个节点</span></span><br><span class=\"line\">    <span class=\"comment\">//3. 先把链表从头到尾遍历，得到链表的总的长度 getLength</span></span><br><span class=\"line\">    <span class=\"comment\">//4. 得到size 后，我们从链表的第一个开始遍历 (size-index)个，就可以得到</span></span><br><span class=\"line\">    <span class=\"comment\">//5. 如果找到了，则返回该节点，否则返回nulll</span></span><br><span class=\"line\"><span class=\"comment\">//判断如果链表为空，返回null</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(head.next == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;<span class=\"comment\">//没有找到</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">//第一个遍历得到链表的长度(节点个数)</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> size = getLength(head);</span><br><span class=\"line\">\t\t<span class=\"comment\">//第二次遍历  size-index 位置，就是我们倒数的第K个节点</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//先做一个index的校验</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(index &lt;=<span class=\"number\">0</span> || index &gt; size) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">//定义给辅助变量， for 循环定位到倒数的index</span></span><br><span class=\"line\">\t\tHeroNode cur = head.next; <span class=\"comment\">//3 // 3 - 1 = 2</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i =<span class=\"number\">0</span>; i&lt; size - index; i++) &#123;</span><br><span class=\"line\">\t\t\tcur = cur.next;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> cur;</span><br><span class=\"line\">\t\t&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"3-单链表的反转\"><a href=\"#3-单链表的反转\" class=\"headerlink\" title=\"3.单链表的反转\"></a>3.单链表的反转</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//将单链表反转</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">reversetList</span><span class=\"params\">(HeroNode head)</span> </span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">//如果当前链表为空，或者只有一个节点，无需反转，直接返回</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (head.next == <span class=\"keyword\">null</span> || head.next.next == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">//定义一个辅助的指针(变量)，帮助我们遍历原来的链表</span></span><br><span class=\"line\">      HeroNode cur = head.next;</span><br><span class=\"line\">      HeroNode next = <span class=\"keyword\">null</span>;<span class=\"comment\">// 指向当前节点[cur]的下一个节点</span></span><br><span class=\"line\">      HeroNode reverseHead = <span class=\"keyword\">new</span> HeroNode(<span class=\"number\">0</span>, <span class=\"string\">&quot;&quot;</span>, <span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">      <span class=\"comment\">//遍历原来的链表，每遍历一个节点，就将其取出，并放在新的链表reverseHead 的最前端</span></span><br><span class=\"line\">      <span class=\"comment\">//动脑筋</span></span><br><span class=\"line\">      <span class=\"keyword\">while</span> (cur != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">          next = cur.next;<span class=\"comment\">//先暂时保存当前节点的下一个节点，因为后面需要使用</span></span><br><span class=\"line\">          cur.next = reverseHead.next;<span class=\"comment\">//将cur的下一个节点指向新的链表的最前端</span></span><br><span class=\"line\">          reverseHead.next = cur; <span class=\"comment\">//将cur 连接到新的链表上</span></span><br><span class=\"line\">          cur = next;<span class=\"comment\">//让cur后移</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"comment\">//将head.next 指向 reverseHead.next , 实现单链表的反转</span></span><br><span class=\"line\">      head.next = reverseHead.next;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"4-从尾到头打印单链表\"><a href=\"#4-从尾到头打印单链表\" class=\"headerlink\" title=\"4.从尾到头打印单链表\"></a>4.从尾到头打印单链表</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//方式2：</span></span><br><span class=\"line\">   <span class=\"comment\">//可以利用栈这个数据结构，将各个节点压入到栈中，然后利用栈的先进后出的特点，就实现了逆序打印的效果</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">reversePrint</span><span class=\"params\">(HeroNode head)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(head.next == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>;<span class=\"comment\">//空链表，不能打印</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//创建要给一个栈，将各个节点压入栈</span></span><br><span class=\"line\">\tStack&lt;HeroNode&gt; stack = <span class=\"keyword\">new</span> Stack&lt;HeroNode&gt;();</span><br><span class=\"line\">\tHeroNode cur = head.next;</span><br><span class=\"line\">\t<span class=\"comment\">//将链表的所有节点压入栈</span></span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(cur != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\tstack.push(cur);</span><br><span class=\"line\">\t\tcur = cur.next; <span class=\"comment\">//cur后移，这样就可以压入下一个节点</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//将栈中的节点进行打印,pop 出栈</span></span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (stack.size() &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\tSystem.out.println(stack.pop()); <span class=\"comment\">//stack的特点是先进后出</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"双端链表\"><a href=\"#双端链表\" class=\"headerlink\" title=\"双端链表\"></a>双端链表</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 创建一个双向链表的类</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DoubleLinkedList</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 先初始化一个头节点, 头节点不要动, 不存放具体的数据</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> HeroNode2 head = <span class=\"keyword\">new</span> HeroNode2(<span class=\"number\">0</span>, <span class=\"string\">&quot;&quot;</span>, <span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 返回头节点</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> HeroNode2 <span class=\"title\">getHead</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> head;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 遍历双向链表的方法</span></span><br><span class=\"line\">    <span class=\"comment\">// 显示链表[遍历]</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">list</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 判断链表是否为空</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (head.next == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;链表为空&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 因为头节点，不能动，因此我们需要一个辅助变量来遍历</span></span><br><span class=\"line\">        HeroNode2 temp = head.next;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 判断是否到链表最后</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (temp == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// 输出节点的信息</span></span><br><span class=\"line\">            System.out.println(temp);</span><br><span class=\"line\">            <span class=\"comment\">// 将temp后移， 一定小心</span></span><br><span class=\"line\">            temp = temp.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addByorder</span><span class=\"params\">(HeroNode2 heroNode)</span> </span>&#123;</span><br><span class=\"line\">        HeroNode2 temp = head;</span><br><span class=\"line\">        Boolean flag = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (temp.next == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (temp.next.no &gt; heroNode.no) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (temp.next.no == heroNode.no) &#123;</span><br><span class=\"line\">                flag = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            temp = temp.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (flag) &#123;</span><br><span class=\"line\">            System.out.printf(<span class=\"string\">&quot;准备插入的英雄的编号 %d 已经存在了, 不能加入\\n&quot;</span>, heroNode.no);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//大坑，需要先将temp.next保存起来防止结构变动影响pre指针</span></span><br><span class=\"line\">            HeroNode2 s1 = temp.next;</span><br><span class=\"line\">            heroNode.next = temp.next;</span><br><span class=\"line\">            temp.next = heroNode;</span><br><span class=\"line\"></span><br><span class=\"line\">            heroNode.pre = temp;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (s1 != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">                s1.pre = heroNode;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 添加一个节点到双向链表的最后.</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(HeroNode2 heroNode)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 因为head节点不能动，因此我们需要一个辅助遍历 temp</span></span><br><span class=\"line\">        HeroNode2 temp = head;</span><br><span class=\"line\">        <span class=\"comment\">// 遍历链表，找到最后</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 找到链表的最后</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (temp.next == <span class=\"keyword\">null</span>) &#123;<span class=\"comment\">//</span></span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// 如果没有找到最后, 将将temp后移</span></span><br><span class=\"line\">            temp = temp.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 当退出while循环时，temp就指向了链表的最后</span></span><br><span class=\"line\">        <span class=\"comment\">// 形成一个双向链表</span></span><br><span class=\"line\">        temp.next = heroNode;</span><br><span class=\"line\">        heroNode.pre = temp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 修改一个节点的内容, 可以看到双向链表的节点内容修改和单向链表一样</span></span><br><span class=\"line\">    <span class=\"comment\">// 只是 节点类型改成 HeroNode2</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">update</span><span class=\"params\">(HeroNode2 newHeroNode)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 判断是否空</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (head.next == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;链表为空~&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 找到需要修改的节点, 根据no编号</span></span><br><span class=\"line\">        <span class=\"comment\">// 定义一个辅助变量</span></span><br><span class=\"line\">        HeroNode2 temp = head.next;</span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> flag = <span class=\"keyword\">false</span>; <span class=\"comment\">// 表示是否找到该节点</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (temp == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>; <span class=\"comment\">// 已经遍历完链表</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (temp.no == newHeroNode.no) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 找到</span></span><br><span class=\"line\">                flag = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            temp = temp.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 根据flag 判断是否找到要修改的节点</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (flag) &#123;</span><br><span class=\"line\">            temp.name = newHeroNode.name;</span><br><span class=\"line\">            temp.nickname = newHeroNode.nickname;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123; <span class=\"comment\">// 没有找到</span></span><br><span class=\"line\">            System.out.printf(<span class=\"string\">&quot;没有找到 编号 %d 的节点，不能修改\\n&quot;</span>, newHeroNode.no);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 从双向链表中删除一个节点,</span></span><br><span class=\"line\">    <span class=\"comment\">// 说明</span></span><br><span class=\"line\">    <span class=\"comment\">// 1 对于双向链表，我们可以直接找到要删除的这个节点</span></span><br><span class=\"line\">    <span class=\"comment\">// 2 找到后，自我删除即可</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">del</span><span class=\"params\">(<span class=\"keyword\">int</span> no)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 判断当前链表是否为空</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (head.next == <span class=\"keyword\">null</span>) &#123;<span class=\"comment\">// 空链表</span></span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;链表为空，无法删除&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        HeroNode2 temp = head.next; <span class=\"comment\">// 辅助变量(指针)</span></span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> flag = <span class=\"keyword\">false</span>; <span class=\"comment\">// 标志是否找到待删除节点的</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (temp == <span class=\"keyword\">null</span>) &#123; <span class=\"comment\">// 已经到链表的最后</span></span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (temp.no == no) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 找到的待删除节点的前一个节点temp</span></span><br><span class=\"line\">                flag = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            temp = temp.next; <span class=\"comment\">// temp后移，遍历</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 判断flag</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (flag) &#123; <span class=\"comment\">// 找到</span></span><br><span class=\"line\">            <span class=\"comment\">// 可以删除</span></span><br><span class=\"line\">            <span class=\"comment\">// temp.next = temp.next.next;[单向链表]</span></span><br><span class=\"line\">            temp.pre.next = temp.next;</span><br><span class=\"line\">            <span class=\"comment\">// 这里我们的代码有问题?</span></span><br><span class=\"line\">            <span class=\"comment\">// 如果是最后一个节点，就不需要执行下面这句话，否则出现空指针</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (temp.next != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                temp.next.pre = temp.pre;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            System.out.printf(<span class=\"string\">&quot;要删除的 %d 节点不存在\\n&quot;</span>, no);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 定义HeroNode2 ， 每个HeroNode 对象就是一个节点</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HeroNode2</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> no;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> String name;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> String nickname;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> HeroNode2 next; <span class=\"comment\">// 指向下一个节点, 默认为null</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> HeroNode2 pre; <span class=\"comment\">// 指向前一个节点, 默认为null</span></span><br><span class=\"line\">    <span class=\"comment\">// 构造器</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">HeroNode2</span><span class=\"params\">(<span class=\"keyword\">int</span> no, String name, String nickname)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.no = no;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.nickname = nickname;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 为了显示方法，我们重新toString</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;HeroNode [no=&quot;</span> + no + <span class=\"string\">&quot;, name=&quot;</span> + name + <span class=\"string\">&quot;, nickname=&quot;</span> + nickname + <span class=\"string\">&quot;]&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"单向环形链表\"><a href=\"#单向环形链表\" class=\"headerlink\" title=\"单向环形链表\"></a>单向环形链表</h3><h4 id=\"Josephu-问题\"><a href=\"#Josephu-问题\" class=\"headerlink\" title=\"Josephu 问题\"></a>Josephu 问题</h4><p>Josephu 问题为：设编号为1，2，… n的n个人围坐一圈，约定编号为k（1&lt;=k&lt;=n）的人从1开始报数，数到m 的那个人出列，它的下一位又从1开始报数，数到m的那个人又出列，依次类推，直到所有人出列为止，由此产生一个出队编号的序列。</p>\n<p><strong>提示</strong></p>\n<p>用一个不带头结点的循环链表来处理Josephu 问题：先构成一个有n个结点的单循环链表，然后由k结点起从1开始计数，计到m时，对应结点从链表中删除，然后再从被删除结点的下一个结点又从1开始计数，直到最后一个结点从链表中删除算法结束。</p>\n<p>单向环形列表代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 创建一个环形的单向链表</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CircleSingleLinkedList</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 创建一个first节点,当前没有编号</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Boy first = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 添加小孩节点，构建成一个环形的链表</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addBoy</span><span class=\"params\">(<span class=\"keyword\">int</span> nums)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// nums 做一个数据校验</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (nums &lt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;nums的值不正确&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        Boy curBoy = <span class=\"keyword\">null</span>; <span class=\"comment\">//辅助指针，帮助构建环形链表</span></span><br><span class=\"line\">        <span class=\"comment\">//使用for来创建我们的环形链表</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= nums; i++) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//根据编号，创建小孩节点</span></span><br><span class=\"line\">            Boy boy = <span class=\"keyword\">new</span> Boy(i);</span><br><span class=\"line\">            <span class=\"comment\">//如果是第一个小孩</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                first = boy;</span><br><span class=\"line\">                first.setNext(first); <span class=\"comment\">//构成环</span></span><br><span class=\"line\">                curBoy = first; <span class=\"comment\">//</span></span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                curBoy.setNext(boy);</span><br><span class=\"line\">                boy.setNext(first);</span><br><span class=\"line\">                curBoy = boy;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//遍历当前的环形链表</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">showBoy</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//判断链表是否为空</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (first == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;没有任何小孩~~~&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 因为first不能动，因此我们仍然使用一个辅助指针完成遍历</span></span><br><span class=\"line\">        Boy curBoy = first;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">            System.out.printf(<span class=\"string\">&quot;小孩的编号 %d \\n&quot;</span>, curBoy.getNo());</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (curBoy.getNext() == first) &#123;<span class=\"comment\">// 说明已经遍历完毕</span></span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            curBoy = curBoy.getNext(); <span class=\"comment\">// curBoy后移</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//根据用户的输入，计算出小孩出圈的顺序</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> startNo  表示从第几个小孩开始数数</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> countNum 表示数几下</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> nums     表示最初有多少小孩在圈中</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">countBoy</span><span class=\"params\">(<span class=\"keyword\">int</span> startNo, <span class=\"keyword\">int</span> countNum, <span class=\"keyword\">int</span> nums)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 先对数据进行校验</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (first == <span class=\"keyword\">null</span> || startNo &lt; <span class=\"number\">1</span> || startNo &gt; nums) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;参数输入有误， 请重新输入&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 创建要给辅助指针,帮助完成小孩出圈</span></span><br><span class=\"line\">        Boy helper = first;</span><br><span class=\"line\">        <span class=\"comment\">// 需求创建一个辅助指针(变量) helper , 事先应该指向环形链表的最后这个节点</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (helper.getNext() == first) &#123;<span class=\"comment\">// 说明helper指向最后小孩节点</span></span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            helper = helper.getNext();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//小孩报数前，先让 first 和  helper 移动 k - 1次</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; startNo - <span class=\"number\">1</span>; j++) &#123;</span><br><span class=\"line\">            first = first.getNext();</span><br><span class=\"line\">            helper = helper.getNext();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//当小孩报数时，让first 和 helper 指针同时 的移动  m  - 1 次, 然后出圈</span></span><br><span class=\"line\">        <span class=\"comment\">//这里是一个循环操作，知道圈中只有一个节点</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (helper == first) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//让 first 和 helper 指针同时 的移动 countNum - 1</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; countNum - <span class=\"number\">1</span>; j++) &#123;</span><br><span class=\"line\">                first = first.getNext();</span><br><span class=\"line\">                helper = helper.getNext();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//这时first指向的节点，就是要出圈的小孩节点</span></span><br><span class=\"line\">            System.out.printf(<span class=\"string\">&quot;小孩%d出圈\\n&quot;</span>, first.getNo());</span><br><span class=\"line\">            <span class=\"comment\">//这时将first指向的小孩节点出圈</span></span><br><span class=\"line\">            first = first.getNext();</span><br><span class=\"line\">            helper.setNext(first); <span class=\"comment\">//</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.printf(<span class=\"string\">&quot;最后留在圈中的小孩编号%d \\n&quot;</span>, first.getNo());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创建一个By类，表示一个节点</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Boy</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> no;<span class=\"comment\">// 编号</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Boy next; <span class=\"comment\">// 指向下一个节点,默认null</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Boy</span><span class=\"params\">(<span class=\"keyword\">int</span> no)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.no = no;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getNo</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> no;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setNo</span><span class=\"params\">(<span class=\"keyword\">int</span> no)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.no = no;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Boy <span class=\"title\">getNext</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setNext</span><span class=\"params\">(Boy next)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.next = next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"三、栈\"><a href=\"#三、栈\" class=\"headerlink\" title=\"三、栈\"></a>三、栈</h2><p>栈的介绍：</p>\n<p>1)栈的英文为(stack)</p>\n<p>2)栈是一个<strong>先入后出</strong>(FILO-First In Last Out)的有序列表。</p>\n<p>3)栈(stack)是限制线性表中元素的插入和删除<strong>只能在线性表的同一端</strong>进行的一种特殊线性表。允许插入和删除的一端，为变化的一端，称为<strong>栈顶</strong>(Top)，另一端为固定的一端，称为<strong>栈底</strong>(Bottom)。</p>\n<p>4)根据栈的定义可知，最先放入栈中元素在栈底，最后放入的元素在栈顶，而删除元素刚好相反，最后放入的元素最先删除，最先放入的元素最后删除</p>\n<p>5)出栈(pop)和入栈(push)的概念(如图所示)</p>\n<p><img src=\"/2021/01/01/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E6%95%B4%E7%90%86/image-20210102132901736.png\" alt=\"image-20210102132901736\"><img src=\"/2021/01/01/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E6%95%B4%E7%90%86/image-20210102132915893.png\" alt=\"image-20210102132915893\"></p>\n<p>栈的应用场景：</p>\n<p>1)子程序的调用：在跳往子程序前，会先将下个指令的地址存到堆栈中，直到子程序执行完后再将地址取出，以回到原来的程序中。  </p>\n<p>2)处理递归调用：和子程序的调用类似，只是除了储存下一个指令的地址外，也将参数、区域变量等数据存入堆栈中。</p>\n<p>3)表达式的转换[中缀表达式转后缀表达式]与求值(实际解决)。</p>\n<p>4)二叉树的遍历。</p>\n<p>5)图形的深度优先(depth一first)搜索法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//定义一个 ArrayStack 表示栈</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ArrayStack</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> maxSize; <span class=\"comment\">// 栈的大小</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span>[] stack; <span class=\"comment\">// 数组，数组模拟栈，数据就放在该数组</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> top = -<span class=\"number\">1</span>;<span class=\"comment\">// top表示栈顶，初始化为-1</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//构造器</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ArrayStack</span><span class=\"params\">(<span class=\"keyword\">int</span> maxSize)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.maxSize = maxSize;</span><br><span class=\"line\">\t\tstack = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"keyword\">this</span>.maxSize];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//栈满</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isFull</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> top == maxSize - <span class=\"number\">1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//栈空</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isEmpty</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> top == -<span class=\"number\">1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//入栈-push</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">push</span><span class=\"params\">(<span class=\"keyword\">int</span> value)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//先判断栈是否满</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(isFull()) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">&quot;栈满&quot;</span>);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\ttop++;</span><br><span class=\"line\">\t\tstack[top] = value;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//出栈-pop, 将栈顶的数据返回</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">pop</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//先判断栈是否空</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(isEmpty()) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//抛出异常</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">&quot;栈空，没有数据~&quot;</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> value = stack[top];</span><br><span class=\"line\">\t\ttop--;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> value;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//显示栈的情况[遍历栈]， 遍历时，需要从栈顶开始显示数据</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">list</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(isEmpty()) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">&quot;栈空，没有数据~~&quot;</span>);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">//需要从栈顶开始显示数据</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = top; i &gt;= <span class=\"number\">0</span> ; i--) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.printf(<span class=\"string\">&quot;stack[%d]=%d\\n&quot;</span>, i, stack[i]);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"四、递归\"><a href=\"#四、递归\" class=\"headerlink\" title=\"四、递归\"></a>四、递归</h2><p>简单的说: 递归就是方法自己调用自己,每次调用时传入不同的变量，递归有助于编程者解决复杂的问题,同时可以让代码变得简洁。</p>\n<p>阶乘问题:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//阶乘问题</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">factorial</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (n == <span class=\"number\">1</span>) &#123; </span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> factorial(n - <span class=\"number\">1</span>) * n; <span class=\"comment\">// 1 * 2 * 3</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>迷宫问题：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> recursion;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MiGong</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 先创建一个二维数组，模拟迷宫</span></span><br><span class=\"line\">        <span class=\"comment\">// 地图</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span>[][] map = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">8</span>][<span class=\"number\">7</span>];</span><br><span class=\"line\">        <span class=\"comment\">// 使用1 表示墙</span></span><br><span class=\"line\">        <span class=\"comment\">// 上下全部置为1</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">7</span>; i++) &#123;</span><br><span class=\"line\">            map[<span class=\"number\">0</span>][i] = <span class=\"number\">1</span>;</span><br><span class=\"line\">            map[<span class=\"number\">7</span>][i] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 左右全部置为1</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">8</span>; i++) &#123;</span><br><span class=\"line\">            map[i][<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">            map[i][<span class=\"number\">6</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//设置挡板, 1 表示</span></span><br><span class=\"line\">        map[<span class=\"number\">3</span>][<span class=\"number\">1</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        map[<span class=\"number\">3</span>][<span class=\"number\">2</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"comment\">//\t\tmap[1][2] = 1;</span></span><br><span class=\"line\"><span class=\"comment\">//\t\tmap[2][2] = 1;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 输出地图</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;地图的情况&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">8</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; <span class=\"number\">7</span>; j++) &#123;</span><br><span class=\"line\">                System.out.print(map[i][j] + <span class=\"string\">&quot; &quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            System.out.println();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//使用递归回溯给小球找路</span></span><br><span class=\"line\">        setWay(map, <span class=\"number\">1</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"comment\">//setWay2(map, 1, 1);</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//输出新的地图, 小球走过，并标识过的递归</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;小球走过，并标识过的 地图的情况&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">8</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; <span class=\"number\">7</span>; j++) &#123;</span><br><span class=\"line\">                System.out.print(map[i][j] + <span class=\"string\">&quot; &quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            System.out.println();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//使用递归回溯来给小球找路</span></span><br><span class=\"line\">    <span class=\"comment\">//说明</span></span><br><span class=\"line\">    <span class=\"comment\">//1. map 表示地图</span></span><br><span class=\"line\">    <span class=\"comment\">//2. i,j 表示从地图的哪个位置开始出发 (1,1)</span></span><br><span class=\"line\">    <span class=\"comment\">//3. 如果小球能到 map[6][5] 位置，则说明通路找到.</span></span><br><span class=\"line\">    <span class=\"comment\">//4. 约定： 当map[i][j] 为 0 表示该点没有走过 当为 1 表示墙  ； 2 表示通路可以走 ； 3 表示该点已经走过，但是走不通</span></span><br><span class=\"line\">    <span class=\"comment\">//5. 在走迷宫时，需要确定一个策略(方法) 下-&gt;右-&gt;上-&gt;左 , 如果该点走不通，再回溯</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> map 表示地图</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> i   从哪个位置开始找</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> j</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 如果找到通路，就返回true, 否则返回false</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">setWay</span><span class=\"params\">(<span class=\"keyword\">int</span>[][] map, <span class=\"keyword\">int</span> i, <span class=\"keyword\">int</span> j)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (map[<span class=\"number\">6</span>][<span class=\"number\">5</span>] == <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (map[i][j] == <span class=\"number\">0</span>) &#123; <span class=\"comment\">//如果当前这个点还没有走过</span></span><br><span class=\"line\">                <span class=\"comment\">//按照策略 下-&gt;右-&gt;上-&gt;左</span></span><br><span class=\"line\">                map[i][j] = <span class=\"number\">2</span>; <span class=\"comment\">// 假定该点是可以走通.</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (setWay(map, i + <span class=\"number\">1</span>, j)) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (setWay(map, i, j + <span class=\"number\">1</span>)) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (setWay(map, i - <span class=\"number\">1</span>, j)) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (setWay(map, i, j - <span class=\"number\">1</span>)) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    <span class=\"comment\">//说明该点是走不通，是死路</span></span><br><span class=\"line\">                    map[i][j] = <span class=\"number\">3</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//修改找路的策略，改成 上-&gt;右-&gt;下-&gt;左</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">setWay2</span><span class=\"params\">(<span class=\"keyword\">int</span>[][] map, <span class=\"keyword\">int</span> i, <span class=\"keyword\">int</span> j)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (map[<span class=\"number\">6</span>][<span class=\"number\">5</span>] == <span class=\"number\">2</span>) &#123; <span class=\"comment\">// 通路已经找到ok</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (map[i][j] == <span class=\"number\">0</span>) &#123; <span class=\"comment\">//如果当前这个点还没有走过</span></span><br><span class=\"line\">                <span class=\"comment\">//按照策略 上-&gt;右-&gt;下-&gt;左</span></span><br><span class=\"line\">                map[i][j] = <span class=\"number\">2</span>; <span class=\"comment\">// 假定该点是可以走通.</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (setWay2(map, i - <span class=\"number\">1</span>, j)) &#123;<span class=\"comment\">//向上走</span></span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (setWay2(map, i, j + <span class=\"number\">1</span>)) &#123; <span class=\"comment\">//向右走</span></span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (setWay2(map, i + <span class=\"number\">1</span>, j)) &#123; <span class=\"comment\">//向下</span></span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (setWay2(map, i, j - <span class=\"number\">1</span>)) &#123; <span class=\"comment\">// 向左走</span></span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    <span class=\"comment\">//说明该点是走不通，是死路</span></span><br><span class=\"line\">                    map[i][j] = <span class=\"number\">3</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123; <span class=\"comment\">// 如果map[i][j] != 0 , 可能是 1， 2， 3</span></span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>八皇后问题：</p>\n<p>​    八皇后问题，是一个古老而著名的问题，是<strong>回溯算法的典型案例</strong>。该问题是国际西洋棋棋手马克斯·贝瑟尔于1848年提出：在8×8格的国际象棋上摆放八个皇后，使其不能互相攻击，即：任意两个皇后都不能处于同一行、同一列或同一斜线上，问有多少种摆法。【92】</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> recursion;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Queen8</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//定义一个max表示共有多少个皇后</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> max = <span class=\"number\">8</span>;</span><br><span class=\"line\">    <span class=\"comment\">//定义数组array, 保存皇后放置位置的结果,比如 arr = &#123;0 , 4, 7, 5, 2, 6, 1, 3&#125;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span>[] array = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[max];</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> judgeCount = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//测试一把 ， 8皇后是否正确</span></span><br><span class=\"line\">        Queen8 queen8 = <span class=\"keyword\">new</span> Queen8();</span><br><span class=\"line\">        queen8.check(<span class=\"number\">0</span>);</span><br><span class=\"line\">        System.out.printf(<span class=\"string\">&quot;一共有%d解法&quot;</span>, count);</span><br><span class=\"line\">        System.out.printf(<span class=\"string\">&quot;一共判断冲突的次数%d次&quot;</span>, judgeCount); <span class=\"comment\">// 1.5w</span></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//编写一个方法，放置第n个皇后</span></span><br><span class=\"line\">    <span class=\"comment\">//特别注意： check 是 每一次递归时，进入到check中都有  for(int i = 0; i &lt; max; i++)，因此会有回溯</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">check</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (n == max) &#123;  <span class=\"comment\">//n = 8 , 其实8个皇后就既然放好</span></span><br><span class=\"line\">            print();</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//依次放入皇后，并判断是否冲突</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; max; i++) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//先把当前这个皇后 n , 放到该行的第1列</span></span><br><span class=\"line\">            array[n] = i;</span><br><span class=\"line\">            <span class=\"comment\">//判断当放置第n个皇后到i列时，是否冲突</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (judge(n)) &#123; <span class=\"comment\">// 不冲突</span></span><br><span class=\"line\">                <span class=\"comment\">//接着放n+1个皇后,即开始递归</span></span><br><span class=\"line\">                check(n + <span class=\"number\">1</span>); <span class=\"comment\">//</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//如果冲突，就继续执行 array[n] = i; 即将第n个皇后，放置在本行得 后移的一个位置</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//查看当我们放置第n个皇后，就去检查该皇后是否和前面已经摆放的皇后冲突</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">judge</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//说明</span></span><br><span class=\"line\">        <span class=\"comment\">//1.array[i] == array[n] 表示判断第n个皇后是否和前面的n-1个皇后在同一列</span></span><br><span class=\"line\">        <span class=\"comment\">//2.Math.abs(array[n] - array[i]) 表示判断第n个皇后和第i个皇后是否再同一斜线</span></span><br><span class=\"line\">        <span class=\"comment\">// n = 1  放置第 2列 1 n = 1 array[1] = 1</span></span><br><span class=\"line\">        <span class=\"comment\">// Math.abs(1-0) == 1  Math.abs(array[n] - array[i]) = Math.abs(1-0) = 1</span></span><br><span class=\"line\">        <span class=\"comment\">//3. 判断是否在同一行, 没有必要，n 每次都在递增</span></span><br><span class=\"line\">        judgeCount++;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (array[i] == array[n] || Math.abs(n - i) == Math.abs(array[n] - array[i])) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//写一个方法，可以将皇后摆放的位置输出</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">print</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        count++;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; array.length; i++) &#123;</span><br><span class=\"line\">            System.out.print(array[i] + <span class=\"string\">&quot; &quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"五、算法的时间复杂度及空间复杂度\"><a href=\"#五、算法的时间复杂度及空间复杂度\" class=\"headerlink\" title=\"五、算法的时间复杂度及空间复杂度\"></a>五、算法的时间复杂度及空间复杂度</h2><p><strong>时间复杂度</strong></p>\n<p>1)一般情况下，算法中的基本操作语句的重复执行次数是问题规模n的某个函数，用T(n)表示，若有某个辅助函数f(n)，使得当n趋近于无穷大时，T(n) / f(n) 的极限值为不等于零的常数，则称f(n)是T(n)的同数量级函数。记作 T(n)=Ｏ( f(n) )，称Ｏ( f(n) ) 为算法的渐进时间复杂度，简称时间复杂度。</p>\n<p>2)T(n) 不同，但时间复杂度可能相同。 如：T(n)=n²+7n+6 与 T(n)=3n²+2n+2 它们的T(n) 不同，但时间复杂度相同，都为O(n²)。</p>\n<p>3)计算时间复杂度的方法：</p>\n<p>​    •用常数1代替运行时间中的所有加法常数 T(n)=n²+7n+6  =&gt; T(n)=n²+7n+1</p>\n<p>​    •修改后的运行次数函数中，只保留最高阶项 T(n)=n²+7n+1 =&gt; T(n) = n²</p>\n<p>​    •去除最高阶项的系数 T(n) = n² =&gt; T(n) = n² =&gt; O(n²)</p>\n<p><strong>1/常见的算法的时间复杂度</strong></p>\n<p>1)常数阶O(1)</p>\n<p>2)对数阶O(<strong>log2n</strong>)</p>\n<p>3)线性阶O(n)</p>\n<p>4)线性对数阶O(n<strong>log2n</strong>)</p>\n<p>5)平方阶O(n^2)</p>\n<p>6)立方阶O(n^3)</p>\n<p>7)k次方阶O(n^k)</p>\n<p>8)指数阶O(2^n)</p>\n<p><img src=\"/2021/01/01/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E6%95%B4%E7%90%86/image-20210102141112949.png\" alt=\"image-20210102141112949\"></p>\n<p><strong>说明</strong>：</p>\n<p>•常见的算法时间复杂度由小到大依次为：Ο(1)＜Ο(log2n)＜Ο(n)＜Ο(nlog2n)＜Ο(n2)＜Ο(n3)＜Ο(nk) ＜Ο(2n) ，随着问题规模n的不断增大，上述时间复杂度不断增大，算法的执行效率越低</p>\n<p>•从图中可见，我们应该尽可能避免使用指数阶的算法</p>\n<h3 id=\"1-常数阶O-1\"><a href=\"#1-常数阶O-1\" class=\"headerlink\" title=\"1)常数阶O(1)\"></a>1)常数阶O(1)</h3><p>无论代码执行了多少行，只要是没有循环等复杂结构，那这个代码的时间复杂度就都是O(1)</p>\n<p><img src=\"/2021/01/01/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E6%95%B4%E7%90%86/image-20210102141307586.png\" alt=\"image-20210102141307586\"></p>\n<p>上述代码在执行的时候，它消耗的时候并不随着某个变量的增长而增长，那么无论这类代码有多长，即使有几万几十万行，都可以用O(1)来表示它的时间复杂度。</p>\n<p><strong>常见的时间复杂度</strong></p>\n<h3 id=\"2-对数阶O-log2n\"><a href=\"#2-对数阶O-log2n\" class=\"headerlink\" title=\"2)对数阶O(log2n)\"></a>2)对数阶O(log2<sup>n</sup>)</h3><p>注：</p>\n<p><img src=\"/2021/01/01/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E6%95%B4%E7%90%86/image-20210102141540407.png\" alt=\"image-20210102141540407\"></p>\n<p><img src=\"/2021/01/01/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E6%95%B4%E7%90%86/image-20210102141434749.png\" alt=\"image-20210102141434749\"></p>\n<p><strong>说明</strong>：在while循环里面，每次都将 i 乘以 2，乘完之后，i 距离 n 就越来越近了。假设循环x次之后，i 就大于 2 了，此时这个循环就退出了，也就是说 2 的 x 次方等于 n，那么 x = log2^n也就是说当循环 log2^n 次以后，这个代码就结束了。因此这个代码的时间复杂度为：O(log2^n) 。 O(log2^n) 的这个2 时间上是根据代码变化的，i = i * 3 ，则是 O(log3^n)。</p>\n<h3 id=\"3-线性阶O-n\"><a href=\"#3-线性阶O-n\" class=\"headerlink\" title=\"3)线性阶O(n)\"></a>3)线性阶O(n)</h3><p><img src=\"/2021/01/01/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E6%95%B4%E7%90%86/image-20210102141959933.png\" alt=\"image-20210102141959933\"></p>\n<p><strong>说明</strong>：这段代码，for循环里面的代码会执行n遍，因此它消耗的时间是随着n的变化而变化的，因此这类代码都可以用O(n)来表示它的时间复杂度</p>\n<h3 id=\"4-线性对数阶O-nlogN\"><a href=\"#4-线性对数阶O-nlogN\" class=\"headerlink\" title=\"4)线性对数阶O(nlogN)\"></a>4)线性对数阶O(nlogN)</h3><p><img src=\"/2021/01/01/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E6%95%B4%E7%90%86/image-20210102142138277.png\" alt=\"image-20210102142138277\"></p>\n<p><strong>说明</strong>：线性对数阶O(nlogN) 其实非常容易理解，将时间复杂度为O(logn)的代码循环N遍的话，那么它的时间复杂度就是 n * O(logN)，也就是了O(nlogN)</p>\n<h3 id=\"5-平方阶O-n²\"><a href=\"#5-平方阶O-n²\" class=\"headerlink\" title=\"5)平方阶O(n²)\"></a>5)平方阶O(n²)</h3><p><img src=\"/2021/01/01/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E6%95%B4%E7%90%86/image-20210102163741163.png\" alt=\"image-20210102163741163\"></p>\n<p><strong>说明</strong>：平方阶O(n²) 就更容易理解了，如果把 O(n) 的代码再嵌套循环一遍，它的时间复杂度就是 O(n²)，这段代码其实就是嵌套了2层n循环，它的时间复杂度就是 O(n<em>n)，即 O(n²) 如果将其中一层循环的n改成m，那它的时间复杂度就变成了 O(m</em>n)</p>\n<h3 id=\"6-立方阶O-n³-、K次方阶O-n-k\"><a href=\"#6-立方阶O-n³-、K次方阶O-n-k\" class=\"headerlink\" title=\"6)立方阶O(n³)、K次方阶O(n^k)\"></a>6)立方阶O(n³)<strong>、</strong>K次方阶O(n^k)</h3><p><strong>说明</strong>：参考上面的O(n²) 去理解就好了，O(n³)相当于三层n循环，其它的类似</p>\n<hr>\n<p><strong>算法的空间复杂度:</strong></p>\n<p>基本介绍</p>\n<p>1)类似于时间复杂度的讨论，一个算法的空间复杂度(Space Complexity)定义为该算法所耗费的存储空间，它也是问题规模n的函数。</p>\n<p>2)空间复杂度(Space Complexity)是对一个算法在运行过程中临时占用存储空间大小的量度。有的算法需要占用的临时工作单元数与解决问题的规模n有关，它随着n的增大而增大，当n较大时，将占用较多的存储单元，例如快速排序和归并排序算法就属于这种情况</p>\n<p>3)在做算法分析时，主要讨论的是时间复杂度。从用户使用体验上看，更看重的程序执行的速度。一些缓存产品(redis, memcache)和算法(基数排序)本质就是用空间换时间.</p>\n<h2 id=\"六、排序\"><a href=\"#六、排序\" class=\"headerlink\" title=\"六、排序\"></a>六、排序</h2><h3 id=\"1-冒泡排序\"><a href=\"#1-冒泡排序\" class=\"headerlink\" title=\"1.冒泡排序\"></a>1.冒泡排序</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">bubbleSort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr)</span> </span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">int</span> temp = <span class=\"number\">0</span>;</span><br><span class=\"line\">     Boolean flag = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">     <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; arr.length - <span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">         <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; arr.length - <span class=\"number\">1</span> - i; j++) &#123;</span><br><span class=\"line\">             <span class=\"keyword\">if</span>(arr[j] &gt; arr[j+<span class=\"number\">1</span>])&#123;</span><br><span class=\"line\">                 flag = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                 temp = arr[j];</span><br><span class=\"line\">                 arr[j] = arr[j+<span class=\"number\">1</span>];</span><br><span class=\"line\">                 arr[j+<span class=\"number\">1</span>] = temp;</span><br><span class=\"line\">             &#125;</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">         <span class=\"keyword\">if</span>(!flag)&#123;</span><br><span class=\"line\">             <span class=\"keyword\">break</span>;</span><br><span class=\"line\">         &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">             flag = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"2-选择排序\"><a href=\"#2-选择排序\" class=\"headerlink\" title=\"2.选择排序\"></a>2.选择排序</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">selectSort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; arr.length-<span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> min = arr[i];</span><br><span class=\"line\">            <span class=\"keyword\">int</span> minIndex  = i;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = i + <span class=\"number\">1</span>; j &lt; arr.length; j++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (min&gt;arr[j])&#123;</span><br><span class=\"line\">                    min=arr[j];</span><br><span class=\"line\">                    minIndex = j;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(minIndex != i)&#123;</span><br><span class=\"line\">                arr[minIndex] = arr[i];</span><br><span class=\"line\">                arr[i] = min;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"3-插入排序\"><a href=\"#3-插入排序\" class=\"headerlink\" title=\"3.插入排序\"></a>3.插入排序</h3><p>​    插入排序（Insertion Sorting）的<strong>基本思想</strong>是：把n个待排序的元素看成为一个有序表和一个无序表，开始时有序表中只包含一个元素，无序表中包含有n-1个元素，排序过程中每次从无序表中取出第一个元素，把它的排序码依次与有序表元素的排序码进行比较，将它插入到有序表中的适当位置，使之成为新的有序表。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 插入排序最开始为1个元素的有序列表，和n-1的无序列表</span></span><br><span class=\"line\"><span class=\"comment\">   *</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> arr</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">insertSort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr)</span> </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">int</span> insertIndex = <span class=\"number\">0</span>; <span class=\"comment\">//记录待插入排序元素的索引</span></span><br><span class=\"line\">      <span class=\"keyword\">int</span> insertValue = <span class=\"number\">0</span>; <span class=\"comment\">//记录待插入的元素的值</span></span><br><span class=\"line\">      <span class=\"comment\">//index=0的元素看作一个元素的有序列表，从1开始为待插入的元素</span></span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">          insertIndex = i;</span><br><span class=\"line\">          insertValue = arr[i];</span><br><span class=\"line\">          <span class=\"comment\">//待插入值和前面的元素比较找到需要插入的位置</span></span><br><span class=\"line\">          <span class=\"comment\">//insertIndex &gt; 0保证索引不越界</span></span><br><span class=\"line\">          <span class=\"keyword\">while</span> (insertIndex - <span class=\"number\">1</span> &gt; <span class=\"number\">0</span> &amp;&amp; insertValue &lt; arr[insertIndex - <span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">              arr[insertIndex] = arr[insertIndex - <span class=\"number\">1</span>]; <span class=\"comment\">//往后移</span></span><br><span class=\"line\">              insertIndex--;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (i != insertIndex) &#123;</span><br><span class=\"line\">              arr[insertIndex] = insertValue;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"4-希尔排序\"><a href=\"#4-希尔排序\" class=\"headerlink\" title=\"4.希尔排序\"></a>4.希尔排序</h3><p>希尔排序是希尔（Donald Shell）于1959年提出的一种排序算法。希尔排序也是一种<strong>插入排序</strong>，它是简单插入排序经过改进之后的一个<strong>更高效的版本</strong>，也称为缩小增量排序。</p>\n<p><img src=\"/2021/01/01/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E6%95%B4%E7%90%86/image-20210102193620447.png\" alt=\"image-20210102193620447\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">shellSort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//step:步长</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> insertValue = <span class=\"number\">0</span>; <span class=\"comment\">//记录待插入的元素的值</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> insertIndex = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> step = arr.length / <span class=\"number\">2</span>; step &gt; <span class=\"number\">0</span>; step /= <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">           <span class=\"comment\">// System.out.println(step);</span></span><br><span class=\"line\">            <span class=\"comment\">//插入排序</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = step; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">                insertValue = arr[i];</span><br><span class=\"line\">                <span class=\"comment\">//insertIndex - step &gt;= 0</span></span><br><span class=\"line\">                <span class=\"keyword\">for</span> (insertIndex = i; insertIndex - step &gt;= <span class=\"number\">0</span> &amp;&amp; arr[insertIndex - step] &gt; insertValue; insertIndex -= step) &#123;</span><br><span class=\"line\">                    arr[insertIndex] = arr[insertIndex - step];</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (insertIndex != i) &#123;</span><br><span class=\"line\">                    arr[insertIndex] = insertValue;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"5-快速排序\"><a href=\"#5-快速排序\" class=\"headerlink\" title=\"5.快速排序\"></a>5.快速排序</h3><p>​    快速排序（Quicksort）是对冒泡排序的一种改进。基本思想是：通过一趟排序将要排序的数据分割成独立的两部分，其中一部分的所有数据都比另外一部分的所有数据都要小，然后再按此方法对这两部分数据分别进行快速排序，整个排序过程可以递归进行，以此达到整个数据变成有序序列</p>\n<p><img src=\"/2021/01/01/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E6%95%B4%E7%90%86/image-20210102194545635.png\" alt=\"image-20210102194545635\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">quickSort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr, <span class=\"keyword\">int</span> low, <span class=\"keyword\">int</span> high)</span> </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">int</span> i, j, temp, t;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (low &lt; high) &#123;</span><br><span class=\"line\">          i = low;</span><br><span class=\"line\">          j = high;</span><br><span class=\"line\">          <span class=\"comment\">// temp就是基准位</span></span><br><span class=\"line\">          temp = arr[i];</span><br><span class=\"line\"></span><br><span class=\"line\">          <span class=\"keyword\">while</span> (i &lt; j) &#123;</span><br><span class=\"line\">              <span class=\"comment\">// 先看右边，依次往左递减</span></span><br><span class=\"line\">              <span class=\"keyword\">while</span> (temp &lt;= arr[j] &amp;&amp; i &lt; j) &#123;</span><br><span class=\"line\">                  j--;</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">              <span class=\"comment\">// 再看左边，依次往右递增</span></span><br><span class=\"line\">              <span class=\"keyword\">while</span> (temp &gt;= arr[i] &amp;&amp; i &lt; j) &#123;</span><br><span class=\"line\">                  i++;</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">              <span class=\"comment\">// 如果满足条件则交换</span></span><br><span class=\"line\">              <span class=\"keyword\">if</span> (i &lt; j) &#123;</span><br><span class=\"line\">                  t = arr[j];</span><br><span class=\"line\">                  arr[j] = arr[i];</span><br><span class=\"line\">                  arr[i] = t;</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          <span class=\"comment\">// 这里i == j</span></span><br><span class=\"line\">          <span class=\"comment\">// 最后将基准为与i和j相等位置的数字交换</span></span><br><span class=\"line\">          arr[low] = arr[i];</span><br><span class=\"line\">          arr[i] = temp;</span><br><span class=\"line\">          <span class=\"comment\">// 递归调用左半数组</span></span><br><span class=\"line\">          quickSort(arr, low, i - <span class=\"number\">1</span>);</span><br><span class=\"line\">          <span class=\"comment\">// 递归调用右半数组</span></span><br><span class=\"line\">          quickSort(arr, i + <span class=\"number\">1</span>, high);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"6-基数排序\"><a href=\"#6-基数排序\" class=\"headerlink\" title=\"6.基数排序\"></a>6.基数排序</h3><p>1)将所有待比较数值统一为同样的数位长度，数位较短的数前面补零。然后，从最低位开始，依次进行一次排序。这样从最低位排序一直到最高位排序完成以后, 数列就变成一个有序序列。</p>\n<p>2)这样说明，比较难理解，下面我们看一个图文解释，理解基数排序的步骤</p>\n<p><strong>基数排序图文说明</strong></p>\n<p>将数组 {53, 3, 542, 748, 14, 214} 使用基数排序, 进行升序排序。</p>\n<p><img src=\"/2021/01/01/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E6%95%B4%E7%90%86/image-20210102200322572.png\" alt=\"image-20210102200322572\"></p>\n<p><img src=\"/2021/01/01/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E6%95%B4%E7%90%86/image-20210102200443841.png\" alt=\"image-20210102200443841\"></p>\n<p><img src=\"/2021/01/01/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E6%95%B4%E7%90%86/image-20210102200539559.png\" alt=\"image-20210102200539559\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//基数排序方法</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">radixSort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr)</span> </span>&#123;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">//根据前面的推导过程，我们可以得到最终的基数排序代码</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">//1. 得到数组中最大的数的位数</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> max = arr[<span class=\"number\">0</span>]; <span class=\"comment\">//假设第一数就是最大数</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (arr[i] &gt; max) &#123;</span><br><span class=\"line\">\t\t\t\tmax = arr[i];</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">//得到最大数是几位数</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> maxLength = (max + <span class=\"string\">&quot;&quot;</span>).length();</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">//定义一个二维数组，表示10个桶, 每个桶就是一个一维数组</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//说明</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//1. 二维数组包含10个一维数组</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//2. 为了防止在放入数的时候，数据溢出，则每个一维数组(桶)，大小定为arr.length</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//3. 名明确，基数排序是使用空间换时间的经典算法</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span>[][] bucket = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">10</span>][arr.length];</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">//为了记录每个桶中，实际存放了多少个数据,我们定义一个一维数组来记录各个桶的每次放入的数据个数</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//可以这里理解</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//比如：bucketElementCounts[0] , 记录的就是  bucket[0] 桶的放入数据个数</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span>[] bucketElementCounts = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">10</span>];</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">//这里我们使用循环将代码处理</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span> , n = <span class=\"number\">1</span>; i &lt; maxLength; i++, n *= <span class=\"number\">10</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//(针对每个元素的对应位进行排序处理)， 第一次是个位，第二次是十位，第三次是百位..</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; arr.length; j++) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//取出每个元素的对应位的值</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">int</span> digitOfElement = arr[j] / n % <span class=\"number\">10</span>;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//放入到对应的桶中</span></span><br><span class=\"line\">\t\t\t\tbucket[digitOfElement][bucketElementCounts[digitOfElement]] = arr[j];</span><br><span class=\"line\">\t\t\t\tbucketElementCounts[digitOfElement]++;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//按照这个桶的顺序(一维数组的下标依次取出数据，放入原来数组)</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">int</span> index = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//遍历每一桶，并将桶中是数据，放入到原数组</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> k = <span class=\"number\">0</span>; k &lt; bucketElementCounts.length; k++) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//如果桶中，有数据，我们才放入到原数组</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(bucketElementCounts[k] != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"comment\">//循环该桶即第k个桶(即第k个一维数组), 放入</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> l = <span class=\"number\">0</span>; l &lt; bucketElementCounts[k]; l++) &#123;</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"comment\">//取出元素放入到arr</span></span><br><span class=\"line\">\t\t\t\t\t\tarr[index++] = bucket[k][l];</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//第i+1轮处理后，需要将每个 bucketElementCounts[k] = 0 ！！！！</span></span><br><span class=\"line\">\t\t\t\tbucketElementCounts[k] = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t\t\t</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//System.out.println(&quot;第&quot;+(i+1)+&quot;轮，对个位的排序处理 arr =&quot; + Arrays.toString(arr));</span></span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"7-归并排序\"><a href=\"#7-归并排序\" class=\"headerlink\" title=\"7.归并排序\"></a>7.归并排序</h3><p><img src=\"/2021/01/01/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E6%95%B4%E7%90%86/image-20210102202017455.png\" alt=\"image-20210102202017455\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * https://baijiahao.baidu.com/s?id=1631406377431334840&amp;wfr=spider&amp;for=pc&amp;isFailFlag=1</span></span><br><span class=\"line\"><span class=\"comment\">     * 归并排序介绍</span></span><br><span class=\"line\"><span class=\"comment\">     * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     * 归并排序（MERGE-SORT）是建立在归并操作上的一种有效的排序算法，该算法是采用分治法（Divide and Conquer）的一个非常典型的应用。将已有序的子序列合并，得到完全有序的序列；即先使每个子序列有序，再使子序列段间有序。若将两个有序表合并成一个有序表，称为二路归并。</span></span><br><span class=\"line\"><span class=\"comment\">     * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     * 归并排序原理</span></span><br><span class=\"line\"><span class=\"comment\">     * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     * 归并排序在字面意思上已经简要显示出了他的核心原理，即递归再合并。</span></span><br><span class=\"line\"><span class=\"comment\">     * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     * 我们举个例子，将两个有序数组合并成一个有序数组，如下图。</span></span><br><span class=\"line\"><span class=\"comment\">     * 4 7 9       1 3 8</span></span><br><span class=\"line\"><span class=\"comment\">     * |           |</span></span><br><span class=\"line\"><span class=\"comment\">     * 4和1进行比较，1&lt;4,将1取出来放在新的数组中&#123;1&#125;</span></span><br><span class=\"line\"><span class=\"comment\">     * 4 7 9         3 8</span></span><br><span class=\"line\"><span class=\"comment\">     * |             |</span></span><br><span class=\"line\"><span class=\"comment\">     * 4和3进行比较，3&lt;4，将3取出来放在新的数组中&#123;1，3&#125;</span></span><br><span class=\"line\"><span class=\"comment\">     * 4 7 9           8</span></span><br><span class=\"line\"><span class=\"comment\">     * |               |</span></span><br><span class=\"line\"><span class=\"comment\">     * 4和8比较，4&lt;8，将4取出来放在新的数组中&#123;1，3，4&#125;</span></span><br><span class=\"line\"><span class=\"comment\">     * 7 9           8</span></span><br><span class=\"line\"><span class=\"comment\">     * |             |</span></span><br><span class=\"line\"><span class=\"comment\">     * 7和8比较，4&lt;8，将7取出来放在新的数组中&#123;1，3，4，7&#125;</span></span><br><span class=\"line\"><span class=\"comment\">     * 9           8</span></span><br><span class=\"line\"><span class=\"comment\">     * |           |</span></span><br><span class=\"line\"><span class=\"comment\">     * 9和8比较，4&lt;8，将8取出来放在新的数组中&#123;1，3，4，7，8&#125;</span></span><br><span class=\"line\"><span class=\"comment\">     * 9</span></span><br><span class=\"line\"><span class=\"comment\">     * |</span></span><br><span class=\"line\"><span class=\"comment\">     * 只剩一个9，插入到新数组后得到有序数组&#123;1，3，4，7，8，9&#125;</span></span><br><span class=\"line\"><span class=\"comment\">     * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     * 合并数组</span></span><br><span class=\"line\"><span class=\"comment\">     * 现在我们来学习归并排序的步骤，我们给定一个无序数组&#123;9, 2, 6, 3, 5, 7, 10, 11&#125;</span></span><br><span class=\"line\"><span class=\"comment\">     * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     * 首先我们对它递归进行二分操作</span></span><br><span class=\"line\"><span class=\"comment\">     * 9   2   6   3 | 5   7   10   11</span></span><br><span class=\"line\"><span class=\"comment\">     * 9   2 | 6   3 | 5   7 | 10   11</span></span><br><span class=\"line\"><span class=\"comment\">     * 9 | 2 | 6 | 3 | 5 | 7 | 10 | 11</span></span><br><span class=\"line\"><span class=\"comment\">     * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     * 二分递归</span></span><br><span class=\"line\"><span class=\"comment\">     * 不断递归直至每个分组中都只有一个元素，即每个分组都是一个有序数组，不过只有一个元素一定是有序的。</span></span><br><span class=\"line\"><span class=\"comment\">     * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     * 下面进行向上递归合并，如下图。</span></span><br><span class=\"line\"><span class=\"comment\">     * 9 | 2 | 6 | 3 | 5 | 7 | 10 | 11</span></span><br><span class=\"line\"><span class=\"comment\">     * 2   9 | 3   6 | 5   7 | 10   11</span></span><br><span class=\"line\"><span class=\"comment\">     * 2   3   6   9 | 5   7   10   11</span></span><br><span class=\"line\"><span class=\"comment\">     * 2   3   5   6   7   9   10   11</span></span><br><span class=\"line\"><span class=\"comment\">     * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     * 递归合并</span></span><br><span class=\"line\"><span class=\"comment\">     * 经过递归合并，我们得到有序数组&#123;2,3,5,6,7,9,10,11&#125;。</span></span><br><span class=\"line\"><span class=\"comment\">     * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     * 功能：合并子序列</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> a</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> left</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> mid</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> right</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">merge</span><span class=\"params\">(<span class=\"keyword\">int</span>[] a, <span class=\"keyword\">int</span> left, <span class=\"keyword\">int</span> mid, <span class=\"keyword\">int</span> right)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] tmp = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[a.length];<span class=\"comment\">// 辅助数组</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> p1 = left, p2 = mid + <span class=\"number\">1</span>, k = left;<span class=\"comment\">// p1、p2是检测指针，k是存放指针</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//System.out.println(&quot;a:&quot; + Arrays.toString(a));</span></span><br><span class=\"line\">        <span class=\"comment\">// 对比左右两个数组并将较小的数先放到辅助数组</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (p1 &lt;= mid &amp;&amp; p2 &lt;= right) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (a[p1] &lt;= a[p2])</span><br><span class=\"line\">                tmp[k++] = a[p1++];</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">                tmp[k++] = a[p2++];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (p1 &lt;= mid)</span><br><span class=\"line\">            tmp[k++] = a[p1++];<span class=\"comment\">//將左边剩余一个或多个元素放入temp中，剩餘的元素是合并序列中最大的值</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (p2 &lt;= right)</span><br><span class=\"line\">            tmp[k++] = a[p2++];<span class=\"comment\">//同上</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 复制回原素组</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = left; i &lt;= right; i++)</span><br><span class=\"line\">            a[i] = tmp[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">mergeSort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] a, <span class=\"keyword\">int</span> start, <span class=\"keyword\">int</span> end)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (start &lt; end) &#123;<span class=\"comment\">// 当子序列中只有一个元素时结束递归</span></span><br><span class=\"line\">            <span class=\"keyword\">int</span> mid = (start + end) / <span class=\"number\">2</span>;<span class=\"comment\">// 划分子序列</span></span><br><span class=\"line\">            mergeSort(a, start, mid);<span class=\"comment\">// 对左侧子序列进行递归排序</span></span><br><span class=\"line\">            mergeSort(a, mid + <span class=\"number\">1</span>, end);<span class=\"comment\">// 对右侧子序列进行递归排序</span></span><br><span class=\"line\">            merge(a, start, mid, end);<span class=\"comment\">// 合并</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"8-堆排序\"><a href=\"#8-堆排序\" class=\"headerlink\" title=\"8.堆排序\"></a>8.堆排序</h3><p>1)堆排序是利用<strong>堆</strong>这种数据结构而设计的一种排序算法，堆排序是一种<strong>选择排序，</strong>它的最坏，最好，平均时间复杂度均为O(nlogn)，它也是不稳定排序。</p>\n<p>2)堆是具有以下性质的完全二叉树：每个结点的值都大于或等于其左右孩子结点的值，称为大顶堆, <strong>注**</strong>意** : 没有要求结点的左孩子的值和右孩子的值的大小关系。</p>\n<p>3)每个结点的值都小于或等于其左右孩子结点的值，称为小顶堆</p>\n<p>4)大顶堆举例说明</p>\n<p>大顶堆用于升序排序，小顶堆用于降序排序</p>\n<p><img src=\"/2021/01/01/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E6%95%B4%E7%90%86/image-20210102203535568.png\" alt=\"image-20210102203535568\"></p>\n<p><img src=\"/2021/01/01/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E6%95%B4%E7%90%86/image-20210102203605120.png\" alt=\"image-20210102203605120\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">HeapAdjust</span><span class=\"params\">(<span class=\"keyword\">int</span>[] a, <span class=\"keyword\">int</span> start, <span class=\"keyword\">int</span> len)</span> </span>&#123;</span><br><span class=\"line\">       <span class=\"comment\">//这里的start表示树节点（非叶子节点）</span></span><br><span class=\"line\">       <span class=\"keyword\">int</span> temp, j;</span><br><span class=\"line\">       temp = a[start];</span><br><span class=\"line\">       <span class=\"keyword\">for</span> (j = <span class=\"number\">2</span> * start + <span class=\"number\">1</span>; j &lt; len; j = j * <span class=\"number\">2</span> + <span class=\"number\">1</span>) &#123; <span class=\"comment\">/* 从index最大的有孩子的节点开始筛选，堆排 */</span></span><br><span class=\"line\">           <span class=\"keyword\">if</span> (j + <span class=\"number\">1</span> &lt; len &amp;&amp; a[j] &lt; a[j + <span class=\"number\">1</span>]) <span class=\"comment\">/* 是index=j的元素为较大的元素 */</span></span><br><span class=\"line\">               j++;</span><br><span class=\"line\">           <span class=\"keyword\">if</span> (a[j] &gt; temp) &#123;</span><br><span class=\"line\">               a[start] = a[j]; <span class=\"comment\">/* 将较大元素赋值给父节点 */</span></span><br><span class=\"line\">               start = j;</span><br><span class=\"line\">           &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">               <span class=\"keyword\">break</span>;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"comment\">//循环结束后，可能剩下的一个元素填入对应的位置</span></span><br><span class=\"line\">       a[start] = temp;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">swap</span><span class=\"params\">(<span class=\"keyword\">int</span> a[], <span class=\"keyword\">int</span> low, <span class=\"keyword\">int</span> high)</span> </span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">int</span> temp = a[low];</span><br><span class=\"line\">       a[low] = a[high];</span><br><span class=\"line\">       a[high] = temp;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">heapSort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr)</span> </span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">int</span> i;</span><br><span class=\"line\">     <span class=\"comment\">//（arr.length-1） / 2 - 1为最后一个非叶子节点索引</span></span><br><span class=\"line\">       <span class=\"keyword\">for</span> (i = (arr.length-<span class=\"number\">1</span>) / <span class=\"number\">2</span> - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i--) &#123; <span class=\"comment\">/* 把a[]构造成一个大顶堆 */</span></span><br><span class=\"line\">           HeapAdjust(arr, i, arr.length);</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"keyword\">for</span> (i = arr.length - <span class=\"number\">1</span>; i &gt; <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">           swap(arr, <span class=\"number\">0</span>, i); <span class=\"comment\">/* 交换堆顶最大元素和堆尾元素 */</span></span><br><span class=\"line\">           HeapAdjust(arr, <span class=\"number\">0</span>, i); <span class=\"comment\">/* 把交换后的堆a[0,i-1]，再次构造成大顶顶，使堆顶元素为最大值 */</span></span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<p><strong>各排序之间对比</strong>：</p>\n<p><img src=\"/2021/01/01/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E6%95%B4%E7%90%86/image-20210102170510025.png\" alt=\"image-20210102170510025\"></p>\n<p><strong>相关术语解释：</strong></p>\n<p>1)<strong>稳定</strong>：如果a原本在b前面，而a=b，排序之后a仍然在b的前面；</p>\n<p>2)<strong>不稳定</strong>：如果a原本在b的前面，而a=b，排序之后a可能会出现在b的后面；</p>\n<p>3)<strong>内排序</strong>：所有排序操作都在内存中完成；</p>\n<p>4)<strong>外排序</strong>：由于数据太大，因此把数据放在磁盘中，而排序通过磁盘和内存的数据传输才能进行；</p>\n<p>5)<strong>时间复杂度</strong>： 一个算法执行所耗费的时间。</p>\n<p>6)<strong>空间复杂度</strong>：运行完一个程序所需内存的大小。</p>\n<p>7)<strong>n</strong>: 数据规模</p>\n<p>8)<strong>k</strong>: “桶”的个数</p>\n<p>9)<strong>In-place</strong>:  不占用额外内存</p>\n<p>10)<strong>Out-place</strong>:占用额外内存</p>\n<h2 id=\"七、哈希表\"><a href=\"#七、哈希表\" class=\"headerlink\" title=\"七、哈希表\"></a>七、哈希表</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> hashtable;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Scanner;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HashTabDemo</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">//创建哈希表</span></span><br><span class=\"line\">\t\tHashTab hashTab = <span class=\"keyword\">new</span> HashTab(<span class=\"number\">7</span>);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">//写一个简单的菜单</span></span><br><span class=\"line\">\t\tString key = <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">\t\tScanner scanner = <span class=\"keyword\">new</span> Scanner(System.in);</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">&quot;add:  添加雇员&quot;</span>);</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">&quot;list: 显示雇员&quot;</span>);</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">&quot;find: 查找雇员&quot;</span>);</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">&quot;exit: 退出系统&quot;</span>);</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\tkey = scanner.next();</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">switch</span> (key) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">case</span> <span class=\"string\">&quot;add&quot;</span>:</span><br><span class=\"line\">\t\t\t\tSystem.out.println(<span class=\"string\">&quot;输入id&quot;</span>);</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">int</span> id = scanner.nextInt();</span><br><span class=\"line\">\t\t\t\tSystem.out.println(<span class=\"string\">&quot;输入名字&quot;</span>);</span><br><span class=\"line\">\t\t\t\tString name = scanner.next();</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//创建 雇员</span></span><br><span class=\"line\">\t\t\t\tEmp emp = <span class=\"keyword\">new</span> Emp(id, name);</span><br><span class=\"line\">\t\t\t\thashTab.add(emp);</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">case</span> <span class=\"string\">&quot;list&quot;</span>:</span><br><span class=\"line\">\t\t\t\thashTab.list();</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">case</span> <span class=\"string\">&quot;find&quot;</span>:</span><br><span class=\"line\">\t\t\t\tSystem.out.println(<span class=\"string\">&quot;请输入要查找的id&quot;</span>);</span><br><span class=\"line\">\t\t\t\tid = scanner.nextInt();</span><br><span class=\"line\">\t\t\t\thashTab.findEmpById(id);</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">case</span> <span class=\"string\">&quot;exit&quot;</span>:</span><br><span class=\"line\">\t\t\t\tscanner.close();</span><br><span class=\"line\">\t\t\t\tSystem.exit(<span class=\"number\">0</span>);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">default</span>:</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//创建HashTab 管理多条链表</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HashTab</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> EmpLinkedList[] empLinkedListArray;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> size; <span class=\"comment\">//表示有多少条链表</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//构造器</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">HashTab</span><span class=\"params\">(<span class=\"keyword\">int</span> size)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.size = size;</span><br><span class=\"line\">\t\t<span class=\"comment\">//初始化empLinkedListArray</span></span><br><span class=\"line\">\t\tempLinkedListArray = <span class=\"keyword\">new</span> EmpLinkedList[size];</span><br><span class=\"line\">\t\t<span class=\"comment\">//？留一个坑, 这时不要分别初始化每个链表</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; size; i++) &#123;</span><br><span class=\"line\">\t\t\tempLinkedListArray[i] = <span class=\"keyword\">new</span> EmpLinkedList();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//添加雇员</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(Emp emp)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//根据员工的id ,得到该员工应当添加到哪条链表</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> empLinkedListNO = hashFun(emp.id);</span><br><span class=\"line\">\t\t<span class=\"comment\">//将emp 添加到对应的链表中</span></span><br><span class=\"line\">\t\tempLinkedListArray[empLinkedListNO].add(emp);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//遍历所有的链表,遍历hashtab</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">list</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; size; i++) &#123;</span><br><span class=\"line\">\t\t\tempLinkedListArray[i].list(i);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//根据输入的id,查找雇员</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">findEmpById</span><span class=\"params\">(<span class=\"keyword\">int</span> id)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//使用散列函数确定到哪条链表查找</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> empLinkedListNO = hashFun(id);</span><br><span class=\"line\">\t\tEmp emp = empLinkedListArray[empLinkedListNO].findEmpById(id);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(emp != <span class=\"keyword\">null</span>) &#123;<span class=\"comment\">//找到</span></span><br><span class=\"line\">\t\t\tSystem.out.printf(<span class=\"string\">&quot;在第%d条链表中找到 雇员 id = %d\\n&quot;</span>, (empLinkedListNO + <span class=\"number\">1</span>), id);</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">&quot;在哈希表中，没有找到该雇员~&quot;</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//编写散列函数, 使用一个简单取模法</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">hashFun</span><span class=\"params\">(<span class=\"keyword\">int</span> id)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> id % size;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//表示一个雇员</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Emp</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">int</span> id;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> String name;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> Emp next; <span class=\"comment\">//next 默认为 null</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Emp</span><span class=\"params\">(<span class=\"keyword\">int</span> id, String name)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">super</span>();</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.id = id;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//创建EmpLinkedList ,表示链表</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">EmpLinkedList</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//头指针，执行第一个Emp,因此我们这个链表的head 是直接指向第一个Emp</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> Emp head; <span class=\"comment\">//默认null</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//添加雇员到链表</span></span><br><span class=\"line\">\t<span class=\"comment\">//说明</span></span><br><span class=\"line\">\t<span class=\"comment\">//1. 假定，当添加雇员时，id 是自增长，即id的分配总是从小到大</span></span><br><span class=\"line\">\t<span class=\"comment\">//   因此我们将该雇员直接加入到本链表的最后即可</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(Emp emp)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//如果是添加第一个雇员</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(head == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\thead = emp;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">//如果不是第一个雇员，则使用一个辅助的指针，帮助定位到最后</span></span><br><span class=\"line\">\t\tEmp curEmp = head;</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(curEmp.next == <span class=\"keyword\">null</span>) &#123;<span class=\"comment\">//说明到链表最后</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tcurEmp = curEmp.next; <span class=\"comment\">//后移</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">//退出时直接将emp 加入链表</span></span><br><span class=\"line\">\t\tcurEmp.next = emp;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//遍历链表的雇员信息</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">list</span><span class=\"params\">(<span class=\"keyword\">int</span> no)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(head == <span class=\"keyword\">null</span>) &#123; <span class=\"comment\">//说明链表为空</span></span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">&quot;第 &quot;</span>+(no+<span class=\"number\">1</span>)+<span class=\"string\">&quot; 链表为空&quot;</span>);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tSystem.out.print(<span class=\"string\">&quot;第 &quot;</span>+(no+<span class=\"number\">1</span>)+<span class=\"string\">&quot; 链表的信息为&quot;</span>);</span><br><span class=\"line\">\t\tEmp curEmp = head; <span class=\"comment\">//辅助指针</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.printf(<span class=\"string\">&quot; =&gt; id=%d name=%s\\t&quot;</span>, curEmp.id, curEmp.name);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(curEmp.next == <span class=\"keyword\">null</span>) &#123;<span class=\"comment\">//说明curEmp已经是最后结点</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tcurEmp = curEmp.next; <span class=\"comment\">//后移，遍历</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tSystem.out.println();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//根据id查找雇员</span></span><br><span class=\"line\">\t<span class=\"comment\">//如果查找到，就返回Emp, 如果没有找到，就返回null</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Emp <span class=\"title\">findEmpById</span><span class=\"params\">(<span class=\"keyword\">int</span> id)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//判断链表是否为空</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(head == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">&quot;链表为空&quot;</span>);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">//辅助指针</span></span><br><span class=\"line\">\t\tEmp curEmp = head;</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(curEmp.id == id) &#123;<span class=\"comment\">//找到</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;<span class=\"comment\">//这时curEmp就指向要查找的雇员</span></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//退出</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(curEmp.next == <span class=\"keyword\">null</span>) &#123;<span class=\"comment\">//说明遍历当前链表没有找到该雇员</span></span><br><span class=\"line\">\t\t\t\tcurEmp = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tcurEmp = curEmp.next;<span class=\"comment\">//以后</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> curEmp;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"八、二叉树\"><a href=\"#八、二叉树\" class=\"headerlink\" title=\"八、二叉树\"></a>八、二叉树</h2><h3 id=\"1-普通二叉树\"><a href=\"#1-普通二叉树\" class=\"headerlink\" title=\"1.普通二叉树\"></a>1.普通二叉树</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br><span class=\"line\">320</span><br><span class=\"line\">321</span><br><span class=\"line\">322</span><br><span class=\"line\">323</span><br><span class=\"line\">324</span><br><span class=\"line\">325</span><br><span class=\"line\">326</span><br><span class=\"line\">327</span><br><span class=\"line\">328</span><br><span class=\"line\">329</span><br><span class=\"line\">330</span><br><span class=\"line\">331</span><br><span class=\"line\">332</span><br><span class=\"line\">333</span><br><span class=\"line\">334</span><br><span class=\"line\">335</span><br><span class=\"line\">336</span><br><span class=\"line\">337</span><br><span class=\"line\">338</span><br><span class=\"line\">339</span><br><span class=\"line\">340</span><br><span class=\"line\">341</span><br><span class=\"line\">342</span><br><span class=\"line\">343</span><br><span class=\"line\">344</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> tree;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BinaryTreeDemo</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//先需要创建一颗二叉树</span></span><br><span class=\"line\">\t\tBinaryTree binaryTree = <span class=\"keyword\">new</span> BinaryTree();</span><br><span class=\"line\">\t\t<span class=\"comment\">//创建需要的结点</span></span><br><span class=\"line\">\t\tHeroNode root = <span class=\"keyword\">new</span> HeroNode(<span class=\"number\">1</span>, <span class=\"string\">&quot;宋江&quot;</span>);</span><br><span class=\"line\">\t\tHeroNode node2 = <span class=\"keyword\">new</span> HeroNode(<span class=\"number\">2</span>, <span class=\"string\">&quot;吴用&quot;</span>);</span><br><span class=\"line\">\t\tHeroNode node3 = <span class=\"keyword\">new</span> HeroNode(<span class=\"number\">3</span>, <span class=\"string\">&quot;卢俊义&quot;</span>);</span><br><span class=\"line\">\t\tHeroNode node4 = <span class=\"keyword\">new</span> HeroNode(<span class=\"number\">4</span>, <span class=\"string\">&quot;林冲&quot;</span>);</span><br><span class=\"line\">\t\tHeroNode node5 = <span class=\"keyword\">new</span> HeroNode(<span class=\"number\">5</span>, <span class=\"string\">&quot;关胜&quot;</span>);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">//说明，我们先手动创建该二叉树，后面我们学习递归的方式创建二叉树</span></span><br><span class=\"line\">\t\troot.setLeft(node2);</span><br><span class=\"line\">\t\troot.setRight(node3);</span><br><span class=\"line\">\t\tnode3.setRight(node4);</span><br><span class=\"line\">\t\tnode3.setLeft(node5);</span><br><span class=\"line\">\t\tbinaryTree.setRoot(root);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">//测试</span></span><br><span class=\"line\"><span class=\"comment\">//\t\tSystem.out.println(&quot;前序遍历&quot;); // 1,2,3,5,4</span></span><br><span class=\"line\"><span class=\"comment\">//\t\tbinaryTree.preOrder();</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">//测试 </span></span><br><span class=\"line\"><span class=\"comment\">//\t\tSystem.out.println(&quot;中序遍历&quot;);</span></span><br><span class=\"line\"><span class=\"comment\">//\t\tbinaryTree.infixOrder(); // 2,1,5,3,4</span></span><br><span class=\"line\"><span class=\"comment\">//\t\t</span></span><br><span class=\"line\"><span class=\"comment\">//\t\tSystem.out.println(&quot;后序遍历&quot;);</span></span><br><span class=\"line\"><span class=\"comment\">//\t\tbinaryTree.postOrder(); // 2,5,4,3,1</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">//前序遍历</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//前序遍历的次数 ：4 </span></span><br><span class=\"line\"><span class=\"comment\">//\t\tSystem.out.println(&quot;前序遍历方式~~~&quot;);</span></span><br><span class=\"line\"><span class=\"comment\">//\t\tHeroNode resNode = binaryTree.preOrderSearch(5);</span></span><br><span class=\"line\"><span class=\"comment\">//\t\tif (resNode != null) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//\t\t\tSystem.out.printf(&quot;找到了，信息为 no=%d name=%s&quot;, resNode.getNo(), resNode.getName());</span></span><br><span class=\"line\"><span class=\"comment\">//\t\t&#125; else &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//\t\t\tSystem.out.printf(&quot;没有找到 no = %d 的英雄&quot;, 5);</span></span><br><span class=\"line\"><span class=\"comment\">//\t\t&#125;</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">//中序遍历查找</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//中序遍历3次</span></span><br><span class=\"line\"><span class=\"comment\">//\t\tSystem.out.println(&quot;中序遍历方式~~~&quot;);</span></span><br><span class=\"line\"><span class=\"comment\">//\t\tHeroNode resNode = binaryTree.infixOrderSearch(5);</span></span><br><span class=\"line\"><span class=\"comment\">//\t\tif (resNode != null) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//\t\t\tSystem.out.printf(&quot;找到了，信息为 no=%d name=%s&quot;, resNode.getNo(), resNode.getName());</span></span><br><span class=\"line\"><span class=\"comment\">//\t\t&#125; else &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//\t\t\tSystem.out.printf(&quot;没有找到 no = %d 的英雄&quot;, 5);</span></span><br><span class=\"line\"><span class=\"comment\">//\t\t&#125;</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">//后序遍历查找</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//后序遍历查找的次数  2次</span></span><br><span class=\"line\"><span class=\"comment\">//\t\tSystem.out.println(&quot;后序遍历方式~~~&quot;);</span></span><br><span class=\"line\"><span class=\"comment\">//\t\tHeroNode resNode = binaryTree.postOrderSearch(5);</span></span><br><span class=\"line\"><span class=\"comment\">//\t\tif (resNode != null) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//\t\t\tSystem.out.printf(&quot;找到了，信息为 no=%d name=%s&quot;, resNode.getNo(), resNode.getName());</span></span><br><span class=\"line\"><span class=\"comment\">//\t\t&#125; else &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//\t\t\tSystem.out.printf(&quot;没有找到 no = %d 的英雄&quot;, 5);</span></span><br><span class=\"line\"><span class=\"comment\">//\t\t&#125;</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">//测试一把删除结点</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;删除前,前序遍历&quot;</span>);</span><br><span class=\"line\">\t\tbinaryTree.preOrder(); <span class=\"comment\">//  1,2,3,5,4</span></span><br><span class=\"line\">\t\tbinaryTree.delNode(<span class=\"number\">5</span>);</span><br><span class=\"line\">\t\t<span class=\"comment\">//binaryTree.delNode(3);</span></span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;删除后，前序遍历&quot;</span>);</span><br><span class=\"line\">\t\tbinaryTree.preOrder(); <span class=\"comment\">// 1,2,3,4</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//定义BinaryTree 二叉树</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BinaryTree</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> HeroNode root;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setRoot</span><span class=\"params\">(HeroNode root)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.root = root;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//删除结点</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">delNode</span><span class=\"params\">(<span class=\"keyword\">int</span> no)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(root != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//如果只有一个root结点, 这里立即判断root是不是就是要删除结点</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(root.getNo() == no) &#123;</span><br><span class=\"line\">\t\t\t\troot = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//递归删除</span></span><br><span class=\"line\">\t\t\t\troot.delNode(no);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">&quot;空树，不能删除~&quot;</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//前序遍历</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">preOrder</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.root != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">this</span>.root.preOrder();</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">&quot;二叉树为空，无法遍历&quot;</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//中序遍历</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">infixOrder</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.root != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">this</span>.root.infixOrder();</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">&quot;二叉树为空，无法遍历&quot;</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//后序遍历</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">postOrder</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.root != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">this</span>.root.postOrder();</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">&quot;二叉树为空，无法遍历&quot;</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//前序遍历</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> HeroNode <span class=\"title\">preOrderSearch</span><span class=\"params\">(<span class=\"keyword\">int</span> no)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(root != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> root.preOrderSearch(no);</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//中序遍历</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> HeroNode <span class=\"title\">infixOrderSearch</span><span class=\"params\">(<span class=\"keyword\">int</span> no)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(root != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> root.infixOrderSearch(no);</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//后序遍历</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> HeroNode <span class=\"title\">postOrderSearch</span><span class=\"params\">(<span class=\"keyword\">int</span> no)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(root != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.root.postOrderSearch(no);</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//先创建HeroNode 结点</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HeroNode</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> no;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> HeroNode left; <span class=\"comment\">//默认null</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> HeroNode right; <span class=\"comment\">//默认null</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">HeroNode</span><span class=\"params\">(<span class=\"keyword\">int</span> no, String name)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.no = no;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getNo</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> no;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setNo</span><span class=\"params\">(<span class=\"keyword\">int</span> no)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.no = no;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getName</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> name;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setName</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> HeroNode <span class=\"title\">getLeft</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> left;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setLeft</span><span class=\"params\">(HeroNode left)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.left = left;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> HeroNode <span class=\"title\">getRight</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> right;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setRight</span><span class=\"params\">(HeroNode right)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.right = right;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">&quot;HeroNode [no=&quot;</span> + no + <span class=\"string\">&quot;, name=&quot;</span> + name + <span class=\"string\">&quot;]&quot;</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//递归删除结点</span></span><br><span class=\"line\">\t<span class=\"comment\">//1.如果删除的节点是叶子节点，则删除该节点</span></span><br><span class=\"line\">\t<span class=\"comment\">//2.如果删除的节点是非叶子节点，则删除该子树</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">delNode</span><span class=\"params\">(<span class=\"keyword\">int</span> no)</span> </span>&#123;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">//思路</span></span><br><span class=\"line\">\t\t<span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">\t\t * \t1. 因为我们的二叉树是单向的，所以我们是判断当前结点的子结点是否需要删除结点，而不能去判断当前这个结点是不是需要删除结点.</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t2. 如果当前结点的左子结点不为空，并且左子结点 就是要删除结点，就将this.left = null; 并且就返回(结束递归删除)</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t3. 如果当前结点的右子结点不为空，并且右子结点 就是要删除结点，就将this.right= null ;并且就返回(结束递归删除)</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t4. 如果第2和第3步没有删除结点，那么我们就需要向左子树进行递归删除</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t5.  如果第4步也没有删除结点，则应当向右子树进行递归删除.</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">\t\t */</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//2. 如果当前结点的左子结点不为空，并且左子结点 就是要删除结点，就将this.left = null; 并且就返回(结束递归删除)</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.left != <span class=\"keyword\">null</span> &amp;&amp; <span class=\"keyword\">this</span>.left.no == no) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">this</span>.left = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">//3.如果当前结点的右子结点不为空，并且右子结点 就是要删除结点，就将this.right= null ;并且就返回(结束递归删除)</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.right != <span class=\"keyword\">null</span> &amp;&amp; <span class=\"keyword\">this</span>.right.no == no) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">this</span>.right = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">//4.我们就需要向左子树进行递归删除</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.left != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">this</span>.left.delNode(no);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">//5.则应当向右子树进行递归删除</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.right != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">this</span>.right.delNode(no);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//编写前序遍历的方法</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">preOrder</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"keyword\">this</span>); <span class=\"comment\">//先输出父结点</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//递归向左子树前序遍历</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.left != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">this</span>.left.preOrder();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">//递归向右子树前序遍历</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.right != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">this</span>.right.preOrder();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//中序遍历</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">infixOrder</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">//递归向左子树中序遍历</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.left != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">this</span>.left.infixOrder();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">//输出父结点</span></span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">\t\t<span class=\"comment\">//递归向右子树中序遍历</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.right != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">this</span>.right.infixOrder();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//后序遍历</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">postOrder</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.left != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">this</span>.left.postOrder();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.right != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">this</span>.right.postOrder();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//前序遍历查找</span></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * </span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> no 查找no</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@return</span> 如果找到就返回该Node ,如果没有找到返回 null</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> HeroNode <span class=\"title\">preOrderSearch</span><span class=\"params\">(<span class=\"keyword\">int</span> no)</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;进入前序遍历&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"comment\">//比较当前结点是不是</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.no == no) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">//1.则判断当前结点的左子节点是否为空，如果不为空，则递归前序查找</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//2.如果左递归前序查找，找到结点，则返回</span></span><br><span class=\"line\">\t\tHeroNode resNode = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.left != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\tresNode = <span class=\"keyword\">this</span>.left.preOrderSearch(no);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(resNode != <span class=\"keyword\">null</span>) &#123;<span class=\"comment\">//说明我们左子树找到</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> resNode;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">//1.左递归前序查找，找到结点，则返回，否继续判断，</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//2.当前的结点的右子节点是否为空，如果不空，则继续向右递归前序查找</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.right != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\tresNode = <span class=\"keyword\">this</span>.right.preOrderSearch(no);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> resNode;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//中序遍历查找</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> HeroNode <span class=\"title\">infixOrderSearch</span><span class=\"params\">(<span class=\"keyword\">int</span> no)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//判断当前结点的左子节点是否为空，如果不为空，则递归中序查找</span></span><br><span class=\"line\">\t\tHeroNode resNode = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.left != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\tresNode = <span class=\"keyword\">this</span>.left.infixOrderSearch(no);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(resNode != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> resNode;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;进入中序查找&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"comment\">//如果找到，则返回，如果没有找到，就和当前结点比较，如果是则返回当前结点</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.no == no) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">//否则继续进行右递归的中序查找</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.right != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\tresNode = <span class=\"keyword\">this</span>.right.infixOrderSearch(no);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> resNode;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//后序遍历查找</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> HeroNode <span class=\"title\">postOrderSearch</span><span class=\"params\">(<span class=\"keyword\">int</span> no)</span> </span>&#123;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">//判断当前结点的左子节点是否为空，如果不为空，则递归后序查找</span></span><br><span class=\"line\">\t\tHeroNode resNode = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.left != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\tresNode = <span class=\"keyword\">this</span>.left.postOrderSearch(no);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(resNode != <span class=\"keyword\">null</span>) &#123;<span class=\"comment\">//说明在左子树找到</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> resNode;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">//如果左子树没有找到，则向右子树递归进行后序遍历查找</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.right != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\tresNode = <span class=\"keyword\">this</span>.right.postOrderSearch(no);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(resNode != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> resNode;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;进入后序查找&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"comment\">//如果左右子树都没有找到，就比较当前结点是不是</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.no == no) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> resNode;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"2-顺序二叉树\"><a href=\"#2-顺序二叉树\" class=\"headerlink\" title=\"2.顺序二叉树\"></a>2.顺序二叉树</h3><p>顺序存储二叉树的<strong>特点</strong>:</p>\n<p>1)顺序二叉树通常只考虑完全二叉树</p>\n<p>2)第n个元素的左子节点为 2 * n + 1 </p>\n<p>3)第n个元素的右子节点为 2 * n + 2</p>\n<p>4)第n个元素的父节点为 (n-1) / 2</p>\n<p>5)n : 表示二叉树中的第几个元素(按0开始编号<br> 如图所示)</p>\n<p><img src=\"/2021/01/01/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E6%95%B4%E7%90%86/image-20210106203601993.png\" alt=\"image-20210106203601993\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> tree;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ArrBinaryTreeDemo</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span>[] arr = &#123; <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span> &#125;;</span><br><span class=\"line\">\t\t<span class=\"comment\">//创建一个 ArrBinaryTree</span></span><br><span class=\"line\">\t\tArrBinaryTree arrBinaryTree = <span class=\"keyword\">new</span> ArrBinaryTree(arr);</span><br><span class=\"line\">\t\tarrBinaryTree.preOrder(); <span class=\"comment\">// 1,2,4,5,3,6,7</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//编写一个ArrayBinaryTree, 实现顺序存储二叉树遍历</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ArrBinaryTree</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span>[] arr;<span class=\"comment\">//存储数据结点的数组</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ArrBinaryTree</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.arr = arr;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//重载preOrder</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">preOrder</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.preOrder(<span class=\"number\">0</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//编写一个方法，完成顺序存储二叉树的前序遍历</span></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * </span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> index 数组的下标 </span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">preOrder</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//如果数组为空，或者 arr.length = 0</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(arr == <span class=\"keyword\">null</span> || arr.length == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">&quot;数组为空，不能按照二叉树的前序遍历&quot;</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">//输出当前这个元素</span></span><br><span class=\"line\">\t\tSystem.out.println(arr[index]); </span><br><span class=\"line\">\t\t<span class=\"comment\">//向左递归遍历</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>((index * <span class=\"number\">2</span> + <span class=\"number\">1</span>) &lt; arr.length) &#123;</span><br><span class=\"line\">\t\t\tpreOrder(<span class=\"number\">2</span> * index + <span class=\"number\">1</span> );</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">//向右递归遍历</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>((index * <span class=\"number\">2</span> + <span class=\"number\">2</span>) &lt; arr.length) &#123;</span><br><span class=\"line\">\t\t\tpreOrder(<span class=\"number\">2</span> * index + <span class=\"number\">2</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"3-线索化二叉树\"><a href=\"#3-线索化二叉树\" class=\"headerlink\" title=\"3.线索化二叉树\"></a>3.线索化二叉树</h3><p><strong>线索二叉树基本介绍</strong></p>\n<p>1)n个结点的二叉链表中含有n+1 【公式 2n-(n-1)=n+1】 个空指针域。利用二叉链表中的空指针域，存放指向该结点在<strong>某种遍历次序</strong>下的前驱和后继结点的指针（这种附加的指针称为”线索”）</p>\n<p>2)这种加上了线索的二叉链表称为<strong>线索链表</strong>，相应的二叉树称为<strong>线索二叉树(Threaded  BinaryTree)**。根据线索性质的不同，线索二叉树可分为</strong>前序线索二叉树、中序线索二叉树<strong>和</strong>后序线索二叉树**三种</p>\n<p>3)一个结点的前一个结点，称为<strong>前驱</strong>结点</p>\n<p>4)一个结点的后一个结点，称为<strong>后继</strong>结点</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br><span class=\"line\">320</span><br><span class=\"line\">321</span><br><span class=\"line\">322</span><br><span class=\"line\">323</span><br><span class=\"line\">324</span><br><span class=\"line\">325</span><br><span class=\"line\">326</span><br><span class=\"line\">327</span><br><span class=\"line\">328</span><br><span class=\"line\">329</span><br><span class=\"line\">330</span><br><span class=\"line\">331</span><br><span class=\"line\">332</span><br><span class=\"line\">333</span><br><span class=\"line\">334</span><br><span class=\"line\">335</span><br><span class=\"line\">336</span><br><span class=\"line\">337</span><br><span class=\"line\">338</span><br><span class=\"line\">339</span><br><span class=\"line\">340</span><br><span class=\"line\">341</span><br><span class=\"line\">342</span><br><span class=\"line\">343</span><br><span class=\"line\">344</span><br><span class=\"line\">345</span><br><span class=\"line\">346</span><br><span class=\"line\">347</span><br><span class=\"line\">348</span><br><span class=\"line\">349</span><br><span class=\"line\">350</span><br><span class=\"line\">351</span><br><span class=\"line\">352</span><br><span class=\"line\">353</span><br><span class=\"line\">354</span><br><span class=\"line\">355</span><br><span class=\"line\">356</span><br><span class=\"line\">357</span><br><span class=\"line\">358</span><br><span class=\"line\">359</span><br><span class=\"line\">360</span><br><span class=\"line\">361</span><br><span class=\"line\">362</span><br><span class=\"line\">363</span><br><span class=\"line\">364</span><br><span class=\"line\">365</span><br><span class=\"line\">366</span><br><span class=\"line\">367</span><br><span class=\"line\">368</span><br><span class=\"line\">369</span><br><span class=\"line\">370</span><br><span class=\"line\">371</span><br><span class=\"line\">372</span><br><span class=\"line\">373</span><br><span class=\"line\">374</span><br><span class=\"line\">375</span><br><span class=\"line\">376</span><br><span class=\"line\">377</span><br><span class=\"line\">378</span><br><span class=\"line\">379</span><br><span class=\"line\">380</span><br><span class=\"line\">381</span><br><span class=\"line\">382</span><br><span class=\"line\">383</span><br><span class=\"line\">384</span><br><span class=\"line\">385</span><br><span class=\"line\">386</span><br><span class=\"line\">387</span><br><span class=\"line\">388</span><br><span class=\"line\">389</span><br><span class=\"line\">390</span><br><span class=\"line\">391</span><br><span class=\"line\">392</span><br><span class=\"line\">393</span><br><span class=\"line\">394</span><br><span class=\"line\">395</span><br><span class=\"line\">396</span><br><span class=\"line\">397</span><br><span class=\"line\">398</span><br><span class=\"line\">399</span><br><span class=\"line\">400</span><br><span class=\"line\">401</span><br><span class=\"line\">402</span><br><span class=\"line\">403</span><br><span class=\"line\">404</span><br><span class=\"line\">405</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> tree.threadedbinarytree;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ThreadedBinaryTreeDemo</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//测试一把中序线索二叉树的功能</span></span><br><span class=\"line\">\t\tHeroNode root = <span class=\"keyword\">new</span> HeroNode(<span class=\"number\">1</span>, <span class=\"string\">&quot;tom&quot;</span>);</span><br><span class=\"line\">\t\tHeroNode node2 = <span class=\"keyword\">new</span> HeroNode(<span class=\"number\">3</span>, <span class=\"string\">&quot;jack&quot;</span>);</span><br><span class=\"line\">\t\tHeroNode node3 = <span class=\"keyword\">new</span> HeroNode(<span class=\"number\">6</span>, <span class=\"string\">&quot;smith&quot;</span>);</span><br><span class=\"line\">\t\tHeroNode node4 = <span class=\"keyword\">new</span> HeroNode(<span class=\"number\">8</span>, <span class=\"string\">&quot;mary&quot;</span>);</span><br><span class=\"line\">\t\tHeroNode node5 = <span class=\"keyword\">new</span> HeroNode(<span class=\"number\">10</span>, <span class=\"string\">&quot;king&quot;</span>);</span><br><span class=\"line\">\t\tHeroNode node6 = <span class=\"keyword\">new</span> HeroNode(<span class=\"number\">14</span>, <span class=\"string\">&quot;dim&quot;</span>);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">//二叉树，后面我们要递归创建, 现在简单处理使用手动创建</span></span><br><span class=\"line\">\t\troot.setLeft(node2);</span><br><span class=\"line\">\t\troot.setRight(node3);</span><br><span class=\"line\">\t\tnode2.setLeft(node4);</span><br><span class=\"line\">\t\tnode2.setRight(node5);</span><br><span class=\"line\">\t\tnode3.setLeft(node6);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">//测试中序线索化</span></span><br><span class=\"line\">\t\tThreadedBinaryTree threadedBinaryTree = <span class=\"keyword\">new</span> ThreadedBinaryTree();</span><br><span class=\"line\">\t\tthreadedBinaryTree.setRoot(root);</span><br><span class=\"line\">\t\tthreadedBinaryTree.threadedNodes();</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">//测试: 以10号节点测试</span></span><br><span class=\"line\">\t\tHeroNode leftNode = node5.getLeft();</span><br><span class=\"line\">\t\tHeroNode rightNode = node5.getRight();</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;10号结点的前驱结点是 =&quot;</span>  + leftNode); <span class=\"comment\">//3</span></span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;10号结点的后继结点是=&quot;</span>  + rightNode); <span class=\"comment\">//1</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">//当线索化二叉树后，能在使用原来的遍历方法</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//threadedBinaryTree.infixOrder();</span></span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;使用线索化的方式遍历 线索化二叉树&quot;</span>);</span><br><span class=\"line\">\t\tthreadedBinaryTree.threadedList(); <span class=\"comment\">// 8, 3, 10, 1, 14, 6</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//定义ThreadedBinaryTree 实现了线索化功能的二叉树</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ThreadedBinaryTree</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> HeroNode root;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//为了实现线索化，需要创建要给指向当前结点的前驱结点的指针</span></span><br><span class=\"line\">\t<span class=\"comment\">//在递归进行线索化时，pre 总是保留前一个结点</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> HeroNode pre = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setRoot</span><span class=\"params\">(HeroNode root)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.root = root;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//重载一把threadedNodes方法</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">threadedNodes</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.threadedNodes(root);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//遍历线索化二叉树的方法</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">threadedList</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//定义一个变量，存储当前遍历的结点，从root开始</span></span><br><span class=\"line\">\t\tHeroNode node = root;</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(node != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//循环的找到leftType == 1的结点，第一个找到就是8结点</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">//后面随着遍历而变化,因为当leftType==1时，说明该结点是按照线索化</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">//处理后的有效结点</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">while</span>(node.getLeftType() == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t\t\tnode = node.getLeft();</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//打印当前这个结点</span></span><br><span class=\"line\">\t\t\tSystem.out.println(node);</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//如果当前结点的右指针指向的是后继结点,就一直输出</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">while</span>(node.getRightType() == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//获取到当前结点的后继结点</span></span><br><span class=\"line\">\t\t\t\tnode = node.getRight();</span><br><span class=\"line\">\t\t\t\tSystem.out.println(node);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//替换这个遍历的结点</span></span><br><span class=\"line\">\t\t\tnode = node.getRight();</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//编写对二叉树进行中序线索化的方法</span></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * </span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> node 就是当前需要线索化的结点</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">threadedNodes</span><span class=\"params\">(HeroNode node)</span> </span>&#123;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">//如果node==null, 不能线索化</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(node == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">//(一)先线索化左子树</span></span><br><span class=\"line\">\t\tthreadedNodes(node.getLeft());</span><br><span class=\"line\">\t\t<span class=\"comment\">//(二)线索化当前结点[有难度]</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">//处理当前结点的前驱结点</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//以8结点来理解</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//8结点的.left = null , 8结点的.leftType = 1</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(node.getLeft() == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//让当前结点的左指针指向前驱结点 </span></span><br><span class=\"line\">\t\t\tnode.setLeft(pre); </span><br><span class=\"line\">\t\t\t<span class=\"comment\">//修改当前结点的左指针的类型,指向前驱结点</span></span><br><span class=\"line\">\t\t\tnode.setLeftType(<span class=\"number\">1</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">//处理后继结点</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (pre != <span class=\"keyword\">null</span> &amp;&amp; pre.getRight() == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//让前驱结点的右指针指向当前结点</span></span><br><span class=\"line\">\t\t\tpre.setRight(node);</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//修改前驱结点的右指针类型</span></span><br><span class=\"line\">\t\t\tpre.setRightType(<span class=\"number\">1</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">//!!! 每处理一个结点后，让当前结点是下一个结点的前驱结点</span></span><br><span class=\"line\">\t\tpre = node;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">//(三)在线索化右子树</span></span><br><span class=\"line\">\t\tthreadedNodes(node.getRight());</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//删除结点</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">delNode</span><span class=\"params\">(<span class=\"keyword\">int</span> no)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(root != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//如果只有一个root结点, 这里立即判断root是不是就是要删除结点</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(root.getNo() == no) &#123;</span><br><span class=\"line\">\t\t\t\troot = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//递归删除</span></span><br><span class=\"line\">\t\t\t\troot.delNode(no);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">&quot;空树，不能删除~&quot;</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//前序遍历</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">preOrder</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.root != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">this</span>.root.preOrder();</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">&quot;二叉树为空，无法遍历&quot;</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//中序遍历</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">infixOrder</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.root != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">this</span>.root.infixOrder();</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">&quot;二叉树为空，无法遍历&quot;</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//后序遍历</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">postOrder</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.root != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">this</span>.root.postOrder();</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">&quot;二叉树为空，无法遍历&quot;</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//前序遍历</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> HeroNode <span class=\"title\">preOrderSearch</span><span class=\"params\">(<span class=\"keyword\">int</span> no)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(root != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> root.preOrderSearch(no);</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//中序遍历</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> HeroNode <span class=\"title\">infixOrderSearch</span><span class=\"params\">(<span class=\"keyword\">int</span> no)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(root != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> root.infixOrderSearch(no);</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//后序遍历</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> HeroNode <span class=\"title\">postOrderSearch</span><span class=\"params\">(<span class=\"keyword\">int</span> no)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(root != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.root.postOrderSearch(no);</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//先创建HeroNode 结点</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HeroNode</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> no;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> HeroNode left; <span class=\"comment\">//默认null</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> HeroNode right; <span class=\"comment\">//默认null</span></span><br><span class=\"line\">\t<span class=\"comment\">//说明</span></span><br><span class=\"line\">\t<span class=\"comment\">//1. 如果leftType == 0 表示指向的是左子树, 如果 1 则表示指向前驱结点</span></span><br><span class=\"line\">\t<span class=\"comment\">//2. 如果rightType == 0 表示指向是右子树, 如果 1表示指向后继结点</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> leftType;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> rightType;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getLeftType</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> leftType;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setLeftType</span><span class=\"params\">(<span class=\"keyword\">int</span> leftType)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.leftType = leftType;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getRightType</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> rightType;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setRightType</span><span class=\"params\">(<span class=\"keyword\">int</span> rightType)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.rightType = rightType;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">HeroNode</span><span class=\"params\">(<span class=\"keyword\">int</span> no, String name)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.no = no;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getNo</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> no;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setNo</span><span class=\"params\">(<span class=\"keyword\">int</span> no)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.no = no;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getName</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> name;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setName</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> HeroNode <span class=\"title\">getLeft</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> left;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setLeft</span><span class=\"params\">(HeroNode left)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.left = left;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> HeroNode <span class=\"title\">getRight</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> right;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setRight</span><span class=\"params\">(HeroNode right)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.right = right;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">&quot;HeroNode [no=&quot;</span> + no + <span class=\"string\">&quot;, name=&quot;</span> + name + <span class=\"string\">&quot;]&quot;</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//递归删除结点</span></span><br><span class=\"line\">\t<span class=\"comment\">//1.如果删除的节点是叶子节点，则删除该节点</span></span><br><span class=\"line\">\t<span class=\"comment\">//2.如果删除的节点是非叶子节点，则删除该子树</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">delNode</span><span class=\"params\">(<span class=\"keyword\">int</span> no)</span> </span>&#123;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">//思路</span></span><br><span class=\"line\">\t\t<span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">\t\t * \t1. 因为我们的二叉树是单向的，所以我们是判断当前结点的子结点是否需要删除结点，而不能去判断当前这个结点是不是需要删除结点.</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t2. 如果当前结点的左子结点不为空，并且左子结点 就是要删除结点，就将this.left = null; 并且就返回(结束递归删除)</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t3. 如果当前结点的右子结点不为空，并且右子结点 就是要删除结点，就将this.right= null ;并且就返回(结束递归删除)</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t4. 如果第2和第3步没有删除结点，那么我们就需要向左子树进行递归删除</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t5.  如果第4步也没有删除结点，则应当向右子树进行递归删除.</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">\t\t */</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//2. 如果当前结点的左子结点不为空，并且左子结点 就是要删除结点，就将this.left = null; 并且就返回(结束递归删除)</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.left != <span class=\"keyword\">null</span> &amp;&amp; <span class=\"keyword\">this</span>.left.no == no) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">this</span>.left = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">//3.如果当前结点的右子结点不为空，并且右子结点 就是要删除结点，就将this.right= null ;并且就返回(结束递归删除)</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.right != <span class=\"keyword\">null</span> &amp;&amp; <span class=\"keyword\">this</span>.right.no == no) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">this</span>.right = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">//4.我们就需要向左子树进行递归删除</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.left != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">this</span>.left.delNode(no);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">//5.则应当向右子树进行递归删除</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.right != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">this</span>.right.delNode(no);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//编写前序遍历的方法</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">preOrder</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"keyword\">this</span>); <span class=\"comment\">//先输出父结点</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//递归向左子树前序遍历</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.left != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">this</span>.left.preOrder();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">//递归向右子树前序遍历</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.right != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">this</span>.right.preOrder();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//中序遍历</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">infixOrder</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">//递归向左子树中序遍历</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.left != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">this</span>.left.infixOrder();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">//输出父结点</span></span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">\t\t<span class=\"comment\">//递归向右子树中序遍历</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.right != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">this</span>.right.infixOrder();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//后序遍历</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">postOrder</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.left != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">this</span>.left.postOrder();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.right != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">this</span>.right.postOrder();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//前序遍历查找</span></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * </span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> no 查找no</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@return</span> 如果找到就返回该Node ,如果没有找到返回 null</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> HeroNode <span class=\"title\">preOrderSearch</span><span class=\"params\">(<span class=\"keyword\">int</span> no)</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;进入前序遍历&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"comment\">//比较当前结点是不是</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.no == no) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">//1.则判断当前结点的左子节点是否为空，如果不为空，则递归前序查找</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//2.如果左递归前序查找，找到结点，则返回</span></span><br><span class=\"line\">\t\tHeroNode resNode = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.left != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\tresNode = <span class=\"keyword\">this</span>.left.preOrderSearch(no);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(resNode != <span class=\"keyword\">null</span>) &#123;<span class=\"comment\">//说明我们左子树找到</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> resNode;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">//1.左递归前序查找，找到结点，则返回，否继续判断，</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//2.当前的结点的右子节点是否为空，如果不空，则继续向右递归前序查找</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.right != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\tresNode = <span class=\"keyword\">this</span>.right.preOrderSearch(no);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> resNode;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//中序遍历查找</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> HeroNode <span class=\"title\">infixOrderSearch</span><span class=\"params\">(<span class=\"keyword\">int</span> no)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//判断当前结点的左子节点是否为空，如果不为空，则递归中序查找</span></span><br><span class=\"line\">\t\tHeroNode resNode = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.left != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\tresNode = <span class=\"keyword\">this</span>.left.infixOrderSearch(no);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(resNode != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> resNode;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;进入中序查找&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"comment\">//如果找到，则返回，如果没有找到，就和当前结点比较，如果是则返回当前结点</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.no == no) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">//否则继续进行右递归的中序查找</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.right != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\tresNode = <span class=\"keyword\">this</span>.right.infixOrderSearch(no);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> resNode;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//后序遍历查找</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> HeroNode <span class=\"title\">postOrderSearch</span><span class=\"params\">(<span class=\"keyword\">int</span> no)</span> </span>&#123;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">//判断当前结点的左子节点是否为空，如果不为空，则递归后序查找</span></span><br><span class=\"line\">\t\tHeroNode resNode = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.left != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\tresNode = <span class=\"keyword\">this</span>.left.postOrderSearch(no);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(resNode != <span class=\"keyword\">null</span>) &#123;<span class=\"comment\">//说明在左子树找到</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> resNode;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">//如果左子树没有找到，则向右子树递归进行后序遍历查找</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.right != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\tresNode = <span class=\"keyword\">this</span>.right.postOrderSearch(no);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(resNode != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> resNode;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;进入后序查找&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"comment\">//如果左右子树都没有找到，就比较当前结点是不是</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.no == no) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> resNode;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"4-霍夫曼树\"><a href=\"#4-霍夫曼树\" class=\"headerlink\" title=\"4.霍夫曼树\"></a>4.霍夫曼树</h3><p><strong>基本介绍</strong></p>\n<p>1)给定n个权值作为n个<a href=\"https://baike.baidu.com/item/%E5%8F%B6%E5%AD%90%E7%BB%93%E7%82%B9/3620239\">叶子结点</a>，构造一棵二叉树，若该树的带权路径长度(wpl)达到最小，称这样的二叉树为<strong>最优二叉树</strong>，也称为<strong>哈夫曼树</strong>(Huffman Tree)<strong>, 还有的书翻译为</strong>霍夫曼树。</p>\n<p>2)赫夫曼树是带权路径长度最短的树，权值较大的结点离根较近。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> huffmantree;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Collections;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HuffmanTree</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> arr[] = &#123; <span class=\"number\">13</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">3</span>, <span class=\"number\">29</span>, <span class=\"number\">6</span>, <span class=\"number\">1</span> &#125;;</span><br><span class=\"line\">\t\tNode root = createHuffmanTree(arr);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">//测试一把</span></span><br><span class=\"line\">\t\tpreOrder(root); <span class=\"comment\">//</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//编写一个前序遍历的方法</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">preOrder</span><span class=\"params\">(Node root)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(root != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\troot.preOrder();</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">&quot;是空树，不能遍历~~&quot;</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 创建赫夫曼树的方法</span></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * </span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> arr 需要创建成哈夫曼树的数组</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@return</span> 创建好后的赫夫曼树的root结点</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Node <span class=\"title\">createHuffmanTree</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 第一步为了操作方便</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// 1. 遍历 arr 数组</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// 2. 将arr的每个元素构成成一个Node</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// 3. 将Node 放入到ArrayList中</span></span><br><span class=\"line\">\t\tList&lt;Node&gt; nodes = <span class=\"keyword\">new</span> ArrayList&lt;Node&gt;();</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> value : arr) &#123;</span><br><span class=\"line\">\t\t\tnodes.add(<span class=\"keyword\">new</span> Node(value));</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">//我们处理的过程是一个循环的过程</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(nodes.size() &gt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//排序 从小到大 </span></span><br><span class=\"line\">\t\t\tCollections.sort(nodes);</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">&quot;nodes =&quot;</span> + nodes);</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//取出根节点权值最小的两颗二叉树 </span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">//(1) 取出权值最小的结点（二叉树）</span></span><br><span class=\"line\">\t\t\tNode leftNode = nodes.get(<span class=\"number\">0</span>);</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//(2) 取出权值第二小的结点（二叉树）</span></span><br><span class=\"line\">\t\t\tNode rightNode = nodes.get(<span class=\"number\">1</span>);</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//(3)构建一颗新的二叉树</span></span><br><span class=\"line\">\t\t\tNode parent = <span class=\"keyword\">new</span> Node(leftNode.value + rightNode.value);</span><br><span class=\"line\">\t\t\tparent.left = leftNode;</span><br><span class=\"line\">\t\t\tparent.right = rightNode;</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//(4)从ArrayList删除处理过的二叉树</span></span><br><span class=\"line\">\t\t\tnodes.remove(leftNode);</span><br><span class=\"line\">\t\t\tnodes.remove(rightNode);</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//(5)将parent加入到nodes</span></span><br><span class=\"line\">\t\t\tnodes.add(parent);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">//返回哈夫曼树的root结点</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> nodes.get(<span class=\"number\">0</span>);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创建结点类</span></span><br><span class=\"line\"><span class=\"comment\">// 为了让Node 对象持续排序Collections集合排序</span></span><br><span class=\"line\"><span class=\"comment\">// 让Node 实现Comparable接口</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Node</span> <span class=\"keyword\">implements</span> <span class=\"title\">Comparable</span>&lt;<span class=\"title\">Node</span>&gt; </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> value; <span class=\"comment\">// 结点权值</span></span><br><span class=\"line\">\t<span class=\"keyword\">char</span> c; <span class=\"comment\">//字符</span></span><br><span class=\"line\">\tNode left; <span class=\"comment\">// 指向左子结点</span></span><br><span class=\"line\">\tNode right; <span class=\"comment\">// 指向右子结点</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//写一个前序遍历</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">preOrder</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.left != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">this</span>.left.preOrder();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.right != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">this</span>.right.preOrder();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Node</span><span class=\"params\">(<span class=\"keyword\">int</span> value)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.value = value;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">&quot;Node [value=&quot;</span> + value + <span class=\"string\">&quot;]&quot;</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">compareTo</span><span class=\"params\">(Node o)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// TODO Auto-generated method stub</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// 表示从小到大排序</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.value - o.value;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"5-二叉排序树\"><a href=\"#5-二叉排序树\" class=\"headerlink\" title=\"5.二叉排序树\"></a>5.二叉排序树</h3><p><strong>介绍</strong></p>\n<p>二叉排序树：BST: (Binary Sort(Search) Tree), 对于二叉排序树的任何一个非叶子节点，要求左子节点的值比当前节点的值小，右子节点的值比当前节点的值大。</p>\n<p><strong>特别说明</strong>：如果有相同的值，可以将该节点放在左子节点或右子节点</p>\n<p>比如针对前面的数据 (7, 3, 10, 12, 5, 1, 9) ，对应的二叉排序树为：</p>\n<p><img src=\"/2021/01/01/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E6%95%B4%E7%90%86/image-20210106222122233.png\" alt=\"image-20210106222122233\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> binarysorttree;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BinarySortTreeDemo</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span>[] arr = &#123;<span class=\"number\">7</span>, <span class=\"number\">3</span>, <span class=\"number\">10</span>, <span class=\"number\">12</span>, <span class=\"number\">5</span>, <span class=\"number\">1</span>, <span class=\"number\">9</span>, <span class=\"number\">2</span>&#125;;</span><br><span class=\"line\">\t\tBinarySortTree binarySortTree = <span class=\"keyword\">new</span> BinarySortTree();</span><br><span class=\"line\">\t\t<span class=\"comment\">//循环的添加结点到二叉排序树</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i&lt; arr.length; i++) &#123;</span><br><span class=\"line\">\t\t\tbinarySortTree.add(<span class=\"keyword\">new</span> Node(arr[i]));</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">//中序遍历二叉排序树</span></span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;中序遍历二叉排序树~&quot;</span>);</span><br><span class=\"line\">\t\tbinarySortTree.infixOrder(); <span class=\"comment\">// 1, 3, 5, 7, 9, 10, 12</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">//测试一下删除叶子结点</span></span><br><span class=\"line\">\t    </span><br><span class=\"line\">\t   </span><br><span class=\"line\">\t    binarySortTree.delNode(<span class=\"number\">12</span>);</span><br><span class=\"line\">\t   </span><br><span class=\"line\">\t </span><br><span class=\"line\">\t    binarySortTree.delNode(<span class=\"number\">5</span>);</span><br><span class=\"line\">\t    binarySortTree.delNode(<span class=\"number\">10</span>);</span><br><span class=\"line\">\t    binarySortTree.delNode(<span class=\"number\">2</span>);</span><br><span class=\"line\">\t    binarySortTree.delNode(<span class=\"number\">3</span>);</span><br><span class=\"line\">\t\t   </span><br><span class=\"line\">\t    binarySortTree.delNode(<span class=\"number\">9</span>);</span><br><span class=\"line\">\t    binarySortTree.delNode(<span class=\"number\">1</span>);</span><br><span class=\"line\">\t    binarySortTree.delNode(<span class=\"number\">7</span>);</span><br><span class=\"line\">\t    </span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;root=&quot;</span> + binarySortTree.getRoot());</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;删除结点后&quot;</span>);</span><br><span class=\"line\">\t\tbinarySortTree.infixOrder();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//创建二叉排序树</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BinarySortTree</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> Node root;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Node <span class=\"title\">getRoot</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> root;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//查找要删除的结点</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Node <span class=\"title\">search</span><span class=\"params\">(<span class=\"keyword\">int</span> value)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(root == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> root.search(value);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//查找父结点</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Node <span class=\"title\">searchParent</span><span class=\"params\">(<span class=\"keyword\">int</span> value)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(root == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> root.searchParent(value);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//编写方法: </span></span><br><span class=\"line\">\t<span class=\"comment\">//1. 返回的 以node 为根结点的二叉排序树的最小结点的值</span></span><br><span class=\"line\">\t<span class=\"comment\">//2. 删除node 为根结点的二叉排序树的最小结点</span></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * </span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> node 传入的结点(当做二叉排序树的根结点)</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@return</span> 返回的 以node 为根结点的二叉排序树的最小结点的值</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">delRightTreeMin</span><span class=\"params\">(Node node)</span> </span>&#123;</span><br><span class=\"line\">\t\tNode target = node;</span><br><span class=\"line\">\t\t<span class=\"comment\">//循环的查找左子节点，就会找到最小值</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(target.left != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\ttarget = target.left;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">//这时 target就指向了最小结点</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//删除最小结点</span></span><br><span class=\"line\">\t\tdelNode(target.value);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> target.value;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//删除结点</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">delNode</span><span class=\"params\">(<span class=\"keyword\">int</span> value)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(root == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//1.需求先去找到要删除的结点  targetNode</span></span><br><span class=\"line\">\t\t\tNode targetNode = search(value);</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//如果没有找到要删除的结点</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(targetNode == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//如果我们发现当前这颗二叉排序树只有一个结点</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(root.left == <span class=\"keyword\">null</span> &amp;&amp; root.right == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t\troot = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//去找到targetNode的父结点</span></span><br><span class=\"line\">\t\t\tNode parent = searchParent(value);</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//如果要删除的结点是叶子结点</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(targetNode.left == <span class=\"keyword\">null</span> &amp;&amp; targetNode.right == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//判断targetNode 是父结点的左子结点，还是右子结点</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(parent.left != <span class=\"keyword\">null</span> &amp;&amp; parent.left.value == value) &#123; <span class=\"comment\">//是左子结点</span></span><br><span class=\"line\">\t\t\t\t\tparent.left = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\t\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (parent.right != <span class=\"keyword\">null</span> &amp;&amp; parent.right.value == value) &#123;<span class=\"comment\">//是由子结点</span></span><br><span class=\"line\">\t\t\t\t\tparent.right = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (targetNode.left != <span class=\"keyword\">null</span> &amp;&amp; targetNode.right != <span class=\"keyword\">null</span>) &#123; <span class=\"comment\">//删除有两颗子树的节点</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">int</span> minVal = delRightTreeMin(targetNode.right);</span><br><span class=\"line\">\t\t\t\ttargetNode.value = minVal;</span><br><span class=\"line\">\t\t\t\t</span><br><span class=\"line\">\t\t\t\t</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> &#123; <span class=\"comment\">// 删除只有一颗子树的结点</span></span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//如果要删除的结点有左子结点 </span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(targetNode.left != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span>(parent != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"comment\">//如果 targetNode 是 parent 的左子结点</span></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">if</span>(parent.left.value == value) &#123;</span><br><span class=\"line\">\t\t\t\t\t\t\tparent.left = targetNode.left;</span><br><span class=\"line\">\t\t\t\t\t\t&#125; <span class=\"keyword\">else</span> &#123; <span class=\"comment\">//  targetNode 是 parent 的右子结点</span></span><br><span class=\"line\">\t\t\t\t\t\t\tparent.right = targetNode.left;</span><br><span class=\"line\">\t\t\t\t\t\t&#125; </span><br><span class=\"line\">\t\t\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\t\t\troot = targetNode.left;</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t&#125; <span class=\"keyword\">else</span> &#123; <span class=\"comment\">//如果要删除的结点有右子结点 </span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span>(parent != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"comment\">//如果 targetNode 是 parent 的左子结点</span></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">if</span>(parent.left.value == value) &#123;</span><br><span class=\"line\">\t\t\t\t\t\t\tparent.left = targetNode.right;</span><br><span class=\"line\">\t\t\t\t\t\t&#125; <span class=\"keyword\">else</span> &#123; <span class=\"comment\">//如果 targetNode 是 parent 的右子结点</span></span><br><span class=\"line\">\t\t\t\t\t\t\tparent.right = targetNode.right;</span><br><span class=\"line\">\t\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\t\t\troot = targetNode.right;</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//添加结点的方法</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(Node node)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(root == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\troot = node;<span class=\"comment\">//如果root为空则直接让root指向node</span></span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\troot.add(node);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//中序遍历</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">infixOrder</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(root != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\troot.infixOrder();</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">&quot;二叉排序树为空，不能遍历&quot;</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//创建Node结点</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Node</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> value;</span><br><span class=\"line\">\tNode left;</span><br><span class=\"line\">\tNode right;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Node</span><span class=\"params\">(<span class=\"keyword\">int</span> value)</span> </span>&#123;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.value = value;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//查找要删除的结点</span></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * </span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> value 希望删除的结点的值</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@return</span> 如果找到返回该结点，否则返回null</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Node <span class=\"title\">search</span><span class=\"params\">(<span class=\"keyword\">int</span> value)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(value == <span class=\"keyword\">this</span>.value) &#123; <span class=\"comment\">//找到就是该结点</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(value &lt; <span class=\"keyword\">this</span>.value) &#123;<span class=\"comment\">//如果查找的值小于当前结点，向左子树递归查找</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">//如果左子结点为空</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.left  == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.left.search(value);</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123; <span class=\"comment\">//如果查找的值不小于当前结点，向右子树递归查找</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.right == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.right.search(value);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//查找要删除结点的父结点</span></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * </span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> value 要找到的结点的值</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@return</span> 返回的是要删除的结点的父结点，如果没有就返回null</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Node <span class=\"title\">searchParent</span><span class=\"params\">(<span class=\"keyword\">int</span> value)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//如果当前结点就是要删除的结点的父结点，就返回</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>((<span class=\"keyword\">this</span>.left != <span class=\"keyword\">null</span> &amp;&amp; <span class=\"keyword\">this</span>.left.value == value) || </span><br><span class=\"line\">\t\t\t\t(<span class=\"keyword\">this</span>.right != <span class=\"keyword\">null</span> &amp;&amp; <span class=\"keyword\">this</span>.right.value == value)) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//如果查找的值小于当前结点的值, 并且当前结点的左子结点不为空</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(value &lt; <span class=\"keyword\">this</span>.value &amp;&amp; <span class=\"keyword\">this</span>.left != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.left.searchParent(value); <span class=\"comment\">//向左子树递归查找</span></span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (value &gt;= <span class=\"keyword\">this</span>.value &amp;&amp; <span class=\"keyword\">this</span>.right != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.right.searchParent(value); <span class=\"comment\">//向右子树递归查找</span></span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>; <span class=\"comment\">// 没有找到父结点</span></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">&quot;Node [value=&quot;</span> + value + <span class=\"string\">&quot;]&quot;</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//添加结点的方法</span></span><br><span class=\"line\">\t<span class=\"comment\">//递归的形式添加结点，注意需要满足二叉排序树的要求</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(Node node)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(node == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">//判断传入的结点的值，和当前子树的根结点的值关系</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(node.value &lt; <span class=\"keyword\">this</span>.value) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//如果当前结点左子结点为null</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.left == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">this</span>.left = node;</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//递归的向左子树添加</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">this</span>.left.add(node);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123; <span class=\"comment\">//添加的结点的值大于 当前结点的值</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.right == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">this</span>.right = node;</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//递归的向右子树添加</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">this</span>.right.add(node);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//中序遍历</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">infixOrder</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.left != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">this</span>.left.infixOrder();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.right != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">this</span>.right.infixOrder();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"6-平衡二叉树\"><a href=\"#6-平衡二叉树\" class=\"headerlink\" title=\"6.平衡二叉树\"></a>6.平衡二叉树</h3><p><strong>基本介绍</strong></p>\n<p>1)平衡二叉树也叫平衡二叉搜索树（Self-balancing binary search tree）又被称为AVL树， 可以<strong>保证查询效率较高</strong>。</p>\n<p>2)具有以下<strong>特点</strong>：它是一 棵空树或它的左右两个子树的高度差的绝对值不超过1，并且左右两个子树都是一棵平衡二叉树。平衡二叉树的常用实现方法有<a href=\"https://baike.baidu.com/item/%E7%BA%A2%E9%BB%91%E6%A0%91/2413209\">红黑树</a>、<a href=\"https://baike.baidu.com/item/AVL/7543015\">AVL</a>、<a href=\"https://baike.baidu.com/item/%E6%9B%BF%E7%BD%AA%E7%BE%8A%E6%A0%91/13859070\">替罪羊树</a>、<a href=\"https://baike.baidu.com/item/Treap\">Treap</a>、<a href=\"https://baike.baidu.com/item/%E4%BC%B8%E5%B1%95%E6%A0%91/7003945\">伸展树</a>等。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br><span class=\"line\">320</span><br><span class=\"line\">321</span><br><span class=\"line\">322</span><br><span class=\"line\">323</span><br><span class=\"line\">324</span><br><span class=\"line\">325</span><br><span class=\"line\">326</span><br><span class=\"line\">327</span><br><span class=\"line\">328</span><br><span class=\"line\">329</span><br><span class=\"line\">330</span><br><span class=\"line\">331</span><br><span class=\"line\">332</span><br><span class=\"line\">333</span><br><span class=\"line\">334</span><br><span class=\"line\">335</span><br><span class=\"line\">336</span><br><span class=\"line\">337</span><br><span class=\"line\">338</span><br><span class=\"line\">339</span><br><span class=\"line\">340</span><br><span class=\"line\">341</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AVLTreeDemo</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//int[] arr = &#123;4,3,6,5,7,8&#125;;</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//int[] arr = &#123; 10, 12, 8, 9, 7, 6 &#125;;</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span>[] arr = &#123; <span class=\"number\">10</span>, <span class=\"number\">11</span>, <span class=\"number\">7</span>, <span class=\"number\">6</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span> &#125;;  </span><br><span class=\"line\">\t\t<span class=\"comment\">//创建一个 AVLTree对象</span></span><br><span class=\"line\">\t\tAVLTree avlTree = <span class=\"keyword\">new</span> AVLTree();</span><br><span class=\"line\">\t\t<span class=\"comment\">//添加结点</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">\t\t\tavlTree.add(<span class=\"keyword\">new</span> Node(arr[i]));</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">//遍历</span></span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;中序遍历&quot;</span>);</span><br><span class=\"line\">\t\tavlTree.infixOrder();</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;在平衡处理~~&quot;</span>);</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;树的高度=&quot;</span> + avlTree.getRoot().height()); <span class=\"comment\">//3</span></span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;树的左子树高度=&quot;</span> + avlTree.getRoot().leftHeight()); <span class=\"comment\">// 2</span></span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;树的右子树高度=&quot;</span> + avlTree.getRoot().rightHeight()); <span class=\"comment\">// 2</span></span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;当前的根结点=&quot;</span> + avlTree.getRoot());<span class=\"comment\">//8</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创建AVLTree</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AVLTree</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> Node root;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Node <span class=\"title\">getRoot</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> root;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 查找要删除的结点</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Node <span class=\"title\">search</span><span class=\"params\">(<span class=\"keyword\">int</span> value)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (root == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> root.search(value);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 查找父结点</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Node <span class=\"title\">searchParent</span><span class=\"params\">(<span class=\"keyword\">int</span> value)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (root == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> root.searchParent(value);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 编写方法:</span></span><br><span class=\"line\">\t<span class=\"comment\">// 1. 返回的 以node 为根结点的二叉排序树的最小结点的值</span></span><br><span class=\"line\">\t<span class=\"comment\">// 2. 删除node 为根结点的二叉排序树的最小结点</span></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * </span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> node</span></span><br><span class=\"line\"><span class=\"comment\">\t *            传入的结点(当做二叉排序树的根结点)</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@return</span> 返回的 以node 为根结点的二叉排序树的最小结点的值</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">delRightTreeMin</span><span class=\"params\">(Node node)</span> </span>&#123;</span><br><span class=\"line\">\t\tNode target = node;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 循环的查找左子节点，就会找到最小值</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span> (target.left != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\ttarget = target.left;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 这时 target就指向了最小结点</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// 删除最小结点</span></span><br><span class=\"line\">\t\tdelNode(target.value);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> target.value;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 删除结点</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">delNode</span><span class=\"params\">(<span class=\"keyword\">int</span> value)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (root == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 1.需求先去找到要删除的结点 targetNode</span></span><br><span class=\"line\">\t\t\tNode targetNode = search(value);</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 如果没有找到要删除的结点</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (targetNode == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 如果我们发现当前这颗二叉排序树只有一个结点</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (root.left == <span class=\"keyword\">null</span> &amp;&amp; root.right == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t\troot = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 去找到targetNode的父结点</span></span><br><span class=\"line\">\t\t\tNode parent = searchParent(value);</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 如果要删除的结点是叶子结点</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (targetNode.left == <span class=\"keyword\">null</span> &amp;&amp; targetNode.right == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// 判断targetNode 是父结点的左子结点，还是右子结点</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (parent.left != <span class=\"keyword\">null</span> &amp;&amp; parent.left.value == value) &#123; <span class=\"comment\">// 是左子结点</span></span><br><span class=\"line\">\t\t\t\t\tparent.left = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\t\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (parent.right != <span class=\"keyword\">null</span> &amp;&amp; parent.right.value == value) &#123;<span class=\"comment\">// 是由子结点</span></span><br><span class=\"line\">\t\t\t\t\tparent.right = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (targetNode.left != <span class=\"keyword\">null</span> &amp;&amp; targetNode.right != <span class=\"keyword\">null</span>) &#123; <span class=\"comment\">// 删除有两颗子树的节点</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">int</span> minVal = delRightTreeMin(targetNode.right);</span><br><span class=\"line\">\t\t\t\ttargetNode.value = minVal;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> &#123; <span class=\"comment\">// 删除只有一颗子树的结点</span></span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// 如果要删除的结点有左子结点</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (targetNode.left != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span> (parent != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"comment\">// 如果 targetNode 是 parent 的左子结点</span></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">if</span> (parent.left.value == value) &#123;</span><br><span class=\"line\">\t\t\t\t\t\t\tparent.left = targetNode.left;</span><br><span class=\"line\">\t\t\t\t\t\t&#125; <span class=\"keyword\">else</span> &#123; <span class=\"comment\">// targetNode 是 parent 的右子结点</span></span><br><span class=\"line\">\t\t\t\t\t\t\tparent.right = targetNode.left;</span><br><span class=\"line\">\t\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\t\t\troot = targetNode.left;</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t&#125; <span class=\"keyword\">else</span> &#123; <span class=\"comment\">// 如果要删除的结点有右子结点</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span> (parent != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"comment\">// 如果 targetNode 是 parent 的左子结点</span></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">if</span> (parent.left.value == value) &#123;</span><br><span class=\"line\">\t\t\t\t\t\t\tparent.left = targetNode.right;</span><br><span class=\"line\">\t\t\t\t\t\t&#125; <span class=\"keyword\">else</span> &#123; <span class=\"comment\">// 如果 targetNode 是 parent 的右子结点</span></span><br><span class=\"line\">\t\t\t\t\t\t\tparent.right = targetNode.right;</span><br><span class=\"line\">\t\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\t\t\troot = targetNode.right;</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 添加结点的方法</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(Node node)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (root == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\troot = node;<span class=\"comment\">// 如果root为空则直接让root指向node</span></span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\troot.add(node);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 中序遍历</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">infixOrder</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (root != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\troot.infixOrder();</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">&quot;二叉排序树为空，不能遍历&quot;</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创建Node结点</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Node</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> value;</span><br><span class=\"line\">\tNode left;</span><br><span class=\"line\">\tNode right;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Node</span><span class=\"params\">(<span class=\"keyword\">int</span> value)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.value = value;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 返回左子树的高度</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">leftHeight</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (left == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> left.height();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 返回右子树的高度</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">rightHeight</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (right == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> right.height();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 返回 以该结点为根结点的树的高度</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">height</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> Math.max(left == <span class=\"keyword\">null</span> ? <span class=\"number\">0</span> : left.height(), right == <span class=\"keyword\">null</span> ? <span class=\"number\">0</span> : right.height()) + <span class=\"number\">1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//左旋转方法</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">leftRotate</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">//创建新的结点，以当前根结点的值</span></span><br><span class=\"line\">\t\tNode newNode = <span class=\"keyword\">new</span> Node(value);</span><br><span class=\"line\">\t\t<span class=\"comment\">//把新的结点的左子树设置成当前结点的左子树</span></span><br><span class=\"line\">\t\tnewNode.left = left;</span><br><span class=\"line\">\t\t<span class=\"comment\">//把新的结点的右子树设置成带你过去结点的右子树的左子树</span></span><br><span class=\"line\">\t\tnewNode.right = right.left;</span><br><span class=\"line\">\t\t<span class=\"comment\">//把当前结点的值替换成右子结点的值</span></span><br><span class=\"line\">\t\tvalue = right.value;</span><br><span class=\"line\">\t\t<span class=\"comment\">//把当前结点的右子树设置成当前结点右子树的右子树</span></span><br><span class=\"line\">\t\tright = right.right;</span><br><span class=\"line\">\t\t<span class=\"comment\">//把当前结点的左子树(左子结点)设置成新的结点</span></span><br><span class=\"line\">\t\tleft = newNode;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//右旋转</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">rightRotate</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tNode newNode = <span class=\"keyword\">new</span> Node(value);</span><br><span class=\"line\">\t\tnewNode.right = right;</span><br><span class=\"line\">\t\tnewNode.left = left.right;</span><br><span class=\"line\">\t\tvalue = left.value;</span><br><span class=\"line\">\t\tleft = left.left;</span><br><span class=\"line\">\t\tright = newNode;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 查找要删除的结点</span></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * </span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> value</span></span><br><span class=\"line\"><span class=\"comment\">\t *            希望删除的结点的值</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@return</span> 如果找到返回该结点，否则返回null</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Node <span class=\"title\">search</span><span class=\"params\">(<span class=\"keyword\">int</span> value)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (value == <span class=\"keyword\">this</span>.value) &#123; <span class=\"comment\">// 找到就是该结点</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (value &lt; <span class=\"keyword\">this</span>.value) &#123;<span class=\"comment\">// 如果查找的值小于当前结点，向左子树递归查找</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 如果左子结点为空</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.left == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.left.search(value);</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123; <span class=\"comment\">// 如果查找的值不小于当前结点，向右子树递归查找</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.right == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.right.search(value);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 查找要删除结点的父结点</span></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * </span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> value</span></span><br><span class=\"line\"><span class=\"comment\">\t *            要找到的结点的值</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@return</span> 返回的是要删除的结点的父结点，如果没有就返回null</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Node <span class=\"title\">searchParent</span><span class=\"params\">(<span class=\"keyword\">int</span> value)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 如果当前结点就是要删除的结点的父结点，就返回</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> ((<span class=\"keyword\">this</span>.left != <span class=\"keyword\">null</span> &amp;&amp; <span class=\"keyword\">this</span>.left.value == value) || (<span class=\"keyword\">this</span>.right != <span class=\"keyword\">null</span> &amp;&amp; <span class=\"keyword\">this</span>.right.value == value)) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 如果查找的值小于当前结点的值, 并且当前结点的左子结点不为空</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (value &lt; <span class=\"keyword\">this</span>.value &amp;&amp; <span class=\"keyword\">this</span>.left != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.left.searchParent(value); <span class=\"comment\">// 向左子树递归查找</span></span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (value &gt;= <span class=\"keyword\">this</span>.value &amp;&amp; <span class=\"keyword\">this</span>.right != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.right.searchParent(value); <span class=\"comment\">// 向右子树递归查找</span></span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>; <span class=\"comment\">// 没有找到父结点</span></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">&quot;Node [value=&quot;</span> + value + <span class=\"string\">&quot;]&quot;</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 添加结点的方法</span></span><br><span class=\"line\">\t<span class=\"comment\">// 递归的形式添加结点，注意需要满足二叉排序树的要求</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(Node node)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (node == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 判断传入的结点的值，和当前子树的根结点的值关系</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (node.value &lt; <span class=\"keyword\">this</span>.value) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 如果当前结点左子结点为null</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.left == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">this</span>.left = node;</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// 递归的向左子树添加</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">this</span>.left.add(node);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123; <span class=\"comment\">// 添加的结点的值大于 当前结点的值</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.right == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">this</span>.right = node;</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// 递归的向右子树添加</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">this</span>.right.add(node);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">//当添加完一个结点后，如果: (右子树的高度-左子树的高度) &gt; 1 , 左旋转</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(rightHeight() - leftHeight() &gt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//如果它的右子树的左子树的高度大于它的右子树的右子树的高度</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(right != <span class=\"keyword\">null</span> &amp;&amp; right.leftHeight() &gt; right.rightHeight()) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//先对右子结点进行右旋转</span></span><br><span class=\"line\">\t\t\t\tright.rightRotate();</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//然后在对当前结点进行左旋转</span></span><br><span class=\"line\">\t\t\t\tleftRotate(); <span class=\"comment\">//左旋转..</span></span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//直接进行左旋转即可</span></span><br><span class=\"line\">\t\t\t\tleftRotate();</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> ; <span class=\"comment\">//必须要!!!</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">//当添加完一个结点后，如果 (左子树的高度 - 右子树的高度) &gt; 1, 右旋转</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(leftHeight() - rightHeight() &gt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//如果它的左子树的右子树高度大于它的左子树的高度</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(left != <span class=\"keyword\">null</span> &amp;&amp; left.rightHeight() &gt; left.leftHeight()) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//先对当前结点的左结点(左子树)-&gt;左旋转</span></span><br><span class=\"line\">\t\t\t\tleft.leftRotate();</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//再对当前结点进行右旋转</span></span><br><span class=\"line\">\t\t\t\trightRotate();</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//直接进行右旋转即可</span></span><br><span class=\"line\">\t\t\t\trightRotate();</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 中序遍历</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">infixOrder</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.left != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">this</span>.left.infixOrder();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.right != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">this</span>.right.infixOrder();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"九、图\"><a href=\"#九、图\" class=\"headerlink\" title=\"九、图\"></a>九、图</h2><h3 id=\"1-图的表示方式\"><a href=\"#1-图的表示方式\" class=\"headerlink\" title=\"1.图的表示方式\"></a>1.图的表示方式</h3><p>​    邻接矩阵</p>\n<p>​    邻接表</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> graph;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Arrays;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.LinkedList;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Graph</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> ArrayList&lt;String&gt; vertexList; <span class=\"comment\">//存储顶点集合</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span>[][] edges; <span class=\"comment\">//存储图对应的邻结矩阵</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> numOfEdges; <span class=\"comment\">//表示边的数目</span></span><br><span class=\"line\">\t<span class=\"comment\">//定义给数组boolean[], 记录某个结点是否被访问</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span>[] isVisited;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//测试一把图是否创建ok</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> n = <span class=\"number\">8</span>;  <span class=\"comment\">//结点的个数</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//String Vertexs[] = &#123;&quot;A&quot;, &quot;B&quot;, &quot;C&quot;, &quot;D&quot;, &quot;E&quot;&#125;;</span></span><br><span class=\"line\">\t\tString Vertexs[] = &#123;<span class=\"string\">&quot;1&quot;</span>, <span class=\"string\">&quot;2&quot;</span>, <span class=\"string\">&quot;3&quot;</span>, <span class=\"string\">&quot;4&quot;</span>, <span class=\"string\">&quot;5&quot;</span>, <span class=\"string\">&quot;6&quot;</span>, <span class=\"string\">&quot;7&quot;</span>, <span class=\"string\">&quot;8&quot;</span>&#125;;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">//创建图对象</span></span><br><span class=\"line\">\t\tGraph graph = <span class=\"keyword\">new</span> Graph(n);</span><br><span class=\"line\">\t\t<span class=\"comment\">//循环的添加顶点</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(String vertex: Vertexs) &#123;</span><br><span class=\"line\">\t\t\tgraph.insertVertex(vertex);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">//添加边</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//A-B A-C B-C B-D B-E </span></span><br><span class=\"line\"><span class=\"comment\">//\t\tgraph.insertEdge(0, 1, 1); // A-B</span></span><br><span class=\"line\"><span class=\"comment\">//\t\tgraph.insertEdge(0, 2, 1); // </span></span><br><span class=\"line\"><span class=\"comment\">//\t\tgraph.insertEdge(1, 2, 1); // </span></span><br><span class=\"line\"><span class=\"comment\">//\t\tgraph.insertEdge(1, 3, 1); // </span></span><br><span class=\"line\"><span class=\"comment\">//\t\tgraph.insertEdge(1, 4, 1); // </span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">//更新边的关系</span></span><br><span class=\"line\">\t\tgraph.insertEdge(<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">\t\tgraph.insertEdge(<span class=\"number\">0</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">\t\tgraph.insertEdge(<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">\t\tgraph.insertEdge(<span class=\"number\">1</span>, <span class=\"number\">4</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">\t\tgraph.insertEdge(<span class=\"number\">3</span>, <span class=\"number\">7</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">\t\tgraph.insertEdge(<span class=\"number\">4</span>, <span class=\"number\">7</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">\t\tgraph.insertEdge(<span class=\"number\">2</span>, <span class=\"number\">5</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">\t\tgraph.insertEdge(<span class=\"number\">2</span>, <span class=\"number\">6</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">\t\tgraph.insertEdge(<span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">//显示一把邻结矩阵</span></span><br><span class=\"line\">\t\tgraph.showGraph();</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">//测试一把，我们的dfs遍历是否ok</span></span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;深度遍历&quot;</span>);</span><br><span class=\"line\">\t\tgraph.dfs(); <span class=\"comment\">// A-&gt;B-&gt;C-&gt;D-&gt;E [1-&gt;2-&gt;4-&gt;8-&gt;5-&gt;3-&gt;6-&gt;7]</span></span><br><span class=\"line\"><span class=\"comment\">//\t\tSystem.out.println();</span></span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;广度优先!&quot;</span>);</span><br><span class=\"line\">\t\tgraph.bfs(); <span class=\"comment\">// A-&gt;B-&gt;C-&gt;D-E [1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;6-&gt;7-&gt;8]</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//构造器</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Graph</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//初始化矩阵和vertexList</span></span><br><span class=\"line\">\t\tedges = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[n][n];</span><br><span class=\"line\">\t\tvertexList = <span class=\"keyword\">new</span> ArrayList&lt;String&gt;(n);</span><br><span class=\"line\">\t\tnumOfEdges = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//得到第一个邻接结点的下标 w </span></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * </span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> index </span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@return</span> 如果存在就返回对应的下标，否则返回-1</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getFirstNeighbor</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; vertexList.size(); j++) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(edges[index][j] &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> j;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//根据前一个邻接结点的下标来获取下一个邻接结点</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getNextNeighbor</span><span class=\"params\">(<span class=\"keyword\">int</span> v1, <span class=\"keyword\">int</span> v2)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = v2 + <span class=\"number\">1</span>; j &lt; vertexList.size(); j++) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(edges[v1][j] &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> j;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//深度优先遍历算法</span></span><br><span class=\"line\">\t<span class=\"comment\">//i 第一次就是 0</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">boolean</span>[] isVisited, <span class=\"keyword\">int</span> i)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//首先我们访问该结点,输出</span></span><br><span class=\"line\">\t\tSystem.out.print(getValueByIndex(i) + <span class=\"string\">&quot;-&gt;&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"comment\">//将结点设置为已经访问</span></span><br><span class=\"line\">\t\tisVisited[i] = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">\t\t<span class=\"comment\">//查找结点i的第一个邻接结点w</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> w = getFirstNeighbor(i);</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(w != -<span class=\"number\">1</span>) &#123;<span class=\"comment\">//说明有</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(!isVisited[w]) &#123;</span><br><span class=\"line\">\t\t\t\tdfs(isVisited, w);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//如果w结点已经被访问过</span></span><br><span class=\"line\">\t\t\tw = getNextNeighbor(i, w);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//对dfs 进行一个重载, 遍历我们所有的结点，并进行 dfs</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tisVisited = <span class=\"keyword\">new</span> <span class=\"keyword\">boolean</span>[vertexList.size()];</span><br><span class=\"line\">\t\t<span class=\"comment\">//遍历所有的结点，进行dfs[回溯]</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; getNumOfVertex(); i++) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(!isVisited[i]) &#123;</span><br><span class=\"line\">\t\t\t\tdfs(isVisited, i);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//对一个结点进行广度优先遍历的方法</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">bfs</span><span class=\"params\">(<span class=\"keyword\">boolean</span>[] isVisited, <span class=\"keyword\">int</span> i)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> u ; <span class=\"comment\">// 表示队列的头结点对应下标</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> w ; <span class=\"comment\">// 邻接结点w</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//队列，记录结点访问的顺序</span></span><br><span class=\"line\">\t\tLinkedList queue = <span class=\"keyword\">new</span> LinkedList();</span><br><span class=\"line\">\t\t<span class=\"comment\">//访问结点，输出结点信息</span></span><br><span class=\"line\">\t\tSystem.out.print(getValueByIndex(i) + <span class=\"string\">&quot;=&gt;&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"comment\">//标记为已访问</span></span><br><span class=\"line\">\t\tisVisited[i] = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">\t\t<span class=\"comment\">//将结点加入队列</span></span><br><span class=\"line\">\t\tqueue.addLast(i);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>( !queue.isEmpty()) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//取出队列的头结点下标</span></span><br><span class=\"line\">\t\t\tu = (Integer)queue.removeFirst();</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//得到第一个邻接结点的下标 w </span></span><br><span class=\"line\">\t\t\tw = getFirstNeighbor(u);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">while</span>(w != -<span class=\"number\">1</span>) &#123;<span class=\"comment\">//找到</span></span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//是否访问过</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(!isVisited[w]) &#123;</span><br><span class=\"line\">\t\t\t\t\tSystem.out.print(getValueByIndex(w) + <span class=\"string\">&quot;=&gt;&quot;</span>);</span><br><span class=\"line\">\t\t\t\t\t<span class=\"comment\">//标记已经访问</span></span><br><span class=\"line\">\t\t\t\t\tisVisited[w] = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"comment\">//入队</span></span><br><span class=\"line\">\t\t\t\t\tqueue.addLast(w);</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//以u为前驱点，找w后面的下一个邻结点</span></span><br><span class=\"line\">\t\t\t\tw = getNextNeighbor(u, w); <span class=\"comment\">//体现出我们的广度优先</span></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t&#125; </span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//遍历所有的结点，都进行广度优先搜索</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">bfs</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tisVisited = <span class=\"keyword\">new</span> <span class=\"keyword\">boolean</span>[vertexList.size()];</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; getNumOfVertex(); i++) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(!isVisited[i]) &#123;</span><br><span class=\"line\">\t\t\t\tbfs(isVisited, i);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//图中常用的方法</span></span><br><span class=\"line\">\t<span class=\"comment\">//返回结点的个数</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getNumOfVertex</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> vertexList.size();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//显示图对应的矩阵</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">showGraph</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span>[] link : edges) &#123;</span><br><span class=\"line\">\t\t\tSystem.err.println(Arrays.toString(link));</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//得到边的数目</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getNumOfEdges</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> numOfEdges;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//返回结点i(下标)对应的数据 0-&gt;&quot;A&quot; 1-&gt;&quot;B&quot; 2-&gt;&quot;C&quot;</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getValueByIndex</span><span class=\"params\">(<span class=\"keyword\">int</span> i)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> vertexList.get(i);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//返回v1和v2的权值</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getWeight</span><span class=\"params\">(<span class=\"keyword\">int</span> v1, <span class=\"keyword\">int</span> v2)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> edges[v1][v2];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//插入结点</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">insertVertex</span><span class=\"params\">(String vertex)</span> </span>&#123;</span><br><span class=\"line\">\t\tvertexList.add(vertex);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//添加边</span></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * </span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> v1 表示点的下标即使第几个顶点  &quot;A&quot;-&quot;B&quot; &quot;A&quot;-&gt;0 &quot;B&quot;-&gt;1</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> v2 第二个顶点对应的下标</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> weight 表示 </span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">insertEdge</span><span class=\"params\">(<span class=\"keyword\">int</span> v1, <span class=\"keyword\">int</span> v2, <span class=\"keyword\">int</span> weight)</span> </span>&#123;</span><br><span class=\"line\">\t\tedges[v1][v2] = weight;</span><br><span class=\"line\">\t\tedges[v2][v1] = weight;</span><br><span class=\"line\">\t\tnumOfEdges++;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"十、常用算法\"><a href=\"#十、常用算法\" class=\"headerlink\" title=\"十、常用算法\"></a>十、常用算法</h2><h3 id=\"1-查找算法\"><a href=\"#1-查找算法\" class=\"headerlink\" title=\"1.查找算法\"></a>1.查找算法</h3><h4 id=\"二分查找和插值查找\"><a href=\"#二分查找和插值查找\" class=\"headerlink\" title=\"二分查找和插值查找\"></a>二分查找和插值查找</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 循环实现二分查找算法，已排好序得数组arrays,-1无法查到数据</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> ele</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">binSearch</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr, <span class=\"keyword\">int</span> ele)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//第一个下标</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> sIndex = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"comment\">//最后一个下标</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> eIndex = arr.length - <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (sIndex &lt;= eIndex) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> mIndex = sIndex + (eIndex - sIndex) / <span class=\"number\">2</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (ele == arr[mIndex]) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> mIndex;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (ele &lt; arr[mIndex]) &#123;</span><br><span class=\"line\">                eIndex = mIndex - <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                sIndex = mIndex + <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 递归实现二分查找</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">recurSeach</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr, <span class=\"keyword\">int</span> ele, <span class=\"keyword\">int</span> sIndex, <span class=\"keyword\">int</span> eIndex)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> mIndex = sIndex + (eIndex - sIndex) / <span class=\"number\">2</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ele &lt; arr[sIndex] || ele &gt; arr[eIndex] || sIndex &gt; eIndex) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (arr[mIndex] == ele) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> mIndex;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (ele &lt; arr[mIndex]) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> recurSeach(arr, ele, sIndex, mIndex - <span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> recurSeach(arr, ele, mIndex + <span class=\"number\">1</span>, eIndex);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//编写插值查找算法</span></span><br><span class=\"line\">\t<span class=\"comment\">//说明：插值查找算法，也要求数组是有序的</span></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * </span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> arr 数组</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> left 左边索引</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> right 右边索引</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> findVal 查找值</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@return</span> 如果找到，就返回对应的下标，如果没有找到，返回-1</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">insertValueSearch</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr, <span class=\"keyword\">int</span> left, <span class=\"keyword\">int</span> right, <span class=\"keyword\">int</span> findVal)</span> </span>&#123; </span><br><span class=\"line\"></span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;插值查找次数~~&quot;</span>);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">//注意：findVal &lt; arr[0]  和  findVal &gt; arr[arr.length - 1] 必须需要</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//否则我们得到的 mid 可能越界</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (left &gt; right || findVal &lt; arr[<span class=\"number\">0</span>] || findVal &gt; arr[arr.length - <span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 求出mid, 自适应 应用数据公式 y=kx + b，这里mid不是中值的意思，而是找到最接近的索引，(left,arr[left]),(right,arr[right])</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> mid = left + (right - left) * (findVal - arr[left]) / (arr[right] - arr[left]);</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> midVal = arr[mid];</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (findVal &gt; midVal) &#123; <span class=\"comment\">// 说明应该向右边递归</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> insertValueSearch(arr, mid + <span class=\"number\">1</span>, right, findVal);</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (findVal &lt; midVal) &#123; <span class=\"comment\">// 说明向左递归查找</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> insertValueSearch(arr, left, mid - <span class=\"number\">1</span>, findVal);</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> mid;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 这里我们实现的线性查找是找到一个满足条件的值，就返回</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> arr</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> value</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">seqSearch</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr, <span class=\"keyword\">int</span> value)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 线性查找是逐一比对，发现有相同值，就返回下标</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(arr[i] == value) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> i;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"斐波那契-黄金分割法-查找算法\"><a href=\"#斐波那契-黄金分割法-查找算法\" class=\"headerlink\" title=\"斐波那契(黄金分割法)查找算法\"></a>斐波那契(黄金分割法)查找算法</h4><p><strong>斐波那契(黄金分割法)原理</strong>:</p>\n<p><strong>斐波那契查找</strong>原理与前两种相似，仅仅<br> 改变了中间结点（mid）的位置，mid不<br> 再是中间或插值得到，而是位于黄金分<br> 割点附近，即**mid=low+F(k-1)-1<br>** （F代表斐波那契数列），如下图所示</p>\n<p><img src=\"/2021/01/01/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E6%95%B4%E7%90%86/image-20210109154304890.png\" alt=\"image-20210109154304890\"></p>\n<p>对F(k-1)-1的理解：</p>\n<p>1)由斐波那契数列 <strong>F[k]=F[k-1]+F[k-2]</strong> 的性质，可以得到 <strong>（F[k]-1）=（F[k-1]-1）+（F[k-2]-1+1</strong> 。该式说明：只要顺序表的长度为<strong>F[k]-1</strong>，则可以将该表分成长度为<strong>F[k-1]-1</strong>和<strong>F[k-2]-1</strong>的两段，即如上图所示。从而中间位置为mid=low+Fk-1)-1</p>\n<p>2)类似的，每一子段也可以用相同的方式分割</p>\n<p>3)但顺序表长度n不一定刚好等于F[k]-1，所以需要将原来的顺序表长度n增加至F[k]-1。这里的k值只要能使得F[k]-1恰好大于或等于n即可，由以下代码得到,顺序表长度增加后，新增的位置（从n+1到F[k]-1位置），都赋为n位置的值即可。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> search;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Arrays;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FibonacciSearch</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> maxSize = <span class=\"number\">20</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] arr = &#123;<span class=\"number\">1</span>, <span class=\"number\">8</span>, <span class=\"number\">10</span>, <span class=\"number\">89</span>, <span class=\"number\">1000</span>, <span class=\"number\">1234</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;index=&quot;</span> + fibSearch(arr, <span class=\"number\">189</span>));<span class=\"comment\">// 0</span></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//因为后面我们mid=low+F(k-1)-1，需要使用到斐波那契数列，因此我们需要先获取到一个斐波那契数列</span></span><br><span class=\"line\">    <span class=\"comment\">//非递归方法得到一个斐波那契数列</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span>[] fib() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] f = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[maxSize];</span><br><span class=\"line\">        f[<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        f[<span class=\"number\">1</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">2</span>; i &lt; maxSize; i++) &#123;</span><br><span class=\"line\">            f[i] = f[i - <span class=\"number\">1</span>] + f[i - <span class=\"number\">2</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> f;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//编写斐波那契查找算法</span></span><br><span class=\"line\">    <span class=\"comment\">//使用非递归的方式编写算法</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> a   数组</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key 我们需要查找的关键码(值)</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 返回对应的下标，如果没有-1</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">fibSearch</span><span class=\"params\">(<span class=\"keyword\">int</span>[] a, <span class=\"keyword\">int</span> key)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> low = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> high = a.length - <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> k = <span class=\"number\">0</span>; <span class=\"comment\">//表示斐波那契分割数值的下标</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> mid = <span class=\"number\">0</span>; <span class=\"comment\">//存放mid值</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] f = fib(); <span class=\"comment\">//获取到斐波那契数列</span></span><br><span class=\"line\">        <span class=\"comment\">//获取到斐波那契分割数值的下标</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (high &gt; f[k] - <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            k++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//因为 f[k] 值 可能大于 a 的 长度，因此我们需要使用Arrays类，构造一个新的数组，并指向temp[]</span></span><br><span class=\"line\">        <span class=\"comment\">//不足的部分会使用0填充</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] temp = Arrays.copyOf(a, f[k]);</span><br><span class=\"line\"><span class=\"comment\">//\t\tSystem.out.println(Arrays.toString(temp));</span></span><br><span class=\"line\">        <span class=\"comment\">//实际上需求使用a数组最后的数填充 temp</span></span><br><span class=\"line\">        <span class=\"comment\">//举例:</span></span><br><span class=\"line\">        <span class=\"comment\">//temp = &#123;1,8, 10, 89, 1000, 1234, 0, 0&#125;  =&gt; &#123;1,8, 10, 89, 1000, 1234, 1234, 1234,&#125;</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = high + <span class=\"number\">1</span>; i &lt; temp.length; i++) &#123;</span><br><span class=\"line\">            temp[i] = a[high];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 使用while来循环处理，找到我们的数 key</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (low &lt;= high) &#123; <span class=\"comment\">// 只要这个条件满足，就可以找</span></span><br><span class=\"line\">            mid = low + f[k - <span class=\"number\">1</span>] - <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (key &lt; temp[mid]) &#123; <span class=\"comment\">//我们应该继续向数组的前面查找(左边)</span></span><br><span class=\"line\">                high = mid - <span class=\"number\">1</span>;</span><br><span class=\"line\">                <span class=\"comment\">//为甚是 k--</span></span><br><span class=\"line\">                <span class=\"comment\">//说明</span></span><br><span class=\"line\">                <span class=\"comment\">//1. 全部元素 = 前面的元素 + 后边元素</span></span><br><span class=\"line\">                <span class=\"comment\">//2. f[k] = f[k-1] + f[k-2]</span></span><br><span class=\"line\">                <span class=\"comment\">//因为 前面有 f[k-1]个元素,所以可以继续拆分 f[k-1] = f[k-2] + f[k-3]</span></span><br><span class=\"line\">                <span class=\"comment\">//即 在 f[k-1] 的前面继续查找 k--</span></span><br><span class=\"line\">                <span class=\"comment\">//即下次循环 mid = f[k-1-1]-1</span></span><br><span class=\"line\">                k--;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (key &gt; temp[mid]) &#123; <span class=\"comment\">// 我们应该继续向数组的后面查找(右边)</span></span><br><span class=\"line\">                low = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">                <span class=\"comment\">//为什么是k -=2</span></span><br><span class=\"line\">                <span class=\"comment\">//说明</span></span><br><span class=\"line\">                <span class=\"comment\">//1. 全部元素 = 前面的元素 + 后边元素</span></span><br><span class=\"line\">                <span class=\"comment\">//2. f[k] = f[k-1] + f[k-2]</span></span><br><span class=\"line\">                <span class=\"comment\">//3. 因为后面我们有f[k-2] 所以可以继续拆分 f[k-1] = f[k-3] + f[k-4]</span></span><br><span class=\"line\">                <span class=\"comment\">//4. 即在f[k-2] 的前面进行查找 k -=2</span></span><br><span class=\"line\">                <span class=\"comment\">//5. 即下次循环 mid = f[k - 1 - 2] - 1</span></span><br><span class=\"line\">                k -= <span class=\"number\">2</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123; <span class=\"comment\">//找到</span></span><br><span class=\"line\">                <span class=\"comment\">//需要确定，返回的是哪个下标</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (mid &lt;= high) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> mid;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> high;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"2-全排列\"><a href=\"#2-全排列\" class=\"headerlink\" title=\"2.全排列\"></a>2.全排列</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    </span><br><span class=\"line\">\t<span class=\"comment\">/** 完整代码如下：</span></span><br><span class=\"line\"><span class=\"comment\">     * fullSort方法接收三个参数，数组arr，起始位置start，终止为止end，意思就是完成arr数组从start到end之间记录的全排列。</span></span><br><span class=\"line\"><span class=\"comment\">     * 分两个步骤：</span></span><br><span class=\"line\"><span class=\"comment\">     * （1）确定第一位的字符</span></span><br><span class=\"line\"><span class=\"comment\">     * 数组arr从start到end的所有记录都可以出现在第一个位置，所以直接一个for循环，考虑了这所有的情况。在for循环中，swap方法就是交换i和start位置的数，保证当前i指向的记录出现在第一个位置，也就是start指向的位置</span></span><br><span class=\"line\"><span class=\"comment\">     * （2）剩下的记录继续做全排列</span></span><br><span class=\"line\"><span class=\"comment\">     * 这个就是一个递归函数的调用，只需要修改起始位置，也就是start+1，因为start的位置已经放了记录，所以只需要继续做从start+1到end的全排列即可</span></span><br><span class=\"line\"><span class=\"comment\">     * 至于紧接着的一个swap方法是做什么的呢？因为数组传递的是地址，所以所有的修改对所有人都是共享的，因此为了保证每一次的交换不会对下一次的交换产生影响，要重新交换一下位置，也就是复原，不然对下一次的交换就有影响了</span></span><br><span class=\"line\"><span class=\"comment\">     * 递归的终止条件就是当start==end，也就是只有一个记录需要做全排列，也就是到了最后一个记录，这就是全排列的一种情况，输入本次的记录，也就是数组arr即可。</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> arr</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> start</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> end</span></span><br><span class=\"line\"><span class=\"comment\">     */</span>  </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">fullSort</span><span class=\"params\">(<span class=\"keyword\">int</span> arr[], <span class=\"keyword\">int</span> start, <span class=\"keyword\">int</span> end)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//递归终止条件</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (start == end) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i : arr) &#123;</span><br><span class=\"line\">                System.out.print(i);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            System.out.println();</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = start; i &lt;= end; i++) &#123;</span><br><span class=\"line\">            swap(arr, i, start);</span><br><span class=\"line\">            fullSort(arr, start + <span class=\"number\">1</span>, end);</span><br><span class=\"line\">            swap(arr, i, start);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-分治算法\"><a href=\"#3-分治算法\" class=\"headerlink\" title=\"3.分治算法\"></a>3.分治算法</h3><p><strong>分治算法的基本步骤</strong></p>\n<p>分治法在每一层递归上都有三个步骤：</p>\n<p>1)分解：将原问题分解为若干个规模较小，相互独立，与原问题形式相同的子问题</p>\n<p>2)解决：若子问题规模较小而容易被解决则直接解，否则递归地解各个子问题</p>\n<p>3)合并：将各个子问题的解合并为原问题的解。</p>\n<p>常见的分治算法有汉诺塔和归并排序等</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//汉诺塔的移动的方法</span></span><br><span class=\"line\">\t<span class=\"comment\">//使用分治算法</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">hanoiTower</span><span class=\"params\">(<span class=\"keyword\">int</span> num, <span class=\"keyword\">char</span> a, <span class=\"keyword\">char</span> b, <span class=\"keyword\">char</span> c)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//如果只有一个盘</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(num == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">&quot;第1个盘从 &quot;</span> + a + <span class=\"string\">&quot;-&gt;&quot;</span> + c);</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//如果我们有 n &gt;= 2 情况，我们总是可以看做是两个盘 1.最下边的一个盘 2. 上面的所有盘</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">//1. 先把 最上面的所有盘 A-&gt;B， 移动过程会使用到 c</span></span><br><span class=\"line\">\t\t\thanoiTower(num - <span class=\"number\">1</span>, a, c, b);</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//2. 把最下边的盘 A-&gt;C</span></span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">&quot;第&quot;</span> + num + <span class=\"string\">&quot;个盘从 &quot;</span> + a + <span class=\"string\">&quot;-&gt;&quot;</span> + c);</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//3. 把B塔的所有盘 从 B-&gt;C , 移动过程使用到 a塔  </span></span><br><span class=\"line\">\t\t\thanoiTower(num - <span class=\"number\">1</span>, b, a, c);</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"4-动态规划\"><a href=\"#4-动态规划\" class=\"headerlink\" title=\"4.动态规划\"></a>4.动态规划</h3><p><strong>应用场景背包问题</strong></p>\n<p>背包问题：有一个背包，容量为4磅 ， 现有如下物品</p>\n<table>\n<thead>\n<tr>\n<th><strong>物品</strong></th>\n<th><strong>重量</strong></th>\n<th><strong>价格</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>吉他(G)</td>\n<td>1</td>\n<td>1500</td>\n</tr>\n<tr>\n<td>音响(S)</td>\n<td>4</td>\n<td>3000</td>\n</tr>\n<tr>\n<td>电脑(L)</td>\n<td>3</td>\n<td>2000</td>\n</tr>\n</tbody></table>\n<p>1)要求达到的目标为装入的背包的总价值最大，并且重量不超出</p>\n<p>2)要求装入的物品不能重复</p>\n<table>\n<thead>\n<tr>\n<th><strong>物品</strong></th>\n<th><strong>0</strong> <strong>磅</strong></th>\n<th><strong>1磅</strong></th>\n<th><strong>2磅</strong></th>\n<th><strong>3磅</strong></th>\n<th><strong>4磅</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td></td>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n</tr>\n<tr>\n<td>吉他(G)</td>\n<td>0</td>\n<td>1500(G)</td>\n<td>1500(G)</td>\n<td>1500(G)</td>\n<td>1500(G)</td>\n</tr>\n<tr>\n<td>音响(S)</td>\n<td>0</td>\n<td>1500(G)</td>\n<td>1500(G)</td>\n<td>1500(G)</td>\n<td>3000(S)</td>\n</tr>\n<tr>\n<td>电脑(L)</td>\n<td>0</td>\n<td>1500(G)</td>\n<td>1500(G)</td>\n<td>2000(L)</td>\n<td>3500(L+G)</td>\n</tr>\n<tr>\n<td><strong>思路分析和图解</strong></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>算法的主要思想，利用动态规划来解决。每次遍历到的第i个物品，根据w[i]和v[i]来确定是否需要将该物品放入背包中。即对于给定的n个物品，设v[i]、w[i]分别为第i个物品的价值和重量，C为背包的容量。再令v[i][j]表示在前i个物品中能够装入容量为j的背包中的最大价值。则我们有下面的结果：\u000b\u000b(1)  v[i][0]=v[0][j]=0; //表示 填入表 第一行和第一列是0</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody></table>\n<pre><code>  (2) 当w[i]&gt; j 时：v[i][j]=v[i-1][j]   // 当准备加入新增的商品的容量大于 当前背包的容量时，就直接使用上一个单元格的装入策略\n  (3) 当j&gt;=w[i]时： v[i][j]=max&#123;v[i-1][j], v[i]+v[i-1][j-w[i]]&#125;  </code></pre>\n<p>// 当 准备加入的新增的商品的容量小于等于当前背包的容量,<br>// 装入的方式:<br>v[i-1][j]： 就是上一个单元格的装入的最大值<br>v[i] : 表示当前商品的价值<br>v[i-1][j-w[i]] ： 装入i-1商品，到剩余空间j-w[i]的最大值<br>当j&gt;=w[i]时： v[i][j]=max{v[i-1][j], v[i]+v[i-1][j-w[i]]} : </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> algorithm.dynamic;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">KnapsackProblem</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] w = &#123;<span class=\"number\">1</span>, <span class=\"number\">4</span>, <span class=\"number\">3</span>&#125;;<span class=\"comment\">//物品的重量</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] val = &#123;<span class=\"number\">1500</span>, <span class=\"number\">3000</span>, <span class=\"number\">2000</span>&#125;; <span class=\"comment\">//物品的价值</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> m = <span class=\"number\">4</span>; <span class=\"comment\">//背包的容量</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> n = val.length; <span class=\"comment\">//物品的个数</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//创建二维数组，</span></span><br><span class=\"line\">        <span class=\"comment\">//v[i][j] 表示在前i个物品中能够装入容量为j的背包中的最大价值</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span>[][] v = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[n + <span class=\"number\">1</span>][m + <span class=\"number\">1</span>];</span><br><span class=\"line\">        <span class=\"comment\">//用来存放物品放入当前的情况记录到path</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span>[][] path = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[n + <span class=\"number\">1</span>][m + <span class=\"number\">1</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//初始化第一行和第一列, 这里在本程序中，可以不去处理，因为默认就是0</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; v.length; i++) &#123;</span><br><span class=\"line\">            v[i][<span class=\"number\">0</span>] = <span class=\"number\">0</span>;<span class=\"comment\">//将第一列设置为0</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; v[<span class=\"number\">0</span>].length; i++) &#123;</span><br><span class=\"line\">            v[<span class=\"number\">0</span>][i] = <span class=\"number\">0</span>;<span class=\"comment\">//将第一行设置0</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//根据前面得到公式来动态规划处理</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; v.length; i++) &#123; <span class=\"comment\">//不处理第一行 i是从1开始的</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">1</span>; j &lt; v[<span class=\"number\">0</span>].length; j++) &#123;<span class=\"comment\">//不处理第一列, j是从1开始的</span></span><br><span class=\"line\">                <span class=\"comment\">//公式</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (w[i - <span class=\"number\">1</span>] &gt; j) &#123;</span><br><span class=\"line\">                    v[i][j] = v[i - <span class=\"number\">1</span>][j];</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\"><span class=\"comment\">//                    v[i][j] = Math.max(v[i - 1][j], val[i - 1] + v[i - 1][j - w[i - 1]]);</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (v[i - <span class=\"number\">1</span>][j] &lt; val[i - <span class=\"number\">1</span>] + v[i - <span class=\"number\">1</span>][j - w[i - <span class=\"number\">1</span>]]) &#123;</span><br><span class=\"line\">                        v[i][j] = val[i - <span class=\"number\">1</span>] + v[i - <span class=\"number\">1</span>][j - w[i - <span class=\"number\">1</span>]];</span><br><span class=\"line\">                        <span class=\"comment\">//把当前的情况记录到path</span></span><br><span class=\"line\">                        path[i][j] = <span class=\"number\">1</span>;</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                        v[i][j] = v[i - <span class=\"number\">1</span>][j];</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//输出一下v 看看目前的情况</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; v.length; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; v[<span class=\"number\">0</span>].length; j++) &#123;</span><br><span class=\"line\">                System.out.print(v[i][j] + <span class=\"string\">&quot; &quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            System.out.println();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//输出一下path 看看目前的情况</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; v.length; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; v[<span class=\"number\">0</span>].length; j++) &#123;</span><br><span class=\"line\">                System.out.print(path[i][j] + <span class=\"string\">&quot; &quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            System.out.println();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//动脑筋</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> i = path.length - <span class=\"number\">1</span>; <span class=\"comment\">//行的最大下标</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> j = path[<span class=\"number\">0</span>].length - <span class=\"number\">1</span>;  <span class=\"comment\">//列的最大下标</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (i &gt; <span class=\"number\">0</span> &amp;&amp; j &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (path[i][j] == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                System.out.printf(<span class=\"string\">&quot;第%d个商品放入到背包\\n&quot;</span>, i);</span><br><span class=\"line\">                j -= w[i - <span class=\"number\">1</span>];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            i--;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"><span class=\"comment\">//        while (i &gt; 0 &amp;&amp; j &gt; 0) &#123; //从path的最后开始找</span></span><br><span class=\"line\"><span class=\"comment\">//            if (path[i][j] == 1) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//                System.out.printf(&quot;第%d个商品放入到背包\\n&quot;, i);</span></span><br><span class=\"line\"><span class=\"comment\">//                j -= w[i - 1]; //w[i-1]</span></span><br><span class=\"line\"><span class=\"comment\">//            &#125;</span></span><br><span class=\"line\"><span class=\"comment\">//            i--;</span></span><br><span class=\"line\"><span class=\"comment\">//        &#125;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"5-kmp算法\"><a href=\"#5-kmp算法\" class=\"headerlink\" title=\"5.kmp算法\"></a>5.kmp算法</h3><p><strong>应用场景</strong>-字符串匹配问题</p>\n<p>字符串匹配问题：：</p>\n<p>1)有一个字符串 str1= “”硅硅谷 尚硅谷你尚硅 尚硅谷你尚硅谷你尚硅你好””，和一个子串 str2=”尚硅谷你尚硅你”</p>\n<p>2)现在要判断 <strong>str1</strong> <strong>是否含有</strong> <strong>str2</strong>, 如果存在，就返回第一次出现的位置, 如果没有，则返回-1</p>\n<p>暴力匹配代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> algorithm.kmp;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ViolenceMatch</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        String str1 = <span class=\"string\">&quot;硅硅谷 尚硅谷你尚硅 尚硅谷你尚硅谷你尚硅你好&quot;</span>;</span><br><span class=\"line\">        String str2 = <span class=\"string\">&quot;尚硅谷你尚硅你&quot;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> index = violenceMatch(str1, str2);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;index=&quot;</span> + index);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 暴力匹配算法实现</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">violenceMatch</span><span class=\"params\">(String str1, String str2)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">char</span>[] s1 = str1.toCharArray();</span><br><span class=\"line\">        <span class=\"keyword\">char</span>[] s2 = str2.toCharArray();</span><br><span class=\"line\">        <span class=\"keyword\">int</span> s1Len = s1.length;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> s2Len = s2.length;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; <span class=\"comment\">// i索引指向s1</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; <span class=\"comment\">// j索引指向s2</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span> ( i &lt; s1Len &amp;&amp; j &lt; s2Len) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (s1[i] == s2[j]) &#123;<span class=\"comment\">//匹配ok</span></span><br><span class=\"line\">                i++;</span><br><span class=\"line\">                j++;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123; <span class=\"comment\">//没有匹配成功</span></span><br><span class=\"line\">                <span class=\"comment\">//如果失配（即str1[i]! = str2[j]），令i = i - (j - 1)，j = 0。</span></span><br><span class=\"line\">                i = i - (j - <span class=\"number\">1</span>);</span><br><span class=\"line\">                j = <span class=\"number\">0</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//判断是否匹配成功</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (j == s2Len) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> i - j;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><strong>KMP</strong>算法介绍</p>\n<p>1)KMP是一个解决模式串在文本串是否出现过，如果出现过，最早出现的位置的经典算法</p>\n<p>2)Knuth-Morris-Pratt <strong>字符串查找算法</strong>，简称为 “KMP算法”，常用于在一个文本串S内查找一个模式串P 的出现位置，这个算法由Donald Knuth、Vaughan Pratt、James H. Morris三人于1977年联合发表，故取这3人的姓氏命名此算法.</p>\n<p>3)KMP方法算法就利用之前判断过信息，通过一个next数组，保存模式串中前后最长公共子序列的长度，每次回溯时，通过next数组找到，前面匹配过的位置，省去了大量的计算时间</p>\n<p>4)参考资料：<a href=\"https://www.cnblogs.com/ZuoAndFutureGirl/p/9028287.html\">https://</a><a href=\"https://www.cnblogs.com/ZuoAndFutureGirl/p/9028287.html\">www.cnblogs.com/ZuoAndFutureGirl/p/9028287.html</a> </p>\n<p><strong>核心：</strong></p>\n<p>”部分匹配”的实质是，有时候，字符串头部和尾部会有重复。比如，”ABCDAB”之中有两个”AB”，那么它的”部分匹配值”就是2（”AB”的长度）。搜索词移动的时候，第一个”AB”向后移动 4 位（字符串长度-部分匹配值），就可以来到第二个”AB”的位置。 </p>\n<p><img src=\"/2021/01/01/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E6%95%B4%E7%90%86/clip_image002.jpg\" alt=\"img\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> algorithm.kmp;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Arrays;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">KMPAlgorithm</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        String str1 = <span class=\"string\">&quot;BBC ABCDAB ABCDABCDABDE&quot;</span>; <span class=\"comment\">// ABCDABD</span></span><br><span class=\"line\">        String str2 = <span class=\"string\">&quot;ABCDABD&quot;</span>; <span class=\"comment\">// 0 0 0 0 1 2 0</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] next = kmpNext(<span class=\"string\">&quot;ABCDABD&quot;</span>); <span class=\"comment\">//[0 0 0 0 1 2 0]</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;next=&quot;</span> + Arrays.toString(next));</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">int</span> index = kmpSearch(str1, str2, next);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;index=&quot;</span> + index); <span class=\"comment\">// 15了</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">kmpSearch</span><span class=\"params\">(String str1, String str2, <span class=\"keyword\">int</span>[] next)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//遍历</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>, j = <span class=\"number\">0</span>; i &lt; str1.length(); i++) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//需要处理 str1.charAt(i) ！= str2.charAt(j), 去调整j的大小</span></span><br><span class=\"line\">            <span class=\"comment\">//KMP算法核心点, 可以验证...</span></span><br><span class=\"line\">            <span class=\"keyword\">while</span> (j &gt; <span class=\"number\">0</span> &amp;&amp; str1.charAt(i) != str2.charAt(j)) &#123;</span><br><span class=\"line\">                j = next[j - <span class=\"number\">1</span>];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (str1.charAt(i) == str2.charAt(j)) &#123;</span><br><span class=\"line\">                j++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (j == str2.length()) &#123;</span><br><span class=\"line\">                <span class=\"comment\">//获取起始索引(最后)</span></span><br><span class=\"line\">                <span class=\"keyword\">return</span> i - j + <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//获取到一个字符串(子串) 的部分匹配值表</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span>[] kmpNext(String dest) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//创建一个next 数组保存部分匹配值</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] next = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[dest.length()];</span><br><span class=\"line\">        next[<span class=\"number\">0</span>] = <span class=\"number\">0</span>; <span class=\"comment\">//如果字符串是长度为1 部分匹配值就是0</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>, j = <span class=\"number\">0</span>; i &lt; dest.length(); i++) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//当dest.charAt(i) != dest.charAt(j) ，我们需要从next[j-1]获取新的j</span></span><br><span class=\"line\">            <span class=\"comment\">//直到我们发现 有  dest.charAt(i) == dest.charAt(j)成立才退出</span></span><br><span class=\"line\">            <span class=\"comment\">//这是kmp算法的核心点</span></span><br><span class=\"line\">            <span class=\"keyword\">while</span> (j &gt; <span class=\"number\">0</span> &amp;&amp; dest.charAt(i) != dest.charAt(j)) &#123;</span><br><span class=\"line\">                j = next[j - <span class=\"number\">1</span>];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//当dest.charAt(i) == dest.charAt(j) 满足时，部分匹配值就是+1</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (dest.charAt(i) == dest.charAt(j)) &#123;</span><br><span class=\"line\">                j++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            next[i] = j;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"6-贪心算法\"><a href=\"#6-贪心算法\" class=\"headerlink\" title=\"6.贪心算法\"></a>6.贪心算法</h3><p><strong>应用场景</strong>-集合覆盖问题</p>\n<p>假设存在下面需要付费的广播台，以及广播台信号可以覆盖的地区。 <strong>如何选择最少的广播台</strong>，让所有的地区都可以接收到信号</p>\n<table>\n<thead>\n<tr>\n<th>广播台</th>\n<th>覆盖地区</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>K1</td>\n<td>“北京”, “上海”, “天津”</td>\n</tr>\n<tr>\n<td>K2</td>\n<td>“广州”, “北京”, “深圳”</td>\n</tr>\n<tr>\n<td>K3</td>\n<td>“成都”, “上海”, “杭州”</td>\n</tr>\n<tr>\n<td>K4</td>\n<td>“上海”, “天津”</td>\n</tr>\n<tr>\n<td>K5</td>\n<td>“杭州”, “大连”</td>\n</tr>\n</tbody></table>\n<p>解决方案：</p>\n<p>1.穷举法 2<sup>n</sup>-1种可能</p>\n<p>2.贪心算法</p>\n<p><strong>贪心算法介绍</strong></p>\n<p>1)贪婪算法(贪心算法)是指在对问题进行求解时，在每一步选择中都采取最好或者最优(即最有利)的选择，从而希望能够导致结果是最好或者最优的算法</p>\n<p>2)贪婪算法所得到的结果**不一定是最优的结果(有时候会是最优解)**，但是都是相对近似(接近)最优解的结果</p>\n<p><strong>实现思路分析:</strong> </p>\n<p>使用贪婪算法，效率高:</p>\n<p>目前并没有算法可以快速计算得到准备的值， 使用贪婪算法，则可以得到非常接近的解，并且效率高。选择策略上，因为需要覆盖全部地区的最小集合:</p>\n<p>1)遍历所有的广播电台, 找到一个覆盖了最多<strong>未覆盖的地</strong>区**的电台(此电台可能包含一些已覆盖的地区，但没有关系）</p>\n<p>2)将这个电台加入到一个集合中(比如ArrayList), 想办法把该电台覆盖的地区在下次比较时去掉。</p>\n<p>3)重复第1步直到覆盖了全部的地区</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> algorithm.greedy;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.HashMap;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.HashSet;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GreedyAlgorithm</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//创建广播电台,放入到Map</span></span><br><span class=\"line\">\t\tHashMap&lt;String,HashSet&lt;String&gt;&gt; broadcasts = <span class=\"keyword\">new</span> HashMap&lt;String, HashSet&lt;String&gt;&gt;();</span><br><span class=\"line\">\t\t<span class=\"comment\">//将各个电台放入到broadcasts</span></span><br><span class=\"line\">\t\tHashSet&lt;String&gt; hashSet1 = <span class=\"keyword\">new</span> HashSet&lt;String&gt;();</span><br><span class=\"line\">\t\thashSet1.add(<span class=\"string\">&quot;北京&quot;</span>);</span><br><span class=\"line\">\t\thashSet1.add(<span class=\"string\">&quot;上海&quot;</span>);</span><br><span class=\"line\">\t\thashSet1.add(<span class=\"string\">&quot;天津&quot;</span>);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tHashSet&lt;String&gt; hashSet2 = <span class=\"keyword\">new</span> HashSet&lt;String&gt;();</span><br><span class=\"line\">\t\thashSet2.add(<span class=\"string\">&quot;广州&quot;</span>);</span><br><span class=\"line\">\t\thashSet2.add(<span class=\"string\">&quot;北京&quot;</span>);</span><br><span class=\"line\">\t\thashSet2.add(<span class=\"string\">&quot;深圳&quot;</span>);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tHashSet&lt;String&gt; hashSet3 = <span class=\"keyword\">new</span> HashSet&lt;String&gt;();</span><br><span class=\"line\">\t\thashSet3.add(<span class=\"string\">&quot;成都&quot;</span>);</span><br><span class=\"line\">\t\thashSet3.add(<span class=\"string\">&quot;上海&quot;</span>);</span><br><span class=\"line\">\t\thashSet3.add(<span class=\"string\">&quot;杭州&quot;</span>);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tHashSet&lt;String&gt; hashSet4 = <span class=\"keyword\">new</span> HashSet&lt;String&gt;();</span><br><span class=\"line\">\t\thashSet4.add(<span class=\"string\">&quot;上海&quot;</span>);</span><br><span class=\"line\">\t\thashSet4.add(<span class=\"string\">&quot;天津&quot;</span>);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tHashSet&lt;String&gt; hashSet5 = <span class=\"keyword\">new</span> HashSet&lt;String&gt;();</span><br><span class=\"line\">\t\thashSet5.add(<span class=\"string\">&quot;杭州&quot;</span>);</span><br><span class=\"line\">\t\thashSet5.add(<span class=\"string\">&quot;大连&quot;</span>);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t\t<span class=\"comment\">//加入到map</span></span><br><span class=\"line\">\t\tbroadcasts.put(<span class=\"string\">&quot;K1&quot;</span>, hashSet1);</span><br><span class=\"line\">\t\tbroadcasts.put(<span class=\"string\">&quot;K2&quot;</span>, hashSet2);</span><br><span class=\"line\">\t\tbroadcasts.put(<span class=\"string\">&quot;K3&quot;</span>, hashSet3);</span><br><span class=\"line\">\t\tbroadcasts.put(<span class=\"string\">&quot;K4&quot;</span>, hashSet4);</span><br><span class=\"line\">\t\tbroadcasts.put(<span class=\"string\">&quot;K5&quot;</span>, hashSet5);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">//allAreas 存放所有的地区</span></span><br><span class=\"line\">\t\tHashSet&lt;String&gt; allAreas = <span class=\"keyword\">new</span> HashSet&lt;String&gt;();</span><br><span class=\"line\">\t\tallAreas.add(<span class=\"string\">&quot;北京&quot;</span>);</span><br><span class=\"line\">\t\tallAreas.add(<span class=\"string\">&quot;上海&quot;</span>);</span><br><span class=\"line\">\t\tallAreas.add(<span class=\"string\">&quot;天津&quot;</span>);</span><br><span class=\"line\">\t\tallAreas.add(<span class=\"string\">&quot;广州&quot;</span>);</span><br><span class=\"line\">\t\tallAreas.add(<span class=\"string\">&quot;深圳&quot;</span>);</span><br><span class=\"line\">\t\tallAreas.add(<span class=\"string\">&quot;成都&quot;</span>);</span><br><span class=\"line\">\t\tallAreas.add(<span class=\"string\">&quot;杭州&quot;</span>);</span><br><span class=\"line\">\t\tallAreas.add(<span class=\"string\">&quot;大连&quot;</span>);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">//创建ArrayList, 存放选择的电台集合</span></span><br><span class=\"line\">\t\tArrayList&lt;String&gt; selects = <span class=\"keyword\">new</span> ArrayList&lt;String&gt;();</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">//定义一个临时的集合， 在遍历的过程中，存放遍历过程中的电台覆盖的地区和当前还没有覆盖的地区的交集</span></span><br><span class=\"line\">\t\tHashSet&lt;String&gt; tempSet = <span class=\"keyword\">new</span> HashSet&lt;String&gt;();</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">//定义给maxKey ， 保存在一次遍历过程中，能够覆盖最大未覆盖的地区对应的电台的key</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//如果maxKey 不为null , 则会加入到 selects</span></span><br><span class=\"line\">\t\tString maxKey = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(allAreas.size() != <span class=\"number\">0</span>) &#123; <span class=\"comment\">// 如果allAreas 不为0, 则表示还没有覆盖到所有的地区</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">//每进行一次while,需要</span></span><br><span class=\"line\">\t\t\tmaxKey = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//遍历 broadcasts, 取出对应key</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span>(String key : broadcasts.keySet()) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//每进行一次for</span></span><br><span class=\"line\">\t\t\t\ttempSet.clear();</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//当前这个key能够覆盖的地区</span></span><br><span class=\"line\">\t\t\t\tHashSet&lt;String&gt; areas = broadcasts.get(key);</span><br><span class=\"line\">\t\t\t\ttempSet.addAll(areas);</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//求出tempSet 和   allAreas 集合的交集, 交集会赋给 tempSet</span></span><br><span class=\"line\">\t\t\t\ttempSet.retainAll(allAreas);</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//如果当前这个集合包含的未覆盖地区的数量，比maxKey指向的集合地区还多</span></span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//就需要重置maxKey</span></span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// tempSet.size() &gt;broadcasts.get(maxKey).size()) 体现出贪心算法的特点,每次都选择最优的</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(tempSet.size() &gt; <span class=\"number\">0</span> &amp;&amp; </span><br><span class=\"line\">\t\t\t\t\t\t(maxKey == <span class=\"keyword\">null</span> || tempSet.size() &gt;broadcasts.get(maxKey).size()))&#123;</span><br><span class=\"line\">\t\t\t\t\tmaxKey = key;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//maxKey != null, 就应该将maxKey 加入selects</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(maxKey != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t\tselects.add(maxKey);</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//将maxKey指向的广播电台覆盖的地区，从 allAreas 去掉</span></span><br><span class=\"line\">\t\t\t\tallAreas.removeAll(broadcasts.get(maxKey));</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;得到的选择结果是&quot;</span> + selects);<span class=\"comment\">//[K1,K2,K3,K5]</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"7-普利姆算法\"><a href=\"#7-普利姆算法\" class=\"headerlink\" title=\"7.普利姆算法\"></a>7.普利姆算法</h3><p><strong>应用场景</strong>-修路问题</p>\n<p>看一个应用场景和问题：2<sup>n</sup></p>\n<p><img src=\"/2021/01/01/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E6%95%B4%E7%90%86/image-20210110111607853.png\" alt=\"image-20210110111607853\"></p>\n<p>1)有胜利乡有7个村庄(A, B, C, D, E, F, G) ，现在需要修路把7个村庄连通</p>\n<p>2)各个村庄的距离用边线表示(权) ，比如 A – B 距离 5公里</p>\n<p>3)问：如何修路保证各个村庄都能连通，并且总的修建公路总里程最短?</p>\n<p>思路: 将10条边，连接即可，但是总的里程数不是最小.</p>\n<p><strong>正确的思路</strong>，就是尽可能的选择少的路线，并且每条路线最小，保证总里程数最少. </p>\n<p><strong>最小生成树:</strong></p>\n<p><img src=\"/2021/01/01/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E6%95%B4%E7%90%86/image-20210110114746786.png\" alt=\"image-20210110114746786\"></p>\n<p>修路问题本质就是就是最小生成树问题， 先介绍一下最小生成树(Minimum Cost Spanning Tree)，简称MST</p>\n<p>1)给定一个带权的无向连通图,如何选取一棵生成树,使树上所有<strong>边上权的总和为最小</strong>,这叫最小生成树 </p>\n<p>2)N个顶点，一定有N-1条边</p>\n<p>3)包含全部顶点</p>\n<p>4)N-1条边都在图中</p>\n<p>5)举例说明(如图:)</p>\n<p>求最小生成树的算法主要是<strong>普里姆</strong>算法和<strong>克鲁斯卡尔</strong>算法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> algorithm.prim;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Arrays;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PrimAlgorithm</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//测试看看图是否创建ok</span></span><br><span class=\"line\">        <span class=\"keyword\">char</span>[] data = <span class=\"keyword\">new</span> <span class=\"keyword\">char</span>[]&#123;<span class=\"string\">&#x27;A&#x27;</span>, <span class=\"string\">&#x27;B&#x27;</span>, <span class=\"string\">&#x27;C&#x27;</span>, <span class=\"string\">&#x27;D&#x27;</span>, <span class=\"string\">&#x27;E&#x27;</span>, <span class=\"string\">&#x27;F&#x27;</span>, <span class=\"string\">&#x27;G&#x27;</span>&#125;;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> verxs = data.length;</span><br><span class=\"line\">        <span class=\"comment\">//邻接矩阵的关系使用二维数组表示,10000这个大数，表示两个点不联通</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span>[][] weight = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[][]&#123;</span><br><span class=\"line\">                &#123;<span class=\"number\">10000</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>, <span class=\"number\">10000</span>, <span class=\"number\">10000</span>, <span class=\"number\">10000</span>, <span class=\"number\">2</span>&#125;,</span><br><span class=\"line\">                &#123;<span class=\"number\">5</span>, <span class=\"number\">10000</span>, <span class=\"number\">10000</span>, <span class=\"number\">9</span>, <span class=\"number\">10000</span>, <span class=\"number\">10000</span>, <span class=\"number\">3</span>&#125;,</span><br><span class=\"line\">                &#123;<span class=\"number\">7</span>, <span class=\"number\">10000</span>, <span class=\"number\">10000</span>, <span class=\"number\">10000</span>, <span class=\"number\">8</span>, <span class=\"number\">10000</span>, <span class=\"number\">10000</span>&#125;,</span><br><span class=\"line\">                &#123;<span class=\"number\">10000</span>, <span class=\"number\">9</span>, <span class=\"number\">10000</span>, <span class=\"number\">10000</span>, <span class=\"number\">10000</span>, <span class=\"number\">4</span>, <span class=\"number\">10000</span>&#125;,</span><br><span class=\"line\">                &#123;<span class=\"number\">10000</span>, <span class=\"number\">10000</span>, <span class=\"number\">8</span>, <span class=\"number\">10000</span>, <span class=\"number\">10000</span>, <span class=\"number\">5</span>, <span class=\"number\">4</span>&#125;,</span><br><span class=\"line\">                &#123;<span class=\"number\">10000</span>, <span class=\"number\">10000</span>, <span class=\"number\">10000</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">10000</span>, <span class=\"number\">6</span>&#125;,</span><br><span class=\"line\">                &#123;<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">10000</span>, <span class=\"number\">10000</span>, <span class=\"number\">4</span>, <span class=\"number\">6</span>, <span class=\"number\">10000</span>&#125;,&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//创建MGraph对象</span></span><br><span class=\"line\">        MGraph graph = <span class=\"keyword\">new</span> MGraph(verxs);</span><br><span class=\"line\">        MinTree minTree = <span class=\"keyword\">new</span> MinTree();</span><br><span class=\"line\">        minTree.createGraph(graph, verxs, data, weight);</span><br><span class=\"line\">        <span class=\"comment\">//输出</span></span><br><span class=\"line\">        minTree.showGraph(graph);</span><br><span class=\"line\">        minTree.prim(graph,<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//创建最小生成树-&gt;村庄的图</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MinTree</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//创建图的邻接矩阵</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> graph  图对象</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> verxs  图对应的顶点个数</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> data   图的各个顶点的值</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> weight 图的邻接矩阵</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">createGraph</span><span class=\"params\">(MGraph graph, <span class=\"keyword\">int</span> verxs, <span class=\"keyword\">char</span>[] data, <span class=\"keyword\">int</span>[][] weight)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> i, j;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; verxs; i++) &#123; <span class=\"comment\">//顶点</span></span><br><span class=\"line\">            graph.data[i] = data[i];</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (j = <span class=\"number\">0</span>; j &lt; verxs; j++) &#123;</span><br><span class=\"line\">                graph.weight[i][j] = weight[i][j];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//显示图的邻接矩阵</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">showGraph</span><span class=\"params\">(MGraph graph)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span>[] link : graph.weight) &#123;</span><br><span class=\"line\">            System.out.println(Arrays.toString(link));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">///编写prim算法，得到最小生成树</span></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> graph 图</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> v 表示从图的第几个顶点开始生成&#x27;A&#x27;-&gt;0 &#x27;B&#x27;-&gt;1...</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">prim</span><span class=\"params\">(MGraph graph, <span class=\"keyword\">int</span> v)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//visited[] 标记结点(顶点)是否被访问过</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> visited[] = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[graph.verxs];</span><br><span class=\"line\">        <span class=\"comment\">//visited[] 默认元素的值都是0, 表示没有访问过</span></span><br><span class=\"line\"><span class=\"comment\">//\t\tfor(int i =0; i &lt;graph.verxs; i++) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//\t\t\tvisited[i] = 0;</span></span><br><span class=\"line\"><span class=\"comment\">//\t\t&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//把当前这个结点标记为已访问</span></span><br><span class=\"line\">        visited[v] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"comment\">//h1 和 h2 记录两个顶点的下标</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> h1 = -<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> h2 = -<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> minWeight = <span class=\"number\">10000</span>;<span class=\"comment\">//将 minWeight 初始成一个大数，后面在遍历过程中，会被替换</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> k = <span class=\"number\">1</span>; k &lt; graph.verxs; k++) &#123;<span class=\"comment\">//因为有 graph.verxs顶点，普利姆算法结束后，有 graph.verxs-1边</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//这个是确定每一次生成的子图 ，和哪个结点的距离最近</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; graph.verxs ; i++) &#123;<span class=\"comment\">// i结点表示被访问过的结点</span></span><br><span class=\"line\">                <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j&lt; graph.verxs;j++) &#123;<span class=\"comment\">//j结点表示还没有访问过的结点</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(visited[i] == <span class=\"number\">1</span> &amp;&amp; visited[j] == <span class=\"number\">0</span> &amp;&amp; graph.weight[i][j] &lt; minWeight) &#123;</span><br><span class=\"line\">                        <span class=\"comment\">//替换minWeight(寻找已经访问过的结点和未访问过的结点间的权值最小的边)</span></span><br><span class=\"line\">                        minWeight = graph.weight[i][j];</span><br><span class=\"line\">                        h1 = i;</span><br><span class=\"line\">                        h2 = j;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//找到一条边是最小</span></span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;边&lt;&quot;</span> + graph.data[h1] + <span class=\"string\">&quot;,&quot;</span> + graph.data[h2] + <span class=\"string\">&quot;&gt; 权值:&quot;</span> + minWeight);</span><br><span class=\"line\">            <span class=\"comment\">//将当前这个结点标记为已经访问</span></span><br><span class=\"line\">            visited[h2] = <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"comment\">//minWeight 重新设置为最大值 10000</span></span><br><span class=\"line\">            minWeight = <span class=\"number\">10000</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MGraph</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> verxs; <span class=\"comment\">//表示图的节点个数</span></span><br><span class=\"line\">    <span class=\"keyword\">char</span>[] data; <span class=\"comment\">//存放节点数据</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span>[][] weight; <span class=\"comment\">//存放边，就是我们的邻接矩阵</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MGraph</span><span class=\"params\">(<span class=\"keyword\">int</span> verxs)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.verxs = verxs;</span><br><span class=\"line\">        data = <span class=\"keyword\">new</span> <span class=\"keyword\">char</span>[verxs];</span><br><span class=\"line\">        weight = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[verxs][verxs];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"8-克鲁斯卡尔算法\"><a href=\"#8-克鲁斯卡尔算法\" class=\"headerlink\" title=\"8.克鲁斯卡尔算法\"></a>8.克鲁斯卡尔算法</h3><p>应用场景-公交站问题</p>\n<p>看一个应用场景和问题：</p>\n<p><img src=\"/2021/01/01/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E6%95%B4%E7%90%86/image-20210110115039736.png\" alt=\"image-20210110115039736\"></p>\n<p>1)某城市新增7个站点(A, B, C, D, E, F, G) ，现在需要修路把7个站点连通</p>\n<p>2)各个站点的距离用边线表示(权) ，比如 A – B 距离 12公里</p>\n<p>3)问：如何修路保证各个站点都能连通，并且总的修建公路总里程最短? </p>\n<p><strong>克鲁斯卡</strong>尔算法介绍 </p>\n<p>1)克鲁斯卡尔(Kruskal)算法，是用来求加权连通图的最小生成树的算法。</p>\n<p>2)基本思想：按照权值从小到大的顺序选择n-1条边，并保证这n-1条边不构成回路</p>\n<p>3)具体做法：首先构造一个只含n个顶点的森林，然后依权值从小到大从连通网中选择边加入到森林中，并使森林中不产生回路，直至森林变成一棵树为止</p>\n<p><img src=\"/2021/01/01/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E6%95%B4%E7%90%86/image-20210110140634167.png\" alt=\"image-20210110140634167\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> algorithm.kruskal;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Arrays;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">KruskalCase</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> edgeNum; <span class=\"comment\">//边的个数</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">char</span>[] vertexs; <span class=\"comment\">//顶点数组</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span>[][] matrix; <span class=\"comment\">//邻接矩阵</span></span><br><span class=\"line\">\t<span class=\"comment\">//使用 INF 表示两个顶点不能连通</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> INF = Integer.MAX_VALUE;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">char</span>[] vertexs = &#123;<span class=\"string\">&#x27;A&#x27;</span>, <span class=\"string\">&#x27;B&#x27;</span>, <span class=\"string\">&#x27;C&#x27;</span>, <span class=\"string\">&#x27;D&#x27;</span>, <span class=\"string\">&#x27;E&#x27;</span>, <span class=\"string\">&#x27;F&#x27;</span>, <span class=\"string\">&#x27;G&#x27;</span>&#125;;</span><br><span class=\"line\">\t\t<span class=\"comment\">//克鲁斯卡尔算法的邻接矩阵  </span></span><br><span class=\"line\">\t      <span class=\"keyword\">int</span> matrix[][] = &#123;</span><br><span class=\"line\">\t      <span class=\"comment\">/*A*/</span><span class=\"comment\">/*B*/</span><span class=\"comment\">/*C*/</span><span class=\"comment\">/*D*/</span><span class=\"comment\">/*E*/</span><span class=\"comment\">/*F*/</span><span class=\"comment\">/*G*/</span></span><br><span class=\"line\">\t<span class=\"comment\">/*A*/</span> &#123;   <span class=\"number\">0</span>,  <span class=\"number\">12</span>, INF, INF, INF,  <span class=\"number\">16</span>,  <span class=\"number\">14</span>&#125;,</span><br><span class=\"line\">\t<span class=\"comment\">/*B*/</span> &#123;  <span class=\"number\">12</span>,   <span class=\"number\">0</span>,  <span class=\"number\">10</span>, INF, INF,   <span class=\"number\">7</span>, INF&#125;,</span><br><span class=\"line\">\t<span class=\"comment\">/*C*/</span> &#123; INF,  <span class=\"number\">10</span>,   <span class=\"number\">0</span>,   <span class=\"number\">3</span>,   <span class=\"number\">5</span>,   <span class=\"number\">6</span>, INF&#125;,</span><br><span class=\"line\">\t<span class=\"comment\">/*D*/</span> &#123; INF, INF,   <span class=\"number\">3</span>,   <span class=\"number\">0</span>,   <span class=\"number\">4</span>, INF, INF&#125;,</span><br><span class=\"line\">\t<span class=\"comment\">/*E*/</span> &#123; INF, INF,   <span class=\"number\">5</span>,   <span class=\"number\">4</span>,   <span class=\"number\">0</span>,   <span class=\"number\">2</span>,   <span class=\"number\">8</span>&#125;,</span><br><span class=\"line\">\t<span class=\"comment\">/*F*/</span> &#123;  <span class=\"number\">16</span>,   <span class=\"number\">7</span>,   <span class=\"number\">6</span>, INF,   <span class=\"number\">2</span>,   <span class=\"number\">0</span>,   <span class=\"number\">9</span>&#125;,</span><br><span class=\"line\">\t<span class=\"comment\">/*G*/</span> &#123;  <span class=\"number\">14</span>, INF, INF, INF,   <span class=\"number\">8</span>,   <span class=\"number\">9</span>,   <span class=\"number\">0</span>&#125;&#125;; </span><br><span class=\"line\">\t      <span class=\"comment\">//大家可以在去测试其它的邻接矩阵，结果都可以得到最小生成树.</span></span><br><span class=\"line\">\t      </span><br><span class=\"line\">\t      <span class=\"comment\">//创建KruskalCase 对象实例</span></span><br><span class=\"line\">\t      KruskalCase kruskalCase = <span class=\"keyword\">new</span> KruskalCase(vertexs, matrix);</span><br><span class=\"line\">\t      <span class=\"comment\">//输出构建的</span></span><br><span class=\"line\">\t      kruskalCase.print();</span><br><span class=\"line\">\t      kruskalCase.kruskal();</span><br><span class=\"line\">\t      </span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//构造器</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">KruskalCase</span><span class=\"params\">(<span class=\"keyword\">char</span>[] vertexs, <span class=\"keyword\">int</span>[][] matrix)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//初始化顶点数和边的个数</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> vlen = vertexs.length;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">//初始化顶点, 复制拷贝的方式</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.vertexs = <span class=\"keyword\">new</span> <span class=\"keyword\">char</span>[vlen];</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; vertexs.length; i++) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">this</span>.vertexs[i] = vertexs[i];</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">//初始化边, 使用的是复制拷贝的方式</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.matrix = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[vlen][vlen];</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; vlen; i++) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j= <span class=\"number\">0</span>; j &lt; vlen; j++) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">this</span>.matrix[i][j] = matrix[i][j];</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">//统计边的条数</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i =<span class=\"number\">0</span>; i &lt; vlen; i++) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = i+<span class=\"number\">1</span>; j &lt; vlen; j++) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.matrix[i][j] != INF) &#123;</span><br><span class=\"line\">\t\t\t\t\tedgeNum++;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">kruskal</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> index = <span class=\"number\">0</span>; <span class=\"comment\">//表示最后结果数组的索引</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span>[] ends = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[edgeNum]; <span class=\"comment\">//用于保存&quot;已有最小生成树&quot; 中的每个顶点在最小生成树中的终点</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//创建结果数组, 保存最后的最小生成树</span></span><br><span class=\"line\">\t\tEData[] rets = <span class=\"keyword\">new</span> EData[edgeNum];</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">//获取图中 所有的边的集合 ， 一共有12边</span></span><br><span class=\"line\">\t\tEData[] edges = getEdges();</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;图的边的集合=&quot;</span> + Arrays.toString(edges) + <span class=\"string\">&quot; 共&quot;</span>+ edges.length); <span class=\"comment\">//12</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">//按照边的权值大小进行排序(从小到大)</span></span><br><span class=\"line\">\t\tsortEdges(edges);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">//遍历edges 数组，将边添加到最小生成树中时，判断是准备加入的边否形成了回路，如果没有，就加入 rets, 否则不能加入</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i &lt; edgeNum; i++) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//获取到第i条边的第一个顶点(起点)</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">int</span> p1 = getPosition(edges[i].start); <span class=\"comment\">//p1=4</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">//获取到第i条边的第2个顶点</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">int</span> p2 = getPosition(edges[i].end); <span class=\"comment\">//p2 = 5</span></span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//获取p1这个顶点在已有最小生成树中的终点</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">int</span> m = getEnd(ends, p1); <span class=\"comment\">//m = 4</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">//获取p2这个顶点在已有最小生成树中的终点</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">int</span> n = getEnd(ends, p2); <span class=\"comment\">// n = 5</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">//是否构成回路</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(m != n) &#123; <span class=\"comment\">//没有构成回路</span></span><br><span class=\"line\">\t\t\t\tends[m] = n; <span class=\"comment\">// 设置m 在&quot;已有最小生成树&quot;中的终点 &lt;E,F&gt; [0,0,0,0,5,0,0,0,0,0,0,0]</span></span><br><span class=\"line\">\t\t\t\trets[index++] = edges[i]; <span class=\"comment\">//有一条边加入到rets数组</span></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">//&lt;E,F&gt; &lt;C,D&gt; &lt;D,E&gt; &lt;B,F&gt; &lt;E,G&gt; &lt;A,B&gt;。</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//统计并打印 &quot;最小生成树&quot;, 输出  rets</span></span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;最小生成树为&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; index; i++) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(rets[i]);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//打印邻接矩阵</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">print</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;邻接矩阵为: \\n&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; vertexs.length; i++) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">0</span>; j &lt; vertexs.length; j++) &#123;</span><br><span class=\"line\">\t\t\t\tSystem.out.printf(<span class=\"string\">&quot;%12d&quot;</span>, matrix[i][j]);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tSystem.out.println();<span class=\"comment\">//换行</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 功能：对边进行排序处理, 冒泡排序</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> edges 边的集合</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">sortEdges</span><span class=\"params\">(EData[] edges)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; edges.length - <span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; edges.length - <span class=\"number\">1</span> - i; j++) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(edges[j].weight &gt; edges[j+<span class=\"number\">1</span>].weight) &#123;<span class=\"comment\">//交换</span></span><br><span class=\"line\">\t\t\t\t\tEData tmp = edges[j];</span><br><span class=\"line\">\t\t\t\t\tedges[j] = edges[j+<span class=\"number\">1</span>];</span><br><span class=\"line\">\t\t\t\t\tedges[j+<span class=\"number\">1</span>] = tmp;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\"> \t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * </span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> ch 顶点的值，比如&#x27;A&#x27;,&#x27;B&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@return</span> 返回ch顶点对应的下标，如果找不到，返回-1</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">getPosition</span><span class=\"params\">(<span class=\"keyword\">char</span> ch)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; vertexs.length; i++) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(vertexs[i] == ch) &#123;<span class=\"comment\">//找到</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> i;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">//找不到,返回-1</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 功能: 获取图中边，放到EData[] 数组中，后面我们需要遍历该数组</span></span><br><span class=\"line\"><span class=\"comment\">\t * 是通过matrix 邻接矩阵来获取</span></span><br><span class=\"line\"><span class=\"comment\">\t * EData[] 形式 [[&#x27;A&#x27;,&#x27;B&#x27;, 12], [&#x27;B&#x27;,&#x27;F&#x27;,7], .....]</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> EData[] getEdges() &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> index = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\tEData[] edges = <span class=\"keyword\">new</span> EData[edgeNum];</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; vertexs.length; i++) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=i+<span class=\"number\">1</span>; j &lt;vertexs.length; j++) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(matrix[i][j] != INF) &#123;</span><br><span class=\"line\">\t\t\t\t\tedges[index++] = <span class=\"keyword\">new</span> EData(vertexs[i], vertexs[j], matrix[i][j]);</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> edges;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 功能: 获取下标为i的顶点的终点(), 用于后面判断两个顶点的终点是否相同</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> ends ： 数组就是记录了各个顶点对应的终点是哪个,ends 数组是在遍历过程中，逐步形成</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> i : 表示传入的顶点对应的下标</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@return</span> 返回的就是 下标为i的这个顶点对应的终点的下标, 一会回头还有来理解</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">getEnd</span><span class=\"params\">(<span class=\"keyword\">int</span>[] ends, <span class=\"keyword\">int</span> i)</span> </span>&#123; <span class=\"comment\">// i = 4 [0,0,0,0,5,0,0,0,0,0,0,0]</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(ends[i] != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t\ti = ends[i];</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> i;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//创建一个类EData ，它的对象实例就表示一条边</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">EData</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">char</span> start; <span class=\"comment\">//边的一个点</span></span><br><span class=\"line\">\t<span class=\"keyword\">char</span> end; <span class=\"comment\">//边的另外一个点</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> weight; <span class=\"comment\">//边的权值</span></span><br><span class=\"line\">\t<span class=\"comment\">//构造器</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">EData</span><span class=\"params\">(<span class=\"keyword\">char</span> start, <span class=\"keyword\">char</span> end, <span class=\"keyword\">int</span> weight)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.start = start;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.end = end;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.weight = weight;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//重写toString, 便于输出边信息</span></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">&quot;EData [&lt;&quot;</span> + start + <span class=\"string\">&quot;, &quot;</span> + end + <span class=\"string\">&quot;&gt;= &quot;</span> + weight + <span class=\"string\">&quot;]&quot;</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"9-迪杰斯特拉算法\"><a href=\"#9-迪杰斯特拉算法\" class=\"headerlink\" title=\"9.迪杰斯特拉算法\"></a>9.迪杰斯特拉算法</h3><p>应用场景最短路径问题</p>\n<p>看一应用场景和问题：</p>\n<p><img src=\"/2021/01/01/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E6%95%B4%E7%90%86/image-20210110141059564.png\" alt=\"image-20210110141059564\"></p>\n<p>1)战争时期，胜利乡有7个村庄(A, B, C, D, E, F, G) ，现在有六个邮差，从G点出发，需要分别把邮件分别送到 A, B, C , D, E, F 六个村庄</p>\n<p>2)各个村庄的距离用边线表示(权) ，比如 A – B 距离 5公里</p>\n<p>3)问：如何计算出G村庄到 其它各个村庄的最短距离? </p>\n<p>如果从其它点出发到各个点的最短距离又是多少?</p>\n<p>**迪杰斯特拉(Dijkstra)**算法介绍</p>\n<p>迪杰斯特拉(Dijkstra)算法是<strong>典型最短路径算法</strong>，用于计算一个结点到其他结点的最短路径。 它的主要特点是以起始点为中心向外层层扩展(<strong>广度优先</strong>搜索思想)，直到扩展到终点为止<strong>。</strong></p>\n<p>迪杰斯特拉(Dijkstra)算法过程:</p>\n<p>设置发顶点为v，顶点集合V{v1,v2,vi…}，v到V中各顶点的距离构成距离集合Dis，Dis{d1,d2,di…}，Dis集合记录着v到图中各顶点的距离(到自身可以看作0，v到vi距离对应为di)</p>\n<p>1)从Dis中选择值最小的di并移出Dis集合，同时移出V集合中对应的顶点vi，此时的v到vi即为最短路径</p>\n<p>2)更新Dis集合，更新规则为：比较v到V集合中顶点的距离值，与v通过vi到V集合中顶点的距离值，保留值较小的一个(同时也应该更新顶点的前驱节点为vi，表明是通过vi到达的)</p>\n<p>3)重复执行两步骤，直到最短路径顶点为目标顶点即可结束</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.atguigu.dijkstra;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Arrays;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DijkstraAlgorithm</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">char</span>[] vertex = &#123; <span class=\"string\">&#x27;A&#x27;</span>, <span class=\"string\">&#x27;B&#x27;</span>, <span class=\"string\">&#x27;C&#x27;</span>, <span class=\"string\">&#x27;D&#x27;</span>, <span class=\"string\">&#x27;E&#x27;</span>, <span class=\"string\">&#x27;F&#x27;</span>, <span class=\"string\">&#x27;G&#x27;</span> &#125;;</span><br><span class=\"line\">\t\t<span class=\"comment\">//邻接矩阵</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span>[][] matrix = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[vertex.length][vertex.length];</span><br><span class=\"line\">\t\t<span class=\"keyword\">final</span> <span class=\"keyword\">int</span> N = <span class=\"number\">65535</span>;<span class=\"comment\">// 表示不可以连接</span></span><br><span class=\"line\">\t\tmatrix[<span class=\"number\">0</span>]=<span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[]&#123;N,<span class=\"number\">5</span>,<span class=\"number\">7</span>,N,N,N,<span class=\"number\">2</span>&#125;;  </span><br><span class=\"line\">        matrix[<span class=\"number\">1</span>]=<span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[]&#123;<span class=\"number\">5</span>,N,N,<span class=\"number\">9</span>,N,N,<span class=\"number\">3</span>&#125;;  </span><br><span class=\"line\">        matrix[<span class=\"number\">2</span>]=<span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[]&#123;<span class=\"number\">7</span>,N,N,N,<span class=\"number\">8</span>,N,N&#125;;  </span><br><span class=\"line\">        matrix[<span class=\"number\">3</span>]=<span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[]&#123;N,<span class=\"number\">9</span>,N,N,N,<span class=\"number\">4</span>,N&#125;;  </span><br><span class=\"line\">        matrix[<span class=\"number\">4</span>]=<span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[]&#123;N,N,<span class=\"number\">8</span>,N,N,<span class=\"number\">5</span>,<span class=\"number\">4</span>&#125;;  </span><br><span class=\"line\">        matrix[<span class=\"number\">5</span>]=<span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[]&#123;N,N,N,<span class=\"number\">4</span>,<span class=\"number\">5</span>,N,<span class=\"number\">6</span>&#125;;  </span><br><span class=\"line\">        matrix[<span class=\"number\">6</span>]=<span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[]&#123;<span class=\"number\">2</span>,<span class=\"number\">3</span>,N,N,<span class=\"number\">4</span>,<span class=\"number\">6</span>,N&#125;;</span><br><span class=\"line\">        <span class=\"comment\">//创建 Graph对象</span></span><br><span class=\"line\">        Graph graph = <span class=\"keyword\">new</span> Graph(vertex, matrix);</span><br><span class=\"line\">        <span class=\"comment\">//测试, 看看图的邻接矩阵是否ok</span></span><br><span class=\"line\">        graph.showGraph();</span><br><span class=\"line\">        <span class=\"comment\">//测试迪杰斯特拉算法</span></span><br><span class=\"line\">        graph.dsj(<span class=\"number\">2</span>);<span class=\"comment\">//C</span></span><br><span class=\"line\">        graph.showDijkstra();</span><br><span class=\"line\">        </span><br><span class=\"line\">        </span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Graph</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">char</span>[] vertex; <span class=\"comment\">// 顶点数组</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span>[][] matrix; <span class=\"comment\">// 邻接矩阵</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> VisitedVertex vv; <span class=\"comment\">//已经访问的顶点的集合</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 构造器</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Graph</span><span class=\"params\">(<span class=\"keyword\">char</span>[] vertex, <span class=\"keyword\">int</span>[][] matrix)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.vertex = vertex;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.matrix = matrix;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//显示结果</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">showDijkstra</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tvv.show();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 显示图</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">showGraph</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span>[] link : matrix) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(Arrays.toString(link));</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//迪杰斯特拉算法实现</span></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * </span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> index 表示出发顶点对应的下标</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">dsj</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span> </span>&#123;</span><br><span class=\"line\">\t\tvv = <span class=\"keyword\">new</span> VisitedVertex(vertex.length, index);</span><br><span class=\"line\">\t\tupdate(index);<span class=\"comment\">//更新index顶点到周围顶点的距离和前驱顶点</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">1</span>; j &lt;vertex.length; j++) &#123;</span><br><span class=\"line\">\t\t\tindex = vv.updateArr();<span class=\"comment\">// 选择并返回新的访问顶点</span></span><br><span class=\"line\">\t\t\tupdate(index); <span class=\"comment\">// 更新index顶点到周围顶点的距离和前驱顶点</span></span><br><span class=\"line\">\t\t&#125; </span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//更新index下标顶点到周围顶点的距离和周围顶点的前驱顶点,</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">update</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> len = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"comment\">//根据遍历我们的邻接矩阵的  matrix[index]行</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; matrix[index].length; j++) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// len 含义是 : 出发顶点到index顶点的距离 + 从index顶点到j顶点的距离的和 </span></span><br><span class=\"line\">\t\t\tlen = vv.getDis(index) + matrix[index][j];</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 如果j顶点没有被访问过，并且 len 小于出发顶点到j顶点的距离，就需要更新</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(!vv.in(j) &amp;&amp; len &lt; vv.getDis(j)) &#123;</span><br><span class=\"line\">\t\t\t\tvv.updatePre(j, index); <span class=\"comment\">//更新j顶点的前驱为index顶点</span></span><br><span class=\"line\">\t\t\t\tvv.updateDis(j, len); <span class=\"comment\">//更新出发顶点到j顶点的距离</span></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 已访问顶点集合</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">VisitedVertex</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 记录各个顶点是否访问过 1表示访问过,0未访问,会动态更新</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">int</span>[] already_arr;</span><br><span class=\"line\">\t<span class=\"comment\">// 每个下标对应的值为前一个顶点下标, 会动态更新</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">int</span>[] pre_visited;</span><br><span class=\"line\">\t<span class=\"comment\">// 记录出发顶点到其他所有顶点的距离,比如G为出发顶点，就会记录G到其它顶点的距离，会动态更新，求的最短距离就会存放到dis</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">int</span>[] dis;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//构造器</span></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * </span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> length :表示顶点的个数 </span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> index: 出发顶点对应的下标, 比如G顶点，下标就是6</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">VisitedVertex</span><span class=\"params\">(<span class=\"keyword\">int</span> length, <span class=\"keyword\">int</span> index)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.already_arr = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[length];</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.pre_visited = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[length];</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.dis = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[length];</span><br><span class=\"line\">\t\t<span class=\"comment\">//初始化 dis数组</span></span><br><span class=\"line\">\t\tArrays.fill(dis, <span class=\"number\">65535</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.already_arr[index] = <span class=\"number\">1</span>; <span class=\"comment\">//设置出发顶点被访问过</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.dis[index] = <span class=\"number\">0</span>;<span class=\"comment\">//设置出发顶点的访问距离为0</span></span><br><span class=\"line\">\t\t\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 功能: 判断index顶点是否被访问过</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> index</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@return</span> 如果访问过，就返回true, 否则访问false</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">in</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> already_arr[index] == <span class=\"number\">1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 功能: 更新出发顶点到index顶点的距离</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> index</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> len</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">updateDis</span><span class=\"params\">(<span class=\"keyword\">int</span> index, <span class=\"keyword\">int</span> len)</span> </span>&#123;</span><br><span class=\"line\">\t\tdis[index] = len;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 功能: 更新pre这个顶点的前驱顶点为index顶点</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> pre</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> index</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">updatePre</span><span class=\"params\">(<span class=\"keyword\">int</span> pre, <span class=\"keyword\">int</span> index)</span> </span>&#123;</span><br><span class=\"line\">\t\tpre_visited[pre] = index;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 功能:返回出发顶点到index顶点的距离</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> index</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getDis</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> dis[index];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 继续选择并返回新的访问顶点， 比如这里的G 完后，就是 A点作为新的访问顶点(注意不是出发顶点)</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">updateArr</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> min = <span class=\"number\">65535</span>, index = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; already_arr.length; i++) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(already_arr[i] == <span class=\"number\">0</span> &amp;&amp; dis[i] &lt; min ) &#123;</span><br><span class=\"line\">\t\t\t\tmin = dis[i];</span><br><span class=\"line\">\t\t\t\tindex = i;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">//更新 index 顶点被访问过</span></span><br><span class=\"line\">\t\talready_arr[index] = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> index;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//显示最后的结果</span></span><br><span class=\"line\">\t<span class=\"comment\">//即将三个数组的情况输出</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">show</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;==========================&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"comment\">//输出already_arr</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i : already_arr) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.print(i + <span class=\"string\">&quot; &quot;</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tSystem.out.println();</span><br><span class=\"line\">\t\t<span class=\"comment\">//输出pre_visited</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i : pre_visited) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.print(i + <span class=\"string\">&quot; &quot;</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tSystem.out.println();</span><br><span class=\"line\">\t\t<span class=\"comment\">//输出dis</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i : dis) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.print(i + <span class=\"string\">&quot; &quot;</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tSystem.out.println();</span><br><span class=\"line\">\t\t<span class=\"comment\">//为了好看最后的最短距离，我们处理</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">char</span>[] vertex = &#123; <span class=\"string\">&#x27;A&#x27;</span>, <span class=\"string\">&#x27;B&#x27;</span>, <span class=\"string\">&#x27;C&#x27;</span>, <span class=\"string\">&#x27;D&#x27;</span>, <span class=\"string\">&#x27;E&#x27;</span>, <span class=\"string\">&#x27;F&#x27;</span>, <span class=\"string\">&#x27;G&#x27;</span> &#125;;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i : dis) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (i != <span class=\"number\">65535</span>) &#123;</span><br><span class=\"line\">\t\t\t\tSystem.out.print(vertex[count] + <span class=\"string\">&quot;(&quot;</span>+i+<span class=\"string\">&quot;) &quot;</span>);</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\tSystem.out.println(<span class=\"string\">&quot;N &quot;</span>);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tcount++;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tSystem.out.println();</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"10-弗洛伊德算法\"><a href=\"#10-弗洛伊德算法\" class=\"headerlink\" title=\"10.弗洛伊德算法\"></a>10.弗洛伊德算法</h3><h3 id=\"11-马踏棋盘算法\"><a href=\"#11-马踏棋盘算法\" class=\"headerlink\" title=\"11.马踏棋盘算法\"></a>11.马踏棋盘算法</h3>"}],"PostAsset":[{"_id":"source/_posts/java多线程/20160713174739239","post":"cklgjm1va0005ikvuczqxgyu9","slug":"20160713174739239","modified":1,"renderable":1},{"_id":"source/_posts/使用hexo+github搭建博客/v2-01e7fc8bb9280437deb437bf73a190a1_720w.jpg","post":"cklgjm1vb0006ikvu7d6haf18","slug":"v2-01e7fc8bb9280437deb437bf73a190a1_720w.jpg","modified":1,"renderable":1},{"_id":"source/_posts/使用hexo+github搭建博客/v2-1c3baeecf1ef3bec5c8ef3f14639f68b_720w.jpg","post":"cklgjm1vb0006ikvu7d6haf18","slug":"v2-1c3baeecf1ef3bec5c8ef3f14639f68b_720w.jpg","modified":1,"renderable":1},{"_id":"source/_posts/使用hexo+github搭建博客/v2-264c75c0e493ae8cc5f283567c64ff2c_720w.jpg","post":"cklgjm1vb0006ikvu7d6haf18","slug":"v2-264c75c0e493ae8cc5f283567c64ff2c_720w.jpg","modified":1,"renderable":1},{"_id":"source/_posts/使用hexo+github搭建博客/v2-27b47b5ae479ce7987851292a67774b0_720w.jpg","post":"cklgjm1vb0006ikvu7d6haf18","slug":"v2-27b47b5ae479ce7987851292a67774b0_720w.jpg","modified":1,"renderable":1},{"_id":"source/_posts/使用hexo+github搭建博客/v2-45701cf120ca77e6733ad30b40666f33_720w.jpg","post":"cklgjm1vb0006ikvu7d6haf18","slug":"v2-45701cf120ca77e6733ad30b40666f33_720w.jpg","modified":1,"renderable":1},{"_id":"source/_posts/使用hexo+github搭建博客/v2-54f8744afc9746884e6b3acecfc5f8cf_720w.jpg","post":"cklgjm1vb0006ikvu7d6haf18","slug":"v2-54f8744afc9746884e6b3acecfc5f8cf_720w.jpg","modified":1,"renderable":1},{"_id":"source/_posts/使用hexo+github搭建博客/v2-67a8165154f4c5f4a6333e76e78ed815_720w.jpg","post":"cklgjm1vb0006ikvu7d6haf18","slug":"v2-67a8165154f4c5f4a6333e76e78ed815_720w.jpg","modified":1,"renderable":1},{"_id":"source/_posts/使用hexo+github搭建博客/v2-9125065afd24332d7cd84feb6a350730_720w.jpg","post":"cklgjm1vb0006ikvu7d6haf18","slug":"v2-9125065afd24332d7cd84feb6a350730_720w.jpg","modified":1,"renderable":1},{"_id":"source/_posts/使用hexo+github搭建博客/v2-a193a47cf70fe6ecf156e5f3d34920ea_720w.jpg","post":"cklgjm1vb0006ikvu7d6haf18","slug":"v2-a193a47cf70fe6ecf156e5f3d34920ea_720w.jpg","modified":1,"renderable":1},{"_id":"source/_posts/使用hexo+github搭建博客/v2-b4c7524a2451f4ab42f9c22ea3c7b6be_720w.jpg","post":"cklgjm1vb0006ikvu7d6haf18","slug":"v2-b4c7524a2451f4ab42f9c22ea3c7b6be_720w.jpg","modified":1,"renderable":1},{"_id":"source/_posts/使用hexo+github搭建博客/v2-d5d37c8ad523d8ab5c7c200fabc9585e_720w.jpg","post":"cklgjm1vb0006ikvu7d6haf18","slug":"v2-d5d37c8ad523d8ab5c7c200fabc9585e_720w.jpg","modified":1,"renderable":1},{"_id":"source/_posts/java基础知识整理/20160624152602394","post":"cklgjm1vk000mikvuc2fzeyio","slug":"20160624152602394","modified":1,"renderable":1},{"_id":"source/_posts/java基础知识整理/20160624152704286","post":"cklgjm1vk000mikvuc2fzeyio","slug":"20160624152704286","modified":1,"renderable":1},{"_id":"source/_posts/java基础知识整理/20180803193134355","post":"cklgjm1vk000mikvuc2fzeyio","slug":"20180803193134355","modified":1,"renderable":1},{"_id":"source/_posts/java基础知识整理/20180803193423722","post":"cklgjm1vk000mikvuc2fzeyio","slug":"20180803193423722","modified":1,"renderable":1},{"_id":"source/_posts/java基础知识整理/3775272-55dfd603d6e9b95c.jpg","post":"cklgjm1vk000mikvuc2fzeyio","slug":"3775272-55dfd603d6e9b95c.jpg","modified":1,"renderable":1},{"_id":"source/_posts/java基础知识整理/772134-20160720003120122-551868817.png","post":"cklgjm1vk000mikvuc2fzeyio","slug":"772134-20160720003120122-551868817.png","modified":1,"renderable":1},{"_id":"source/_posts/java基础知识整理/copycode.gif","post":"cklgjm1vk000mikvuc2fzeyio","slug":"copycode.gif","modified":1,"renderable":1},{"_id":"source/_posts/hive知识整理/timg-1568381886490.jpg","post":"cklgjm1vx000rikvuc3owcvpe","slug":"timg-1568381886490.jpg","modified":1,"renderable":1},{"_id":"source/_posts/数据结构整理/clip_image002.jpg","post":"cklgjm1wb000zikvu6wztdji9","slug":"clip_image002.jpg","modified":1,"renderable":1},{"_id":"source/_posts/数据结构整理/image-20210101224039379.png","post":"cklgjm1wb000zikvu6wztdji9","slug":"image-20210101224039379.png","modified":1,"renderable":1},{"_id":"source/_posts/数据结构整理/image-20210101225223666.png","post":"cklgjm1wb000zikvu6wztdji9","slug":"image-20210101225223666.png","modified":1,"renderable":1},{"_id":"source/_posts/数据结构整理/image-20210101225427642.png","post":"cklgjm1wb000zikvu6wztdji9","slug":"image-20210101225427642.png","modified":1,"renderable":1},{"_id":"source/_posts/数据结构整理/image-20210102132901736.png","post":"cklgjm1wb000zikvu6wztdji9","slug":"image-20210102132901736.png","modified":1,"renderable":1},{"_id":"source/_posts/数据结构整理/image-20210102132908111.png","post":"cklgjm1wb000zikvu6wztdji9","slug":"image-20210102132908111.png","modified":1,"renderable":1},{"_id":"source/_posts/数据结构整理/image-20210102132915893.png","post":"cklgjm1wb000zikvu6wztdji9","slug":"image-20210102132915893.png","modified":1,"renderable":1},{"_id":"source/_posts/数据结构整理/image-20210102141037291.png","post":"cklgjm1wb000zikvu6wztdji9","slug":"image-20210102141037291.png","modified":1,"renderable":1},{"_id":"source/_posts/数据结构整理/image-20210102141100384.png","post":"cklgjm1wb000zikvu6wztdji9","slug":"image-20210102141100384.png","modified":1,"renderable":1},{"_id":"source/_posts/数据结构整理/image-20210102141103126.png","post":"cklgjm1wb000zikvu6wztdji9","slug":"image-20210102141103126.png","modified":1,"renderable":1},{"_id":"source/_posts/数据结构整理/image-20210102141112949.png","post":"cklgjm1wb000zikvu6wztdji9","slug":"image-20210102141112949.png","modified":1,"renderable":1},{"_id":"source/_posts/数据结构整理/image-20210102141307586.png","post":"cklgjm1wb000zikvu6wztdji9","slug":"image-20210102141307586.png","modified":1,"renderable":1},{"_id":"source/_posts/数据结构整理/image-20210102141347127.png","post":"cklgjm1wb000zikvu6wztdji9","slug":"image-20210102141347127.png","modified":1,"renderable":1},{"_id":"source/_posts/数据结构整理/image-20210102141350454.png","post":"cklgjm1wb000zikvu6wztdji9","slug":"image-20210102141350454.png","modified":1,"renderable":1},{"_id":"source/_posts/数据结构整理/image-20210102141354482.png","post":"cklgjm1wb000zikvu6wztdji9","slug":"image-20210102141354482.png","modified":1,"renderable":1},{"_id":"source/_posts/数据结构整理/image-20210102141434749.png","post":"cklgjm1wb000zikvu6wztdji9","slug":"image-20210102141434749.png","modified":1,"renderable":1},{"_id":"source/_posts/数据结构整理/image-20210102141540407.png","post":"cklgjm1wb000zikvu6wztdji9","slug":"image-20210102141540407.png","modified":1,"renderable":1},{"_id":"source/_posts/数据结构整理/image-20210102141959933.png","post":"cklgjm1wb000zikvu6wztdji9","slug":"image-20210102141959933.png","modified":1,"renderable":1},{"_id":"source/_posts/数据结构整理/image-20210102142138277.png","post":"cklgjm1wb000zikvu6wztdji9","slug":"image-20210102142138277.png","modified":1,"renderable":1},{"_id":"source/_posts/数据结构整理/image-20210102163741163.png","post":"cklgjm1wb000zikvu6wztdji9","slug":"image-20210102163741163.png","modified":1,"renderable":1},{"_id":"source/_posts/数据结构整理/image-20210102170510025.png","post":"cklgjm1wb000zikvu6wztdji9","slug":"image-20210102170510025.png","modified":1,"renderable":1},{"_id":"source/_posts/数据结构整理/image-20210102193620447.png","post":"cklgjm1wb000zikvu6wztdji9","slug":"image-20210102193620447.png","modified":1,"renderable":1},{"_id":"source/_posts/数据结构整理/image-20210102194542735.png","post":"cklgjm1wb000zikvu6wztdji9","slug":"image-20210102194542735.png","modified":1,"renderable":1},{"_id":"source/_posts/数据结构整理/image-20210102194545635.png","post":"cklgjm1wb000zikvu6wztdji9","slug":"image-20210102194545635.png","modified":1,"renderable":1},{"_id":"source/_posts/数据结构整理/image-20210102200243327.png","post":"cklgjm1wb000zikvu6wztdji9","slug":"image-20210102200243327.png","modified":1,"renderable":1},{"_id":"source/_posts/数据结构整理/image-20210102200322572.png","post":"cklgjm1wb000zikvu6wztdji9","slug":"image-20210102200322572.png","modified":1,"renderable":1},{"_id":"source/_posts/数据结构整理/image-20210102200402339.png","post":"cklgjm1wb000zikvu6wztdji9","slug":"image-20210102200402339.png","modified":1,"renderable":1},{"_id":"source/_posts/数据结构整理/image-20210102200443841.png","post":"cklgjm1wb000zikvu6wztdji9","slug":"image-20210102200443841.png","modified":1,"renderable":1},{"_id":"source/_posts/数据结构整理/image-20210102200539559.png","post":"cklgjm1wb000zikvu6wztdji9","slug":"image-20210102200539559.png","modified":1,"renderable":1},{"_id":"source/_posts/数据结构整理/image-20210102202017455.png","post":"cklgjm1wb000zikvu6wztdji9","slug":"image-20210102202017455.png","modified":1,"renderable":1},{"_id":"source/_posts/数据结构整理/image-20210102203535568.png","post":"cklgjm1wb000zikvu6wztdji9","slug":"image-20210102203535568.png","modified":1,"renderable":1},{"_id":"source/_posts/数据结构整理/image-20210102203605120.png","post":"cklgjm1wb000zikvu6wztdji9","slug":"image-20210102203605120.png","modified":1,"renderable":1},{"_id":"source/_posts/数据结构整理/image-20210106203601993.png","post":"cklgjm1wb000zikvu6wztdji9","slug":"image-20210106203601993.png","modified":1,"renderable":1},{"_id":"source/_posts/数据结构整理/image-20210106222030582.png","post":"cklgjm1wb000zikvu6wztdji9","slug":"image-20210106222030582.png","modified":1,"renderable":1},{"_id":"source/_posts/数据结构整理/image-20210106222042969.png","post":"cklgjm1wb000zikvu6wztdji9","slug":"image-20210106222042969.png","modified":1,"renderable":1},{"_id":"source/_posts/数据结构整理/image-20210106222122233.png","post":"cklgjm1wb000zikvu6wztdji9","slug":"image-20210106222122233.png","modified":1,"renderable":1},{"_id":"source/_posts/数据结构整理/image-20210109154230371.png","post":"cklgjm1wb000zikvu6wztdji9","slug":"image-20210109154230371.png","modified":1,"renderable":1},{"_id":"source/_posts/数据结构整理/image-20210109154304890.png","post":"cklgjm1wb000zikvu6wztdji9","slug":"image-20210109154304890.png","modified":1,"renderable":1},{"_id":"source/_posts/数据结构整理/image-20210110111607853.png","post":"cklgjm1wb000zikvu6wztdji9","slug":"image-20210110111607853.png","modified":1,"renderable":1},{"_id":"source/_posts/数据结构整理/image-20210110114746786.png","post":"cklgjm1wb000zikvu6wztdji9","slug":"image-20210110114746786.png","modified":1,"renderable":1},{"_id":"source/_posts/数据结构整理/image-20210110115039736.png","post":"cklgjm1wb000zikvu6wztdji9","slug":"image-20210110115039736.png","modified":1,"renderable":1},{"_id":"source/_posts/数据结构整理/image-20210110115048972.png","post":"cklgjm1wb000zikvu6wztdji9","slug":"image-20210110115048972.png","modified":1,"renderable":1},{"_id":"source/_posts/数据结构整理/image-20210110115152310.png","post":"cklgjm1wb000zikvu6wztdji9","slug":"image-20210110115152310.png","modified":1,"renderable":1},{"_id":"source/_posts/数据结构整理/image-20210110115158112.png","post":"cklgjm1wb000zikvu6wztdji9","slug":"image-20210110115158112.png","modified":1,"renderable":1},{"_id":"source/_posts/数据结构整理/image-20210110140634167.png","post":"cklgjm1wb000zikvu6wztdji9","slug":"image-20210110140634167.png","modified":1,"renderable":1},{"_id":"source/_posts/数据结构整理/image-20210110141059564.png","post":"cklgjm1wb000zikvu6wztdji9","slug":"image-20210110141059564.png","modified":1,"renderable":1}],"PostCategory":[{"post_id":"cklgjm1va0005ikvuczqxgyu9","category_id":"cklgjm1vc0007ikvu23jz2apm","_id":"cklgjm1ve000dikvudsfe2m0w"},{"post_id":"cklgjm1vb0006ikvu7d6haf18","category_id":"cklgjm1ve000aikvu9ff21434","_id":"cklgjm1vf000fikvu66wve8iq"},{"post_id":"cklgjm1vk000mikvuc2fzeyio","category_id":"cklgjm1vc0007ikvu23jz2apm","_id":"cklgjm1vl000pikvueoxb7igf"},{"post_id":"cklgjm1vw000qikvu7mvfbgmq","category_id":"cklgjm1ve000aikvu9ff21434","_id":"cklgjm1vz000tikvu1egd1rqt"},{"post_id":"cklgjm1vx000rikvuc3owcvpe","category_id":"cklgjm1ve000aikvu9ff21434","_id":"cklgjm1w0000uikvu26s0asf7"},{"post_id":"cklgjm1wb000zikvu6wztdji9","category_id":"cklgjm1vc0007ikvu23jz2apm","_id":"cklgjm1wc0011ikvu38en9enz"}],"PostTag":[{"post_id":"cklgjm1v30001ikvu7e974b7k","tag_id":"cklgjm1v90004ikvuaien0fva","_id":"cklgjm1vd0009ikvu9ke4951z"},{"post_id":"cklgjm1v70003ikvudmgsdd2y","tag_id":"cklgjm1vd0008ikvu3i2fdv7o","_id":"cklgjm1ve000cikvu463dhrpw"},{"post_id":"cklgjm1va0005ikvuczqxgyu9","tag_id":"cklgjm1ve000bikvu5rib3tmr","_id":"cklgjm1vf000hikvue682fye9"},{"post_id":"cklgjm1va0005ikvuczqxgyu9","tag_id":"cklgjm1ve000eikvu2w986ad0","_id":"cklgjm1vf000iikvu3ycv63kx"},{"post_id":"cklgjm1vb0006ikvu7d6haf18","tag_id":"cklgjm1vf000gikvu0qglhm9q","_id":"cklgjm1vh000kikvubock0sr8"},{"post_id":"cklgjm1vb0006ikvu7d6haf18","tag_id":"cklgjm1ve000eikvu2w986ad0","_id":"cklgjm1vh000likvuh1af2o0p"},{"post_id":"cklgjm1vk000mikvuc2fzeyio","tag_id":"cklgjm1ve000bikvu5rib3tmr","_id":"cklgjm1vl000nikvu5ghd12fn"},{"post_id":"cklgjm1vk000mikvuc2fzeyio","tag_id":"cklgjm1ve000eikvu2w986ad0","_id":"cklgjm1vl000oikvuau114303"},{"post_id":"cklgjm1vw000qikvu7mvfbgmq","tag_id":"cklgjm1vz000sikvu4r09eqsd","_id":"cklgjm1w1000wikvufo4q5faf"},{"post_id":"cklgjm1vw000qikvu7mvfbgmq","tag_id":"cklgjm1ve000eikvu2w986ad0","_id":"cklgjm1w2000xikvudl4ae4f1"},{"post_id":"cklgjm1vx000rikvuc3owcvpe","tag_id":"cklgjm1w0000vikvu2bg8bi52","_id":"cklgjm1w2000yikvu0siad6cu"},{"post_id":"cklgjm1wb000zikvu6wztdji9","tag_id":"cklgjm1wb0010ikvug8h99npy","_id":"cklgjm1wc0012ikvu8jiy7f3r"}],"Tag":[{"name":"sql","_id":"cklgjm1v90004ikvuaien0fva"},{"name":"udf","_id":"cklgjm1vd0008ikvu3i2fdv7o"},{"name":"java","_id":"cklgjm1ve000bikvu5rib3tmr"},{"name":"随笔","_id":"cklgjm1ve000eikvu2w986ad0"},{"name":"hexo","_id":"cklgjm1vf000gikvu0qglhm9q"},{"name":"dataworks","_id":"cklgjm1vz000sikvu4r09eqsd"},{"name":"hive","_id":"cklgjm1w0000vikvu2bg8bi52"},{"name":"数据结构","_id":"cklgjm1wb0010ikvug8h99npy"}]}}